Implementation smell,Namespace,Class,File,Method,Description
Long Method,HTML5,NamedCharRef,C:\repos\msarca_html5\HTML5\NamedCharRef.cs,codePointToChar,The method has 124 lines of code.
Long Method,HTML5,NamedCharRef,C:\repos\msarca_html5\HTML5\NamedCharRef.cs,mapReference,The method has 9155 lines of code.
Long Method,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The method has 2082 lines of code.
Long Method,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The method has 225 lines of code.
Long Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,AdjustSVGAttributes,The method has 193 lines of code.
Long Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,StartTagToken,The method has 1031 lines of code.
Long Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,EndTagToken,The method has 635 lines of code.
Long Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,CharToken,The method has 440 lines of code.
Long Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,EofToken,The method has 141 lines of code.
Complex Method,HTML5,ElementStack,C:\repos\msarca_html5\HTML5\ElementStack.cs,ClearToHeading,Cyclomatic complexity of the method is 10
Complex Method,HTML5,ElementStack,C:\repos\msarca_html5\HTML5\ElementStack.cs,GenerateImpliedEndTags,Cyclomatic complexity of the method is 17
Complex Method,HTML5,NamedCharRef,C:\repos\msarca_html5\HTML5\NamedCharRef.cs,matchDecDigits,Cyclomatic complexity of the method is 16
Complex Method,HTML5,NamedCharRef,C:\repos\msarca_html5\HTML5\NamedCharRef.cs,matchHexDigits,Cyclomatic complexity of the method is 28
Complex Method,HTML5,NamedCharRef,C:\repos\msarca_html5\HTML5\NamedCharRef.cs,matchReference,Cyclomatic complexity of the method is 74
Complex Method,HTML5,NamedCharRef,C:\repos\msarca_html5\HTML5\NamedCharRef.cs,codePointToChar,Cyclomatic complexity of the method is 32
Complex Method,HTML5,NamedCharRef,C:\repos\msarca_html5\HTML5\NamedCharRef.cs,mapReference,Cyclomatic complexity of the method is 2231
Complex Method,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,CheckAttribute,Cyclomatic complexity of the method is 10
Complex Method,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,charcterReference,Cyclomatic complexity of the method is 13
Complex Method,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,Cyclomatic complexity of the method is 313
Complex Method,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,Cyclomatic complexity of the method is 142
Complex Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,TreeBuilder,Cyclomatic complexity of the method is 27
Complex Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,ResetInsertionMode,Cyclomatic complexity of the method is 31
Complex Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,HeadingInScope,Cyclomatic complexity of the method is 32
Complex Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,ElementInScope,Cyclomatic complexity of the method is 24
Complex Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,ElementInListItemScope,Cyclomatic complexity of the method is 26
Complex Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,ElementInButtonScope,Cyclomatic complexity of the method is 25
Complex Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,IsSpecialElement,Cyclomatic complexity of the method is 89
Complex Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,IsFormattingElement,Cyclomatic complexity of the method is 15
Complex Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,IsFormAssociatedElement,Cyclomatic complexity of the method is 12
Complex Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,PushFormattingElement,Cyclomatic complexity of the method is 11
Complex Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,HTMLIntegrationPoint,Cyclomatic complexity of the method is 12
Complex Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,InsertHtmlElement,Cyclomatic complexity of the method is 19
Complex Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,InsertForeignElement,Cyclomatic complexity of the method is 14
Complex Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,InsertCharacters,Cyclomatic complexity of the method is 14
Complex Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,AdjustSVGAttributes,Cyclomatic complexity of the method is 187
Complex Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,AdjustForeignAttributes,Cyclomatic complexity of the method is 19
Complex Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,AdjustSVGTagName,Cyclomatic complexity of the method is 36
Complex Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,ClearStackBackToTableContext,Cyclomatic complexity of the method is 10
Complex Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,ClearStackBackToTableBodyContext,Cyclomatic complexity of the method is 12
Complex Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,ClearStackBackToTableRowContext,Cyclomatic complexity of the method is 10
Complex Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,StartTagToken,Cyclomatic complexity of the method is 53
Complex Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,EndTagToken,Cyclomatic complexity of the method is 57
Complex Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,DoctypeToken,Cyclomatic complexity of the method is 30
Complex Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,CommentToken,Cyclomatic complexity of the method is 16
Complex Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,CharToken,Cyclomatic complexity of the method is 91
Complex Method,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,EofToken,Cyclomatic complexity of the method is 77
Long Parameter List,HTML5,NamedCharRef,C:\repos\msarca_html5\HTML5\NamedCharRef.cs,matchDecDigits,The method has 5 parameters.
Long Parameter List,HTML5,NamedCharRef,C:\repos\msarca_html5\HTML5\NamedCharRef.cs,matchHexDigits,The method has 5 parameters.
Long Parameter List,HTML5,NamedCharRef,C:\repos\msarca_html5\HTML5\NamedCharRef.cs,matchReference,The method has 5 parameters.
Long Parameter List,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,charcterReference,The method has 5 parameters.
Long Parameter List,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,DoctypeToken,The method has 5 parameters.
Long Statement,HTML5,NamedCharRef,C:\repos\msarca_html5\HTML5\NamedCharRef.cs,matchDecDigits,The length of the statement  "		if (!int.TryParse (sb.ToString ()' System.Globalization.NumberStyles.Integer' System.Globalization.CultureInfo.InvariantCulture' out code)) { " is 141.
Long Statement,HTML5,NamedCharRef,C:\repos\msarca_html5\HTML5\NamedCharRef.cs,matchHexDigits,The length of the statement  "		if (!int.TryParse (sb.ToString ()' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.InvariantCulture' out code)) { " is 143.
Long Statement,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,EmitTagToken,The length of the statement  "		if (builder.O.Current == null || builder.O.Current.Namespace == TreeBuilder<T>.NS_HTML || (LastTagName != "mglyph" && LastTagName != "malignmark" && builder.MathMLIntergartionPoint ()) || (LastTagName == "svg" && builder.O.Current.TagName == "annotation-xml") || builder.HTMLIntegrationPoint ()) " is 295.
Long Statement,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,FlushCharTokens,The length of the statement  "	if (builder.O.Current == null || builder.O.Current.Namespace == TreeBuilder<T>.NS_HTML || builder.MathMLIntergartionPoint () || builder.MathMLIntergartionPoint ()) " is 163.
Long Statement,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,PushFormattingElement,The length of the statement  "		if (node.Element.TagName != element.TagName || node.Element.Namespace != element.Namespace || node.Element.Token.AttrCount != element.Token.AttrCount) " is 150.
Long Statement,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,ReconstructFormattingElements,The length of the statement  "	Element<T> element = entry.Element.Namespace == NS_HTML ? InsertHtmlElement (ref entry.Element.Token) : InsertForeignElement (ref entry.Element.Token' entry.Element.Namespace); " is 176.
Long Statement,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,EndTagToken,The length of the statement  "				T instance2 = CreateElement (formattingElement.Token.TagName' formattingElement.Token.Attributes' formattingElement.Namespace); " is 127.
Long Statement,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,DoctypeToken,The length of the statement  "						if (publicId.StartsWith ("-//W3C//DTD HTML 4.01 Frameset//") || publicId.StartsWith ("-//W3C//DTD HTML 4.01 Transitional//")) " is 125.
Long Statement,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,DoctypeToken,The length of the statement  "					if (publicId.StartsWith ("-//W3C//DTD XHTML 1.0 Frameset//") || publicId.StartsWith ("-//W3C//DTD XHTML 1.0 Transitional//")) " is 125.
Long Statement,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,DoctypeToken,The length of the statement  "						if (systemId != null && (publicId.StartsWith ("-//W3C//DTD HTML 4.01 Frameset//") || publicId.StartsWith ("-//W3C//DTD HTML 4.01 Transitional//"))) " is 147.
Complex Conditional,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,EmitTagToken,The conditional expression  "builder.O.Current == null || builder.O.Current.Namespace == TreeBuilder<T>.NS_HTML || (LastTagName != "mglyph" && LastTagName != "malignmark" && builder.MathMLIntergartionPoint ()) || (LastTagName == "svg" && builder.O.Current.TagName == "annotation-xml") || builder.HTMLIntegrationPoint ()"  is complex.
Complex Conditional,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,FlushCharTokens,The conditional expression  "builder.O.Current == null || builder.O.Current.Namespace == TreeBuilder<T>.NS_HTML || builder.MathMLIntergartionPoint () || builder.MathMLIntergartionPoint ()"  is complex.
Virtual Method Call from Constructor,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,TreeBuilder,The constructor "TreeBuilder" calls a virtual method "GetOwnerDocumentQuirkFlag".
Virtual Method Call from Constructor,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,TreeBuilder,The constructor "TreeBuilder" calls a virtual method "GetElementName".
Virtual Method Call from Constructor,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,TreeBuilder,The constructor "TreeBuilder" calls a virtual method "GetElementNamespace".
Virtual Method Call from Constructor,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,TreeBuilder,The constructor "TreeBuilder" calls a virtual method "CreateElement".
Virtual Method Call from Constructor,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,TreeBuilder,The constructor "TreeBuilder" calls a virtual method "AppendElementToDocument".
Virtual Method Call from Constructor,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,TreeBuilder,The constructor "TreeBuilder" calls a virtual method "GetFormAncestor".
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,EmitTagToken,The following statement contains a magic number: if (TagEndTag) {  	byte mode = 18;  	//TokenProcessingRule();  	if (builder.O.Current == null || builder.O.Current.Namespace == TreeBuilder<T>.NS_HTML)  		mode = 0;  	/*if (builder.STACK.Count == 0 || builder.STACK.PEEK.NamespaceURI == TreeBuilder<T>.NS_HTML)                     mode = 0;*/builder.EndTagToken (new string (TagName' 0' TagNamePtr)' mode);  }  else {  	LastTagName = new string (TagName' 0' TagNamePtr);  	CheckAttribute ();  	byte mode = 18;  	// StartTagTokenProcessingRule();  	if (builder.O.Current == null || builder.O.Current.Namespace == TreeBuilder<T>.NS_HTML || (LastTagName != "mglyph" && LastTagName != "malignmark" && builder.MathMLIntergartionPoint ()) || (LastTagName == "svg" && builder.O.Current.TagName == "annotation-xml") || builder.HTMLIntegrationPoint ())  		mode = 0;  	/*                 if (builder.STACK.Count == 0                     || builder.STACK.PEEK.NamespaceURI == TreeBuilder<T>.NS_HTML                     || (builder.MathMLIntergartionPoint() && LastTagName != "mglyph" && LastTagName != "malignmark")                     || (builder.STACK.PEEK.Name == "annotation-xml" && LastTagName == "svg")                     || builder.HTMLIntegrationPoint())                     mode = 0;                  */ElementToken token = new ElementToken (LastTagName' AttrList' AttrCount' TagIsSelfClosing);  	builder.StartTagToken (ref token' mode);  	AttrList = null;  	AttrCount = 0;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,EmitTagToken,The following statement contains a magic number: if (TagEndTag) {  	byte mode = 18;  	//TokenProcessingRule();  	if (builder.O.Current == null || builder.O.Current.Namespace == TreeBuilder<T>.NS_HTML)  		mode = 0;  	/*if (builder.STACK.Count == 0 || builder.STACK.PEEK.NamespaceURI == TreeBuilder<T>.NS_HTML)                     mode = 0;*/builder.EndTagToken (new string (TagName' 0' TagNamePtr)' mode);  }  else {  	LastTagName = new string (TagName' 0' TagNamePtr);  	CheckAttribute ();  	byte mode = 18;  	// StartTagTokenProcessingRule();  	if (builder.O.Current == null || builder.O.Current.Namespace == TreeBuilder<T>.NS_HTML || (LastTagName != "mglyph" && LastTagName != "malignmark" && builder.MathMLIntergartionPoint ()) || (LastTagName == "svg" && builder.O.Current.TagName == "annotation-xml") || builder.HTMLIntegrationPoint ())  		mode = 0;  	/*                 if (builder.STACK.Count == 0                     || builder.STACK.PEEK.NamespaceURI == TreeBuilder<T>.NS_HTML                     || (builder.MathMLIntergartionPoint() && LastTagName != "mglyph" && LastTagName != "malignmark")                     || (builder.STACK.PEEK.Name == "annotation-xml" && LastTagName == "svg")                     || builder.HTMLIntegrationPoint())                     mode = 0;                  */ElementToken token = new ElementToken (LastTagName' AttrList' AttrCount' TagIsSelfClosing);  	builder.StartTagToken (ref token' mode);  	AttrList = null;  	AttrCount = 0;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,charcterReference,The following statement contains a magic number: if (pointer + 2 >= length) {  	wait = true;  	return null;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,charcterReference,The following statement contains a magic number: c = cbuff [pointer + 2];  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,charcterReference,The following statement contains a magic number: if (c == 'x' || c == 'X') {  	return NamedCharRef.matchHexDigits (cbuff' pointer + 3' length' ref wait' ref move);  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,charcterReference,The following statement contains a magic number: return NamedCharRef.matchHexDigits (cbuff' pointer + 3' length' ref wait' ref move);  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,charcterReference,The following statement contains a magic number: return NamedCharRef.matchDecDigits (cbuff' pointer + 3' length' ref wait' ref move);  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: for (int pointer = 0; pointer < length; pointer++) {  	byte crtc = 0;  	char c = unchecked(cbuff [pointer]);  	#region iterate  	switch (c) {  	case '\n':  		if (lastWasCR) {  			lastWasCR = false;  			continue;  		}  		crtc = CHAR_WS;  		break;  	case '\r':  		{  			c = '\n';  			crtc = CHAR_WS;  			lastWasCR = true;  		}  		break;  	case '\t':  	case '\f':  	case ' ':  		lastWasCR = false;  		crtc = CHAR_WS;  		break;  	case '\ufeff':  		lastWasCR = false;  		if (pointer == 0 && parsingCalls == 1)  			continue;  		crtc = CHAR_REPLACEMENT;  		break;  	case '&':  		lastWasCR = false;  		crtc = CHAR_AMPER;  		break;  	case '<':  		lastWasCR = false;  		crtc = CHAR_LT;  		break;  	case '>':  		lastWasCR = false;  		crtc = CHAR_GT;  		break;  	case '!':  		lastWasCR = false;  		crtc = CHAR_EXCLAMATION;  		break;  	case '?':  		lastWasCR = false;  		crtc = CHAR_QUESTION;  		break;  	case '/':  		lastWasCR = false;  		crtc = CHAR_SOLIDUS;  		break;  	case '"':  		lastWasCR = false;  		crtc = CHAR_DQUOTE;  		break;  	case '\'':  		lastWasCR = false;  		crtc = CHAR_SQUOTE;  		break;  	case '`':  		lastWasCR = false;  		crtc = CHAR_GRAVE;  		break;  	case '-':  		lastWasCR = false;  		crtc = CHAR_MINUS;  		break;  	case '=':  		lastWasCR = false;  		crtc = CHAR_EQUAL;  		break;  	case '\u0000':  		lastWasCR = false;  		crtc = CHAR_NULL;  		break;  	case 'A':  	case 'B':  	case 'C':  	case 'D':  	case 'E':  	case 'F':  	case 'G':  	case 'H':  	case 'I':  	case 'J':  	case 'K':  	case 'L':  	case 'M':  	case 'N':  	case 'O':  	case 'P':  	case 'Q':  	case 'R':  	case 'S':  	case 'T':  	case 'U':  	case 'V':  	case 'W':  	case 'X':  	case 'Y':  	case 'Z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_UP;  		break;  	case 'a':  	case 'b':  	case 'c':  	case 'd':  	case 'e':  	case 'f':  	case 'g':  	case 'h':  	case 'i':  	case 'j':  	case 'k':  	case 'l':  	case 'm':  	case 'n':  	case 'o':  	case 'p':  	case 'q':  	case 'r':  	case 's':  	case 't':  	case 'u':  	case 'v':  	case 'w':  	case 'x':  	case 'y':  	case 'z':  		lastWasCR = false;  		crtc = CHAR_ALPHA_LOW;  		break;  	default:  		lastWasCR = false;  		if (Char.IsControl (c))  			continue;  		break;  	}  	switch (STATE) {  	case DATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  			continue;  		case CHAR_LT:  			STATE = TAG_OPEN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\u0000';  			}  			//DataBuffer.Append('\u0000');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_DATA_STATE:  		{  			STATE = DATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RCDATA_STATE:  		switch (crtc) {  		case CHAR_AMPER:  			STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  			continue;  		case CHAR_LT:  			STATE = RCDATA_LESS_THEN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case CHARACTER_REFERENCE_IN_RCDATA_STATE:  		{  			STATE = RCDATA_STATE;  			ADDITIONAL_ALLOWED = null;  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  					return;  				}  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '&';  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (DataBufferPtr + dlen == DataBufferLength)  				DataBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				DataBuffer [DataBufferPtr++] = data [k];  			}  		}  		break;  	case RAWTEXT_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_STATE:  		switch (crtc) {  		case CHAR_LT:  			STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case PLAINTEXT_STATE:  		switch (crtc) {  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_EXCLAMATION:  			STATE = MARKUP_DECLARATION_OPEN_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(true' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = false;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_QUESTION:  			STATE = BOGUS_COMMENT_STATE;  			continue;  		default:  			STATE = DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			//reconsume  			continue;  		}  	case END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			STATE = TAG_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			continue;  		default:  			STATE = BOGUS_COMMENT_STATE;  			break;  		}  		break;  	case TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			continue;  		case CHAR_NULL:  			//TagName.Append('\ufffd');  			unchecked {  				TagName [TagNamePtr++] = '\ufffd';  			}  			continue;  		default:  			//TagName.Append(c);  			unchecked {  				TagName [TagNamePtr++] = c;  			}  			continue;  		}  	case RCDATA_LESS_THEN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RCDATA_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RCDATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RCDATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RCDATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			break;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			break;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			break;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RCDATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  		break;  	case RAWTEXT_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = RAWTEXT_END_TAG_OPEN_STATE;  		}  		else {  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  		}  		break;  	case RAWTEXT_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = RAWTEXT_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case RAWTEXT_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = RAWTEXT_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = SCRIPT_DATA_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '!';  			}  			//DataBuffer.Append(X_LT_EXCLAMATION);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			//DataBuffer.Append('<');  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false'(char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			pointer--;  			continue;  		}  	case SCRIPT_DATA_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			//DataBuffer.Append(X_LT_SOLIDUS);  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPE_START_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  		if (c == '-') {  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  		}  		else {  			STATE = SCRIPT_DATA_STATE;  			pointer--;  		}  		break;  	case SCRIPT_DATA_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			//DataBuffer.Append('-');  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			//DataBuffer.Append('\ufffd');  			continue;  		default:  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '>';  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append(c);  			continue;  		}  	case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  		switch (crtc) {  		case CHAR_SOLIDUS:  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Remove(0' TempBuffer.Length);  			//TempBuffer.Append((char)(c + 0x0020));  			unchecked {  				TempBufferPtr = 0;  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			}  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = c;  			}  			//DataBuffer.Append('<');  			//DataBuffer.Append(c);  			continue;  		default:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  		switch (crtc) {  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//initTag(false' (char)(c + 0x0020));  			TagIsSelfClosing = false;  			AttrList = null;  			AttrCount = 0;  			TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TagNamePtr = 1;  			TagEndTag = true;  			//TempBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = c;  			}  			STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			pointer--;  			continue;  		}  	case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			else  				goto default;  			continue;  		case CHAR_SOLIDUS:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  				STATE = SELF_CLOSING_START_TAG_STATE;  			else  				goto default;  			continue;  		case CHAR_GT:  			//if (isAppropriate())  			if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  				STATE = DATA_STATE;  				EmitTagToken ();  			}  			else  				goto default;  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TagName.Append((char)(c + 0x0020));  			//TempBuffer.Append(c);  			unchecked {  				TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				TempBuffer [TempBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(X_LT_SOLIDUS);  			unchecked {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  				DataBuffer [DataBufferPtr++] = '/';  			}  			EmitTmpBuffer ();  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '-';  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '<';  			}  			continue;  		case CHAR_NULL:  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//DataBuffer.Append('-');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_LT:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  			//DataBuffer.Append('<');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_GT:  			STATE = SCRIPT_DATA_STATE;  			//DataBuffer.Append('>');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_NULL:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append('\ufffd');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		}  	case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  		if (c == '/') {  			//TempBuffer.Remove(0' TempBuffer.Length);  			TempBufferPtr = 0;  			STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  			//DataBuffer.Append('/');  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		else {  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  		}  		continue;  	case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  		switch (crtc) {  		case CHAR_WS:  		case CHAR_SOLIDUS:  		case CHAR_GT:  			//if (TempBuffer.ToString() == "script")  			if (new string (TempBuffer' 0' TempBufferPtr) == "script")  				STATE = SCRIPT_DATA_ESCAPED_STATE;  			else  				STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			//DataBuffer.Append(c);  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		case CHAR_ALPHA_UP:  		case CHAR_ALPHA_LOW:  			//TempBuffer.Append((char)(c + 0x0020));  			//DataBuffer.Append(c);  			unchecked {  				TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  			continue;  		default:  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  			pointer--;  			continue;  		}  	case BEFORE_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SQUOTE:  		case CHAR_DQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			//AttrName.Append((char)(c + 0x0020));  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  			}  			continue;  		case CHAR_NULL:  			//AttrName.Append('\ufffd');  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		default:  			//AttrName.Append(c);  			unchecked {  				AttrNameBuffer [AttrNameBufferPtr++] = c;  			}  			continue;  		}  	case AFTER_ATTRIBUTE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_EQUAL:  			STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_ALPHA_UP:  			NewAttribute ((char)(c + 0x0020));  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_NULL:  			NewAttribute ('\ufffd');  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		default:  			NewAttribute (c);  			STATE = ATTRIBUTE_NAME_STATE;  			continue;  		}  	case BEFORE_ATTRIBUTE_VALUE_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			pointer--;  			continue;  		case CHAR_SQUOTE:  			STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_NULL:  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			//AttrValue.Append('\ufffd');  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			continue;  		}  	case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'"'  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'\''  			};  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case ATTRIBUTE_VALUE_UNQUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_AMPER:  			LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  			STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  			ADDITIONAL_ALLOWED = new char[] {  				'>'  			};  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		case CHAR_NULL:  			//AttrValue.Append('\ufffd');  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  			}  			continue;  		case CHAR_DQUOTE:  		case CHAR_SQUOTE:  		case CHAR_LT:  		case CHAR_EQUAL:  		case CHAR_GRAVE:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		default:  			//AttrValue.Append(c);  			unchecked {  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = c;  			}  			continue;  		}  	case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  		{  			bool wait = false;  			char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  			if (data == null) {  				if (wait) {  					pendingBufferLength = length - pointer;  					pendingBuffer = new char[pendingBufferLength];  					Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  					STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  					return;  				}  				if (AttrValueBufferPtr == AttrValueBufferLength)  					AttrValueBufferDoubleSize ();  				AttrValueBuffer [AttrValueBufferPtr++] = '&';  				STATE = LAST_STATE;  				pointer--;  				continue;  			}  			int dlen = data.Length;  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			for (int k = 0; k < dlen; k++) {  				AttrValueBuffer [AttrValueBufferPtr++] = data [k];  			}  		}  		break;  	case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			continue;  		case CHAR_SOLIDUS:  			STATE = SELF_CLOSING_START_TAG_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case SELF_CLOSING_START_TAG_STATE:  		switch (crtc) {  		case CHAR_GT:  			TagIsSelfClosing = true;  			STATE = DATA_STATE;  			EmitTagToken ();  			continue;  		default:  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  			pointer--;  			continue;  		}  	case BOGUS_COMMENT_STATE:  		//NEED TO CHANGE THIS  		//Comment.Remove(0' Comment.Length);  		CommentBufferPtr = 0;  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == '\u0000')  				c = '\ufffd';  			else if (c == '>') {  				EmitCommentToken ();  				STATE = DATA_STATE;  				break;  			}  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			pointer++;  		}  		continue;  	case MARKUP_DECLARATION_OPEN_STATE:  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				c  			};  			return;  		}  		if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  			pointer++;  			CommentBufferPtr = 0;  			STATE = COMMENT_START_STATE;  			continue;  		}  		if (pointer + 6 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		{  			string nextValue = new string (cbuff' pointer' 7);  			if (nextValue.ToLower () == "doctype") {  				pointer += 6;  				STATE = DOCTYPE_STATE;  				continue;  			}  			if (nextValue == "[CDATA[") {  				pointer += 6;  				STATE = CDATA_SECTION_STATE;  				continue;  			}  		}  		STATE = BOGUS_COMMENT_STATE;  		continue;  	case COMMENT_START_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_START_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_START_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append('\ufffd');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		}  	case COMMENT_END_DASH_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			STATE = COMMENT_END_STATE;  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append('-');  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 2 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_STATE:  		switch (crtc) {  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		case CHAR_EXCLAMATION:  			STATE = COMMENT_END_BANG_STATE;  			continue;  		case CHAR_MINUS:  			//Comment.Append('-');  			unchecked {  				if (CommentBufferPtr == CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = c;  			}  			continue;  		default:  			//Comment.Append(X_MINUS2);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case COMMENT_END_BANG_STATE:  		switch (crtc) {  		case CHAR_MINUS:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			unchecked {  				if (CommentBufferPtr + 3 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  			}  			STATE = COMMENT_END_DASH_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitCommentToken ();  			continue;  		case CHAR_NULL:  			//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = '\ufffd';  			}  			STATE = COMMENT_STATE;  			continue;  		default:  			//Comment.Append(X_MINUS2_EXCLAMATION);  			//Comment.Append(c);  			unchecked {  				if (CommentBufferPtr + 4 >= CommentBufferLength)  					CommentBufferDoubleSize ();  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '-';  				CommentBuffer [CommentBufferPtr++] = '!';  				CommentBuffer [CommentBufferPtr++] = c;  			}  			STATE = COMMENT_STATE;  			continue;  		}  	case DOCTYPE_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			continue;  		default:  			STATE = BEFORE_DOCTYPE_NAME_STATE;  			pointer--;  			continue;  		}  	case BEFORE_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_ALPHA_UP:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_NULL:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append ('\ufffd');  			STATE = DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			doctype.NewDoctype ();  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.NewDoctype ();  			doctype.DoctypeName.Append (c);  			STATE = DOCTYPE_NAME_STATE;  			continue;  		}  	case DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = AFTER_DOCTYPE_NAME_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_ALPHA_UP:  			doctype.DoctypeName.Append ((char)(c + 0x0020));  			continue;  		case CHAR_NULL:  			doctype.DoctypeName.Append ('\ufffd');  			continue;  		default:  			doctype.DoctypeName.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_NAME_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			if (pointer + 5 >= length) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				return;  			}  			else {  				string text = (new string (cbuff' pointer' 6)).ToLower ();  				switch (text) {  				case "public":  					pointer += 5;  					STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  					continue;  				case "system":  					pointer += 5;  					STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  					continue;  				}  			}  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptyPublicId = true;  			STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DoctypePublicId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DoctypePublicId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  		switch (crtc) {  		case CHAR_WS:  			STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_DQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  			continue;  		case CHAR_SQUOTE:  			doctype.EmptySystemId = true;  			STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.ForceQuirks = true;  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_DQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  		switch (crtc) {  		case CHAR_SQUOTE:  			STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  			continue;  		case CHAR_NULL:  			doctype.DocktypeSystemId.Append ('\ufffd');  			continue;  		case CHAR_GT:  			doctype.ForceQuirks = true;  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			doctype.DocktypeSystemId.Append (c);  			continue;  		}  	case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  		switch (crtc) {  		case CHAR_WS:  			continue;  		case CHAR_GT:  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		default:  			STATE = BOGUS_DOCTYPE_STATE;  			continue;  		}  	case BOGUS_DOCTYPE_STATE:  		if (c == '>') {  			STATE = DATA_STATE;  			EmitDoctypeToken ();  			continue;  		}  		continue;  	case CDATA_SECTION_STATE:  		while (pointer < length) {  			c = cbuff [pointer];  			if (c == ']') {  				if (pointer + 2 >= length) {  					if (pointer + 1 >= length) {  						pendingBufferLength = 1;  						pendingBuffer = new char[] {  							']'  						};  						return;  					}  					unchecked {  						if (cbuff [pointer + 1] == ']') {  							pendingBufferLength = 2;  							pendingBuffer = new char[] {  								']''  								']'  							};  							return;  						}  						else {  							if (DataBufferPtr + 2 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							pointer++;  						}  					}  				}  				else {  					unchecked {  						if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  							STATE = DATA_STATE;  							break;  						}  						else {  							if (DataBufferPtr + 3 >= DataBufferLength)  								DataBufferDoubleSize ();  							DataBuffer [DataBufferPtr++] = ']';  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  							DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  							pointer += 2;  						}  					}  				}  			}  			else {  				unchecked {  					if (DataBufferPtr == DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = c;  				}  			}  			pointer++;  		}  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  		continue;  	case CHAR_LT:  		STATE = TAG_OPEN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\u0000';  		}  		//DataBuffer.Append('\u0000');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_DATA_STATE:  	{  		STATE = DATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_DATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RCDATA_STATE:  	switch (crtc) {  	case CHAR_AMPER:  		STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  		continue;  	case CHAR_LT:  		STATE = RCDATA_LESS_THEN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	{  		STATE = RCDATA_STATE;  		ADDITIONAL_ALLOWED = null;  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_RCDATA_STATE;  				return;  			}  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '&';  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (DataBufferPtr + dlen == DataBufferLength)  			DataBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			DataBuffer [DataBufferPtr++] = data [k];  		}  	}  	break;  case RAWTEXT_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = RAWTEXT_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_STATE:  	switch (crtc) {  	case CHAR_LT:  		STATE = SCRIPT_DATA_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case PLAINTEXT_STATE:  	switch (crtc) {  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_EXCLAMATION:  		STATE = MARKUP_DECLARATION_OPEN_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(true' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = false;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_QUESTION:  		STATE = BOGUS_COMMENT_STATE;  		continue;  	default:  		STATE = DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		//reconsume  		continue;  	}  case END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		STATE = TAG_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		continue;  	default:  		STATE = BOGUS_COMMENT_STATE;  		break;  	}  	break;  case TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		continue;  	case CHAR_NULL:  		//TagName.Append('\ufffd');  		unchecked {  			TagName [TagNamePtr++] = '\ufffd';  		}  		continue;  	default:  		//TagName.Append(c);  		unchecked {  			TagName [TagNamePtr++] = c;  		}  		continue;  	}  case RCDATA_LESS_THEN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RCDATA_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RCDATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RCDATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RCDATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		break;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		break;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		break;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RCDATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  	break;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = RAWTEXT_END_TAG_OPEN_STATE;  	}  	else {  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  	}  	break;  case RAWTEXT_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = RAWTEXT_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case RAWTEXT_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = RAWTEXT_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = SCRIPT_DATA_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '!';  		}  		//DataBuffer.Append(X_LT_EXCLAMATION);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		//DataBuffer.Append('<');  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false'(char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		pointer--;  		continue;  	}  case SCRIPT_DATA_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		//DataBuffer.Append(X_LT_SOLIDUS);  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPE_START_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPE_START_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	if (c == '-') {  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  	}  	else {  		STATE = SCRIPT_DATA_STATE;  		pointer--;  	}  	break;  case SCRIPT_DATA_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		//DataBuffer.Append('-');  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		//DataBuffer.Append('\ufffd');  		continue;  	default:  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '>';  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append(c);  		continue;  	}  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	switch (crtc) {  	case CHAR_SOLIDUS:  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Remove(0' TempBuffer.Length);  		//TempBuffer.Append((char)(c + 0x0020));  		unchecked {  			TempBufferPtr = 0;  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		}  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = c;  		}  		//DataBuffer.Append('<');  		//DataBuffer.Append(c);  		continue;  	default:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	switch (crtc) {  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//initTag(false' (char)(c + 0x0020));  		TagIsSelfClosing = false;  		AttrList = null;  		AttrCount = 0;  		TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TagNamePtr = 1;  		TagEndTag = true;  		//TempBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = c;  		}  		STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		pointer--;  		continue;  	}  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		else  			goto default;  		continue;  	case CHAR_SOLIDUS:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  			STATE = SELF_CLOSING_START_TAG_STATE;  		else  			goto default;  		continue;  	case CHAR_GT:  		//if (isAppropriate())  		if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  			STATE = DATA_STATE;  			EmitTagToken ();  		}  		else  			goto default;  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TagName.Append((char)(c + 0x0020));  		//TempBuffer.Append(c);  		unchecked {  			TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			TempBuffer [TempBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(X_LT_SOLIDUS);  		unchecked {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  			DataBuffer [DataBufferPtr++] = '/';  		}  		EmitTmpBuffer ();  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_ESCAPED_STATE;  		pointer--;  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '-';  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '<';  		}  		continue;  	case CHAR_NULL:  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//DataBuffer.Append('-');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_LT:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;  		//DataBuffer.Append('<');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_GT:  		STATE = SCRIPT_DATA_STATE;  		//DataBuffer.Append('>');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_NULL:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append('\ufffd');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	}  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  	if (c == '/') {  		//TempBuffer.Remove(0' TempBuffer.Length);  		TempBufferPtr = 0;  		STATE = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;  		//DataBuffer.Append('/');  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	else {  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  	}  	continue;  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	switch (crtc) {  	case CHAR_WS:  	case CHAR_SOLIDUS:  	case CHAR_GT:  		//if (TempBuffer.ToString() == "script")  		if (new string (TempBuffer' 0' TempBufferPtr) == "script")  			STATE = SCRIPT_DATA_ESCAPED_STATE;  		else  			STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		//DataBuffer.Append(c);  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	case CHAR_ALPHA_UP:  	case CHAR_ALPHA_LOW:  		//TempBuffer.Append((char)(c + 0x0020));  		//DataBuffer.Append(c);  		unchecked {  			TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  		continue;  	default:  		STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  		pointer--;  		continue;  	}  case BEFORE_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SQUOTE:  	case CHAR_DQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		//AttrName.Append((char)(c + 0x0020));  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = (char)(c + 0x0020);  		}  		continue;  	case CHAR_NULL:  		//AttrName.Append('\ufffd');  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	default:  		//AttrName.Append(c);  		unchecked {  			AttrNameBuffer [AttrNameBufferPtr++] = c;  		}  		continue;  	}  case AFTER_ATTRIBUTE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_EQUAL:  		STATE = BEFORE_ATTRIBUTE_VALUE_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_ALPHA_UP:  		NewAttribute ((char)(c + 0x0020));  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_NULL:  		NewAttribute ('\ufffd');  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	default:  		NewAttribute (c);  		STATE = ATTRIBUTE_NAME_STATE;  		continue;  	}  case BEFORE_ATTRIBUTE_VALUE_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		pointer--;  		continue;  	case CHAR_SQUOTE:  		STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_NULL:  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		//AttrValue.Append('\ufffd');  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		continue;  	}  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'"'  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'\''  		};  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_AMPER:  		LAST_STATE = ATTRIBUTE_VALUE_UNQUOTED_STATE;  		STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  		ADDITIONAL_ALLOWED = new char[] {  			'>'  		};  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	case CHAR_NULL:  		//AttrValue.Append('\ufffd');  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '\ufffd';  		}  		continue;  	case CHAR_DQUOTE:  	case CHAR_SQUOTE:  	case CHAR_LT:  	case CHAR_EQUAL:  	case CHAR_GRAVE:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	default:  		//AttrValue.Append(c);  		unchecked {  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = c;  		}  		continue;  	}  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	{  		bool wait = false;  		char[] data = charcterReference (cbuff' pointer' length' ref wait' ref pointer);  		if (data == null) {  			if (wait) {  				pendingBufferLength = length - pointer;  				pendingBuffer = new char[pendingBufferLength];  				Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  				STATE = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;  				return;  			}  			if (AttrValueBufferPtr == AttrValueBufferLength)  				AttrValueBufferDoubleSize ();  			AttrValueBuffer [AttrValueBufferPtr++] = '&';  			STATE = LAST_STATE;  			pointer--;  			continue;  		}  		int dlen = data.Length;  		if (AttrValueBufferPtr == AttrValueBufferLength)  			AttrValueBufferDoubleSize ();  		for (int k = 0; k < dlen; k++) {  			AttrValueBuffer [AttrValueBufferPtr++] = data [k];  		}  	}  	break;  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		continue;  	case CHAR_SOLIDUS:  		STATE = SELF_CLOSING_START_TAG_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case SELF_CLOSING_START_TAG_STATE:  	switch (crtc) {  	case CHAR_GT:  		TagIsSelfClosing = true;  		STATE = DATA_STATE;  		EmitTagToken ();  		continue;  	default:  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  		pointer--;  		continue;  	}  case BOGUS_COMMENT_STATE:  	//NEED TO CHANGE THIS  	//Comment.Remove(0' Comment.Length);  	CommentBufferPtr = 0;  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == '\u0000')  			c = '\ufffd';  		else if (c == '>') {  			EmitCommentToken ();  			STATE = DATA_STATE;  			break;  		}  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		pointer++;  	}  	continue;  case MARKUP_DECLARATION_OPEN_STATE:  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			c  		};  		return;  	}  	if (c == '-' && unchecked(cbuff [pointer + 1]) == '-') {  		pointer++;  		CommentBufferPtr = 0;  		STATE = COMMENT_START_STATE;  		continue;  	}  	if (pointer + 6 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	{  		string nextValue = new string (cbuff' pointer' 7);  		if (nextValue.ToLower () == "doctype") {  			pointer += 6;  			STATE = DOCTYPE_STATE;  			continue;  		}  		if (nextValue == "[CDATA[") {  			pointer += 6;  			STATE = CDATA_SECTION_STATE;  			continue;  		}  	}  	STATE = BOGUS_COMMENT_STATE;  	continue;  case COMMENT_START_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_START_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_START_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append('\ufffd');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	}  case COMMENT_END_DASH_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		STATE = COMMENT_END_STATE;  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append('-');  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 2 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_STATE:  	switch (crtc) {  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	case CHAR_EXCLAMATION:  		STATE = COMMENT_END_BANG_STATE;  		continue;  	case CHAR_MINUS:  		//Comment.Append('-');  		unchecked {  			if (CommentBufferPtr == CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = c;  		}  		continue;  	default:  		//Comment.Append(X_MINUS2);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case COMMENT_END_BANG_STATE:  	switch (crtc) {  	case CHAR_MINUS:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		unchecked {  			if (CommentBufferPtr + 3 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  		}  		STATE = COMMENT_END_DASH_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitCommentToken ();  		continue;  	case CHAR_NULL:  		//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = '\ufffd';  		}  		STATE = COMMENT_STATE;  		continue;  	default:  		//Comment.Append(X_MINUS2_EXCLAMATION);  		//Comment.Append(c);  		unchecked {  			if (CommentBufferPtr + 4 >= CommentBufferLength)  				CommentBufferDoubleSize ();  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '-';  			CommentBuffer [CommentBufferPtr++] = '!';  			CommentBuffer [CommentBufferPtr++] = c;  		}  		STATE = COMMENT_STATE;  		continue;  	}  case DOCTYPE_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		continue;  	default:  		STATE = BEFORE_DOCTYPE_NAME_STATE;  		pointer--;  		continue;  	}  case BEFORE_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_ALPHA_UP:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_NULL:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append ('\ufffd');  		STATE = DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		doctype.NewDoctype ();  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.NewDoctype ();  		doctype.DoctypeName.Append (c);  		STATE = DOCTYPE_NAME_STATE;  		continue;  	}  case DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = AFTER_DOCTYPE_NAME_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_ALPHA_UP:  		doctype.DoctypeName.Append ((char)(c + 0x0020));  		continue;  	case CHAR_NULL:  		doctype.DoctypeName.Append ('\ufffd');  		continue;  	default:  		doctype.DoctypeName.Append (c);  		continue;  	}  case AFTER_DOCTYPE_NAME_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		if (pointer + 5 >= length) {  			pendingBufferLength = length - pointer;  			pendingBuffer = new char[pendingBufferLength];  			Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  			return;  		}  		else {  			string text = (new string (cbuff' pointer' 6)).ToLower ();  			switch (text) {  			case "public":  				pointer += 5;  				STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  				continue;  			case "system":  				pointer += 5;  				STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  				continue;  			}  		}  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptyPublicId = true;  		STATE = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DoctypePublicId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DoctypePublicId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  	switch (crtc) {  	case CHAR_WS:  		STATE = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_DQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;  		continue;  	case CHAR_SQUOTE:  		doctype.EmptySystemId = true;  		STATE = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.ForceQuirks = true;  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_DQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  	switch (crtc) {  	case CHAR_SQUOTE:  		STATE = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;  		continue;  	case CHAR_NULL:  		doctype.DocktypeSystemId.Append ('\ufffd');  		continue;  	case CHAR_GT:  		doctype.ForceQuirks = true;  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		doctype.DocktypeSystemId.Append (c);  		continue;  	}  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	switch (crtc) {  	case CHAR_WS:  		continue;  	case CHAR_GT:  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	default:  		STATE = BOGUS_DOCTYPE_STATE;  		continue;  	}  case BOGUS_DOCTYPE_STATE:  	if (c == '>') {  		STATE = DATA_STATE;  		EmitDoctypeToken ();  		continue;  	}  	continue;  case CDATA_SECTION_STATE:  	while (pointer < length) {  		c = cbuff [pointer];  		if (c == ']') {  			if (pointer + 2 >= length) {  				if (pointer + 1 >= length) {  					pendingBufferLength = 1;  					pendingBuffer = new char[] {  						']'  					};  					return;  				}  				unchecked {  					if (cbuff [pointer + 1] == ']') {  						pendingBufferLength = 2;  						pendingBuffer = new char[] {  							']''  							']'  						};  						return;  					}  					else {  						if (DataBufferPtr + 2 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						pointer++;  					}  				}  			}  			else {  				unchecked {  					if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  						STATE = DATA_STATE;  						break;  					}  					else {  						if (DataBufferPtr + 3 >= DataBufferLength)  							DataBufferDoubleSize ();  						DataBuffer [DataBufferPtr++] = ']';  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  						DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  						pointer += 2;  					}  				}  			}  		}  		else {  			unchecked {  				if (DataBufferPtr == DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = c;  			}  		}  		pointer++;  	}  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (crtc) {  case CHAR_ALPHA_UP:  case CHAR_ALPHA_LOW:  	//initTag(false'(char)(c + 0x0020));  	TagIsSelfClosing = false;  	AttrList = null;  	AttrCount = 0;  	TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  	TagNamePtr = 1;  	TagEndTag = true;  	//TempBuffer.Append(c);  	unchecked {  		TempBuffer [TempBufferPtr++] = c;  	}  	STATE = RCDATA_END_TAG_NAME_STATE;  	continue;  default:  	STATE = RCDATA_STATE;  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	//DataBuffer.Append(X_LT_SOLIDUS);  	pointer--;  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: unchecked {  	if (DataBufferPtr + 2 >= DataBufferLength)  		DataBufferDoubleSize ();  	DataBuffer [DataBufferPtr++] = '<';  	DataBuffer [DataBufferPtr++] = '/';  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (DataBufferPtr + 2 >= DataBufferLength)  	DataBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (crtc) {  case CHAR_WS:  	//if (isAppropriate())  	if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  	else  		goto default;  	break;  case CHAR_SOLIDUS:  	//if (isAppropriate())  	if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  		STATE = SELF_CLOSING_START_TAG_STATE;  	else  		goto default;  	break;  case CHAR_GT:  	//if (isAppropriate())  	if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  		STATE = DATA_STATE;  		EmitTagToken ();  	}  	else  		goto default;  	break;  case CHAR_ALPHA_UP:  case CHAR_ALPHA_LOW:  	//TagName.Append((char)(c + 0x0020));  	//TempBuffer.Append(c);  	unchecked {  		TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TempBuffer [TempBufferPtr++] = c;  	}  	continue;  default:  	STATE = RCDATA_STATE;  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	//DataBuffer.Append(X_LT_SOLIDUS);  	EmitTmpBuffer ();  	pointer--;  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: unchecked {  	if (DataBufferPtr + 2 >= DataBufferLength)  		DataBufferDoubleSize ();  	DataBuffer [DataBufferPtr++] = '<';  	DataBuffer [DataBufferPtr++] = '/';  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (DataBufferPtr + 2 >= DataBufferLength)  	DataBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (crtc) {  case CHAR_ALPHA_UP:  case CHAR_ALPHA_LOW:  	//initTag(false' (char)(c + 0x0020));  	TagIsSelfClosing = false;  	AttrList = null;  	AttrCount = 0;  	TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  	TagNamePtr = 1;  	TagEndTag = true;  	//TempBuffer.Append(c);  	unchecked {  		TempBuffer [TempBufferPtr++] = c;  	}  	STATE = RAWTEXT_END_TAG_NAME_STATE;  	continue;  default:  	STATE = RAWTEXT_STATE;  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	//DataBuffer.Append(X_LT_SOLIDUS);  	pointer--;  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: unchecked {  	if (DataBufferPtr + 2 >= DataBufferLength)  		DataBufferDoubleSize ();  	DataBuffer [DataBufferPtr++] = '<';  	DataBuffer [DataBufferPtr++] = '/';  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (DataBufferPtr + 2 >= DataBufferLength)  	DataBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (crtc) {  case CHAR_WS:  	//if (isAppropriate())  	if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  	else  		goto default;  	continue;  case CHAR_SOLIDUS:  	//if (isAppropriate())  	if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  		STATE = SELF_CLOSING_START_TAG_STATE;  	else  		goto default;  	continue;  case CHAR_GT:  	//if (isAppropriate())  	if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  		STATE = DATA_STATE;  		EmitTagToken ();  	}  	else  		goto default;  	continue;  case CHAR_ALPHA_UP:  case CHAR_ALPHA_LOW:  	//TagName.Append((char)(c + 0x0020));  	//TempBuffer.Append(c);  	unchecked {  		TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TempBuffer [TempBufferPtr++] = c;  	}  	continue;  default:  	STATE = RAWTEXT_STATE;  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	//DataBuffer.Append(X_LT_SOLIDUS);  	EmitTmpBuffer ();  	pointer--;  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: unchecked {  	if (DataBufferPtr + 2 >= DataBufferLength)  		DataBufferDoubleSize ();  	DataBuffer [DataBufferPtr++] = '<';  	DataBuffer [DataBufferPtr++] = '/';  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (DataBufferPtr + 2 >= DataBufferLength)  	DataBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (crtc) {  case CHAR_SOLIDUS:  	//TempBuffer.Remove(0' TempBuffer.Length);  	TempBufferPtr = 0;  	STATE = SCRIPT_DATA_END_TAG_OPEN_STATE;  	continue;  case CHAR_EXCLAMATION:  	STATE = SCRIPT_DATA_ESCAPE_START_STATE;  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '!';  	}  	//DataBuffer.Append(X_LT_EXCLAMATION);  	continue;  default:  	STATE = SCRIPT_DATA_STATE;  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	//DataBuffer.Append('<');  	pointer--;  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: unchecked {  	if (DataBufferPtr + 2 >= DataBufferLength)  		DataBufferDoubleSize ();  	DataBuffer [DataBufferPtr++] = '<';  	DataBuffer [DataBufferPtr++] = '!';  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (DataBufferPtr + 2 >= DataBufferLength)  	DataBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (crtc) {  case CHAR_ALPHA_UP:  case CHAR_ALPHA_LOW:  	//initTag(false'(char)(c + 0x0020));  	TagIsSelfClosing = false;  	AttrList = null;  	AttrCount = 0;  	TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  	TagNamePtr = 1;  	TagEndTag = true;  	//TempBuffer.Append(c);  	unchecked {  		TempBuffer [TempBufferPtr++] = c;  	}  	STATE = SCRIPT_DATA_END_TAG_NAME_STATE;  	continue;  default:  	STATE = SCRIPT_DATA_STATE;  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	//DataBuffer.Append(X_LT_SOLIDUS);  	pointer--;  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: unchecked {  	if (DataBufferPtr + 2 >= DataBufferLength)  		DataBufferDoubleSize ();  	DataBuffer [DataBufferPtr++] = '<';  	DataBuffer [DataBufferPtr++] = '/';  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (DataBufferPtr + 2 >= DataBufferLength)  	DataBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (crtc) {  case CHAR_WS:  	//if (isAppropriate())  	if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  	else  		goto default;  	continue;  case CHAR_SOLIDUS:  	//if (isAppropriate())  	if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  		STATE = SELF_CLOSING_START_TAG_STATE;  	else  		goto default;  	continue;  case CHAR_GT:  	//if (isAppropriate())  	if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  		STATE = DATA_STATE;  		EmitTagToken ();  	}  	else  		goto default;  	continue;  case CHAR_ALPHA_UP:  case CHAR_ALPHA_LOW:  	//TagName.Append((char)(c + 0x0020));  	//TempBuffer.Append(c);  	unchecked {  		TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TempBuffer [TempBufferPtr++] = c;  	}  	continue;  default:  	STATE = SCRIPT_DATA_STATE;  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	//DataBuffer.Append(X_LT_SOLIDUS);  	EmitTmpBuffer ();  	pointer--;  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: unchecked {  	if (DataBufferPtr + 2 >= DataBufferLength)  		DataBufferDoubleSize ();  	DataBuffer [DataBufferPtr++] = '<';  	DataBuffer [DataBufferPtr++] = '/';  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (DataBufferPtr + 2 >= DataBufferLength)  	DataBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (crtc) {  case CHAR_SOLIDUS:  	//TempBuffer.Remove(0' TempBuffer.Length);  	TempBufferPtr = 0;  	STATE = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;  	continue;  case CHAR_ALPHA_UP:  case CHAR_ALPHA_LOW:  	//TempBuffer.Remove(0' TempBuffer.Length);  	//TempBuffer.Append((char)(c + 0x0020));  	unchecked {  		TempBufferPtr = 0;  		TempBuffer [TempBufferPtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  	}  	STATE = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = c;  	}  	//DataBuffer.Append('<');  	//DataBuffer.Append(c);  	continue;  default:  	STATE = SCRIPT_DATA_STATE;  	//DataBuffer.Append('<');  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	pointer--;  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: unchecked {  	if (DataBufferPtr + 2 >= DataBufferLength)  		DataBufferDoubleSize ();  	DataBuffer [DataBufferPtr++] = '<';  	DataBuffer [DataBufferPtr++] = c;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (DataBufferPtr + 2 >= DataBufferLength)  	DataBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (crtc) {  case CHAR_ALPHA_UP:  case CHAR_ALPHA_LOW:  	//initTag(false' (char)(c + 0x0020));  	TagIsSelfClosing = false;  	AttrList = null;  	AttrCount = 0;  	TagName [0] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  	TagNamePtr = 1;  	TagEndTag = true;  	//TempBuffer.Append(c);  	unchecked {  		TempBuffer [TempBufferPtr++] = c;  	}  	STATE = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;  	continue;  default:  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	//DataBuffer.Append(X_LT_SOLIDUS);  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	pointer--;  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: unchecked {  	if (DataBufferPtr + 2 >= DataBufferLength)  		DataBufferDoubleSize ();  	DataBuffer [DataBufferPtr++] = '<';  	DataBuffer [DataBufferPtr++] = '/';  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (DataBufferPtr + 2 >= DataBufferLength)  	DataBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (crtc) {  case CHAR_WS:  	//if (isAppropriate())  	if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  		STATE = BEFORE_ATTRIBUTE_NAME_STATE;  	else  		goto default;  	continue;  case CHAR_SOLIDUS:  	//if (isAppropriate())  	if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr)))  		STATE = SELF_CLOSING_START_TAG_STATE;  	else  		goto default;  	continue;  case CHAR_GT:  	//if (isAppropriate())  	if (LastTagName != null && (LastTagName == new string (TagName' 0' TagNamePtr))) {  		STATE = DATA_STATE;  		EmitTagToken ();  	}  	else  		goto default;  	continue;  case CHAR_ALPHA_UP:  case CHAR_ALPHA_LOW:  	//TagName.Append((char)(c + 0x0020));  	//TempBuffer.Append(c);  	unchecked {  		TagName [TagNamePtr++] = (crtc == CHAR_ALPHA_UP ? (char)(c + 0x0020) : c);  		TempBuffer [TempBufferPtr++] = c;  	}  	continue;  default:  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	//DataBuffer.Append(X_LT_SOLIDUS);  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	EmitTmpBuffer ();  	pointer--;  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: unchecked {  	if (DataBufferPtr + 2 >= DataBufferLength)  		DataBufferDoubleSize ();  	DataBuffer [DataBufferPtr++] = '<';  	DataBuffer [DataBufferPtr++] = '/';  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (DataBufferPtr + 2 >= DataBufferLength)  	DataBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (pointer + 6 >= length) {  	pendingBufferLength = length - pointer;  	pendingBuffer = new char[pendingBufferLength];  	Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  	return;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (nextValue.ToLower () == "doctype") {  	pointer += 6;  	STATE = DOCTYPE_STATE;  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: pointer += 6;  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (nextValue == "[CDATA[") {  	pointer += 6;  	STATE = CDATA_SECTION_STATE;  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: pointer += 6;  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (crtc) {  case CHAR_MINUS:  	STATE = COMMENT_END_STATE;  	continue;  case CHAR_NULL:  	//Comment.Append(X_MINUS2_REPLACEMENT);  	unchecked {  		if (CommentBufferPtr + 3 >= CommentBufferLength)  			CommentBufferDoubleSize ();  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '\ufffd';  	}  	STATE = COMMENT_STATE;  	continue;  case CHAR_GT:  	STATE = DATA_STATE;  	EmitCommentToken ();  	continue;  default:  	//Comment.Append('-');  	//Comment.Append(c);  	unchecked {  		if (CommentBufferPtr + 2 >= CommentBufferLength)  			CommentBufferDoubleSize ();  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = c;  	}  	STATE = COMMENT_STATE;  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (crtc) {  case CHAR_MINUS:  	STATE = COMMENT_END_STATE;  	continue;  case CHAR_NULL:  	//Comment.Append(X_MINUS2_REPLACEMENT);  	unchecked {  		if (CommentBufferPtr + 3 >= CommentBufferLength)  			CommentBufferDoubleSize ();  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '\ufffd';  	}  	STATE = COMMENT_STATE;  	continue;  case CHAR_GT:  	STATE = DATA_STATE;  	EmitCommentToken ();  	continue;  default:  	//Comment.Append('-');  	//Comment.Append(c);  	unchecked {  		if (CommentBufferPtr + 2 >= CommentBufferLength)  			CommentBufferDoubleSize ();  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = c;  	}  	STATE = COMMENT_STATE;  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: unchecked {  	if (CommentBufferPtr + 3 >= CommentBufferLength)  		CommentBufferDoubleSize ();  	CommentBuffer [CommentBufferPtr++] = '-';  	CommentBuffer [CommentBufferPtr++] = '-';  	CommentBuffer [CommentBufferPtr++] = '\ufffd';  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (CommentBufferPtr + 3 >= CommentBufferLength)  	CommentBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: unchecked {  	if (CommentBufferPtr + 2 >= CommentBufferLength)  		CommentBufferDoubleSize ();  	CommentBuffer [CommentBufferPtr++] = '-';  	CommentBuffer [CommentBufferPtr++] = c;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (CommentBufferPtr + 2 >= CommentBufferLength)  	CommentBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (crtc) {  case CHAR_MINUS:  	STATE = COMMENT_END_STATE;  	continue;  case CHAR_NULL:  	//Comment.Append(X_MINUS_REPLACEMENT);  	unchecked {  		if (CommentBufferPtr + 2 >= CommentBufferLength)  			CommentBufferDoubleSize ();  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '\ufffd';  	}  	STATE = COMMENT_STATE;  	continue;  default:  	//Comment.Append('-');  	//Comment.Append(c);  	unchecked {  		if (CommentBufferPtr + 2 >= CommentBufferLength)  			CommentBufferDoubleSize ();  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = c;  	}  	STATE = COMMENT_STATE;  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (crtc) {  case CHAR_MINUS:  	STATE = COMMENT_END_STATE;  	continue;  case CHAR_NULL:  	//Comment.Append(X_MINUS_REPLACEMENT);  	unchecked {  		if (CommentBufferPtr + 2 >= CommentBufferLength)  			CommentBufferDoubleSize ();  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '\ufffd';  	}  	STATE = COMMENT_STATE;  	continue;  default:  	//Comment.Append('-');  	//Comment.Append(c);  	unchecked {  		if (CommentBufferPtr + 2 >= CommentBufferLength)  			CommentBufferDoubleSize ();  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = c;  	}  	STATE = COMMENT_STATE;  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: unchecked {  	if (CommentBufferPtr + 2 >= CommentBufferLength)  		CommentBufferDoubleSize ();  	CommentBuffer [CommentBufferPtr++] = '-';  	CommentBuffer [CommentBufferPtr++] = '\ufffd';  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (CommentBufferPtr + 2 >= CommentBufferLength)  	CommentBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: unchecked {  	if (CommentBufferPtr + 2 >= CommentBufferLength)  		CommentBufferDoubleSize ();  	CommentBuffer [CommentBufferPtr++] = '-';  	CommentBuffer [CommentBufferPtr++] = c;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (CommentBufferPtr + 2 >= CommentBufferLength)  	CommentBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (crtc) {  case CHAR_GT:  	STATE = DATA_STATE;  	EmitCommentToken ();  	continue;  case CHAR_NULL:  	//Comment.Append(X_MINUS2_REPLACEMENT);  	unchecked {  		if (CommentBufferPtr + 3 >= CommentBufferLength)  			CommentBufferDoubleSize ();  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '\ufffd';  	}  	STATE = COMMENT_STATE;  	continue;  case CHAR_EXCLAMATION:  	STATE = COMMENT_END_BANG_STATE;  	continue;  case CHAR_MINUS:  	//Comment.Append('-');  	unchecked {  		if (CommentBufferPtr == CommentBufferLength)  			CommentBufferDoubleSize ();  		CommentBuffer [CommentBufferPtr++] = c;  	}  	continue;  default:  	//Comment.Append(X_MINUS2);  	//Comment.Append(c);  	unchecked {  		if (CommentBufferPtr + 3 >= CommentBufferLength)  			CommentBufferDoubleSize ();  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = c;  	}  	STATE = COMMENT_STATE;  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (crtc) {  case CHAR_GT:  	STATE = DATA_STATE;  	EmitCommentToken ();  	continue;  case CHAR_NULL:  	//Comment.Append(X_MINUS2_REPLACEMENT);  	unchecked {  		if (CommentBufferPtr + 3 >= CommentBufferLength)  			CommentBufferDoubleSize ();  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '\ufffd';  	}  	STATE = COMMENT_STATE;  	continue;  case CHAR_EXCLAMATION:  	STATE = COMMENT_END_BANG_STATE;  	continue;  case CHAR_MINUS:  	//Comment.Append('-');  	unchecked {  		if (CommentBufferPtr == CommentBufferLength)  			CommentBufferDoubleSize ();  		CommentBuffer [CommentBufferPtr++] = c;  	}  	continue;  default:  	//Comment.Append(X_MINUS2);  	//Comment.Append(c);  	unchecked {  		if (CommentBufferPtr + 3 >= CommentBufferLength)  			CommentBufferDoubleSize ();  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = c;  	}  	STATE = COMMENT_STATE;  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: unchecked {  	if (CommentBufferPtr + 3 >= CommentBufferLength)  		CommentBufferDoubleSize ();  	CommentBuffer [CommentBufferPtr++] = '-';  	CommentBuffer [CommentBufferPtr++] = '-';  	CommentBuffer [CommentBufferPtr++] = '\ufffd';  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (CommentBufferPtr + 3 >= CommentBufferLength)  	CommentBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: unchecked {  	if (CommentBufferPtr + 3 >= CommentBufferLength)  		CommentBufferDoubleSize ();  	CommentBuffer [CommentBufferPtr++] = '-';  	CommentBuffer [CommentBufferPtr++] = '-';  	CommentBuffer [CommentBufferPtr++] = c;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (CommentBufferPtr + 3 >= CommentBufferLength)  	CommentBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (crtc) {  case CHAR_MINUS:  	//Comment.Append(X_MINUS2_EXCLAMATION);  	unchecked {  		if (CommentBufferPtr + 3 >= CommentBufferLength)  			CommentBufferDoubleSize ();  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '!';  	}  	STATE = COMMENT_END_DASH_STATE;  	continue;  case CHAR_GT:  	STATE = DATA_STATE;  	EmitCommentToken ();  	continue;  case CHAR_NULL:  	//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  	unchecked {  		if (CommentBufferPtr + 4 >= CommentBufferLength)  			CommentBufferDoubleSize ();  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '!';  		CommentBuffer [CommentBufferPtr++] = '\ufffd';  	}  	STATE = COMMENT_STATE;  	continue;  default:  	//Comment.Append(X_MINUS2_EXCLAMATION);  	//Comment.Append(c);  	unchecked {  		if (CommentBufferPtr + 4 >= CommentBufferLength)  			CommentBufferDoubleSize ();  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '!';  		CommentBuffer [CommentBufferPtr++] = c;  	}  	STATE = COMMENT_STATE;  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (crtc) {  case CHAR_MINUS:  	//Comment.Append(X_MINUS2_EXCLAMATION);  	unchecked {  		if (CommentBufferPtr + 3 >= CommentBufferLength)  			CommentBufferDoubleSize ();  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '!';  	}  	STATE = COMMENT_END_DASH_STATE;  	continue;  case CHAR_GT:  	STATE = DATA_STATE;  	EmitCommentToken ();  	continue;  case CHAR_NULL:  	//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  	unchecked {  		if (CommentBufferPtr + 4 >= CommentBufferLength)  			CommentBufferDoubleSize ();  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '!';  		CommentBuffer [CommentBufferPtr++] = '\ufffd';  	}  	STATE = COMMENT_STATE;  	continue;  default:  	//Comment.Append(X_MINUS2_EXCLAMATION);  	//Comment.Append(c);  	unchecked {  		if (CommentBufferPtr + 4 >= CommentBufferLength)  			CommentBufferDoubleSize ();  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '!';  		CommentBuffer [CommentBufferPtr++] = c;  	}  	STATE = COMMENT_STATE;  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (crtc) {  case CHAR_MINUS:  	//Comment.Append(X_MINUS2_EXCLAMATION);  	unchecked {  		if (CommentBufferPtr + 3 >= CommentBufferLength)  			CommentBufferDoubleSize ();  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '!';  	}  	STATE = COMMENT_END_DASH_STATE;  	continue;  case CHAR_GT:  	STATE = DATA_STATE;  	EmitCommentToken ();  	continue;  case CHAR_NULL:  	//Comment.Append(X_MINUS2_EXCLAMATION_REPLACEMENT);  	unchecked {  		if (CommentBufferPtr + 4 >= CommentBufferLength)  			CommentBufferDoubleSize ();  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '!';  		CommentBuffer [CommentBufferPtr++] = '\ufffd';  	}  	STATE = COMMENT_STATE;  	continue;  default:  	//Comment.Append(X_MINUS2_EXCLAMATION);  	//Comment.Append(c);  	unchecked {  		if (CommentBufferPtr + 4 >= CommentBufferLength)  			CommentBufferDoubleSize ();  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '-';  		CommentBuffer [CommentBufferPtr++] = '!';  		CommentBuffer [CommentBufferPtr++] = c;  	}  	STATE = COMMENT_STATE;  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: unchecked {  	if (CommentBufferPtr + 3 >= CommentBufferLength)  		CommentBufferDoubleSize ();  	CommentBuffer [CommentBufferPtr++] = '-';  	CommentBuffer [CommentBufferPtr++] = '-';  	CommentBuffer [CommentBufferPtr++] = '!';  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (CommentBufferPtr + 3 >= CommentBufferLength)  	CommentBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: unchecked {  	if (CommentBufferPtr + 4 >= CommentBufferLength)  		CommentBufferDoubleSize ();  	CommentBuffer [CommentBufferPtr++] = '-';  	CommentBuffer [CommentBufferPtr++] = '-';  	CommentBuffer [CommentBufferPtr++] = '!';  	CommentBuffer [CommentBufferPtr++] = '\ufffd';  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (CommentBufferPtr + 4 >= CommentBufferLength)  	CommentBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: unchecked {  	if (CommentBufferPtr + 4 >= CommentBufferLength)  		CommentBufferDoubleSize ();  	CommentBuffer [CommentBufferPtr++] = '-';  	CommentBuffer [CommentBufferPtr++] = '-';  	CommentBuffer [CommentBufferPtr++] = '!';  	CommentBuffer [CommentBufferPtr++] = c;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (CommentBufferPtr + 4 >= CommentBufferLength)  	CommentBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (crtc) {  case CHAR_WS:  	continue;  case CHAR_GT:  	STATE = DATA_STATE;  	EmitDoctypeToken ();  	continue;  default:  	if (pointer + 5 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	else {  		string text = (new string (cbuff' pointer' 6)).ToLower ();  		switch (text) {  		case "public":  			pointer += 5;  			STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  			continue;  		case "system":  			pointer += 5;  			STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  			continue;  		}  	}  	doctype.ForceQuirks = true;  	STATE = BOGUS_DOCTYPE_STATE;  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (crtc) {  case CHAR_WS:  	continue;  case CHAR_GT:  	STATE = DATA_STATE;  	EmitDoctypeToken ();  	continue;  default:  	if (pointer + 5 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	else {  		string text = (new string (cbuff' pointer' 6)).ToLower ();  		switch (text) {  		case "public":  			pointer += 5;  			STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  			continue;  		case "system":  			pointer += 5;  			STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  			continue;  		}  	}  	doctype.ForceQuirks = true;  	STATE = BOGUS_DOCTYPE_STATE;  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (crtc) {  case CHAR_WS:  	continue;  case CHAR_GT:  	STATE = DATA_STATE;  	EmitDoctypeToken ();  	continue;  default:  	if (pointer + 5 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	else {  		string text = (new string (cbuff' pointer' 6)).ToLower ();  		switch (text) {  		case "public":  			pointer += 5;  			STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  			continue;  		case "system":  			pointer += 5;  			STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  			continue;  		}  	}  	doctype.ForceQuirks = true;  	STATE = BOGUS_DOCTYPE_STATE;  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (crtc) {  case CHAR_WS:  	continue;  case CHAR_GT:  	STATE = DATA_STATE;  	EmitDoctypeToken ();  	continue;  default:  	if (pointer + 5 >= length) {  		pendingBufferLength = length - pointer;  		pendingBuffer = new char[pendingBufferLength];  		Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  		return;  	}  	else {  		string text = (new string (cbuff' pointer' 6)).ToLower ();  		switch (text) {  		case "public":  			pointer += 5;  			STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  			continue;  		case "system":  			pointer += 5;  			STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  			continue;  		}  	}  	doctype.ForceQuirks = true;  	STATE = BOGUS_DOCTYPE_STATE;  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (pointer + 5 >= length) {  	pendingBufferLength = length - pointer;  	pendingBuffer = new char[pendingBufferLength];  	Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  	return;  }  else {  	string text = (new string (cbuff' pointer' 6)).ToLower ();  	switch (text) {  	case "public":  		pointer += 5;  		STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  		continue;  	case "system":  		pointer += 5;  		STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (pointer + 5 >= length) {  	pendingBufferLength = length - pointer;  	pendingBuffer = new char[pendingBufferLength];  	Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  	return;  }  else {  	string text = (new string (cbuff' pointer' 6)).ToLower ();  	switch (text) {  	case "public":  		pointer += 5;  		STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  		continue;  	case "system":  		pointer += 5;  		STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (pointer + 5 >= length) {  	pendingBufferLength = length - pointer;  	pendingBuffer = new char[pendingBufferLength];  	Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  	return;  }  else {  	string text = (new string (cbuff' pointer' 6)).ToLower ();  	switch (text) {  	case "public":  		pointer += 5;  		STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  		continue;  	case "system":  		pointer += 5;  		STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (pointer + 5 >= length) {  	pendingBufferLength = length - pointer;  	pendingBuffer = new char[pendingBufferLength];  	Array.Copy (cbuff' pointer' pendingBuffer' 0' pendingBufferLength);  	return;  }  else {  	string text = (new string (cbuff' pointer' 6)).ToLower ();  	switch (text) {  	case "public":  		pointer += 5;  		STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  		continue;  	case "system":  		pointer += 5;  		STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  		continue;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (text) {  case "public":  	pointer += 5;  	STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  	continue;  case "system":  	pointer += 5;  	STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: switch (text) {  case "public":  	pointer += 5;  	STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  	continue;  case "system":  	pointer += 5;  	STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  	continue;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: pointer += 5;  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: pointer += 5;  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: while (pointer < length) {  	c = cbuff [pointer];  	if (c == ']') {  		if (pointer + 2 >= length) {  			if (pointer + 1 >= length) {  				pendingBufferLength = 1;  				pendingBuffer = new char[] {  					']'  				};  				return;  			}  			unchecked {  				if (cbuff [pointer + 1] == ']') {  					pendingBufferLength = 2;  					pendingBuffer = new char[] {  						']''  						']'  					};  					return;  				}  				else {  					if (DataBufferPtr + 2 >= DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = ']';  					DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  					pointer++;  				}  			}  		}  		else {  			unchecked {  				if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  					STATE = DATA_STATE;  					break;  				}  				else {  					if (DataBufferPtr + 3 >= DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = ']';  					DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  					DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  					pointer += 2;  				}  			}  		}  	}  	else {  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	pointer++;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: while (pointer < length) {  	c = cbuff [pointer];  	if (c == ']') {  		if (pointer + 2 >= length) {  			if (pointer + 1 >= length) {  				pendingBufferLength = 1;  				pendingBuffer = new char[] {  					']'  				};  				return;  			}  			unchecked {  				if (cbuff [pointer + 1] == ']') {  					pendingBufferLength = 2;  					pendingBuffer = new char[] {  						']''  						']'  					};  					return;  				}  				else {  					if (DataBufferPtr + 2 >= DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = ']';  					DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  					pointer++;  				}  			}  		}  		else {  			unchecked {  				if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  					STATE = DATA_STATE;  					break;  				}  				else {  					if (DataBufferPtr + 3 >= DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = ']';  					DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  					DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  					pointer += 2;  				}  			}  		}  	}  	else {  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	pointer++;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: while (pointer < length) {  	c = cbuff [pointer];  	if (c == ']') {  		if (pointer + 2 >= length) {  			if (pointer + 1 >= length) {  				pendingBufferLength = 1;  				pendingBuffer = new char[] {  					']'  				};  				return;  			}  			unchecked {  				if (cbuff [pointer + 1] == ']') {  					pendingBufferLength = 2;  					pendingBuffer = new char[] {  						']''  						']'  					};  					return;  				}  				else {  					if (DataBufferPtr + 2 >= DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = ']';  					DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  					pointer++;  				}  			}  		}  		else {  			unchecked {  				if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  					STATE = DATA_STATE;  					break;  				}  				else {  					if (DataBufferPtr + 3 >= DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = ']';  					DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  					DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  					pointer += 2;  				}  			}  		}  	}  	else {  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	pointer++;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: while (pointer < length) {  	c = cbuff [pointer];  	if (c == ']') {  		if (pointer + 2 >= length) {  			if (pointer + 1 >= length) {  				pendingBufferLength = 1;  				pendingBuffer = new char[] {  					']'  				};  				return;  			}  			unchecked {  				if (cbuff [pointer + 1] == ']') {  					pendingBufferLength = 2;  					pendingBuffer = new char[] {  						']''  						']'  					};  					return;  				}  				else {  					if (DataBufferPtr + 2 >= DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = ']';  					DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  					pointer++;  				}  			}  		}  		else {  			unchecked {  				if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  					STATE = DATA_STATE;  					break;  				}  				else {  					if (DataBufferPtr + 3 >= DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = ']';  					DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  					DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  					pointer += 2;  				}  			}  		}  	}  	else {  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	pointer++;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: while (pointer < length) {  	c = cbuff [pointer];  	if (c == ']') {  		if (pointer + 2 >= length) {  			if (pointer + 1 >= length) {  				pendingBufferLength = 1;  				pendingBuffer = new char[] {  					']'  				};  				return;  			}  			unchecked {  				if (cbuff [pointer + 1] == ']') {  					pendingBufferLength = 2;  					pendingBuffer = new char[] {  						']''  						']'  					};  					return;  				}  				else {  					if (DataBufferPtr + 2 >= DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = ']';  					DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  					pointer++;  				}  			}  		}  		else {  			unchecked {  				if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  					STATE = DATA_STATE;  					break;  				}  				else {  					if (DataBufferPtr + 3 >= DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = ']';  					DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  					DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  					pointer += 2;  				}  			}  		}  	}  	else {  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	pointer++;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: while (pointer < length) {  	c = cbuff [pointer];  	if (c == ']') {  		if (pointer + 2 >= length) {  			if (pointer + 1 >= length) {  				pendingBufferLength = 1;  				pendingBuffer = new char[] {  					']'  				};  				return;  			}  			unchecked {  				if (cbuff [pointer + 1] == ']') {  					pendingBufferLength = 2;  					pendingBuffer = new char[] {  						']''  						']'  					};  					return;  				}  				else {  					if (DataBufferPtr + 2 >= DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = ']';  					DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  					pointer++;  				}  			}  		}  		else {  			unchecked {  				if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  					STATE = DATA_STATE;  					break;  				}  				else {  					if (DataBufferPtr + 3 >= DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = ']';  					DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  					DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  					pointer += 2;  				}  			}  		}  	}  	else {  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	pointer++;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: while (pointer < length) {  	c = cbuff [pointer];  	if (c == ']') {  		if (pointer + 2 >= length) {  			if (pointer + 1 >= length) {  				pendingBufferLength = 1;  				pendingBuffer = new char[] {  					']'  				};  				return;  			}  			unchecked {  				if (cbuff [pointer + 1] == ']') {  					pendingBufferLength = 2;  					pendingBuffer = new char[] {  						']''  						']'  					};  					return;  				}  				else {  					if (DataBufferPtr + 2 >= DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = ']';  					DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  					pointer++;  				}  			}  		}  		else {  			unchecked {  				if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  					STATE = DATA_STATE;  					break;  				}  				else {  					if (DataBufferPtr + 3 >= DataBufferLength)  						DataBufferDoubleSize ();  					DataBuffer [DataBufferPtr++] = ']';  					DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  					DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  					pointer += 2;  				}  			}  		}  	}  	else {  		unchecked {  			if (DataBufferPtr == DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = c;  		}  	}  	pointer++;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (c == ']') {  	if (pointer + 2 >= length) {  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				']'  			};  			return;  		}  		unchecked {  			if (cbuff [pointer + 1] == ']') {  				pendingBufferLength = 2;  				pendingBuffer = new char[] {  					']''  					']'  				};  				return;  			}  			else {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = ']';  				DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  				pointer++;  			}  		}  	}  	else {  		unchecked {  			if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  				STATE = DATA_STATE;  				break;  			}  			else {  				if (DataBufferPtr + 3 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = ']';  				DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  				DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  				pointer += 2;  			}  		}  	}  }  else {  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = c;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (c == ']') {  	if (pointer + 2 >= length) {  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				']'  			};  			return;  		}  		unchecked {  			if (cbuff [pointer + 1] == ']') {  				pendingBufferLength = 2;  				pendingBuffer = new char[] {  					']''  					']'  				};  				return;  			}  			else {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = ']';  				DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  				pointer++;  			}  		}  	}  	else {  		unchecked {  			if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  				STATE = DATA_STATE;  				break;  			}  			else {  				if (DataBufferPtr + 3 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = ']';  				DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  				DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  				pointer += 2;  			}  		}  	}  }  else {  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = c;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (c == ']') {  	if (pointer + 2 >= length) {  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				']'  			};  			return;  		}  		unchecked {  			if (cbuff [pointer + 1] == ']') {  				pendingBufferLength = 2;  				pendingBuffer = new char[] {  					']''  					']'  				};  				return;  			}  			else {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = ']';  				DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  				pointer++;  			}  		}  	}  	else {  		unchecked {  			if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  				STATE = DATA_STATE;  				break;  			}  			else {  				if (DataBufferPtr + 3 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = ']';  				DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  				DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  				pointer += 2;  			}  		}  	}  }  else {  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = c;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (c == ']') {  	if (pointer + 2 >= length) {  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				']'  			};  			return;  		}  		unchecked {  			if (cbuff [pointer + 1] == ']') {  				pendingBufferLength = 2;  				pendingBuffer = new char[] {  					']''  					']'  				};  				return;  			}  			else {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = ']';  				DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  				pointer++;  			}  		}  	}  	else {  		unchecked {  			if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  				STATE = DATA_STATE;  				break;  			}  			else {  				if (DataBufferPtr + 3 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = ']';  				DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  				DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  				pointer += 2;  			}  		}  	}  }  else {  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = c;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (c == ']') {  	if (pointer + 2 >= length) {  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				']'  			};  			return;  		}  		unchecked {  			if (cbuff [pointer + 1] == ']') {  				pendingBufferLength = 2;  				pendingBuffer = new char[] {  					']''  					']'  				};  				return;  			}  			else {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = ']';  				DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  				pointer++;  			}  		}  	}  	else {  		unchecked {  			if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  				STATE = DATA_STATE;  				break;  			}  			else {  				if (DataBufferPtr + 3 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = ']';  				DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  				DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  				pointer += 2;  			}  		}  	}  }  else {  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = c;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (c == ']') {  	if (pointer + 2 >= length) {  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				']'  			};  			return;  		}  		unchecked {  			if (cbuff [pointer + 1] == ']') {  				pendingBufferLength = 2;  				pendingBuffer = new char[] {  					']''  					']'  				};  				return;  			}  			else {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = ']';  				DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  				pointer++;  			}  		}  	}  	else {  		unchecked {  			if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  				STATE = DATA_STATE;  				break;  			}  			else {  				if (DataBufferPtr + 3 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = ']';  				DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  				DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  				pointer += 2;  			}  		}  	}  }  else {  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = c;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (c == ']') {  	if (pointer + 2 >= length) {  		if (pointer + 1 >= length) {  			pendingBufferLength = 1;  			pendingBuffer = new char[] {  				']'  			};  			return;  		}  		unchecked {  			if (cbuff [pointer + 1] == ']') {  				pendingBufferLength = 2;  				pendingBuffer = new char[] {  					']''  					']'  				};  				return;  			}  			else {  				if (DataBufferPtr + 2 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = ']';  				DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  				pointer++;  			}  		}  	}  	else {  		unchecked {  			if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  				STATE = DATA_STATE;  				break;  			}  			else {  				if (DataBufferPtr + 3 >= DataBufferLength)  					DataBufferDoubleSize ();  				DataBuffer [DataBufferPtr++] = ']';  				DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  				DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  				pointer += 2;  			}  		}  	}  }  else {  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = c;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (pointer + 2 >= length) {  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			']'  		};  		return;  	}  	unchecked {  		if (cbuff [pointer + 1] == ']') {  			pendingBufferLength = 2;  			pendingBuffer = new char[] {  				']''  				']'  			};  			return;  		}  		else {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = ']';  			DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  			pointer++;  		}  	}  }  else {  	unchecked {  		if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  			STATE = DATA_STATE;  			break;  		}  		else {  			if (DataBufferPtr + 3 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = ']';  			DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  			DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  			pointer += 2;  		}  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (pointer + 2 >= length) {  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			']'  		};  		return;  	}  	unchecked {  		if (cbuff [pointer + 1] == ']') {  			pendingBufferLength = 2;  			pendingBuffer = new char[] {  				']''  				']'  			};  			return;  		}  		else {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = ']';  			DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  			pointer++;  		}  	}  }  else {  	unchecked {  		if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  			STATE = DATA_STATE;  			break;  		}  		else {  			if (DataBufferPtr + 3 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = ']';  			DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  			DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  			pointer += 2;  		}  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (pointer + 2 >= length) {  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			']'  		};  		return;  	}  	unchecked {  		if (cbuff [pointer + 1] == ']') {  			pendingBufferLength = 2;  			pendingBuffer = new char[] {  				']''  				']'  			};  			return;  		}  		else {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = ']';  			DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  			pointer++;  		}  	}  }  else {  	unchecked {  		if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  			STATE = DATA_STATE;  			break;  		}  		else {  			if (DataBufferPtr + 3 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = ']';  			DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  			DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  			pointer += 2;  		}  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (pointer + 2 >= length) {  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			']'  		};  		return;  	}  	unchecked {  		if (cbuff [pointer + 1] == ']') {  			pendingBufferLength = 2;  			pendingBuffer = new char[] {  				']''  				']'  			};  			return;  		}  		else {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = ']';  			DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  			pointer++;  		}  	}  }  else {  	unchecked {  		if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  			STATE = DATA_STATE;  			break;  		}  		else {  			if (DataBufferPtr + 3 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = ']';  			DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  			DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  			pointer += 2;  		}  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (pointer + 2 >= length) {  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			']'  		};  		return;  	}  	unchecked {  		if (cbuff [pointer + 1] == ']') {  			pendingBufferLength = 2;  			pendingBuffer = new char[] {  				']''  				']'  			};  			return;  		}  		else {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = ']';  			DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  			pointer++;  		}  	}  }  else {  	unchecked {  		if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  			STATE = DATA_STATE;  			break;  		}  		else {  			if (DataBufferPtr + 3 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = ']';  			DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  			DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  			pointer += 2;  		}  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (pointer + 2 >= length) {  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			']'  		};  		return;  	}  	unchecked {  		if (cbuff [pointer + 1] == ']') {  			pendingBufferLength = 2;  			pendingBuffer = new char[] {  				']''  				']'  			};  			return;  		}  		else {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = ']';  			DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  			pointer++;  		}  	}  }  else {  	unchecked {  		if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  			STATE = DATA_STATE;  			break;  		}  		else {  			if (DataBufferPtr + 3 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = ']';  			DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  			DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  			pointer += 2;  		}  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (pointer + 2 >= length) {  	if (pointer + 1 >= length) {  		pendingBufferLength = 1;  		pendingBuffer = new char[] {  			']'  		};  		return;  	}  	unchecked {  		if (cbuff [pointer + 1] == ']') {  			pendingBufferLength = 2;  			pendingBuffer = new char[] {  				']''  				']'  			};  			return;  		}  		else {  			if (DataBufferPtr + 2 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = ']';  			DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  			pointer++;  		}  	}  }  else {  	unchecked {  		if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  			STATE = DATA_STATE;  			break;  		}  		else {  			if (DataBufferPtr + 3 >= DataBufferLength)  				DataBufferDoubleSize ();  			DataBuffer [DataBufferPtr++] = ']';  			DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  			DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  			pointer += 2;  		}  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: unchecked {  	if (cbuff [pointer + 1] == ']') {  		pendingBufferLength = 2;  		pendingBuffer = new char[] {  			']''  			']'  		};  		return;  	}  	else {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = ']';  		DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  		pointer++;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: unchecked {  	if (cbuff [pointer + 1] == ']') {  		pendingBufferLength = 2;  		pendingBuffer = new char[] {  			']''  			']'  		};  		return;  	}  	else {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = ']';  		DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  		pointer++;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (cbuff [pointer + 1] == ']') {  	pendingBufferLength = 2;  	pendingBuffer = new char[] {  		']''  		']'  	};  	return;  }  else {  	if (DataBufferPtr + 2 >= DataBufferLength)  		DataBufferDoubleSize ();  	DataBuffer [DataBufferPtr++] = ']';  	DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  	pointer++;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (cbuff [pointer + 1] == ']') {  	pendingBufferLength = 2;  	pendingBuffer = new char[] {  		']''  		']'  	};  	return;  }  else {  	if (DataBufferPtr + 2 >= DataBufferLength)  		DataBufferDoubleSize ();  	DataBuffer [DataBufferPtr++] = ']';  	DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  	pointer++;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: pendingBufferLength = 2;  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (DataBufferPtr + 2 >= DataBufferLength)  	DataBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: unchecked {  	if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  		STATE = DATA_STATE;  		break;  	}  	else {  		if (DataBufferPtr + 3 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = ']';  		DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  		DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  		pointer += 2;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: unchecked {  	if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  		STATE = DATA_STATE;  		break;  	}  	else {  		if (DataBufferPtr + 3 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = ']';  		DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  		DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  		pointer += 2;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: unchecked {  	if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  		STATE = DATA_STATE;  		break;  	}  	else {  		if (DataBufferPtr + 3 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = ']';  		DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  		DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  		pointer += 2;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: unchecked {  	if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  		STATE = DATA_STATE;  		break;  	}  	else {  		if (DataBufferPtr + 3 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = ']';  		DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  		DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  		pointer += 2;  	}  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  	STATE = DATA_STATE;  	break;  }  else {  	if (DataBufferPtr + 3 >= DataBufferLength)  		DataBufferDoubleSize ();  	DataBuffer [DataBufferPtr++] = ']';  	DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  	DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  	pointer += 2;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  	STATE = DATA_STATE;  	break;  }  else {  	if (DataBufferPtr + 3 >= DataBufferLength)  		DataBufferDoubleSize ();  	DataBuffer [DataBufferPtr++] = ']';  	DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  	DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  	pointer += 2;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  	STATE = DATA_STATE;  	break;  }  else {  	if (DataBufferPtr + 3 >= DataBufferLength)  		DataBufferDoubleSize ();  	DataBuffer [DataBufferPtr++] = ']';  	DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  	DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  	pointer += 2;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (cbuff [pointer + 1] == ']' && cbuff [pointer + 2] == '>') {  	STATE = DATA_STATE;  	break;  }  else {  	if (DataBufferPtr + 3 >= DataBufferLength)  		DataBufferDoubleSize ();  	DataBuffer [DataBufferPtr++] = ']';  	DataBuffer [DataBufferPtr++] = cbuff [pointer + 1];  	DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  	pointer += 2;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: if (DataBufferPtr + 3 >= DataBufferLength)  	DataBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: DataBuffer [DataBufferPtr++] = cbuff [pointer + 2];  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following statement contains a magic number: pointer += 2;  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  case RCDATA_STATE:  case RAWTEXT_STATE:  case SCRIPT_DATA_STATE:  case PLAINTEXT_STATE:  	EmitEofToken ();  	break;  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	STATE = RCDATA_STATE;  	goto REPROCESS;  case TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = DATA_STATE;  	goto REPROCESS;  case END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = DATA_STATE;  	goto REPROCESS;  case RCDATA_LESS_THEN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RCDATA_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RCDATA_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 + TempBufferPtr >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case RAWTEXT_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case RAWTEXT_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 + TempBufferPtr >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPE_START_STATE:  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  	goto REPROCESS;  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	STATE = LAST_STATE;  	goto REPROCESS;  case MARKUP_DECLARATION_OPEN_STATE:  	STATE = BOGUS_COMMENT_STATE;  	goto REPROCESS;  case COMMENT_START_STATE:  case COMMENT_START_DASH_STATE:  case COMMENT_STATE:  case COMMENT_END_DASH_STATE:  case COMMENT_END_STATE:  case COMMENT_END_BANG_STATE:  	EmitCommentToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case DOCTYPE_STATE:  case BEFORE_DOCTYPE_NAME_STATE:  case DOCTYPE_NAME_STATE:  case AFTER_DOCTYPE_NAME_STATE:  	doctype.NewDoctype ();  	doctype.ForceQuirks = true;  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	doctype.ForceQuirks = true;  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case BOGUS_DOCTYPE_STATE:  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case CHARACTER_REFERENCE_IN_DATA_STATE:  case TAG_NAME_STATE:  case SCRIPT_DATA_ESCAPED_STATE:  case SCRIPT_DATA_ESCAPED_DASH_STATE:  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  case BEFORE_ATTRIBUTE_NAME_STATE:  case ATTRIBUTE_NAME_STATE:  case AFTER_ATTRIBUTE_NAME_STATE:  case BEFORE_ATTRIBUTE_VALUE_STATE:  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  case SELF_CLOSING_START_TAG_STATE:  case BOGUS_COMMENT_STATE:  case CDATA_SECTION_STATE:  	STATE = DATA_STATE;  	goto REPROCESS;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  case RCDATA_STATE:  case RAWTEXT_STATE:  case SCRIPT_DATA_STATE:  case PLAINTEXT_STATE:  	EmitEofToken ();  	break;  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	STATE = RCDATA_STATE;  	goto REPROCESS;  case TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = DATA_STATE;  	goto REPROCESS;  case END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = DATA_STATE;  	goto REPROCESS;  case RCDATA_LESS_THEN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RCDATA_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RCDATA_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 + TempBufferPtr >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case RAWTEXT_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case RAWTEXT_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 + TempBufferPtr >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPE_START_STATE:  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  	goto REPROCESS;  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	STATE = LAST_STATE;  	goto REPROCESS;  case MARKUP_DECLARATION_OPEN_STATE:  	STATE = BOGUS_COMMENT_STATE;  	goto REPROCESS;  case COMMENT_START_STATE:  case COMMENT_START_DASH_STATE:  case COMMENT_STATE:  case COMMENT_END_DASH_STATE:  case COMMENT_END_STATE:  case COMMENT_END_BANG_STATE:  	EmitCommentToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case DOCTYPE_STATE:  case BEFORE_DOCTYPE_NAME_STATE:  case DOCTYPE_NAME_STATE:  case AFTER_DOCTYPE_NAME_STATE:  	doctype.NewDoctype ();  	doctype.ForceQuirks = true;  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	doctype.ForceQuirks = true;  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case BOGUS_DOCTYPE_STATE:  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case CHARACTER_REFERENCE_IN_DATA_STATE:  case TAG_NAME_STATE:  case SCRIPT_DATA_ESCAPED_STATE:  case SCRIPT_DATA_ESCAPED_DASH_STATE:  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  case BEFORE_ATTRIBUTE_NAME_STATE:  case ATTRIBUTE_NAME_STATE:  case AFTER_ATTRIBUTE_NAME_STATE:  case BEFORE_ATTRIBUTE_VALUE_STATE:  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  case SELF_CLOSING_START_TAG_STATE:  case BOGUS_COMMENT_STATE:  case CDATA_SECTION_STATE:  	STATE = DATA_STATE;  	goto REPROCESS;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  case RCDATA_STATE:  case RAWTEXT_STATE:  case SCRIPT_DATA_STATE:  case PLAINTEXT_STATE:  	EmitEofToken ();  	break;  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	STATE = RCDATA_STATE;  	goto REPROCESS;  case TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = DATA_STATE;  	goto REPROCESS;  case END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = DATA_STATE;  	goto REPROCESS;  case RCDATA_LESS_THEN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RCDATA_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RCDATA_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 + TempBufferPtr >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case RAWTEXT_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case RAWTEXT_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 + TempBufferPtr >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPE_START_STATE:  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  	goto REPROCESS;  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	STATE = LAST_STATE;  	goto REPROCESS;  case MARKUP_DECLARATION_OPEN_STATE:  	STATE = BOGUS_COMMENT_STATE;  	goto REPROCESS;  case COMMENT_START_STATE:  case COMMENT_START_DASH_STATE:  case COMMENT_STATE:  case COMMENT_END_DASH_STATE:  case COMMENT_END_STATE:  case COMMENT_END_BANG_STATE:  	EmitCommentToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case DOCTYPE_STATE:  case BEFORE_DOCTYPE_NAME_STATE:  case DOCTYPE_NAME_STATE:  case AFTER_DOCTYPE_NAME_STATE:  	doctype.NewDoctype ();  	doctype.ForceQuirks = true;  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	doctype.ForceQuirks = true;  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case BOGUS_DOCTYPE_STATE:  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case CHARACTER_REFERENCE_IN_DATA_STATE:  case TAG_NAME_STATE:  case SCRIPT_DATA_ESCAPED_STATE:  case SCRIPT_DATA_ESCAPED_DASH_STATE:  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  case BEFORE_ATTRIBUTE_NAME_STATE:  case ATTRIBUTE_NAME_STATE:  case AFTER_ATTRIBUTE_NAME_STATE:  case BEFORE_ATTRIBUTE_VALUE_STATE:  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  case SELF_CLOSING_START_TAG_STATE:  case BOGUS_COMMENT_STATE:  case CDATA_SECTION_STATE:  	STATE = DATA_STATE;  	goto REPROCESS;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  case RCDATA_STATE:  case RAWTEXT_STATE:  case SCRIPT_DATA_STATE:  case PLAINTEXT_STATE:  	EmitEofToken ();  	break;  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	STATE = RCDATA_STATE;  	goto REPROCESS;  case TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = DATA_STATE;  	goto REPROCESS;  case END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = DATA_STATE;  	goto REPROCESS;  case RCDATA_LESS_THEN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RCDATA_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RCDATA_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 + TempBufferPtr >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case RAWTEXT_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case RAWTEXT_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 + TempBufferPtr >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPE_START_STATE:  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  	goto REPROCESS;  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	STATE = LAST_STATE;  	goto REPROCESS;  case MARKUP_DECLARATION_OPEN_STATE:  	STATE = BOGUS_COMMENT_STATE;  	goto REPROCESS;  case COMMENT_START_STATE:  case COMMENT_START_DASH_STATE:  case COMMENT_STATE:  case COMMENT_END_DASH_STATE:  case COMMENT_END_STATE:  case COMMENT_END_BANG_STATE:  	EmitCommentToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case DOCTYPE_STATE:  case BEFORE_DOCTYPE_NAME_STATE:  case DOCTYPE_NAME_STATE:  case AFTER_DOCTYPE_NAME_STATE:  	doctype.NewDoctype ();  	doctype.ForceQuirks = true;  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	doctype.ForceQuirks = true;  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case BOGUS_DOCTYPE_STATE:  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case CHARACTER_REFERENCE_IN_DATA_STATE:  case TAG_NAME_STATE:  case SCRIPT_DATA_ESCAPED_STATE:  case SCRIPT_DATA_ESCAPED_DASH_STATE:  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  case BEFORE_ATTRIBUTE_NAME_STATE:  case ATTRIBUTE_NAME_STATE:  case AFTER_ATTRIBUTE_NAME_STATE:  case BEFORE_ATTRIBUTE_VALUE_STATE:  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  case SELF_CLOSING_START_TAG_STATE:  case BOGUS_COMMENT_STATE:  case CDATA_SECTION_STATE:  	STATE = DATA_STATE;  	goto REPROCESS;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  case RCDATA_STATE:  case RAWTEXT_STATE:  case SCRIPT_DATA_STATE:  case PLAINTEXT_STATE:  	EmitEofToken ();  	break;  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	STATE = RCDATA_STATE;  	goto REPROCESS;  case TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = DATA_STATE;  	goto REPROCESS;  case END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = DATA_STATE;  	goto REPROCESS;  case RCDATA_LESS_THEN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RCDATA_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RCDATA_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 + TempBufferPtr >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case RAWTEXT_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case RAWTEXT_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 + TempBufferPtr >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPE_START_STATE:  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  	goto REPROCESS;  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	STATE = LAST_STATE;  	goto REPROCESS;  case MARKUP_DECLARATION_OPEN_STATE:  	STATE = BOGUS_COMMENT_STATE;  	goto REPROCESS;  case COMMENT_START_STATE:  case COMMENT_START_DASH_STATE:  case COMMENT_STATE:  case COMMENT_END_DASH_STATE:  case COMMENT_END_STATE:  case COMMENT_END_BANG_STATE:  	EmitCommentToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case DOCTYPE_STATE:  case BEFORE_DOCTYPE_NAME_STATE:  case DOCTYPE_NAME_STATE:  case AFTER_DOCTYPE_NAME_STATE:  	doctype.NewDoctype ();  	doctype.ForceQuirks = true;  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	doctype.ForceQuirks = true;  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case BOGUS_DOCTYPE_STATE:  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case CHARACTER_REFERENCE_IN_DATA_STATE:  case TAG_NAME_STATE:  case SCRIPT_DATA_ESCAPED_STATE:  case SCRIPT_DATA_ESCAPED_DASH_STATE:  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  case BEFORE_ATTRIBUTE_NAME_STATE:  case ATTRIBUTE_NAME_STATE:  case AFTER_ATTRIBUTE_NAME_STATE:  case BEFORE_ATTRIBUTE_VALUE_STATE:  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  case SELF_CLOSING_START_TAG_STATE:  case BOGUS_COMMENT_STATE:  case CDATA_SECTION_STATE:  	STATE = DATA_STATE;  	goto REPROCESS;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  case RCDATA_STATE:  case RAWTEXT_STATE:  case SCRIPT_DATA_STATE:  case PLAINTEXT_STATE:  	EmitEofToken ();  	break;  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	STATE = RCDATA_STATE;  	goto REPROCESS;  case TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = DATA_STATE;  	goto REPROCESS;  case END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = DATA_STATE;  	goto REPROCESS;  case RCDATA_LESS_THEN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RCDATA_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RCDATA_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 + TempBufferPtr >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case RAWTEXT_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case RAWTEXT_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 + TempBufferPtr >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPE_START_STATE:  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  	goto REPROCESS;  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	STATE = LAST_STATE;  	goto REPROCESS;  case MARKUP_DECLARATION_OPEN_STATE:  	STATE = BOGUS_COMMENT_STATE;  	goto REPROCESS;  case COMMENT_START_STATE:  case COMMENT_START_DASH_STATE:  case COMMENT_STATE:  case COMMENT_END_DASH_STATE:  case COMMENT_END_STATE:  case COMMENT_END_BANG_STATE:  	EmitCommentToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case DOCTYPE_STATE:  case BEFORE_DOCTYPE_NAME_STATE:  case DOCTYPE_NAME_STATE:  case AFTER_DOCTYPE_NAME_STATE:  	doctype.NewDoctype ();  	doctype.ForceQuirks = true;  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	doctype.ForceQuirks = true;  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case BOGUS_DOCTYPE_STATE:  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case CHARACTER_REFERENCE_IN_DATA_STATE:  case TAG_NAME_STATE:  case SCRIPT_DATA_ESCAPED_STATE:  case SCRIPT_DATA_ESCAPED_DASH_STATE:  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  case BEFORE_ATTRIBUTE_NAME_STATE:  case ATTRIBUTE_NAME_STATE:  case AFTER_ATTRIBUTE_NAME_STATE:  case BEFORE_ATTRIBUTE_VALUE_STATE:  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  case SELF_CLOSING_START_TAG_STATE:  case BOGUS_COMMENT_STATE:  case CDATA_SECTION_STATE:  	STATE = DATA_STATE;  	goto REPROCESS;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  case RCDATA_STATE:  case RAWTEXT_STATE:  case SCRIPT_DATA_STATE:  case PLAINTEXT_STATE:  	EmitEofToken ();  	break;  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	STATE = RCDATA_STATE;  	goto REPROCESS;  case TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = DATA_STATE;  	goto REPROCESS;  case END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = DATA_STATE;  	goto REPROCESS;  case RCDATA_LESS_THEN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RCDATA_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RCDATA_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 + TempBufferPtr >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case RAWTEXT_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case RAWTEXT_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 + TempBufferPtr >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPE_START_STATE:  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  	goto REPROCESS;  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	STATE = LAST_STATE;  	goto REPROCESS;  case MARKUP_DECLARATION_OPEN_STATE:  	STATE = BOGUS_COMMENT_STATE;  	goto REPROCESS;  case COMMENT_START_STATE:  case COMMENT_START_DASH_STATE:  case COMMENT_STATE:  case COMMENT_END_DASH_STATE:  case COMMENT_END_STATE:  case COMMENT_END_BANG_STATE:  	EmitCommentToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case DOCTYPE_STATE:  case BEFORE_DOCTYPE_NAME_STATE:  case DOCTYPE_NAME_STATE:  case AFTER_DOCTYPE_NAME_STATE:  	doctype.NewDoctype ();  	doctype.ForceQuirks = true;  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	doctype.ForceQuirks = true;  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case BOGUS_DOCTYPE_STATE:  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case CHARACTER_REFERENCE_IN_DATA_STATE:  case TAG_NAME_STATE:  case SCRIPT_DATA_ESCAPED_STATE:  case SCRIPT_DATA_ESCAPED_DASH_STATE:  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  case BEFORE_ATTRIBUTE_NAME_STATE:  case ATTRIBUTE_NAME_STATE:  case AFTER_ATTRIBUTE_NAME_STATE:  case BEFORE_ATTRIBUTE_VALUE_STATE:  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  case SELF_CLOSING_START_TAG_STATE:  case BOGUS_COMMENT_STATE:  case CDATA_SECTION_STATE:  	STATE = DATA_STATE;  	goto REPROCESS;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  case RCDATA_STATE:  case RAWTEXT_STATE:  case SCRIPT_DATA_STATE:  case PLAINTEXT_STATE:  	EmitEofToken ();  	break;  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	STATE = RCDATA_STATE;  	goto REPROCESS;  case TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = DATA_STATE;  	goto REPROCESS;  case END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = DATA_STATE;  	goto REPROCESS;  case RCDATA_LESS_THEN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RCDATA_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RCDATA_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 + TempBufferPtr >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case RAWTEXT_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case RAWTEXT_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 + TempBufferPtr >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPE_START_STATE:  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  	goto REPROCESS;  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	STATE = LAST_STATE;  	goto REPROCESS;  case MARKUP_DECLARATION_OPEN_STATE:  	STATE = BOGUS_COMMENT_STATE;  	goto REPROCESS;  case COMMENT_START_STATE:  case COMMENT_START_DASH_STATE:  case COMMENT_STATE:  case COMMENT_END_DASH_STATE:  case COMMENT_END_STATE:  case COMMENT_END_BANG_STATE:  	EmitCommentToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case DOCTYPE_STATE:  case BEFORE_DOCTYPE_NAME_STATE:  case DOCTYPE_NAME_STATE:  case AFTER_DOCTYPE_NAME_STATE:  	doctype.NewDoctype ();  	doctype.ForceQuirks = true;  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	doctype.ForceQuirks = true;  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case BOGUS_DOCTYPE_STATE:  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case CHARACTER_REFERENCE_IN_DATA_STATE:  case TAG_NAME_STATE:  case SCRIPT_DATA_ESCAPED_STATE:  case SCRIPT_DATA_ESCAPED_DASH_STATE:  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  case BEFORE_ATTRIBUTE_NAME_STATE:  case ATTRIBUTE_NAME_STATE:  case AFTER_ATTRIBUTE_NAME_STATE:  case BEFORE_ATTRIBUTE_VALUE_STATE:  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  case SELF_CLOSING_START_TAG_STATE:  case BOGUS_COMMENT_STATE:  case CDATA_SECTION_STATE:  	STATE = DATA_STATE;  	goto REPROCESS;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The following statement contains a magic number: switch (STATE) {  case DATA_STATE:  case RCDATA_STATE:  case RAWTEXT_STATE:  case SCRIPT_DATA_STATE:  case PLAINTEXT_STATE:  	EmitEofToken ();  	break;  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	STATE = RCDATA_STATE;  	goto REPROCESS;  case TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = DATA_STATE;  	goto REPROCESS;  case END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = DATA_STATE;  	goto REPROCESS;  case RCDATA_LESS_THEN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RCDATA_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RCDATA_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 + TempBufferPtr >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case RAWTEXT_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case RAWTEXT_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 + TempBufferPtr >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPE_START_STATE:  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  	goto REPROCESS;  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	STATE = LAST_STATE;  	goto REPROCESS;  case MARKUP_DECLARATION_OPEN_STATE:  	STATE = BOGUS_COMMENT_STATE;  	goto REPROCESS;  case COMMENT_START_STATE:  case COMMENT_START_DASH_STATE:  case COMMENT_STATE:  case COMMENT_END_DASH_STATE:  case COMMENT_END_STATE:  case COMMENT_END_BANG_STATE:  	EmitCommentToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case DOCTYPE_STATE:  case BEFORE_DOCTYPE_NAME_STATE:  case DOCTYPE_NAME_STATE:  case AFTER_DOCTYPE_NAME_STATE:  	doctype.NewDoctype ();  	doctype.ForceQuirks = true;  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	doctype.ForceQuirks = true;  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case BOGUS_DOCTYPE_STATE:  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case CHARACTER_REFERENCE_IN_DATA_STATE:  case TAG_NAME_STATE:  case SCRIPT_DATA_ESCAPED_STATE:  case SCRIPT_DATA_ESCAPED_DASH_STATE:  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  case BEFORE_ATTRIBUTE_NAME_STATE:  case ATTRIBUTE_NAME_STATE:  case AFTER_ATTRIBUTE_NAME_STATE:  case BEFORE_ATTRIBUTE_VALUE_STATE:  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  case SELF_CLOSING_START_TAG_STATE:  case BOGUS_COMMENT_STATE:  case CDATA_SECTION_STATE:  	STATE = DATA_STATE;  	goto REPROCESS;  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The following statement contains a magic number: unchecked {  	if (DataBufferPtr + 2 >= DataBufferLength)  		DataBufferDoubleSize ();  	DataBuffer [DataBufferPtr++] = '<';  	DataBuffer [DataBufferPtr++] = '/';  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The following statement contains a magic number: if (DataBufferPtr + 2 >= DataBufferLength)  	DataBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The following statement contains a magic number: unchecked {  	if (DataBufferPtr + 2 >= DataBufferLength)  		DataBufferDoubleSize ();  	DataBuffer [DataBufferPtr++] = '<';  	DataBuffer [DataBufferPtr++] = '/';  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The following statement contains a magic number: if (DataBufferPtr + 2 >= DataBufferLength)  	DataBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The following statement contains a magic number: unchecked {  	if (DataBufferPtr + 2 + TempBufferPtr >= DataBufferLength)  		DataBufferDoubleSize ();  	DataBuffer [DataBufferPtr++] = '<';  	DataBuffer [DataBufferPtr++] = '/';  	EmitTmpBuffer ();  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The following statement contains a magic number: if (DataBufferPtr + 2 + TempBufferPtr >= DataBufferLength)  	DataBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The following statement contains a magic number: unchecked {  	if (DataBufferPtr + 2 >= DataBufferLength)  		DataBufferDoubleSize ();  	DataBuffer [DataBufferPtr++] = '<';  	DataBuffer [DataBufferPtr++] = '/';  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The following statement contains a magic number: if (DataBufferPtr + 2 >= DataBufferLength)  	DataBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The following statement contains a magic number: unchecked {  	if (DataBufferPtr + 2 + TempBufferPtr >= DataBufferLength)  		DataBufferDoubleSize ();  	DataBuffer [DataBufferPtr++] = '<';  	DataBuffer [DataBufferPtr++] = '/';  	EmitTmpBuffer ();  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The following statement contains a magic number: if (DataBufferPtr + 2 + TempBufferPtr >= DataBufferLength)  	DataBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The following statement contains a magic number: unchecked {  	if (DataBufferPtr + 2 >= DataBufferLength)  		DataBufferDoubleSize ();  	DataBuffer [DataBufferPtr++] = '<';  	DataBuffer [DataBufferPtr++] = '/';  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The following statement contains a magic number: if (DataBufferPtr + 2 >= DataBufferLength)  	DataBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The following statement contains a magic number: unchecked {  	if (DataBufferPtr + 2 >= DataBufferLength)  		DataBufferDoubleSize ();  	DataBuffer [DataBufferPtr++] = '<';  	DataBuffer [DataBufferPtr++] = '/';  	EmitTmpBuffer ();  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The following statement contains a magic number: if (DataBufferPtr + 2 >= DataBufferLength)  	DataBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The following statement contains a magic number: unchecked {  	if (DataBufferPtr + 2 >= DataBufferLength)  		DataBufferDoubleSize ();  	DataBuffer [DataBufferPtr++] = '<';  	DataBuffer [DataBufferPtr++] = '/';  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The following statement contains a magic number: if (DataBufferPtr + 2 >= DataBufferLength)  	DataBufferDoubleSize ();  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The following statement contains a magic number: unchecked {  	if (DataBufferPtr + 2 >= DataBufferLength)  		DataBufferDoubleSize ();  	DataBuffer [DataBufferPtr++] = '<';  	DataBuffer [DataBufferPtr++] = '/';  	EmitTmpBuffer ();  }  
Magic Number,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The following statement contains a magic number: if (DataBufferPtr + 2 >= DataBufferLength)  	DataBufferDoubleSize ();  
Magic Number,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,PushFormattingElement,The following statement contains a magic number: for (Entry<T> node = F.Last; node != null && !node.IsMark; node = node.Prev) {  	if (node.Element.TagName != element.TagName || node.Element.Namespace != element.Namespace || node.Element.Token.AttrCount != element.Token.AttrCount)  		continue;  	bool sameAttributes = true;  	if (node.Element.Token.Attributes != element.Token.Attributes)  		for (AttributeEntry e1 = node.Element.Token.Attributes; e1 != null; e1 = e1.NextAttribute) {  			sameAttributes = false;  			for (AttributeEntry e2 = element.Token.Attributes; e2 != null; e2 = e2.NextAttribute)  				if (e1.Name == e2.Name && e1.Value == e2.Value && e1.Namespace == e2.Namespace) {  					sameAttributes = true;  					break;  				}  			if (!sameAttributes)  				break;  		}  	if (sameAttributes) {  		erliest = node.Element;  		count++;  	}  	if (count == 3) {  		F.Remove (erliest.Entry);  		break;  	}  }  
Magic Number,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,PushFormattingElement,The following statement contains a magic number: if (count == 3) {  	F.Remove (erliest.Entry);  	break;  }  
Magic Number,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,EndTagToken,The following statement contains a magic number: switch (mode) {  case INITIAL:  	DocMode = DocumentQuirkFlag.QuirksMode;  	INSERTION_MODE = BEFORE_HTML;  	mode = REPROCESS;  	goto EVAL;  case BEFORE_HTML:  	switch (tagName) {  	case "head":  	case "body":  	case "html":  	case "br": {  		T element = CreateElement ("html"' null' NS_HTML);  		AppendElementToDocument (element);  		O.Push (new Element<T> (element' "html"' NS_HTML));  		INSERTION_MODE = BEFORE_HEAD;  		mode = REPROCESS;  		goto EVAL;  	}  	default:  		return 0;  	//ignore token  	}  case BEFORE_HEAD:  	switch (tagName) {  	case "head":  	case "body":  	case "html":  	case "br": {  		ElementToken fakeToken = new ElementToken ("head");  		StartTagToken (ref fakeToken' mode);  		mode = REPROCESS;  		goto EVAL;  	}  	default:  		return 0;  	//ignore token  	}  case IN_HEAD:  	switch (tagName) {  	case "head":  		O.Pop ();  		INSERTION_MODE = AFTER_HEAD;  		return 1;  	case "body":  	case "html":  	case "br":  		EndTagToken ("head"' mode);  		mode = REPROCESS;  		goto EVAL;  	default:  		return 0;  	//ignore token  	}  case IN_HEAD_NOSCRIPT:  	switch (tagName) {  	case "noscript":  		O.Pop ();  		INSERTION_MODE = IN_HEAD;  		return 1;  	case "br":  		EndTagToken ("noscript"' mode);  		mode = REPROCESS;  		goto EVAL;  	default:  		return 0;  	//ignore token  	}  case AFTER_HEAD:  	switch (tagName) {  	case "body":  	case "html":  	case "br": {  		ElementToken fakeToken = new ElementToken ("body");  		StartTagToken (ref fakeToken' mode);  		FRAMESETOK = true;  		mode = REPROCESS;  		goto EVAL;  	}  	default:  		return 0;  	//ignore token  	}  case IN_BODY:  	switch (tagName) {  	case "body":  		if (!ElementInScope ("body"))  			return 0;  		//ignore token  		INSERTION_MODE = AFTER_BODY;  		return 1;  	case "html":  		if (EndTagToken ("body"' mode) != 0) {  			mode = REPROCESS;  			goto EVAL;  		}  		return 1;  	case "address":  	case "article":  	case "aside":  	case "blockquote":  	case "button":  	case "center":  	case "details":  	case "dir":  	case "div":  	case "dl":  	case "fieldset":  	case "figcaption":  	case "figure":  	case "footer":  	case "header":  	case "hgroup":  	case "listing":  	case "menu":  	case "nav":  	case "ol":  	case "pre":  	case "section":  	case "summary":  	case "ul":  		if (!ElementInScope (tagName))  			return 0;  		//ignore token  		O.GenerateImpliedEndTags (null);  		O.ClearToTag (tagName);  		return 1;  	case "form":  		{  			Element<T> node = formPointer;  			formPointer = null;  			if (node == null || ElementInScope (node.TagName))  				return 0;  			//ignore token  			O.GenerateImpliedEndTags (null);  			O.Remove (node);  		}  		return 1;  	case "p":  		if (!ElementInButtonScope (tagName)) {  			ElementToken fakeToken = new ElementToken (tagName);  			StartTagToken (ref fakeToken' mode);  			mode = REPROCESS;  			goto EVAL;  		}  		else {  			O.GenerateImpliedEndTags (tagName);  			O.ClearToTag (tagName);  		}  		return 1;  	case "li":  		if (!ElementInListItemScope (tagName))  			return 0;  		//ignore token  		O.GenerateImpliedEndTags (tagName);  		O.ClearToTag (tagName);  		return 1;  	case "dd":  	case "dt":  		if (!ElementInScope (tagName))  			return 0;  		//ignore token  		O.GenerateImpliedEndTags (tagName);  		O.ClearToTag (tagName);  		return 1;  	case "h1":  	case "h2":  	case "h3":  	case "h4":  	case "h5":  	case "h6":  		if (!HeadingInScope ())  			return 0;  		//ignore token  		O.GenerateImpliedEndTags (null);  		O.ClearToHeading ();  		return 1;  	case "a":  	case "b":  	case "big":  	case "code":  	case "em":  	case "font":  	case "i":  	case "nobr":  	case "s":  	case "small":  	case "strike":  	case "strong":  	case "tt":  	case "u":  		//Adoption agency  		for (int outer_loop_counter = 0; outer_loop_counter < 8; outer_loop_counter++) {  			Element<T> formattingElement = null;  			for (Entry<T> entry = F.Last; entry != null && !entry.IsMark; entry = entry.Prev)  				if (entry.Element.TagName == tagName) {  					formattingElement = entry.Element;  					break;  				}  			if (formattingElement == null)  				goto default;  			if (!formattingElement.InStack) {  				F.Remove (formattingElement.Entry);  				return 1;  			}  			if (!ElementInScope (tagName))  				return 0;  			Element<T> furthestBlock;  			for (furthestBlock = formattingElement.Next; furthestBlock != null; furthestBlock = furthestBlock.Next)  				if (IsSpecialElement (furthestBlock))  					break;  			if (furthestBlock == null) {  				O.RemoveTo (formattingElement' true);  				F.Remove (formattingElement.Entry);  				return 1;  			}  			Element<T> commonAncestor = formattingElement.Prev;  			Entry<T> bookmark = formattingElement.Entry.Prev;  			Element<T> node = furthestBlock' lastNode = furthestBlock;  			for (int inner_loop_counter = 0; inner_loop_counter < 3; inner_loop_counter++) {  				node = node.Prev;  				if (!node.InList) {  					Element<T> tmp = node;  					node = node.Next;  					O.Remove (tmp);  					continue;  				}  				if (node == formattingElement)  					break;  				T instance = CreateElement (node.Token.TagName' node.Token.Attributes' node.Namespace);  				Element<T> newElement = new Element<T> (instance' node.Token' node.Namespace);  				F.Replace (node.Entry' newElement);  				O.Replace (node' newElement);  				node = newElement;  				if (lastNode == furthestBlock)  					bookmark = node.Entry.Next;  				RemoveFromParent (lastNode.Value);  				AppendChild (node.Value' lastNode.Value);  				lastNode = node;  			}  			RemoveFromParent (lastNode.Value);  			switch (commonAncestor.TagName) {  			case "table":  			case "tbody":  			case "tfoot":  			case "thead":  			case "tr":  				Element<T> table = O.GetLastTable ();  				if (table == null) {  					AppendChild (O.Oldest.Value' lastNode.Value);  				}  				else {  					if (GetElementParent (lastNode.Value) != null)  						InsertBefore (lastNode.Value' table.Value);  					else  						AppendChild (table.Prev.Value' lastNode.Value);  				}  				break;  			default:  				AppendChild (commonAncestor.Value' lastNode.Value);  				break;  			}  			T instance2 = CreateElement (formattingElement.Token.TagName' formattingElement.Token.Attributes' formattingElement.Namespace);  			Element<T> element = new Element<T> (instance2' formattingElement.Token' formattingElement.Namespace);  			MoveChilds (furthestBlock.Value' element.Value);  			AppendChild (furthestBlock.Value' element.Value);  			F.Remove (formattingElement.Entry);  			F.AddBefore (bookmark' element);  			O.Remove (formattingElement);  			O.AddAfter (furthestBlock' element);  		}  		return 1;  	case "applet":  	case "marquee":  	case "object":  		if (!ElementInScope (tagName))  			return 0;  		//ignore token  		O.GenerateImpliedEndTags (null);  		O.ClearToTag (tagName);  		F.ClearToMark ();  		return 1;  	case "br":  		{  			ElementToken fakeToken = new ElementToken ("br");  			StartTagToken (ref fakeToken' mode);  		}  		return 0;  	default:  		for (Element<T> node = O.Current; node != null; node = node.Prev) {  			if (node.TagName == tagName) {  				O.GenerateImpliedEndTags (tagName);  				O.RemoveTo (node' true);  				return 1;  			}  			if (IsSpecialElement (node))  				return 0;  			//ignore token  		}  		return 1;  	}  case TEXT:  	switch (tagName) {  	case "script":  		//Provide stable state  		T script = O.Pop ().Value;  		INSERTION_MODE = ORIGINAL_INSERTION_MODE;  		PrepareScript (script);  		return 1;  	default:  		O.Pop ();  		INSERTION_MODE = ORIGINAL_INSERTION_MODE;  		return 1;  	}  case IN_TABLE:  	switch (tagName) {  	case "table":  		if (IS_FRAGMENT && !ElementInTableScope (tagName))  			return 0;  		//ignore token  		O.ClearToElement ("table"' NS_HTML);  		ResetInsertionMode ();  		return 1;  	case "body":  	case "caption":  	case "col":  	case "colgroup":  	case "html":  	case "tbody":  	case "td":  	case "tfoot":  	case "th":  	case "thead":  	case "tr":  		return 0;  	//ignore token  	default:  		FOSTER_PARENTED = true;  		EndTagToken (tagName' IN_BODY);  		FOSTER_PARENTED = false;  		return 1;  	}  case IN_TABLE_TEXT: {  	if (ContainsNonWhiteSpace (ref pendingTokenList' 0' pendingTokenListPtr)) {  		FOSTER_PARENTED = true;  		CharToken (ref pendingTokenList' 0' pendingTokenListPtr' IN_BODY);  		FOSTER_PARENTED = false;  	}  	else {  		InsertCharacters (new string (pendingTokenList' 0' pendingTokenListPtr));  	}  	INSERTION_MODE = ORIGINAL_INSERTION_MODE;  	mode = REPROCESS;  	goto EVAL;  }  case IN_CAPTION:  	switch (tagName) {  	case "caption":  		if (!ElementInTableScope (tagName))  			return 0;  		//ignore token  		O.GenerateImpliedEndTags (null);  		O.ClearToElement ("caption"' NS_HTML);  		F.ClearToMark ();  		INSERTION_MODE = IN_TABLE;  		return 1;  	case "table":  		if (EndTagToken ("caption"' mode) != 0) {  			mode = REPROCESS;  			goto EVAL;  		}  		return 1;  	case "body":  	case "col":  	case "colgroup":  	case "html":  	case "tbody":  	case "td":  	case "tfoot":  	case "th":  	case "thead":  	case "tr":  		return 0;  	//ignore token  	default:  		mode = IN_BODY;  		goto EVAL;  	}  case IN_COLUMN_GROUP:  	switch (tagName) {  	case "colgroup":  		if (IS_FRAGMENT && O.Current == O.Oldest)  			return 0;  		//ignore token  		O.Pop ();  		INSERTION_MODE = IN_TABLE;  		return 1;  	case "col":  		return 0;  	//ignore token  	default:  		if (EndTagToken ("colgroup"' mode) != 0) {  			mode = REPROCESS;  			goto EVAL;  		}  		return 1;  	}  case IN_TABLE_BODY:  	switch (tagName) {  	case "tbody":  	case "tfoot":  	case "thead":  		if (!ElementInTableScope (tagName))  			return 0;  		//ignore token  		ClearStackBackToTableBodyContext ();  		O.Pop ();  		INSERTION_MODE = IN_TABLE;  		return 1;  	case "table":  		if (IS_FRAGMENT) {  			if (!ElementInTableScope ("tbody") && !ElementInTableScope ("thead") && !ElementInTableScope ("tfoot"))  				return 0;  			//ignore token  		}  		ClearStackBackToTableBodyContext ();  		EndTagToken (O.Current.TagName' mode);  		mode = REPROCESS;  		goto EVAL;  	case "body":  	case "caption":  	case "col":  	case "colgroup":  	case "html":  	case "td":  	case "th":  	case "tr":  		return 0;  	//ignore token  	default:  		mode = IN_TABLE;  		goto EVAL;  	}  case IN_ROW:  	switch (tagName) {  	case "tr":  		if (!ElementInTableScope (tagName))  			return 0;  		//ignore token  		ClearStackBackToTableRowContext ();  		O.Pop ();  		INSERTION_MODE = IN_TABLE_BODY;  		return 1;  	case "table":  		if (EndTagToken ("tr"' mode) != 0) {  			mode = REPROCESS;  			goto EVAL;  		}  		return 1;  	case "tbody":  	case "tfoot":  	case "thead":  		if (!ElementInTableScope (tagName))  			return 0;  		//ignore token  		EndTagToken ("tr"' mode);  		mode = REPROCESS;  		goto EVAL;  	case "body":  	case "caption":  	case "col":  	case "colgroup":  	case "html":  	case "td":  	case "th":  		return 0;  	//ignore token  	default:  		mode = IN_TABLE;  		goto EVAL;  	}  case IN_CELL:  	switch (tagName) {  	case "td":  	case "th":  		if (!ElementInTableScope (tagName))  			return 0;  		//return;  		O.GenerateImpliedEndTags (null);  		O.ClearToTag (tagName);  		F.ClearToMark ();  		INSERTION_MODE = IN_ROW;  		return 1;  	case "body":  	case "caption":  	case "col":  	case "colgroup":  	case "html":  		return 0;  	//ignore token  	case "table":  	case "tbody":  	case "tfoot":  	case "thead":  	case "tr":  		if (!ElementInTableScope (tagName))  			return 0;  		//ignore token  		CloseTheCell (mode);  		mode = REPROCESS;  		goto EVAL;  	default:  		mode = IN_BODY;  		goto EVAL;  	}  case IN_SELECT:  	switch (tagName) {  	case "optgroup":  		{  			Element<T> element = O.Current;  			if (element.TagName == "optgroup" && element.Prev.TagName == "optgroup")  				EndTagToken ("option"' mode);  			if (O.Current.TagName == "option")  				O.Pop ();  			else  				return 0;  			//ignore token  		}  		return 1;  	case "option":  		if (O.Current.TagName == "option")  			O.Pop ();  		else  			return 0;  		//ignore token  		return 1;  	case "select":  		if (IS_FRAGMENT && !ElementInSelectScope (tagName))  			return 0;  		//ignore token  		O.ClearToElement ("select"' NS_HTML);  		ResetInsertionMode ();  		return 1;  	default:  		return 0;  	//ignore token  	}  case IN_SELECT_IN_TABLE:  	switch (tagName) {  	case "caption":  	case "table":  	case "tbody":  	case "tfoot":  	case "thead":  	case "tr":  	case "td":  	case "th":  		if (ElementInTableScope (tagName)) {  			EndTagToken ("select"' mode);  			mode = REPROCESS;  			goto EVAL;  		}  		else  			return 0;  	//ignore token  	default:  		mode = IN_SELECT;  		goto EVAL;  	}  case AFTER_BODY:  	if (tagName == "html") {  		if (IS_FRAGMENT)  			return 0;  		//ignore token  		else {  			INSERTION_MODE = AFTER_AFTER_BODY;  			return 1;  		}  	}  	else {  		INSERTION_MODE = IN_BODY;  		mode = REPROCESS;  		goto EVAL;  	}  case IN_FRAMESET:  	if (tagName == "frameset") {  		if (IS_FRAGMENT && O.Current == O.Oldest)  			return 0;  		//ignore token  		O.Pop ();  		if (!IS_FRAGMENT && O.Current.TagName != "frameset")  			INSERTION_MODE = AFTER_FRAMESET;  		return 1;  	}  	else  		return 0;  //ignore token  case AFTER_FRAMESET:  	if (tagName == "html") {  		INSERTION_MODE = AFTER_AFTER_FRAMESET;  		return 1;  	}  	else  		return 0;  //ignore token  case AFTER_AFTER_BODY:  	INSERTION_MODE = IN_BODY;  	mode = REPROCESS;  	goto EVAL;  case AFTER_AFTER_FRAMESET:  	return 0;  //ignore token  case IN_FOREIGN_CONTENT:  	if (tagName == "script" && O.Current.TagName == "script" && O.Current.Namespace == NS_SVG) {  		O.Pop ();  		return 1;  	}  	else {  		Element<T> node = O.Current;  		while (true) {  			if (node.TagName.ToLower () == tagName)  				return EndTagToken (tagName' INSERTION_MODE);  			node = node.Prev;  			if (node.Namespace != NS_HTML)  				continue;  			return EndTagToken (tagName' INSERTION_MODE);  		}  	}  }  
Magic Number,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,EndTagToken,The following statement contains a magic number: switch (mode) {  case INITIAL:  	DocMode = DocumentQuirkFlag.QuirksMode;  	INSERTION_MODE = BEFORE_HTML;  	mode = REPROCESS;  	goto EVAL;  case BEFORE_HTML:  	switch (tagName) {  	case "head":  	case "body":  	case "html":  	case "br": {  		T element = CreateElement ("html"' null' NS_HTML);  		AppendElementToDocument (element);  		O.Push (new Element<T> (element' "html"' NS_HTML));  		INSERTION_MODE = BEFORE_HEAD;  		mode = REPROCESS;  		goto EVAL;  	}  	default:  		return 0;  	//ignore token  	}  case BEFORE_HEAD:  	switch (tagName) {  	case "head":  	case "body":  	case "html":  	case "br": {  		ElementToken fakeToken = new ElementToken ("head");  		StartTagToken (ref fakeToken' mode);  		mode = REPROCESS;  		goto EVAL;  	}  	default:  		return 0;  	//ignore token  	}  case IN_HEAD:  	switch (tagName) {  	case "head":  		O.Pop ();  		INSERTION_MODE = AFTER_HEAD;  		return 1;  	case "body":  	case "html":  	case "br":  		EndTagToken ("head"' mode);  		mode = REPROCESS;  		goto EVAL;  	default:  		return 0;  	//ignore token  	}  case IN_HEAD_NOSCRIPT:  	switch (tagName) {  	case "noscript":  		O.Pop ();  		INSERTION_MODE = IN_HEAD;  		return 1;  	case "br":  		EndTagToken ("noscript"' mode);  		mode = REPROCESS;  		goto EVAL;  	default:  		return 0;  	//ignore token  	}  case AFTER_HEAD:  	switch (tagName) {  	case "body":  	case "html":  	case "br": {  		ElementToken fakeToken = new ElementToken ("body");  		StartTagToken (ref fakeToken' mode);  		FRAMESETOK = true;  		mode = REPROCESS;  		goto EVAL;  	}  	default:  		return 0;  	//ignore token  	}  case IN_BODY:  	switch (tagName) {  	case "body":  		if (!ElementInScope ("body"))  			return 0;  		//ignore token  		INSERTION_MODE = AFTER_BODY;  		return 1;  	case "html":  		if (EndTagToken ("body"' mode) != 0) {  			mode = REPROCESS;  			goto EVAL;  		}  		return 1;  	case "address":  	case "article":  	case "aside":  	case "blockquote":  	case "button":  	case "center":  	case "details":  	case "dir":  	case "div":  	case "dl":  	case "fieldset":  	case "figcaption":  	case "figure":  	case "footer":  	case "header":  	case "hgroup":  	case "listing":  	case "menu":  	case "nav":  	case "ol":  	case "pre":  	case "section":  	case "summary":  	case "ul":  		if (!ElementInScope (tagName))  			return 0;  		//ignore token  		O.GenerateImpliedEndTags (null);  		O.ClearToTag (tagName);  		return 1;  	case "form":  		{  			Element<T> node = formPointer;  			formPointer = null;  			if (node == null || ElementInScope (node.TagName))  				return 0;  			//ignore token  			O.GenerateImpliedEndTags (null);  			O.Remove (node);  		}  		return 1;  	case "p":  		if (!ElementInButtonScope (tagName)) {  			ElementToken fakeToken = new ElementToken (tagName);  			StartTagToken (ref fakeToken' mode);  			mode = REPROCESS;  			goto EVAL;  		}  		else {  			O.GenerateImpliedEndTags (tagName);  			O.ClearToTag (tagName);  		}  		return 1;  	case "li":  		if (!ElementInListItemScope (tagName))  			return 0;  		//ignore token  		O.GenerateImpliedEndTags (tagName);  		O.ClearToTag (tagName);  		return 1;  	case "dd":  	case "dt":  		if (!ElementInScope (tagName))  			return 0;  		//ignore token  		O.GenerateImpliedEndTags (tagName);  		O.ClearToTag (tagName);  		return 1;  	case "h1":  	case "h2":  	case "h3":  	case "h4":  	case "h5":  	case "h6":  		if (!HeadingInScope ())  			return 0;  		//ignore token  		O.GenerateImpliedEndTags (null);  		O.ClearToHeading ();  		return 1;  	case "a":  	case "b":  	case "big":  	case "code":  	case "em":  	case "font":  	case "i":  	case "nobr":  	case "s":  	case "small":  	case "strike":  	case "strong":  	case "tt":  	case "u":  		//Adoption agency  		for (int outer_loop_counter = 0; outer_loop_counter < 8; outer_loop_counter++) {  			Element<T> formattingElement = null;  			for (Entry<T> entry = F.Last; entry != null && !entry.IsMark; entry = entry.Prev)  				if (entry.Element.TagName == tagName) {  					formattingElement = entry.Element;  					break;  				}  			if (formattingElement == null)  				goto default;  			if (!formattingElement.InStack) {  				F.Remove (formattingElement.Entry);  				return 1;  			}  			if (!ElementInScope (tagName))  				return 0;  			Element<T> furthestBlock;  			for (furthestBlock = formattingElement.Next; furthestBlock != null; furthestBlock = furthestBlock.Next)  				if (IsSpecialElement (furthestBlock))  					break;  			if (furthestBlock == null) {  				O.RemoveTo (formattingElement' true);  				F.Remove (formattingElement.Entry);  				return 1;  			}  			Element<T> commonAncestor = formattingElement.Prev;  			Entry<T> bookmark = formattingElement.Entry.Prev;  			Element<T> node = furthestBlock' lastNode = furthestBlock;  			for (int inner_loop_counter = 0; inner_loop_counter < 3; inner_loop_counter++) {  				node = node.Prev;  				if (!node.InList) {  					Element<T> tmp = node;  					node = node.Next;  					O.Remove (tmp);  					continue;  				}  				if (node == formattingElement)  					break;  				T instance = CreateElement (node.Token.TagName' node.Token.Attributes' node.Namespace);  				Element<T> newElement = new Element<T> (instance' node.Token' node.Namespace);  				F.Replace (node.Entry' newElement);  				O.Replace (node' newElement);  				node = newElement;  				if (lastNode == furthestBlock)  					bookmark = node.Entry.Next;  				RemoveFromParent (lastNode.Value);  				AppendChild (node.Value' lastNode.Value);  				lastNode = node;  			}  			RemoveFromParent (lastNode.Value);  			switch (commonAncestor.TagName) {  			case "table":  			case "tbody":  			case "tfoot":  			case "thead":  			case "tr":  				Element<T> table = O.GetLastTable ();  				if (table == null) {  					AppendChild (O.Oldest.Value' lastNode.Value);  				}  				else {  					if (GetElementParent (lastNode.Value) != null)  						InsertBefore (lastNode.Value' table.Value);  					else  						AppendChild (table.Prev.Value' lastNode.Value);  				}  				break;  			default:  				AppendChild (commonAncestor.Value' lastNode.Value);  				break;  			}  			T instance2 = CreateElement (formattingElement.Token.TagName' formattingElement.Token.Attributes' formattingElement.Namespace);  			Element<T> element = new Element<T> (instance2' formattingElement.Token' formattingElement.Namespace);  			MoveChilds (furthestBlock.Value' element.Value);  			AppendChild (furthestBlock.Value' element.Value);  			F.Remove (formattingElement.Entry);  			F.AddBefore (bookmark' element);  			O.Remove (formattingElement);  			O.AddAfter (furthestBlock' element);  		}  		return 1;  	case "applet":  	case "marquee":  	case "object":  		if (!ElementInScope (tagName))  			return 0;  		//ignore token  		O.GenerateImpliedEndTags (null);  		O.ClearToTag (tagName);  		F.ClearToMark ();  		return 1;  	case "br":  		{  			ElementToken fakeToken = new ElementToken ("br");  			StartTagToken (ref fakeToken' mode);  		}  		return 0;  	default:  		for (Element<T> node = O.Current; node != null; node = node.Prev) {  			if (node.TagName == tagName) {  				O.GenerateImpliedEndTags (tagName);  				O.RemoveTo (node' true);  				return 1;  			}  			if (IsSpecialElement (node))  				return 0;  			//ignore token  		}  		return 1;  	}  case TEXT:  	switch (tagName) {  	case "script":  		//Provide stable state  		T script = O.Pop ().Value;  		INSERTION_MODE = ORIGINAL_INSERTION_MODE;  		PrepareScript (script);  		return 1;  	default:  		O.Pop ();  		INSERTION_MODE = ORIGINAL_INSERTION_MODE;  		return 1;  	}  case IN_TABLE:  	switch (tagName) {  	case "table":  		if (IS_FRAGMENT && !ElementInTableScope (tagName))  			return 0;  		//ignore token  		O.ClearToElement ("table"' NS_HTML);  		ResetInsertionMode ();  		return 1;  	case "body":  	case "caption":  	case "col":  	case "colgroup":  	case "html":  	case "tbody":  	case "td":  	case "tfoot":  	case "th":  	case "thead":  	case "tr":  		return 0;  	//ignore token  	default:  		FOSTER_PARENTED = true;  		EndTagToken (tagName' IN_BODY);  		FOSTER_PARENTED = false;  		return 1;  	}  case IN_TABLE_TEXT: {  	if (ContainsNonWhiteSpace (ref pendingTokenList' 0' pendingTokenListPtr)) {  		FOSTER_PARENTED = true;  		CharToken (ref pendingTokenList' 0' pendingTokenListPtr' IN_BODY);  		FOSTER_PARENTED = false;  	}  	else {  		InsertCharacters (new string (pendingTokenList' 0' pendingTokenListPtr));  	}  	INSERTION_MODE = ORIGINAL_INSERTION_MODE;  	mode = REPROCESS;  	goto EVAL;  }  case IN_CAPTION:  	switch (tagName) {  	case "caption":  		if (!ElementInTableScope (tagName))  			return 0;  		//ignore token  		O.GenerateImpliedEndTags (null);  		O.ClearToElement ("caption"' NS_HTML);  		F.ClearToMark ();  		INSERTION_MODE = IN_TABLE;  		return 1;  	case "table":  		if (EndTagToken ("caption"' mode) != 0) {  			mode = REPROCESS;  			goto EVAL;  		}  		return 1;  	case "body":  	case "col":  	case "colgroup":  	case "html":  	case "tbody":  	case "td":  	case "tfoot":  	case "th":  	case "thead":  	case "tr":  		return 0;  	//ignore token  	default:  		mode = IN_BODY;  		goto EVAL;  	}  case IN_COLUMN_GROUP:  	switch (tagName) {  	case "colgroup":  		if (IS_FRAGMENT && O.Current == O.Oldest)  			return 0;  		//ignore token  		O.Pop ();  		INSERTION_MODE = IN_TABLE;  		return 1;  	case "col":  		return 0;  	//ignore token  	default:  		if (EndTagToken ("colgroup"' mode) != 0) {  			mode = REPROCESS;  			goto EVAL;  		}  		return 1;  	}  case IN_TABLE_BODY:  	switch (tagName) {  	case "tbody":  	case "tfoot":  	case "thead":  		if (!ElementInTableScope (tagName))  			return 0;  		//ignore token  		ClearStackBackToTableBodyContext ();  		O.Pop ();  		INSERTION_MODE = IN_TABLE;  		return 1;  	case "table":  		if (IS_FRAGMENT) {  			if (!ElementInTableScope ("tbody") && !ElementInTableScope ("thead") && !ElementInTableScope ("tfoot"))  				return 0;  			//ignore token  		}  		ClearStackBackToTableBodyContext ();  		EndTagToken (O.Current.TagName' mode);  		mode = REPROCESS;  		goto EVAL;  	case "body":  	case "caption":  	case "col":  	case "colgroup":  	case "html":  	case "td":  	case "th":  	case "tr":  		return 0;  	//ignore token  	default:  		mode = IN_TABLE;  		goto EVAL;  	}  case IN_ROW:  	switch (tagName) {  	case "tr":  		if (!ElementInTableScope (tagName))  			return 0;  		//ignore token  		ClearStackBackToTableRowContext ();  		O.Pop ();  		INSERTION_MODE = IN_TABLE_BODY;  		return 1;  	case "table":  		if (EndTagToken ("tr"' mode) != 0) {  			mode = REPROCESS;  			goto EVAL;  		}  		return 1;  	case "tbody":  	case "tfoot":  	case "thead":  		if (!ElementInTableScope (tagName))  			return 0;  		//ignore token  		EndTagToken ("tr"' mode);  		mode = REPROCESS;  		goto EVAL;  	case "body":  	case "caption":  	case "col":  	case "colgroup":  	case "html":  	case "td":  	case "th":  		return 0;  	//ignore token  	default:  		mode = IN_TABLE;  		goto EVAL;  	}  case IN_CELL:  	switch (tagName) {  	case "td":  	case "th":  		if (!ElementInTableScope (tagName))  			return 0;  		//return;  		O.GenerateImpliedEndTags (null);  		O.ClearToTag (tagName);  		F.ClearToMark ();  		INSERTION_MODE = IN_ROW;  		return 1;  	case "body":  	case "caption":  	case "col":  	case "colgroup":  	case "html":  		return 0;  	//ignore token  	case "table":  	case "tbody":  	case "tfoot":  	case "thead":  	case "tr":  		if (!ElementInTableScope (tagName))  			return 0;  		//ignore token  		CloseTheCell (mode);  		mode = REPROCESS;  		goto EVAL;  	default:  		mode = IN_BODY;  		goto EVAL;  	}  case IN_SELECT:  	switch (tagName) {  	case "optgroup":  		{  			Element<T> element = O.Current;  			if (element.TagName == "optgroup" && element.Prev.TagName == "optgroup")  				EndTagToken ("option"' mode);  			if (O.Current.TagName == "option")  				O.Pop ();  			else  				return 0;  			//ignore token  		}  		return 1;  	case "option":  		if (O.Current.TagName == "option")  			O.Pop ();  		else  			return 0;  		//ignore token  		return 1;  	case "select":  		if (IS_FRAGMENT && !ElementInSelectScope (tagName))  			return 0;  		//ignore token  		O.ClearToElement ("select"' NS_HTML);  		ResetInsertionMode ();  		return 1;  	default:  		return 0;  	//ignore token  	}  case IN_SELECT_IN_TABLE:  	switch (tagName) {  	case "caption":  	case "table":  	case "tbody":  	case "tfoot":  	case "thead":  	case "tr":  	case "td":  	case "th":  		if (ElementInTableScope (tagName)) {  			EndTagToken ("select"' mode);  			mode = REPROCESS;  			goto EVAL;  		}  		else  			return 0;  	//ignore token  	default:  		mode = IN_SELECT;  		goto EVAL;  	}  case AFTER_BODY:  	if (tagName == "html") {  		if (IS_FRAGMENT)  			return 0;  		//ignore token  		else {  			INSERTION_MODE = AFTER_AFTER_BODY;  			return 1;  		}  	}  	else {  		INSERTION_MODE = IN_BODY;  		mode = REPROCESS;  		goto EVAL;  	}  case IN_FRAMESET:  	if (tagName == "frameset") {  		if (IS_FRAGMENT && O.Current == O.Oldest)  			return 0;  		//ignore token  		O.Pop ();  		if (!IS_FRAGMENT && O.Current.TagName != "frameset")  			INSERTION_MODE = AFTER_FRAMESET;  		return 1;  	}  	else  		return 0;  //ignore token  case AFTER_FRAMESET:  	if (tagName == "html") {  		INSERTION_MODE = AFTER_AFTER_FRAMESET;  		return 1;  	}  	else  		return 0;  //ignore token  case AFTER_AFTER_BODY:  	INSERTION_MODE = IN_BODY;  	mode = REPROCESS;  	goto EVAL;  case AFTER_AFTER_FRAMESET:  	return 0;  //ignore token  case IN_FOREIGN_CONTENT:  	if (tagName == "script" && O.Current.TagName == "script" && O.Current.Namespace == NS_SVG) {  		O.Pop ();  		return 1;  	}  	else {  		Element<T> node = O.Current;  		while (true) {  			if (node.TagName.ToLower () == tagName)  				return EndTagToken (tagName' INSERTION_MODE);  			node = node.Prev;  			if (node.Namespace != NS_HTML)  				continue;  			return EndTagToken (tagName' INSERTION_MODE);  		}  	}  }  
Magic Number,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,EndTagToken,The following statement contains a magic number: switch (tagName) {  case "body":  	if (!ElementInScope ("body"))  		return 0;  	//ignore token  	INSERTION_MODE = AFTER_BODY;  	return 1;  case "html":  	if (EndTagToken ("body"' mode) != 0) {  		mode = REPROCESS;  		goto EVAL;  	}  	return 1;  case "address":  case "article":  case "aside":  case "blockquote":  case "button":  case "center":  case "details":  case "dir":  case "div":  case "dl":  case "fieldset":  case "figcaption":  case "figure":  case "footer":  case "header":  case "hgroup":  case "listing":  case "menu":  case "nav":  case "ol":  case "pre":  case "section":  case "summary":  case "ul":  	if (!ElementInScope (tagName))  		return 0;  	//ignore token  	O.GenerateImpliedEndTags (null);  	O.ClearToTag (tagName);  	return 1;  case "form":  	{  		Element<T> node = formPointer;  		formPointer = null;  		if (node == null || ElementInScope (node.TagName))  			return 0;  		//ignore token  		O.GenerateImpliedEndTags (null);  		O.Remove (node);  	}  	return 1;  case "p":  	if (!ElementInButtonScope (tagName)) {  		ElementToken fakeToken = new ElementToken (tagName);  		StartTagToken (ref fakeToken' mode);  		mode = REPROCESS;  		goto EVAL;  	}  	else {  		O.GenerateImpliedEndTags (tagName);  		O.ClearToTag (tagName);  	}  	return 1;  case "li":  	if (!ElementInListItemScope (tagName))  		return 0;  	//ignore token  	O.GenerateImpliedEndTags (tagName);  	O.ClearToTag (tagName);  	return 1;  case "dd":  case "dt":  	if (!ElementInScope (tagName))  		return 0;  	//ignore token  	O.GenerateImpliedEndTags (tagName);  	O.ClearToTag (tagName);  	return 1;  case "h1":  case "h2":  case "h3":  case "h4":  case "h5":  case "h6":  	if (!HeadingInScope ())  		return 0;  	//ignore token  	O.GenerateImpliedEndTags (null);  	O.ClearToHeading ();  	return 1;  case "a":  case "b":  case "big":  case "code":  case "em":  case "font":  case "i":  case "nobr":  case "s":  case "small":  case "strike":  case "strong":  case "tt":  case "u":  	//Adoption agency  	for (int outer_loop_counter = 0; outer_loop_counter < 8; outer_loop_counter++) {  		Element<T> formattingElement = null;  		for (Entry<T> entry = F.Last; entry != null && !entry.IsMark; entry = entry.Prev)  			if (entry.Element.TagName == tagName) {  				formattingElement = entry.Element;  				break;  			}  		if (formattingElement == null)  			goto default;  		if (!formattingElement.InStack) {  			F.Remove (formattingElement.Entry);  			return 1;  		}  		if (!ElementInScope (tagName))  			return 0;  		Element<T> furthestBlock;  		for (furthestBlock = formattingElement.Next; furthestBlock != null; furthestBlock = furthestBlock.Next)  			if (IsSpecialElement (furthestBlock))  				break;  		if (furthestBlock == null) {  			O.RemoveTo (formattingElement' true);  			F.Remove (formattingElement.Entry);  			return 1;  		}  		Element<T> commonAncestor = formattingElement.Prev;  		Entry<T> bookmark = formattingElement.Entry.Prev;  		Element<T> node = furthestBlock' lastNode = furthestBlock;  		for (int inner_loop_counter = 0; inner_loop_counter < 3; inner_loop_counter++) {  			node = node.Prev;  			if (!node.InList) {  				Element<T> tmp = node;  				node = node.Next;  				O.Remove (tmp);  				continue;  			}  			if (node == formattingElement)  				break;  			T instance = CreateElement (node.Token.TagName' node.Token.Attributes' node.Namespace);  			Element<T> newElement = new Element<T> (instance' node.Token' node.Namespace);  			F.Replace (node.Entry' newElement);  			O.Replace (node' newElement);  			node = newElement;  			if (lastNode == furthestBlock)  				bookmark = node.Entry.Next;  			RemoveFromParent (lastNode.Value);  			AppendChild (node.Value' lastNode.Value);  			lastNode = node;  		}  		RemoveFromParent (lastNode.Value);  		switch (commonAncestor.TagName) {  		case "table":  		case "tbody":  		case "tfoot":  		case "thead":  		case "tr":  			Element<T> table = O.GetLastTable ();  			if (table == null) {  				AppendChild (O.Oldest.Value' lastNode.Value);  			}  			else {  				if (GetElementParent (lastNode.Value) != null)  					InsertBefore (lastNode.Value' table.Value);  				else  					AppendChild (table.Prev.Value' lastNode.Value);  			}  			break;  		default:  			AppendChild (commonAncestor.Value' lastNode.Value);  			break;  		}  		T instance2 = CreateElement (formattingElement.Token.TagName' formattingElement.Token.Attributes' formattingElement.Namespace);  		Element<T> element = new Element<T> (instance2' formattingElement.Token' formattingElement.Namespace);  		MoveChilds (furthestBlock.Value' element.Value);  		AppendChild (furthestBlock.Value' element.Value);  		F.Remove (formattingElement.Entry);  		F.AddBefore (bookmark' element);  		O.Remove (formattingElement);  		O.AddAfter (furthestBlock' element);  	}  	return 1;  case "applet":  case "marquee":  case "object":  	if (!ElementInScope (tagName))  		return 0;  	//ignore token  	O.GenerateImpliedEndTags (null);  	O.ClearToTag (tagName);  	F.ClearToMark ();  	return 1;  case "br":  	{  		ElementToken fakeToken = new ElementToken ("br");  		StartTagToken (ref fakeToken' mode);  	}  	return 0;  default:  	for (Element<T> node = O.Current; node != null; node = node.Prev) {  		if (node.TagName == tagName) {  			O.GenerateImpliedEndTags (tagName);  			O.RemoveTo (node' true);  			return 1;  		}  		if (IsSpecialElement (node))  			return 0;  		//ignore token  	}  	return 1;  }  
Magic Number,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,EndTagToken,The following statement contains a magic number: switch (tagName) {  case "body":  	if (!ElementInScope ("body"))  		return 0;  	//ignore token  	INSERTION_MODE = AFTER_BODY;  	return 1;  case "html":  	if (EndTagToken ("body"' mode) != 0) {  		mode = REPROCESS;  		goto EVAL;  	}  	return 1;  case "address":  case "article":  case "aside":  case "blockquote":  case "button":  case "center":  case "details":  case "dir":  case "div":  case "dl":  case "fieldset":  case "figcaption":  case "figure":  case "footer":  case "header":  case "hgroup":  case "listing":  case "menu":  case "nav":  case "ol":  case "pre":  case "section":  case "summary":  case "ul":  	if (!ElementInScope (tagName))  		return 0;  	//ignore token  	O.GenerateImpliedEndTags (null);  	O.ClearToTag (tagName);  	return 1;  case "form":  	{  		Element<T> node = formPointer;  		formPointer = null;  		if (node == null || ElementInScope (node.TagName))  			return 0;  		//ignore token  		O.GenerateImpliedEndTags (null);  		O.Remove (node);  	}  	return 1;  case "p":  	if (!ElementInButtonScope (tagName)) {  		ElementToken fakeToken = new ElementToken (tagName);  		StartTagToken (ref fakeToken' mode);  		mode = REPROCESS;  		goto EVAL;  	}  	else {  		O.GenerateImpliedEndTags (tagName);  		O.ClearToTag (tagName);  	}  	return 1;  case "li":  	if (!ElementInListItemScope (tagName))  		return 0;  	//ignore token  	O.GenerateImpliedEndTags (tagName);  	O.ClearToTag (tagName);  	return 1;  case "dd":  case "dt":  	if (!ElementInScope (tagName))  		return 0;  	//ignore token  	O.GenerateImpliedEndTags (tagName);  	O.ClearToTag (tagName);  	return 1;  case "h1":  case "h2":  case "h3":  case "h4":  case "h5":  case "h6":  	if (!HeadingInScope ())  		return 0;  	//ignore token  	O.GenerateImpliedEndTags (null);  	O.ClearToHeading ();  	return 1;  case "a":  case "b":  case "big":  case "code":  case "em":  case "font":  case "i":  case "nobr":  case "s":  case "small":  case "strike":  case "strong":  case "tt":  case "u":  	//Adoption agency  	for (int outer_loop_counter = 0; outer_loop_counter < 8; outer_loop_counter++) {  		Element<T> formattingElement = null;  		for (Entry<T> entry = F.Last; entry != null && !entry.IsMark; entry = entry.Prev)  			if (entry.Element.TagName == tagName) {  				formattingElement = entry.Element;  				break;  			}  		if (formattingElement == null)  			goto default;  		if (!formattingElement.InStack) {  			F.Remove (formattingElement.Entry);  			return 1;  		}  		if (!ElementInScope (tagName))  			return 0;  		Element<T> furthestBlock;  		for (furthestBlock = formattingElement.Next; furthestBlock != null; furthestBlock = furthestBlock.Next)  			if (IsSpecialElement (furthestBlock))  				break;  		if (furthestBlock == null) {  			O.RemoveTo (formattingElement' true);  			F.Remove (formattingElement.Entry);  			return 1;  		}  		Element<T> commonAncestor = formattingElement.Prev;  		Entry<T> bookmark = formattingElement.Entry.Prev;  		Element<T> node = furthestBlock' lastNode = furthestBlock;  		for (int inner_loop_counter = 0; inner_loop_counter < 3; inner_loop_counter++) {  			node = node.Prev;  			if (!node.InList) {  				Element<T> tmp = node;  				node = node.Next;  				O.Remove (tmp);  				continue;  			}  			if (node == formattingElement)  				break;  			T instance = CreateElement (node.Token.TagName' node.Token.Attributes' node.Namespace);  			Element<T> newElement = new Element<T> (instance' node.Token' node.Namespace);  			F.Replace (node.Entry' newElement);  			O.Replace (node' newElement);  			node = newElement;  			if (lastNode == furthestBlock)  				bookmark = node.Entry.Next;  			RemoveFromParent (lastNode.Value);  			AppendChild (node.Value' lastNode.Value);  			lastNode = node;  		}  		RemoveFromParent (lastNode.Value);  		switch (commonAncestor.TagName) {  		case "table":  		case "tbody":  		case "tfoot":  		case "thead":  		case "tr":  			Element<T> table = O.GetLastTable ();  			if (table == null) {  				AppendChild (O.Oldest.Value' lastNode.Value);  			}  			else {  				if (GetElementParent (lastNode.Value) != null)  					InsertBefore (lastNode.Value' table.Value);  				else  					AppendChild (table.Prev.Value' lastNode.Value);  			}  			break;  		default:  			AppendChild (commonAncestor.Value' lastNode.Value);  			break;  		}  		T instance2 = CreateElement (formattingElement.Token.TagName' formattingElement.Token.Attributes' formattingElement.Namespace);  		Element<T> element = new Element<T> (instance2' formattingElement.Token' formattingElement.Namespace);  		MoveChilds (furthestBlock.Value' element.Value);  		AppendChild (furthestBlock.Value' element.Value);  		F.Remove (formattingElement.Entry);  		F.AddBefore (bookmark' element);  		O.Remove (formattingElement);  		O.AddAfter (furthestBlock' element);  	}  	return 1;  case "applet":  case "marquee":  case "object":  	if (!ElementInScope (tagName))  		return 0;  	//ignore token  	O.GenerateImpliedEndTags (null);  	O.ClearToTag (tagName);  	F.ClearToMark ();  	return 1;  case "br":  	{  		ElementToken fakeToken = new ElementToken ("br");  		StartTagToken (ref fakeToken' mode);  	}  	return 0;  default:  	for (Element<T> node = O.Current; node != null; node = node.Prev) {  		if (node.TagName == tagName) {  			O.GenerateImpliedEndTags (tagName);  			O.RemoveTo (node' true);  			return 1;  		}  		if (IsSpecialElement (node))  			return 0;  		//ignore token  	}  	return 1;  }  
Magic Number,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,EndTagToken,The following statement contains a magic number: for (int outer_loop_counter = 0; outer_loop_counter < 8; outer_loop_counter++) {  	Element<T> formattingElement = null;  	for (Entry<T> entry = F.Last; entry != null && !entry.IsMark; entry = entry.Prev)  		if (entry.Element.TagName == tagName) {  			formattingElement = entry.Element;  			break;  		}  	if (formattingElement == null)  		goto default;  	if (!formattingElement.InStack) {  		F.Remove (formattingElement.Entry);  		return 1;  	}  	if (!ElementInScope (tagName))  		return 0;  	Element<T> furthestBlock;  	for (furthestBlock = formattingElement.Next; furthestBlock != null; furthestBlock = furthestBlock.Next)  		if (IsSpecialElement (furthestBlock))  			break;  	if (furthestBlock == null) {  		O.RemoveTo (formattingElement' true);  		F.Remove (formattingElement.Entry);  		return 1;  	}  	Element<T> commonAncestor = formattingElement.Prev;  	Entry<T> bookmark = formattingElement.Entry.Prev;  	Element<T> node = furthestBlock' lastNode = furthestBlock;  	for (int inner_loop_counter = 0; inner_loop_counter < 3; inner_loop_counter++) {  		node = node.Prev;  		if (!node.InList) {  			Element<T> tmp = node;  			node = node.Next;  			O.Remove (tmp);  			continue;  		}  		if (node == formattingElement)  			break;  		T instance = CreateElement (node.Token.TagName' node.Token.Attributes' node.Namespace);  		Element<T> newElement = new Element<T> (instance' node.Token' node.Namespace);  		F.Replace (node.Entry' newElement);  		O.Replace (node' newElement);  		node = newElement;  		if (lastNode == furthestBlock)  			bookmark = node.Entry.Next;  		RemoveFromParent (lastNode.Value);  		AppendChild (node.Value' lastNode.Value);  		lastNode = node;  	}  	RemoveFromParent (lastNode.Value);  	switch (commonAncestor.TagName) {  	case "table":  	case "tbody":  	case "tfoot":  	case "thead":  	case "tr":  		Element<T> table = O.GetLastTable ();  		if (table == null) {  			AppendChild (O.Oldest.Value' lastNode.Value);  		}  		else {  			if (GetElementParent (lastNode.Value) != null)  				InsertBefore (lastNode.Value' table.Value);  			else  				AppendChild (table.Prev.Value' lastNode.Value);  		}  		break;  	default:  		AppendChild (commonAncestor.Value' lastNode.Value);  		break;  	}  	T instance2 = CreateElement (formattingElement.Token.TagName' formattingElement.Token.Attributes' formattingElement.Namespace);  	Element<T> element = new Element<T> (instance2' formattingElement.Token' formattingElement.Namespace);  	MoveChilds (furthestBlock.Value' element.Value);  	AppendChild (furthestBlock.Value' element.Value);  	F.Remove (formattingElement.Entry);  	F.AddBefore (bookmark' element);  	O.Remove (formattingElement);  	O.AddAfter (furthestBlock' element);  }  
Magic Number,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,EndTagToken,The following statement contains a magic number: for (int outer_loop_counter = 0; outer_loop_counter < 8; outer_loop_counter++) {  	Element<T> formattingElement = null;  	for (Entry<T> entry = F.Last; entry != null && !entry.IsMark; entry = entry.Prev)  		if (entry.Element.TagName == tagName) {  			formattingElement = entry.Element;  			break;  		}  	if (formattingElement == null)  		goto default;  	if (!formattingElement.InStack) {  		F.Remove (formattingElement.Entry);  		return 1;  	}  	if (!ElementInScope (tagName))  		return 0;  	Element<T> furthestBlock;  	for (furthestBlock = formattingElement.Next; furthestBlock != null; furthestBlock = furthestBlock.Next)  		if (IsSpecialElement (furthestBlock))  			break;  	if (furthestBlock == null) {  		O.RemoveTo (formattingElement' true);  		F.Remove (formattingElement.Entry);  		return 1;  	}  	Element<T> commonAncestor = formattingElement.Prev;  	Entry<T> bookmark = formattingElement.Entry.Prev;  	Element<T> node = furthestBlock' lastNode = furthestBlock;  	for (int inner_loop_counter = 0; inner_loop_counter < 3; inner_loop_counter++) {  		node = node.Prev;  		if (!node.InList) {  			Element<T> tmp = node;  			node = node.Next;  			O.Remove (tmp);  			continue;  		}  		if (node == formattingElement)  			break;  		T instance = CreateElement (node.Token.TagName' node.Token.Attributes' node.Namespace);  		Element<T> newElement = new Element<T> (instance' node.Token' node.Namespace);  		F.Replace (node.Entry' newElement);  		O.Replace (node' newElement);  		node = newElement;  		if (lastNode == furthestBlock)  			bookmark = node.Entry.Next;  		RemoveFromParent (lastNode.Value);  		AppendChild (node.Value' lastNode.Value);  		lastNode = node;  	}  	RemoveFromParent (lastNode.Value);  	switch (commonAncestor.TagName) {  	case "table":  	case "tbody":  	case "tfoot":  	case "thead":  	case "tr":  		Element<T> table = O.GetLastTable ();  		if (table == null) {  			AppendChild (O.Oldest.Value' lastNode.Value);  		}  		else {  			if (GetElementParent (lastNode.Value) != null)  				InsertBefore (lastNode.Value' table.Value);  			else  				AppendChild (table.Prev.Value' lastNode.Value);  		}  		break;  	default:  		AppendChild (commonAncestor.Value' lastNode.Value);  		break;  	}  	T instance2 = CreateElement (formattingElement.Token.TagName' formattingElement.Token.Attributes' formattingElement.Namespace);  	Element<T> element = new Element<T> (instance2' formattingElement.Token' formattingElement.Namespace);  	MoveChilds (furthestBlock.Value' element.Value);  	AppendChild (furthestBlock.Value' element.Value);  	F.Remove (formattingElement.Entry);  	F.AddBefore (bookmark' element);  	O.Remove (formattingElement);  	O.AddAfter (furthestBlock' element);  }  
Magic Number,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,EndTagToken,The following statement contains a magic number: for (int inner_loop_counter = 0; inner_loop_counter < 3; inner_loop_counter++) {  	node = node.Prev;  	if (!node.InList) {  		Element<T> tmp = node;  		node = node.Next;  		O.Remove (tmp);  		continue;  	}  	if (node == formattingElement)  		break;  	T instance = CreateElement (node.Token.TagName' node.Token.Attributes' node.Namespace);  	Element<T> newElement = new Element<T> (instance' node.Token' node.Namespace);  	F.Replace (node.Entry' newElement);  	O.Replace (node' newElement);  	node = newElement;  	if (lastNode == furthestBlock)  		bookmark = node.Entry.Next;  	RemoveFromParent (lastNode.Value);  	AppendChild (node.Value' lastNode.Value);  	lastNode = node;  }  
Duplicate Code,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The method contains a code clone-set at the following line numbers (starting from the method definition): ((551' 584)' (655' 688)' (902' 935))
Duplicate Code,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The method contains a code clone-set at the following line numbers (starting from the method definition): ((1031' 1055)' (1078' 1102))
Missing Default,HTML5,ElementStack,C:\repos\msarca_html5\HTML5\ElementStack.cs,ClearToHeading,The following switch statement is missing a default case: switch (Current.TagName) {  case "h1":  case "h2":  case "h3":  case "h4":  case "h5":  case "h6":  	done = true;  	break;  }  
Missing Default,HTML5,NamedCharRef,C:\repos\msarca_html5\HTML5\NamedCharRef.cs,matchDecDigits,The following switch statement is missing a default case: switch (c) {  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9':  	sb.Append (c);  	continue;  }  
Missing Default,HTML5,NamedCharRef,C:\repos\msarca_html5\HTML5\NamedCharRef.cs,matchHexDigits,The following switch statement is missing a default case: switch (c) {  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9':  case 'a':  case 'A':  case 'b':  case 'B':  case 'c':  case 'C':  case 'd':  case 'D':  case 'e':  case 'E':  case 'f':  case 'F':  	sb.Append (c);  	continue;  }  
Missing Default,HTML5,NamedCharRef,C:\repos\msarca_html5\HTML5\NamedCharRef.cs,mapReference,The following switch statement is missing a default case: switch (value) {  case "&Aacute;":  	return new char[] {  		'\u00C1'  	};  case "&Aacute":  	return new char[] {  		'\u00C1'  	};  case "&aacute;":  	return new char[] {  		'\u00E1'  	};  case "&aacute":  	return new char[] {  		'\u00E1'  	};  case "&Abreve;":  	return new char[] {  		'\u0102'  	};  case "&abreve;":  	return new char[] {  		'\u0103'  	};  case "&ac;":  	return new char[] {  		'\u223E'  	};  case "&acd;":  	return new char[] {  		'\u223F'  	};  case "&acE;":  	return new char[] {  		'\u223E''  		'\u0333'  	};  case "&Acirc;":  	return new char[] {  		'\u00C2'  	};  case "&Acirc":  	return new char[] {  		'\u00C2'  	};  case "&acirc;":  	return new char[] {  		'\u00E2'  	};  case "&acirc":  	return new char[] {  		'\u00E2'  	};  case "&acute;":  	return new char[] {  		'\u00B4'  	};  case "&acute":  	return new char[] {  		'\u00B4'  	};  case "&Acy;":  	return new char[] {  		'\u0410'  	};  case "&acy;":  	return new char[] {  		'\u0430'  	};  case "&AElig;":  	return new char[] {  		'\u00C6'  	};  case "&AElig":  	return new char[] {  		'\u00C6'  	};  case "&aelig;":  	return new char[] {  		'\u00E6'  	};  case "&aelig":  	return new char[] {  		'\u00E6'  	};  case "&af;":  	return new char[] {  		'\u2061'  	};  case "&Afr;":  	return new char[] {  		'\uD835''  		'\uDD04'  	};  case "&afr;":  	return new char[] {  		'\uD835''  		'\uDD1E'  	};  case "&Agrave;":  	return new char[] {  		'\u00C0'  	};  case "&Agrave":  	return new char[] {  		'\u00C0'  	};  case "&agrave;":  	return new char[] {  		'\u00E0'  	};  case "&agrave":  	return new char[] {  		'\u00E0'  	};  case "&alefsym;":  	return new char[] {  		'\u2135'  	};  case "&aleph;":  	return new char[] {  		'\u2135'  	};  case "&Alpha;":  	return new char[] {  		'\u0391'  	};  case "&alpha;":  	return new char[] {  		'\u03B1'  	};  case "&Amacr;":  	return new char[] {  		'\u0100'  	};  case "&amacr;":  	return new char[] {  		'\u0101'  	};  case "&amalg;":  	return new char[] {  		'\u2A3F'  	};  case "&AMP;":  	return new char[] {  		'\u0026'  	};  case "&AMP":  	return new char[] {  		'\u0026'  	};  case "&amp;":  	return new char[] {  		'\u0026'  	};  case "&amp":  	return new char[] {  		'\u0026'  	};  case "&And;":  	return new char[] {  		'\u2A53'  	};  case "&and;":  	return new char[] {  		'\u2227'  	};  case "&andand;":  	return new char[] {  		'\u2A55'  	};  case "&andd;":  	return new char[] {  		'\u2A5C'  	};  case "&andslope;":  	return new char[] {  		'\u2A58'  	};  case "&andv;":  	return new char[] {  		'\u2A5A'  	};  case "&ang;":  	return new char[] {  		'\u2220'  	};  case "&ange;":  	return new char[] {  		'\u29A4'  	};  case "&angle;":  	return new char[] {  		'\u2220'  	};  case "&angmsd;":  	return new char[] {  		'\u2221'  	};  case "&angmsdaa;":  	return new char[] {  		'\u29A8'  	};  case "&angmsdab;":  	return new char[] {  		'\u29A9'  	};  case "&angmsdac;":  	return new char[] {  		'\u29AA'  	};  case "&angmsdad;":  	return new char[] {  		'\u29AB'  	};  case "&angmsdae;":  	return new char[] {  		'\u29AC'  	};  case "&angmsdaf;":  	return new char[] {  		'\u29AD'  	};  case "&angmsdag;":  	return new char[] {  		'\u29AE'  	};  case "&angmsdah;":  	return new char[] {  		'\u29AF'  	};  case "&angrt;":  	return new char[] {  		'\u221F'  	};  case "&angrtvb;":  	return new char[] {  		'\u22BE'  	};  case "&angrtvbd;":  	return new char[] {  		'\u299D'  	};  case "&angsph;":  	return new char[] {  		'\u2222'  	};  case "&angst;":  	return new char[] {  		'\u00C5'  	};  case "&angzarr;":  	return new char[] {  		'\u237C'  	};  case "&Aogon;":  	return new char[] {  		'\u0104'  	};  case "&aogon;":  	return new char[] {  		'\u0105'  	};  case "&Aopf;":  	return new char[] {  		'\uD835''  		'\uDD38'  	};  case "&aopf;":  	return new char[] {  		'\uD835''  		'\uDD52'  	};  case "&ap;":  	return new char[] {  		'\u2248'  	};  case "&apacir;":  	return new char[] {  		'\u2A6F'  	};  case "&apE;":  	return new char[] {  		'\u2A70'  	};  case "&ape;":  	return new char[] {  		'\u224A'  	};  case "&apid;":  	return new char[] {  		'\u224B'  	};  case "&apos;":  	return new char[] {  		'\u0027'  	};  case "&ApplyFunction;":  	return new char[] {  		'\u2061'  	};  case "&approx;":  	return new char[] {  		'\u2248'  	};  case "&approxeq;":  	return new char[] {  		'\u224A'  	};  case "&Aring;":  	return new char[] {  		'\u00C5'  	};  case "&Aring":  	return new char[] {  		'\u00C5'  	};  case "&aring;":  	return new char[] {  		'\u00E5'  	};  case "&aring":  	return new char[] {  		'\u00E5'  	};  case "&Ascr;":  	return new char[] {  		'\uD835''  		'\uDC9C'  	};  case "&ascr;":  	return new char[] {  		'\uD835''  		'\uDCB6'  	};  case "&Assign;":  	return new char[] {  		'\u2254'  	};  case "&ast;":  	return new char[] {  		'\u002A'  	};  case "&asymp;":  	return new char[] {  		'\u2248'  	};  case "&asympeq;":  	return new char[] {  		'\u224D'  	};  case "&Atilde;":  	return new char[] {  		'\u00C3'  	};  case "&Atilde":  	return new char[] {  		'\u00C3'  	};  case "&atilde;":  	return new char[] {  		'\u00E3'  	};  case "&atilde":  	return new char[] {  		'\u00E3'  	};  case "&Auml;":  	return new char[] {  		'\u00C4'  	};  case "&Auml":  	return new char[] {  		'\u00C4'  	};  case "&auml;":  	return new char[] {  		'\u00E4'  	};  case "&auml":  	return new char[] {  		'\u00E4'  	};  case "&awconint;":  	return new char[] {  		'\u2233'  	};  case "&awint;":  	return new char[] {  		'\u2A11'  	};  case "&backcong;":  	return new char[] {  		'\u224C'  	};  case "&backepsilon;":  	return new char[] {  		'\u03F6'  	};  case "&backprime;":  	return new char[] {  		'\u2035'  	};  case "&backsim;":  	return new char[] {  		'\u223D'  	};  case "&backsimeq;":  	return new char[] {  		'\u22CD'  	};  case "&Backslash;":  	return new char[] {  		'\u2216'  	};  case "&Barv;":  	return new char[] {  		'\u2AE7'  	};  case "&barvee;":  	return new char[] {  		'\u22BD'  	};  case "&Barwed;":  	return new char[] {  		'\u2306'  	};  case "&barwed;":  	return new char[] {  		'\u2305'  	};  case "&barwedge;":  	return new char[] {  		'\u2305'  	};  case "&bbrk;":  	return new char[] {  		'\u23B5'  	};  case "&bbrktbrk;":  	return new char[] {  		'\u23B6'  	};  case "&bcong;":  	return new char[] {  		'\u224C'  	};  case "&Bcy;":  	return new char[] {  		'\u0411'  	};  case "&bcy;":  	return new char[] {  		'\u0431'  	};  case "&bdquo;":  	return new char[] {  		'\u201E'  	};  case "&becaus;":  	return new char[] {  		'\u2235'  	};  case "&Because;":  	return new char[] {  		'\u2235'  	};  case "&because;":  	return new char[] {  		'\u2235'  	};  case "&bemptyv;":  	return new char[] {  		'\u29B0'  	};  case "&bepsi;":  	return new char[] {  		'\u03F6'  	};  case "&bernou;":  	return new char[] {  		'\u212C'  	};  case "&Bernoullis;":  	return new char[] {  		'\u212C'  	};  case "&Beta;":  	return new char[] {  		'\u0392'  	};  case "&beta;":  	return new char[] {  		'\u03B2'  	};  case "&beth;":  	return new char[] {  		'\u2136'  	};  case "&between;":  	return new char[] {  		'\u226C'  	};  case "&Bfr;":  	return new char[] {  		'\uD835''  		'\uDD05'  	};  case "&bfr;":  	return new char[] {  		'\uD835''  		'\uDD1F'  	};  case "&bigcap;":  	return new char[] {  		'\u22C2'  	};  case "&bigcirc;":  	return new char[] {  		'\u25EF'  	};  case "&bigcup;":  	return new char[] {  		'\u22C3'  	};  case "&bigodot;":  	return new char[] {  		'\u2A00'  	};  case "&bigoplus;":  	return new char[] {  		'\u2A01'  	};  case "&bigotimes;":  	return new char[] {  		'\u2A02'  	};  case "&bigsqcup;":  	return new char[] {  		'\u2A06'  	};  case "&bigstar;":  	return new char[] {  		'\u2605'  	};  case "&bigtriangledown;":  	return new char[] {  		'\u25BD'  	};  case "&bigtriangleup;":  	return new char[] {  		'\u25B3'  	};  case "&biguplus;":  	return new char[] {  		'\u2A04'  	};  case "&bigvee;":  	return new char[] {  		'\u22C1'  	};  case "&bigwedge;":  	return new char[] {  		'\u22C0'  	};  case "&bkarow;":  	return new char[] {  		'\u290D'  	};  case "&blacklozenge;":  	return new char[] {  		'\u29EB'  	};  case "&blacksquare;":  	return new char[] {  		'\u25AA'  	};  case "&blacktriangle;":  	return new char[] {  		'\u25B4'  	};  case "&blacktriangledown;":  	return new char[] {  		'\u25BE'  	};  case "&blacktriangleleft;":  	return new char[] {  		'\u25C2'  	};  case "&blacktriangleright;":  	return new char[] {  		'\u25B8'  	};  case "&blank;":  	return new char[] {  		'\u2423'  	};  case "&blk12;":  	return new char[] {  		'\u2592'  	};  case "&blk14;":  	return new char[] {  		'\u2591'  	};  case "&blk34;":  	return new char[] {  		'\u2593'  	};  case "&block;":  	return new char[] {  		'\u2588'  	};  case "&bne;":  	return new char[] {  		'\u003D''  		'\u20E5'  	};  case "&bnequiv;":  	return new char[] {  		'\u2261''  		'\u20E5'  	};  case "&bNot;":  	return new char[] {  		'\u2AED'  	};  case "&bnot;":  	return new char[] {  		'\u2310'  	};  case "&Bopf;":  	return new char[] {  		'\uD835''  		'\uDD39'  	};  case "&bopf;":  	return new char[] {  		'\uD835''  		'\uDD53'  	};  case "&bot;":  	return new char[] {  		'\u22A5'  	};  case "&bottom;":  	return new char[] {  		'\u22A5'  	};  case "&bowtie;":  	return new char[] {  		'\u22C8'  	};  case "&boxbox;":  	return new char[] {  		'\u29C9'  	};  case "&boxDL;":  	return new char[] {  		'\u2557'  	};  case "&boxDl;":  	return new char[] {  		'\u2556'  	};  case "&boxdL;":  	return new char[] {  		'\u2555'  	};  case "&boxdl;":  	return new char[] {  		'\u2510'  	};  case "&boxDR;":  	return new char[] {  		'\u2554'  	};  case "&boxDr;":  	return new char[] {  		'\u2553'  	};  case "&boxdR;":  	return new char[] {  		'\u2552'  	};  case "&boxdr;":  	return new char[] {  		'\u250C'  	};  case "&boxH;":  	return new char[] {  		'\u2550'  	};  case "&boxh;":  	return new char[] {  		'\u2500'  	};  case "&boxHD;":  	return new char[] {  		'\u2566'  	};  case "&boxHd;":  	return new char[] {  		'\u2564'  	};  case "&boxhD;":  	return new char[] {  		'\u2565'  	};  case "&boxhd;":  	return new char[] {  		'\u252C'  	};  case "&boxHU;":  	return new char[] {  		'\u2569'  	};  case "&boxHu;":  	return new char[] {  		'\u2567'  	};  case "&boxhU;":  	return new char[] {  		'\u2568'  	};  case "&boxhu;":  	return new char[] {  		'\u2534'  	};  case "&boxminus;":  	return new char[] {  		'\u229F'  	};  case "&boxplus;":  	return new char[] {  		'\u229E'  	};  case "&boxtimes;":  	return new char[] {  		'\u22A0'  	};  case "&boxUL;":  	return new char[] {  		'\u255D'  	};  case "&boxUl;":  	return new char[] {  		'\u255C'  	};  case "&boxuL;":  	return new char[] {  		'\u255B'  	};  case "&boxul;":  	return new char[] {  		'\u2518'  	};  case "&boxUR;":  	return new char[] {  		'\u255A'  	};  case "&boxUr;":  	return new char[] {  		'\u2559'  	};  case "&boxuR;":  	return new char[] {  		'\u2558'  	};  case "&boxur;":  	return new char[] {  		'\u2514'  	};  case "&boxV;":  	return new char[] {  		'\u2551'  	};  case "&boxv;":  	return new char[] {  		'\u2502'  	};  case "&boxVH;":  	return new char[] {  		'\u256C'  	};  case "&boxVh;":  	return new char[] {  		'\u256B'  	};  case "&boxvH;":  	return new char[] {  		'\u256A'  	};  case "&boxvh;":  	return new char[] {  		'\u253C'  	};  case "&boxVL;":  	return new char[] {  		'\u2563'  	};  case "&boxVl;":  	return new char[] {  		'\u2562'  	};  case "&boxvL;":  	return new char[] {  		'\u2561'  	};  case "&boxvl;":  	return new char[] {  		'\u2524'  	};  case "&boxVR;":  	return new char[] {  		'\u2560'  	};  case "&boxVr;":  	return new char[] {  		'\u255F'  	};  case "&boxvR;":  	return new char[] {  		'\u255E'  	};  case "&boxvr;":  	return new char[] {  		'\u251C'  	};  case "&bprime;":  	return new char[] {  		'\u2035'  	};  case "&Breve;":  	return new char[] {  		'\u02D8'  	};  case "&breve;":  	return new char[] {  		'\u02D8'  	};  case "&brvbar;":  	return new char[] {  		'\u00A6'  	};  case "&brvbar":  	return new char[] {  		'\u00A6'  	};  case "&Bscr;":  	return new char[] {  		'\u212C'  	};  case "&bscr;":  	return new char[] {  		'\uD835''  		'\uDCB7'  	};  case "&bsemi;":  	return new char[] {  		'\u204F'  	};  case "&bsim;":  	return new char[] {  		'\u223D'  	};  case "&bsime;":  	return new char[] {  		'\u22CD'  	};  case "&bsol;":  	return new char[] {  		'\u005C'  	};  case "&bsolb;":  	return new char[] {  		'\u29C5'  	};  case "&bsolhsub;":  	return new char[] {  		'\u27C8'  	};  case "&bull;":  	return new char[] {  		'\u2022'  	};  case "&bullet;":  	return new char[] {  		'\u2022'  	};  case "&bump;":  	return new char[] {  		'\u224E'  	};  case "&bumpE;":  	return new char[] {  		'\u2AAE'  	};  case "&bumpe;":  	return new char[] {  		'\u224F'  	};  case "&Bumpeq;":  	return new char[] {  		'\u224E'  	};  case "&bumpeq;":  	return new char[] {  		'\u224F'  	};  case "&Cacute;":  	return new char[] {  		'\u0106'  	};  case "&cacute;":  	return new char[] {  		'\u0107'  	};  case "&Cap;":  	return new char[] {  		'\u22D2'  	};  case "&cap;":  	return new char[] {  		'\u2229'  	};  case "&capand;":  	return new char[] {  		'\u2A44'  	};  case "&capbrcup;":  	return new char[] {  		'\u2A49'  	};  case "&capcap;":  	return new char[] {  		'\u2A4B'  	};  case "&capcup;":  	return new char[] {  		'\u2A47'  	};  case "&capdot;":  	return new char[] {  		'\u2A40'  	};  case "&CapitalDifferentialD;":  	return new char[] {  		'\u2145'  	};  case "&caps;":  	return new char[] {  		'\u2229''  		'\uFE00'  	};  case "&caret;":  	return new char[] {  		'\u2041'  	};  case "&caron;":  	return new char[] {  		'\u02C7'  	};  case "&Cayleys;":  	return new char[] {  		'\u212D'  	};  case "&ccaps;":  	return new char[] {  		'\u2A4D'  	};  case "&Ccaron;":  	return new char[] {  		'\u010C'  	};  case "&ccaron;":  	return new char[] {  		'\u010D'  	};  case "&Ccedil;":  	return new char[] {  		'\u00C7'  	};  case "&Ccedil":  	return new char[] {  		'\u00C7'  	};  case "&ccedil;":  	return new char[] {  		'\u00E7'  	};  case "&ccedil":  	return new char[] {  		'\u00E7'  	};  case "&Ccirc;":  	return new char[] {  		'\u0108'  	};  case "&ccirc;":  	return new char[] {  		'\u0109'  	};  case "&Cconint;":  	return new char[] {  		'\u2230'  	};  case "&ccups;":  	return new char[] {  		'\u2A4C'  	};  case "&ccupssm;":  	return new char[] {  		'\u2A50'  	};  case "&Cdot;":  	return new char[] {  		'\u010A'  	};  case "&cdot;":  	return new char[] {  		'\u010B'  	};  case "&cedil;":  	return new char[] {  		'\u00B8'  	};  case "&cedil":  	return new char[] {  		'\u00B8'  	};  case "&Cedilla;":  	return new char[] {  		'\u00B8'  	};  case "&cemptyv;":  	return new char[] {  		'\u29B2'  	};  case "&cent;":  	return new char[] {  		'\u00A2'  	};  case "&cent":  	return new char[] {  		'\u00A2'  	};  case "&CenterDot;":  	return new char[] {  		'\u00B7'  	};  case "&centerdot;":  	return new char[] {  		'\u00B7'  	};  case "&Cfr;":  	return new char[] {  		'\u212D'  	};  case "&cfr;":  	return new char[] {  		'\uD835''  		'\uDD20'  	};  case "&CHcy;":  	return new char[] {  		'\u0427'  	};  case "&chcy;":  	return new char[] {  		'\u0447'  	};  case "&check;":  	return new char[] {  		'\u2713'  	};  case "&checkmark;":  	return new char[] {  		'\u2713'  	};  case "&Chi;":  	return new char[] {  		'\u03A7'  	};  case "&chi;":  	return new char[] {  		'\u03C7'  	};  case "&cir;":  	return new char[] {  		'\u25CB'  	};  case "&circ;":  	return new char[] {  		'\u02C6'  	};  case "&circeq;":  	return new char[] {  		'\u2257'  	};  case "&circlearrowleft;":  	return new char[] {  		'\u21BA'  	};  case "&circlearrowright;":  	return new char[] {  		'\u21BB'  	};  case "&circledast;":  	return new char[] {  		'\u229B'  	};  case "&circledcirc;":  	return new char[] {  		'\u229A'  	};  case "&circleddash;":  	return new char[] {  		'\u229D'  	};  case "&CircleDot;":  	return new char[] {  		'\u2299'  	};  case "&circledR;":  	return new char[] {  		'\u00AE'  	};  case "&circledS;":  	return new char[] {  		'\u24C8'  	};  case "&CircleMinus;":  	return new char[] {  		'\u2296'  	};  case "&CirclePlus;":  	return new char[] {  		'\u2295'  	};  case "&CircleTimes;":  	return new char[] {  		'\u2297'  	};  case "&cirE;":  	return new char[] {  		'\u29C3'  	};  case "&cire;":  	return new char[] {  		'\u2257'  	};  case "&cirfnint;":  	return new char[] {  		'\u2A10'  	};  case "&cirmid;":  	return new char[] {  		'\u2AEF'  	};  case "&cirscir;":  	return new char[] {  		'\u29C2'  	};  case "&ClockwiseContourIntegral;":  	return new char[] {  		'\u2232'  	};  case "&CloseCurlyDoubleQuote;":  	return new char[] {  		'\u201D'  	};  case "&CloseCurlyQuote;":  	return new char[] {  		'\u2019'  	};  case "&clubs;":  	return new char[] {  		'\u2663'  	};  case "&clubsuit;":  	return new char[] {  		'\u2663'  	};  case "&Colon;":  	return new char[] {  		'\u2237'  	};  case "&colon;":  	return new char[] {  		'\u003A'  	};  case "&Colone;":  	return new char[] {  		'\u2A74'  	};  case "&colone;":  	return new char[] {  		'\u2254'  	};  case "&coloneq;":  	return new char[] {  		'\u2254'  	};  case "&comma;":  	return new char[] {  		'\u002C'  	};  case "&commat;":  	return new char[] {  		'\u0040'  	};  case "&comp;":  	return new char[] {  		'\u2201'  	};  case "&compfn;":  	return new char[] {  		'\u2218'  	};  case "&complement;":  	return new char[] {  		'\u2201'  	};  case "&complexes;":  	return new char[] {  		'\u2102'  	};  case "&cong;":  	return new char[] {  		'\u2245'  	};  case "&congdot;":  	return new char[] {  		'\u2A6D'  	};  case "&Congruent;":  	return new char[] {  		'\u2261'  	};  case "&Conint;":  	return new char[] {  		'\u222F'  	};  case "&conint;":  	return new char[] {  		'\u222E'  	};  case "&ContourIntegral;":  	return new char[] {  		'\u222E'  	};  case "&Copf;":  	return new char[] {  		'\u2102'  	};  case "&copf;":  	return new char[] {  		'\uD835''  		'\uDD54'  	};  case "&coprod;":  	return new char[] {  		'\u2210'  	};  case "&Coproduct;":  	return new char[] {  		'\u2210'  	};  case "&COPY;":  	return new char[] {  		'\u00A9'  	};  case "&COPY":  	return new char[] {  		'\u00A9'  	};  case "&copy;":  	return new char[] {  		'\u00A9'  	};  case "&copy":  	return new char[] {  		'\u00A9'  	};  case "&copysr;":  	return new char[] {  		'\u2117'  	};  case "&CounterClockwiseContourIntegral;":  	return new char[] {  		'\u2233'  	};  case "&crarr;":  	return new char[] {  		'\u21B5'  	};  case "&Cross;":  	return new char[] {  		'\u2A2F'  	};  case "&cross;":  	return new char[] {  		'\u2717'  	};  case "&Cscr;":  	return new char[] {  		'\uD835''  		'\uDC9E'  	};  case "&cscr;":  	return new char[] {  		'\uD835''  		'\uDCB8'  	};  case "&csub;":  	return new char[] {  		'\u2ACF'  	};  case "&csube;":  	return new char[] {  		'\u2AD1'  	};  case "&csup;":  	return new char[] {  		'\u2AD0'  	};  case "&csupe;":  	return new char[] {  		'\u2AD2'  	};  case "&ctdot;":  	return new char[] {  		'\u22EF'  	};  case "&cudarrl;":  	return new char[] {  		'\u2938'  	};  case "&cudarrr;":  	return new char[] {  		'\u2935'  	};  case "&cuepr;":  	return new char[] {  		'\u22DE'  	};  case "&cuesc;":  	return new char[] {  		'\u22DF'  	};  case "&cularr;":  	return new char[] {  		'\u21B6'  	};  case "&cularrp;":  	return new char[] {  		'\u293D'  	};  case "&Cup;":  	return new char[] {  		'\u22D3'  	};  case "&cup;":  	return new char[] {  		'\u222A'  	};  case "&cupbrcap;":  	return new char[] {  		'\u2A48'  	};  case "&CupCap;":  	return new char[] {  		'\u224D'  	};  case "&cupcap;":  	return new char[] {  		'\u2A46'  	};  case "&cupcup;":  	return new char[] {  		'\u2A4A'  	};  case "&cupdot;":  	return new char[] {  		'\u228D'  	};  case "&cupor;":  	return new char[] {  		'\u2A45'  	};  case "&cups;":  	return new char[] {  		'\u222A''  		'\uFE00'  	};  case "&curarr;":  	return new char[] {  		'\u21B7'  	};  case "&curarrm;":  	return new char[] {  		'\u293C'  	};  case "&curlyeqprec;":  	return new char[] {  		'\u22DE'  	};  case "&curlyeqsucc;":  	return new char[] {  		'\u22DF'  	};  case "&curlyvee;":  	return new char[] {  		'\u22CE'  	};  case "&curlywedge;":  	return new char[] {  		'\u22CF'  	};  case "&curren;":  	return new char[] {  		'\u00A4'  	};  case "&curren":  	return new char[] {  		'\u00A4'  	};  case "&curvearrowleft;":  	return new char[] {  		'\u21B6'  	};  case "&curvearrowright;":  	return new char[] {  		'\u21B7'  	};  case "&cuvee;":  	return new char[] {  		'\u22CE'  	};  case "&cuwed;":  	return new char[] {  		'\u22CF'  	};  case "&cwconint;":  	return new char[] {  		'\u2232'  	};  case "&cwint;":  	return new char[] {  		'\u2231'  	};  case "&cylcty;":  	return new char[] {  		'\u232D'  	};  case "&Dagger;":  	return new char[] {  		'\u2021'  	};  case "&dagger;":  	return new char[] {  		'\u2020'  	};  case "&daleth;":  	return new char[] {  		'\u2138'  	};  case "&Darr;":  	return new char[] {  		'\u21A1'  	};  case "&dArr;":  	return new char[] {  		'\u21D3'  	};  case "&darr;":  	return new char[] {  		'\u2193'  	};  case "&dash;":  	return new char[] {  		'\u2010'  	};  case "&Dashv;":  	return new char[] {  		'\u2AE4'  	};  case "&dashv;":  	return new char[] {  		'\u22A3'  	};  case "&dbkarow;":  	return new char[] {  		'\u290F'  	};  case "&dblac;":  	return new char[] {  		'\u02DD'  	};  case "&Dcaron;":  	return new char[] {  		'\u010E'  	};  case "&dcaron;":  	return new char[] {  		'\u010F'  	};  case "&Dcy;":  	return new char[] {  		'\u0414'  	};  case "&dcy;":  	return new char[] {  		'\u0434'  	};  case "&DD;":  	return new char[] {  		'\u2145'  	};  case "&dd;":  	return new char[] {  		'\u2146'  	};  case "&ddagger;":  	return new char[] {  		'\u2021'  	};  case "&ddarr;":  	return new char[] {  		'\u21CA'  	};  case "&DDotrahd;":  	return new char[] {  		'\u2911'  	};  case "&ddotseq;":  	return new char[] {  		'\u2A77'  	};  case "&deg;":  	return new char[] {  		'\u00B0'  	};  case "&deg":  	return new char[] {  		'\u00B0'  	};  case "&Del;":  	return new char[] {  		'\u2207'  	};  case "&Delta;":  	return new char[] {  		'\u0394'  	};  case "&delta;":  	return new char[] {  		'\u03B4'  	};  case "&demptyv;":  	return new char[] {  		'\u29B1'  	};  case "&dfisht;":  	return new char[] {  		'\u297F'  	};  case "&Dfr;":  	return new char[] {  		'\uD835''  		'\uDD07'  	};  case "&dfr;":  	return new char[] {  		'\uD835''  		'\uDD21'  	};  case "&dHar;":  	return new char[] {  		'\u2965'  	};  case "&dharl;":  	return new char[] {  		'\u21C3'  	};  case "&dharr;":  	return new char[] {  		'\u21C2'  	};  case "&DiacriticalAcute;":  	return new char[] {  		'\u00B4'  	};  case "&DiacriticalDot;":  	return new char[] {  		'\u02D9'  	};  case "&DiacriticalDoubleAcute;":  	return new char[] {  		'\u02DD'  	};  case "&DiacriticalGrave;":  	return new char[] {  		'\u0060'  	};  case "&DiacriticalTilde;":  	return new char[] {  		'\u02DC'  	};  case "&diam;":  	return new char[] {  		'\u22C4'  	};  case "&Diamond;":  	return new char[] {  		'\u22C4'  	};  case "&diamond;":  	return new char[] {  		'\u22C4'  	};  case "&diamondsuit;":  	return new char[] {  		'\u2666'  	};  case "&diams;":  	return new char[] {  		'\u2666'  	};  case "&die;":  	return new char[] {  		'\u00A8'  	};  case "&DifferentialD;":  	return new char[] {  		'\u2146'  	};  case "&digamma;":  	return new char[] {  		'\u03DD'  	};  case "&disin;":  	return new char[] {  		'\u22F2'  	};  case "&div;":  	return new char[] {  		'\u00F7'  	};  case "&divide;":  	return new char[] {  		'\u00F7'  	};  case "&divide":  	return new char[] {  		'\u00F7'  	};  case "&divideontimes;":  	return new char[] {  		'\u22C7'  	};  case "&divonx;":  	return new char[] {  		'\u22C7'  	};  case "&DJcy;":  	return new char[] {  		'\u0402'  	};  case "&djcy;":  	return new char[] {  		'\u0452'  	};  case "&dlcorn;":  	return new char[] {  		'\u231E'  	};  case "&dlcrop;":  	return new char[] {  		'\u230D'  	};  case "&dollar;":  	return new char[] {  		'\u0024'  	};  case "&Dopf;":  	return new char[] {  		'\uD835''  		'\uDD3B'  	};  case "&dopf;":  	return new char[] {  		'\uD835''  		'\uDD55'  	};  case "&Dot;":  	return new char[] {  		'\u00A8'  	};  case "&dot;":  	return new char[] {  		'\u02D9'  	};  case "&DotDot;":  	return new char[] {  		'\u20DC'  	};  case "&doteq;":  	return new char[] {  		'\u2250'  	};  case "&doteqdot;":  	return new char[] {  		'\u2251'  	};  case "&DotEqual;":  	return new char[] {  		'\u2250'  	};  case "&dotminus;":  	return new char[] {  		'\u2238'  	};  case "&dotplus;":  	return new char[] {  		'\u2214'  	};  case "&dotsquare;":  	return new char[] {  		'\u22A1'  	};  case "&doublebarwedge;":  	return new char[] {  		'\u2306'  	};  case "&DoubleContourIntegral;":  	return new char[] {  		'\u222F'  	};  case "&DoubleDot;":  	return new char[] {  		'\u00A8'  	};  case "&DoubleDownArrow;":  	return new char[] {  		'\u21D3'  	};  case "&DoubleLeftArrow;":  	return new char[] {  		'\u21D0'  	};  case "&DoubleLeftRightArrow;":  	return new char[] {  		'\u21D4'  	};  case "&DoubleLeftTee;":  	return new char[] {  		'\u2AE4'  	};  case "&DoubleLongLeftArrow;":  	return new char[] {  		'\u27F8'  	};  case "&DoubleLongLeftRightArrow;":  	return new char[] {  		'\u27FA'  	};  case "&DoubleLongRightArrow;":  	return new char[] {  		'\u27F9'  	};  case "&DoubleRightArrow;":  	return new char[] {  		'\u21D2'  	};  case "&DoubleRightTee;":  	return new char[] {  		'\u22A8'  	};  case "&DoubleUpArrow;":  	return new char[] {  		'\u21D1'  	};  case "&DoubleUpDownArrow;":  	return new char[] {  		'\u21D5'  	};  case "&DoubleVerticalBar;":  	return new char[] {  		'\u2225'  	};  case "&DownArrow;":  	return new char[] {  		'\u2193'  	};  case "&Downarrow;":  	return new char[] {  		'\u21D3'  	};  case "&downarrow;":  	return new char[] {  		'\u2193'  	};  case "&DownArrowBar;":  	return new char[] {  		'\u2913'  	};  case "&DownArrowUpArrow;":  	return new char[] {  		'\u21F5'  	};  case "&DownBreve;":  	return new char[] {  		'\u0311'  	};  case "&downdownarrows;":  	return new char[] {  		'\u21CA'  	};  case "&downharpoonleft;":  	return new char[] {  		'\u21C3'  	};  case "&downharpoonright;":  	return new char[] {  		'\u21C2'  	};  case "&DownLeftRightVector;":  	return new char[] {  		'\u2950'  	};  case "&DownLeftTeeVector;":  	return new char[] {  		'\u295E'  	};  case "&DownLeftVector;":  	return new char[] {  		'\u21BD'  	};  case "&DownLeftVectorBar;":  	return new char[] {  		'\u2956'  	};  case "&DownRightTeeVector;":  	return new char[] {  		'\u295F'  	};  case "&DownRightVector;":  	return new char[] {  		'\u21C1'  	};  case "&DownRightVectorBar;":  	return new char[] {  		'\u2957'  	};  case "&DownTee;":  	return new char[] {  		'\u22A4'  	};  case "&DownTeeArrow;":  	return new char[] {  		'\u21A7'  	};  case "&drbkarow;":  	return new char[] {  		'\u2910'  	};  case "&drcorn;":  	return new char[] {  		'\u231F'  	};  case "&drcrop;":  	return new char[] {  		'\u230C'  	};  case "&Dscr;":  	return new char[] {  		'\uD835''  		'\uDC9F'  	};  case "&dscr;":  	return new char[] {  		'\uD835''  		'\uDCB9'  	};  case "&DScy;":  	return new char[] {  		'\u0405'  	};  case "&dscy;":  	return new char[] {  		'\u0455'  	};  case "&dsol;":  	return new char[] {  		'\u29F6'  	};  case "&Dstrok;":  	return new char[] {  		'\u0110'  	};  case "&dstrok;":  	return new char[] {  		'\u0111'  	};  case "&dtdot;":  	return new char[] {  		'\u22F1'  	};  case "&dtri;":  	return new char[] {  		'\u25BF'  	};  case "&dtrif;":  	return new char[] {  		'\u25BE'  	};  case "&duarr;":  	return new char[] {  		'\u21F5'  	};  case "&duhar;":  	return new char[] {  		'\u296F'  	};  case "&dwangle;":  	return new char[] {  		'\u29A6'  	};  case "&DZcy;":  	return new char[] {  		'\u040F'  	};  case "&dzcy;":  	return new char[] {  		'\u045F'  	};  case "&dzigrarr;":  	return new char[] {  		'\u27FF'  	};  case "&Eacute;":  	return new char[] {  		'\u00C9'  	};  case "&Eacute":  	return new char[] {  		'\u00C9'  	};  case "&eacute;":  	return new char[] {  		'\u00E9'  	};  case "&eacute":  	return new char[] {  		'\u00E9'  	};  case "&easter;":  	return new char[] {  		'\u2A6E'  	};  case "&Ecaron;":  	return new char[] {  		'\u011A'  	};  case "&ecaron;":  	return new char[] {  		'\u011B'  	};  case "&ecir;":  	return new char[] {  		'\u2256'  	};  case "&Ecirc;":  	return new char[] {  		'\u00CA'  	};  case "&Ecirc":  	return new char[] {  		'\u00CA'  	};  case "&ecirc;":  	return new char[] {  		'\u00EA'  	};  case "&ecirc":  	return new char[] {  		'\u00EA'  	};  case "&ecolon;":  	return new char[] {  		'\u2255'  	};  case "&Ecy;":  	return new char[] {  		'\u042D'  	};  case "&ecy;":  	return new char[] {  		'\u044D'  	};  case "&eDDot;":  	return new char[] {  		'\u2A77'  	};  case "&Edot;":  	return new char[] {  		'\u0116'  	};  case "&eDot;":  	return new char[] {  		'\u2251'  	};  case "&edot;":  	return new char[] {  		'\u0117'  	};  case "&ee;":  	return new char[] {  		'\u2147'  	};  case "&efDot;":  	return new char[] {  		'\u2252'  	};  case "&Efr;":  	return new char[] {  		'\uD835''  		'\uDD08'  	};  case "&efr;":  	return new char[] {  		'\uD835''  		'\uDD22'  	};  case "&eg;":  	return new char[] {  		'\u2A9A'  	};  case "&Egrave;":  	return new char[] {  		'\u00C8'  	};  case "&Egrave":  	return new char[] {  		'\u00C8'  	};  case "&egrave;":  	return new char[] {  		'\u00E8'  	};  case "&egrave":  	return new char[] {  		'\u00E8'  	};  case "&egs;":  	return new char[] {  		'\u2A96'  	};  case "&egsdot;":  	return new char[] {  		'\u2A98'  	};  case "&el;":  	return new char[] {  		'\u2A99'  	};  case "&Element;":  	return new char[] {  		'\u2208'  	};  case "&elinters;":  	return new char[] {  		'\u23E7'  	};  case "&ell;":  	return new char[] {  		'\u2113'  	};  case "&els;":  	return new char[] {  		'\u2A95'  	};  case "&elsdot;":  	return new char[] {  		'\u2A97'  	};  case "&Emacr;":  	return new char[] {  		'\u0112'  	};  case "&emacr;":  	return new char[] {  		'\u0113'  	};  case "&empty;":  	return new char[] {  		'\u2205'  	};  case "&emptyset;":  	return new char[] {  		'\u2205'  	};  case "&EmptySmallSquare;":  	return new char[] {  		'\u25FB'  	};  case "&emptyv;":  	return new char[] {  		'\u2205'  	};  case "&EmptyVerySmallSquare;":  	return new char[] {  		'\u25AB'  	};  case "&emsp;":  	return new char[] {  		'\u2003'  	};  case "&emsp13;":  	return new char[] {  		'\u2004'  	};  case "&emsp14;":  	return new char[] {  		'\u2005'  	};  case "&ENG;":  	return new char[] {  		'\u014A'  	};  case "&eng;":  	return new char[] {  		'\u014B'  	};  case "&ensp;":  	return new char[] {  		'\u2002'  	};  case "&Eogon;":  	return new char[] {  		'\u0118'  	};  case "&eogon;":  	return new char[] {  		'\u0119'  	};  case "&Eopf;":  	return new char[] {  		'\uD835''  		'\uDD3C'  	};  case "&eopf;":  	return new char[] {  		'\uD835''  		'\uDD56'  	};  case "&epar;":  	return new char[] {  		'\u22D5'  	};  case "&eparsl;":  	return new char[] {  		'\u29E3'  	};  case "&eplus;":  	return new char[] {  		'\u2A71'  	};  case "&epsi;":  	return new char[] {  		'\u03B5'  	};  case "&Epsilon;":  	return new char[] {  		'\u0395'  	};  case "&epsilon;":  	return new char[] {  		'\u03B5'  	};  case "&epsiv;":  	return new char[] {  		'\u03F5'  	};  case "&eqcirc;":  	return new char[] {  		'\u2256'  	};  case "&eqcolon;":  	return new char[] {  		'\u2255'  	};  case "&eqsim;":  	return new char[] {  		'\u2242'  	};  case "&eqslantgtr;":  	return new char[] {  		'\u2A96'  	};  case "&eqslantless;":  	return new char[] {  		'\u2A95'  	};  case "&Equal;":  	return new char[] {  		'\u2A75'  	};  case "&equals;":  	return new char[] {  		'\u003D'  	};  case "&EqualTilde;":  	return new char[] {  		'\u2242'  	};  case "&equest;":  	return new char[] {  		'\u225F'  	};  case "&Equilibrium;":  	return new char[] {  		'\u21CC'  	};  case "&equiv;":  	return new char[] {  		'\u2261'  	};  case "&equivDD;":  	return new char[] {  		'\u2A78'  	};  case "&eqvparsl;":  	return new char[] {  		'\u29E5'  	};  case "&erarr;":  	return new char[] {  		'\u2971'  	};  case "&erDot;":  	return new char[] {  		'\u2253'  	};  case "&Escr;":  	return new char[] {  		'\u2130'  	};  case "&escr;":  	return new char[] {  		'\u212F'  	};  case "&esdot;":  	return new char[] {  		'\u2250'  	};  case "&Esim;":  	return new char[] {  		'\u2A73'  	};  case "&esim;":  	return new char[] {  		'\u2242'  	};  case "&Eta;":  	return new char[] {  		'\u0397'  	};  case "&eta;":  	return new char[] {  		'\u03B7'  	};  case "&ETH;":  	return new char[] {  		'\u00D0'  	};  case "&ETH":  	return new char[] {  		'\u00D0'  	};  case "&eth;":  	return new char[] {  		'\u00F0'  	};  case "&eth":  	return new char[] {  		'\u00F0'  	};  case "&Euml;":  	return new char[] {  		'\u00CB'  	};  case "&Euml":  	return new char[] {  		'\u00CB'  	};  case "&euml;":  	return new char[] {  		'\u00EB'  	};  case "&euml":  	return new char[] {  		'\u00EB'  	};  case "&euro;":  	return new char[] {  		'\u20AC'  	};  case "&excl;":  	return new char[] {  		'\u0021'  	};  case "&exist;":  	return new char[] {  		'\u2203'  	};  case "&Exists;":  	return new char[] {  		'\u2203'  	};  case "&expectation;":  	return new char[] {  		'\u2130'  	};  case "&ExponentialE;":  	return new char[] {  		'\u2147'  	};  case "&exponentiale;":  	return new char[] {  		'\u2147'  	};  case "&fallingdotseq;":  	return new char[] {  		'\u2252'  	};  case "&Fcy;":  	return new char[] {  		'\u0424'  	};  case "&fcy;":  	return new char[] {  		'\u0444'  	};  case "&female;":  	return new char[] {  		'\u2640'  	};  case "&ffilig;":  	return new char[] {  		'\uFB03'  	};  case "&fflig;":  	return new char[] {  		'\uFB00'  	};  case "&ffllig;":  	return new char[] {  		'\uFB04'  	};  case "&Ffr;":  	return new char[] {  		'\uD835''  		'\uDD09'  	};  case "&ffr;":  	return new char[] {  		'\uD835''  		'\uDD23'  	};  case "&filig;":  	return new char[] {  		'\uFB01'  	};  case "&FilledSmallSquare;":  	return new char[] {  		'\u25FC'  	};  case "&FilledVerySmallSquare;":  	return new char[] {  		'\u25AA'  	};  case "&fjlig;":  	return new char[] {  		'\u0066''  		'\u006A'  	};  case "&flat;":  	return new char[] {  		'\u266D'  	};  case "&fllig;":  	return new char[] {  		'\uFB02'  	};  case "&fltns;":  	return new char[] {  		'\u25B1'  	};  case "&fnof;":  	return new char[] {  		'\u0192'  	};  case "&Fopf;":  	return new char[] {  		'\uD835''  		'\uDD3D'  	};  case "&fopf;":  	return new char[] {  		'\uD835''  		'\uDD57'  	};  case "&ForAll;":  	return new char[] {  		'\u2200'  	};  case "&forall;":  	return new char[] {  		'\u2200'  	};  case "&fork;":  	return new char[] {  		'\u22D4'  	};  case "&forkv;":  	return new char[] {  		'\u2AD9'  	};  case "&Fouriertrf;":  	return new char[] {  		'\u2131'  	};  case "&fpartint;":  	return new char[] {  		'\u2A0D'  	};  case "&frac12;":  	return new char[] {  		'\u00BD'  	};  case "&frac12":  	return new char[] {  		'\u00BD'  	};  case "&frac13;":  	return new char[] {  		'\u2153'  	};  case "&frac14;":  	return new char[] {  		'\u00BC'  	};  case "&frac14":  	return new char[] {  		'\u00BC'  	};  case "&frac15;":  	return new char[] {  		'\u2155'  	};  case "&frac16;":  	return new char[] {  		'\u2159'  	};  case "&frac18;":  	return new char[] {  		'\u215B'  	};  case "&frac23;":  	return new char[] {  		'\u2154'  	};  case "&frac25;":  	return new char[] {  		'\u2156'  	};  case "&frac34;":  	return new char[] {  		'\u00BE'  	};  case "&frac34":  	return new char[] {  		'\u00BE'  	};  case "&frac35;":  	return new char[] {  		'\u2157'  	};  case "&frac38;":  	return new char[] {  		'\u215C'  	};  case "&frac45;":  	return new char[] {  		'\u2158'  	};  case "&frac56;":  	return new char[] {  		'\u215A'  	};  case "&frac58;":  	return new char[] {  		'\u215D'  	};  case "&frac78;":  	return new char[] {  		'\u215E'  	};  case "&frasl;":  	return new char[] {  		'\u2044'  	};  case "&frown;":  	return new char[] {  		'\u2322'  	};  case "&Fscr;":  	return new char[] {  		'\u2131'  	};  case "&fscr;":  	return new char[] {  		'\uD835''  		'\uDCBB'  	};  case "&gacute;":  	return new char[] {  		'\u01F5'  	};  case "&Gamma;":  	return new char[] {  		'\u0393'  	};  case "&gamma;":  	return new char[] {  		'\u03B3'  	};  case "&Gammad;":  	return new char[] {  		'\u03DC'  	};  case "&gammad;":  	return new char[] {  		'\u03DD'  	};  case "&gap;":  	return new char[] {  		'\u2A86'  	};  case "&Gbreve;":  	return new char[] {  		'\u011E'  	};  case "&gbreve;":  	return new char[] {  		'\u011F'  	};  case "&Gcedil;":  	return new char[] {  		'\u0122'  	};  case "&Gcirc;":  	return new char[] {  		'\u011C'  	};  case "&gcirc;":  	return new char[] {  		'\u011D'  	};  case "&Gcy;":  	return new char[] {  		'\u0413'  	};  case "&gcy;":  	return new char[] {  		'\u0433'  	};  case "&Gdot;":  	return new char[] {  		'\u0120'  	};  case "&gdot;":  	return new char[] {  		'\u0121'  	};  case "&gE;":  	return new char[] {  		'\u2267'  	};  case "&ge;":  	return new char[] {  		'\u2265'  	};  case "&gEl;":  	return new char[] {  		'\u2A8C'  	};  case "&gel;":  	return new char[] {  		'\u22DB'  	};  case "&geq;":  	return new char[] {  		'\u2265'  	};  case "&geqq;":  	return new char[] {  		'\u2267'  	};  case "&geqslant;":  	return new char[] {  		'\u2A7E'  	};  case "&ges;":  	return new char[] {  		'\u2A7E'  	};  case "&gescc;":  	return new char[] {  		'\u2AA9'  	};  case "&gesdot;":  	return new char[] {  		'\u2A80'  	};  case "&gesdoto;":  	return new char[] {  		'\u2A82'  	};  case "&gesdotol;":  	return new char[] {  		'\u2A84'  	};  case "&gesl;":  	return new char[] {  		'\u22DB''  		'\uFE00'  	};  case "&gesles;":  	return new char[] {  		'\u2A94'  	};  case "&Gfr;":  	return new char[] {  		'\uD835''  		'\uDD0A'  	};  case "&gfr;":  	return new char[] {  		'\uD835''  		'\uDD24'  	};  case "&Gg;":  	return new char[] {  		'\u22D9'  	};  case "&gg;":  	return new char[] {  		'\u226B'  	};  case "&ggg;":  	return new char[] {  		'\u22D9'  	};  case "&gimel;":  	return new char[] {  		'\u2137'  	};  case "&GJcy;":  	return new char[] {  		'\u0403'  	};  case "&gjcy;":  	return new char[] {  		'\u0453'  	};  case "&gl;":  	return new char[] {  		'\u2277'  	};  case "&gla;":  	return new char[] {  		'\u2AA5'  	};  case "&glE;":  	return new char[] {  		'\u2A92'  	};  case "&glj;":  	return new char[] {  		'\u2AA4'  	};  case "&gnap;":  	return new char[] {  		'\u2A8A'  	};  case "&gnapprox;":  	return new char[] {  		'\u2A8A'  	};  case "&gnE;":  	return new char[] {  		'\u2269'  	};  case "&gne;":  	return new char[] {  		'\u2A88'  	};  case "&gneq;":  	return new char[] {  		'\u2A88'  	};  case "&gneqq;":  	return new char[] {  		'\u2269'  	};  case "&gnsim;":  	return new char[] {  		'\u22E7'  	};  case "&Gopf;":  	return new char[] {  		'\uD835''  		'\uDD3E'  	};  case "&gopf;":  	return new char[] {  		'\uD835''  		'\uDD58'  	};  case "&grave;":  	return new char[] {  		'\u0060'  	};  case "&GreaterEqual;":  	return new char[] {  		'\u2265'  	};  case "&GreaterEqualLess;":  	return new char[] {  		'\u22DB'  	};  case "&GreaterFullEqual;":  	return new char[] {  		'\u2267'  	};  case "&GreaterGreater;":  	return new char[] {  		'\u2AA2'  	};  case "&GreaterLess;":  	return new char[] {  		'\u2277'  	};  case "&GreaterSlantEqual;":  	return new char[] {  		'\u2A7E'  	};  case "&GreaterTilde;":  	return new char[] {  		'\u2273'  	};  case "&Gscr;":  	return new char[] {  		'\uD835''  		'\uDCA2'  	};  case "&gscr;":  	return new char[] {  		'\u210A'  	};  case "&gsim;":  	return new char[] {  		'\u2273'  	};  case "&gsime;":  	return new char[] {  		'\u2A8E'  	};  case "&gsiml;":  	return new char[] {  		'\u2A90'  	};  case "&GT;":  	return new char[] {  		'\u003E'  	};  case "&GT":  	return new char[] {  		'\u003E'  	};  case "&Gt;":  	return new char[] {  		'\u226B'  	};  case "&gt;":  	return new char[] {  		'\u003E'  	};  case "&gt":  	return new char[] {  		'\u003E'  	};  case "&gtcc;":  	return new char[] {  		'\u2AA7'  	};  case "&gtcir;":  	return new char[] {  		'\u2A7A'  	};  case "&gtdot;":  	return new char[] {  		'\u22D7'  	};  case "&gtlPar;":  	return new char[] {  		'\u2995'  	};  case "&gtquest;":  	return new char[] {  		'\u2A7C'  	};  case "&gtrapprox;":  	return new char[] {  		'\u2A86'  	};  case "&gtrarr;":  	return new char[] {  		'\u2978'  	};  case "&gtrdot;":  	return new char[] {  		'\u22D7'  	};  case "&gtreqless;":  	return new char[] {  		'\u22DB'  	};  case "&gtreqqless;":  	return new char[] {  		'\u2A8C'  	};  case "&gtrless;":  	return new char[] {  		'\u2277'  	};  case "&gtrsim;":  	return new char[] {  		'\u2273'  	};  case "&gvertneqq;":  	return new char[] {  		'\u2269''  		'\uFE00'  	};  case "&gvnE;":  	return new char[] {  		'\u2269''  		'\uFE00'  	};  case "&Hacek;":  	return new char[] {  		'\u02C7'  	};  case "&hairsp;":  	return new char[] {  		'\u200A'  	};  case "&half;":  	return new char[] {  		'\u00BD'  	};  case "&hamilt;":  	return new char[] {  		'\u210B'  	};  case "&HARDcy;":  	return new char[] {  		'\u042A'  	};  case "&hardcy;":  	return new char[] {  		'\u044A'  	};  case "&hArr;":  	return new char[] {  		'\u21D4'  	};  case "&harr;":  	return new char[] {  		'\u2194'  	};  case "&harrcir;":  	return new char[] {  		'\u2948'  	};  case "&harrw;":  	return new char[] {  		'\u21AD'  	};  case "&Hat;":  	return new char[] {  		'\u005E'  	};  case "&hbar;":  	return new char[] {  		'\u210F'  	};  case "&Hcirc;":  	return new char[] {  		'\u0124'  	};  case "&hcirc;":  	return new char[] {  		'\u0125'  	};  case "&hearts;":  	return new char[] {  		'\u2665'  	};  case "&heartsuit;":  	return new char[] {  		'\u2665'  	};  case "&hellip;":  	return new char[] {  		'\u2026'  	};  case "&hercon;":  	return new char[] {  		'\u22B9'  	};  case "&Hfr;":  	return new char[] {  		'\u210C'  	};  case "&hfr;":  	return new char[] {  		'\uD835''  		'\uDD25'  	};  case "&HilbertSpace;":  	return new char[] {  		'\u210B'  	};  case "&hksearow;":  	return new char[] {  		'\u2925'  	};  case "&hkswarow;":  	return new char[] {  		'\u2926'  	};  case "&hoarr;":  	return new char[] {  		'\u21FF'  	};  case "&homtht;":  	return new char[] {  		'\u223B'  	};  case "&hookleftarrow;":  	return new char[] {  		'\u21A9'  	};  case "&hookrightarrow;":  	return new char[] {  		'\u21AA'  	};  case "&Hopf;":  	return new char[] {  		'\u210D'  	};  case "&hopf;":  	return new char[] {  		'\uD835''  		'\uDD59'  	};  case "&horbar;":  	return new char[] {  		'\u2015'  	};  case "&HorizontalLine;":  	return new char[] {  		'\u2500'  	};  case "&Hscr;":  	return new char[] {  		'\u210B'  	};  case "&hscr;":  	return new char[] {  		'\uD835''  		'\uDCBD'  	};  case "&hslash;":  	return new char[] {  		'\u210F'  	};  case "&Hstrok;":  	return new char[] {  		'\u0126'  	};  case "&hstrok;":  	return new char[] {  		'\u0127'  	};  case "&HumpDownHump;":  	return new char[] {  		'\u224E'  	};  case "&HumpEqual;":  	return new char[] {  		'\u224F'  	};  case "&hybull;":  	return new char[] {  		'\u2043'  	};  case "&hyphen;":  	return new char[] {  		'\u2010'  	};  case "&Iacute;":  	return new char[] {  		'\u00CD'  	};  case "&Iacute":  	return new char[] {  		'\u00CD'  	};  case "&iacute;":  	return new char[] {  		'\u00ED'  	};  case "&iacute":  	return new char[] {  		'\u00ED'  	};  case "&ic;":  	return new char[] {  		'\u2063'  	};  case "&Icirc;":  	return new char[] {  		'\u00CE'  	};  case "&Icirc":  	return new char[] {  		'\u00CE'  	};  case "&icirc;":  	return new char[] {  		'\u00EE'  	};  case "&icirc":  	return new char[] {  		'\u00EE'  	};  case "&Icy;":  	return new char[] {  		'\u0418'  	};  case "&icy;":  	return new char[] {  		'\u0438'  	};  case "&Idot;":  	return new char[] {  		'\u0130'  	};  case "&IEcy;":  	return new char[] {  		'\u0415'  	};  case "&iecy;":  	return new char[] {  		'\u0435'  	};  case "&iexcl;":  	return new char[] {  		'\u00A1'  	};  case "&iexcl":  	return new char[] {  		'\u00A1'  	};  case "&iff;":  	return new char[] {  		'\u21D4'  	};  case "&Ifr;":  	return new char[] {  		'\u2111'  	};  case "&ifr;":  	return new char[] {  		'\uD835''  		'\uDD26'  	};  case "&Igrave;":  	return new char[] {  		'\u00CC'  	};  case "&Igrave":  	return new char[] {  		'\u00CC'  	};  case "&igrave;":  	return new char[] {  		'\u00EC'  	};  case "&igrave":  	return new char[] {  		'\u00EC'  	};  case "&ii;":  	return new char[] {  		'\u2148'  	};  case "&iiiint;":  	return new char[] {  		'\u2A0C'  	};  case "&iiint;":  	return new char[] {  		'\u222D'  	};  case "&iinfin;":  	return new char[] {  		'\u29DC'  	};  case "&iiota;":  	return new char[] {  		'\u2129'  	};  case "&IJlig;":  	return new char[] {  		'\u0132'  	};  case "&ijlig;":  	return new char[] {  		'\u0133'  	};  case "&Im;":  	return new char[] {  		'\u2111'  	};  case "&Imacr;":  	return new char[] {  		'\u012A'  	};  case "&imacr;":  	return new char[] {  		'\u012B'  	};  case "&image;":  	return new char[] {  		'\u2111'  	};  case "&ImaginaryI;":  	return new char[] {  		'\u2148'  	};  case "&imagline;":  	return new char[] {  		'\u2110'  	};  case "&imagpart;":  	return new char[] {  		'\u2111'  	};  case "&imath;":  	return new char[] {  		'\u0131'  	};  case "&imof;":  	return new char[] {  		'\u22B7'  	};  case "&imped;":  	return new char[] {  		'\u01B5'  	};  case "&Implies;":  	return new char[] {  		'\u21D2'  	};  case "&in;":  	return new char[] {  		'\u2208'  	};  case "&incare;":  	return new char[] {  		'\u2105'  	};  case "&infin;":  	return new char[] {  		'\u221E'  	};  case "&infintie;":  	return new char[] {  		'\u29DD'  	};  case "&inodot;":  	return new char[] {  		'\u0131'  	};  case "&Int;":  	return new char[] {  		'\u222C'  	};  case "&int;":  	return new char[] {  		'\u222B'  	};  case "&intcal;":  	return new char[] {  		'\u22BA'  	};  case "&integers;":  	return new char[] {  		'\u2124'  	};  case "&Integral;":  	return new char[] {  		'\u222B'  	};  case "&intercal;":  	return new char[] {  		'\u22BA'  	};  case "&Intersection;":  	return new char[] {  		'\u22C2'  	};  case "&intlarhk;":  	return new char[] {  		'\u2A17'  	};  case "&intprod;":  	return new char[] {  		'\u2A3C'  	};  case "&InvisibleComma;":  	return new char[] {  		'\u2063'  	};  case "&InvisibleTimes;":  	return new char[] {  		'\u2062'  	};  case "&IOcy;":  	return new char[] {  		'\u0401'  	};  case "&iocy;":  	return new char[] {  		'\u0451'  	};  case "&Iogon;":  	return new char[] {  		'\u012E'  	};  case "&iogon;":  	return new char[] {  		'\u012F'  	};  case "&Iopf;":  	return new char[] {  		'\uD835''  		'\uDD40'  	};  case "&iopf;":  	return new char[] {  		'\uD835''  		'\uDD5A'  	};  case "&Iota;":  	return new char[] {  		'\u0399'  	};  case "&iota;":  	return new char[] {  		'\u03B9'  	};  case "&iprod;":  	return new char[] {  		'\u2A3C'  	};  case "&iquest;":  	return new char[] {  		'\u00BF'  	};  case "&iquest":  	return new char[] {  		'\u00BF'  	};  case "&Iscr;":  	return new char[] {  		'\u2110'  	};  case "&iscr;":  	return new char[] {  		'\uD835''  		'\uDCBE'  	};  case "&isin;":  	return new char[] {  		'\u2208'  	};  case "&isindot;":  	return new char[] {  		'\u22F5'  	};  case "&isinE;":  	return new char[] {  		'\u22F9'  	};  case "&isins;":  	return new char[] {  		'\u22F4'  	};  case "&isinsv;":  	return new char[] {  		'\u22F3'  	};  case "&isinv;":  	return new char[] {  		'\u2208'  	};  case "&it;":  	return new char[] {  		'\u2062'  	};  case "&Itilde;":  	return new char[] {  		'\u0128'  	};  case "&itilde;":  	return new char[] {  		'\u0129'  	};  case "&Iukcy;":  	return new char[] {  		'\u0406'  	};  case "&iukcy;":  	return new char[] {  		'\u0456'  	};  case "&Iuml;":  	return new char[] {  		'\u00CF'  	};  case "&Iuml":  	return new char[] {  		'\u00CF'  	};  case "&iuml;":  	return new char[] {  		'\u00EF'  	};  case "&iuml":  	return new char[] {  		'\u00EF'  	};  case "&Jcirc;":  	return new char[] {  		'\u0134'  	};  case "&jcirc;":  	return new char[] {  		'\u0135'  	};  case "&Jcy;":  	return new char[] {  		'\u0419'  	};  case "&jcy;":  	return new char[] {  		'\u0439'  	};  case "&Jfr;":  	return new char[] {  		'\uD835''  		'\uDD0D'  	};  case "&jfr;":  	return new char[] {  		'\uD835''  		'\uDD27'  	};  case "&jmath;":  	return new char[] {  		'\u0237'  	};  case "&Jopf;":  	return new char[] {  		'\uD835''  		'\uDD41'  	};  case "&jopf;":  	return new char[] {  		'\uD835''  		'\uDD5B'  	};  case "&Jscr;":  	return new char[] {  		'\uD835''  		'\uDCA5'  	};  case "&jscr;":  	return new char[] {  		'\uD835''  		'\uDCBF'  	};  case "&Jsercy;":  	return new char[] {  		'\u0408'  	};  case "&jsercy;":  	return new char[] {  		'\u0458'  	};  case "&Jukcy;":  	return new char[] {  		'\u0404'  	};  case "&jukcy;":  	return new char[] {  		'\u0454'  	};  case "&Kappa;":  	return new char[] {  		'\u039A'  	};  case "&kappa;":  	return new char[] {  		'\u03BA'  	};  case "&kappav;":  	return new char[] {  		'\u03F0'  	};  case "&Kcedil;":  	return new char[] {  		'\u0136'  	};  case "&kcedil;":  	return new char[] {  		'\u0137'  	};  case "&Kcy;":  	return new char[] {  		'\u041A'  	};  case "&kcy;":  	return new char[] {  		'\u043A'  	};  case "&Kfr;":  	return new char[] {  		'\uD835''  		'\uDD0E'  	};  case "&kfr;":  	return new char[] {  		'\uD835''  		'\uDD28'  	};  case "&kgreen;":  	return new char[] {  		'\u0138'  	};  case "&KHcy;":  	return new char[] {  		'\u0425'  	};  case "&khcy;":  	return new char[] {  		'\u0445'  	};  case "&KJcy;":  	return new char[] {  		'\u040C'  	};  case "&kjcy;":  	return new char[] {  		'\u045C'  	};  case "&Kopf;":  	return new char[] {  		'\uD835''  		'\uDD42'  	};  case "&kopf;":  	return new char[] {  		'\uD835''  		'\uDD5C'  	};  case "&Kscr;":  	return new char[] {  		'\uD835''  		'\uDCA6'  	};  case "&kscr;":  	return new char[] {  		'\uD835''  		'\uDCC0'  	};  case "&lAarr;":  	return new char[] {  		'\u21DA'  	};  case "&Lacute;":  	return new char[] {  		'\u0139'  	};  case "&lacute;":  	return new char[] {  		'\u013A'  	};  case "&laemptyv;":  	return new char[] {  		'\u29B4'  	};  case "&lagran;":  	return new char[] {  		'\u2112'  	};  case "&Lambda;":  	return new char[] {  		'\u039B'  	};  case "&lambda;":  	return new char[] {  		'\u03BB'  	};  case "&Lang;":  	return new char[] {  		'\u27EA'  	};  case "&lang;":  	return new char[] {  		'\u27E8'  	};  case "&langd;":  	return new char[] {  		'\u2991'  	};  case "&langle;":  	return new char[] {  		'\u27E8'  	};  case "&lap;":  	return new char[] {  		'\u2A85'  	};  case "&Laplacetrf;":  	return new char[] {  		'\u2112'  	};  case "&laquo;":  	return new char[] {  		'\u00AB'  	};  case "&laquo":  	return new char[] {  		'\u00AB'  	};  case "&Larr;":  	return new char[] {  		'\u219E'  	};  case "&lArr;":  	return new char[] {  		'\u21D0'  	};  case "&larr;":  	return new char[] {  		'\u2190'  	};  case "&larrb;":  	return new char[] {  		'\u21E4'  	};  case "&larrbfs;":  	return new char[] {  		'\u291F'  	};  case "&larrfs;":  	return new char[] {  		'\u291D'  	};  case "&larrhk;":  	return new char[] {  		'\u21A9'  	};  case "&larrlp;":  	return new char[] {  		'\u21AB'  	};  case "&larrpl;":  	return new char[] {  		'\u2939'  	};  case "&larrsim;":  	return new char[] {  		'\u2973'  	};  case "&larrtl;":  	return new char[] {  		'\u21A2'  	};  case "&lat;":  	return new char[] {  		'\u2AAB'  	};  case "&lAtail;":  	return new char[] {  		'\u291B'  	};  case "&latail;":  	return new char[] {  		'\u2919'  	};  case "&late;":  	return new char[] {  		'\u2AAD'  	};  case "&lates;":  	return new char[] {  		'\u2AAD''  		'\uFE00'  	};  case "&lBarr;":  	return new char[] {  		'\u290E'  	};  case "&lbarr;":  	return new char[] {  		'\u290C'  	};  case "&lbbrk;":  	return new char[] {  		'\u2772'  	};  case "&lbrace;":  	return new char[] {  		'\u007B'  	};  case "&lbrack;":  	return new char[] {  		'\u005B'  	};  case "&lbrke;":  	return new char[] {  		'\u298B'  	};  case "&lbrksld;":  	return new char[] {  		'\u298F'  	};  case "&lbrkslu;":  	return new char[] {  		'\u298D'  	};  case "&Lcaron;":  	return new char[] {  		'\u013D'  	};  case "&lcaron;":  	return new char[] {  		'\u013E'  	};  case "&Lcedil;":  	return new char[] {  		'\u013B'  	};  case "&lcedil;":  	return new char[] {  		'\u013C'  	};  case "&lceil;":  	return new char[] {  		'\u2308'  	};  case "&lcub;":  	return new char[] {  		'\u007B'  	};  case "&Lcy;":  	return new char[] {  		'\u041B'  	};  case "&lcy;":  	return new char[] {  		'\u043B'  	};  case "&ldca;":  	return new char[] {  		'\u2936'  	};  case "&ldquo;":  	return new char[] {  		'\u201C'  	};  case "&ldquor;":  	return new char[] {  		'\u201E'  	};  case "&ldrdhar;":  	return new char[] {  		'\u2967'  	};  case "&ldrushar;":  	return new char[] {  		'\u294B'  	};  case "&ldsh;":  	return new char[] {  		'\u21B2'  	};  case "&lE;":  	return new char[] {  		'\u2266'  	};  case "&le;":  	return new char[] {  		'\u2264'  	};  case "&LeftAngleBracket;":  	return new char[] {  		'\u27E8'  	};  case "&LeftArrow;":  	return new char[] {  		'\u2190'  	};  case "&Leftarrow;":  	return new char[] {  		'\u21D0'  	};  case "&leftarrow;":  	return new char[] {  		'\u2190'  	};  case "&LeftArrowBar;":  	return new char[] {  		'\u21E4'  	};  case "&LeftArrowRightArrow;":  	return new char[] {  		'\u21C6'  	};  case "&leftarrowtail;":  	return new char[] {  		'\u21A2'  	};  case "&LeftCeiling;":  	return new char[] {  		'\u2308'  	};  case "&LeftDoubleBracket;":  	return new char[] {  		'\u27E6'  	};  case "&LeftDownTeeVector;":  	return new char[] {  		'\u2961'  	};  case "&LeftDownVector;":  	return new char[] {  		'\u21C3'  	};  case "&LeftDownVectorBar;":  	return new char[] {  		'\u2959'  	};  case "&LeftFloor;":  	return new char[] {  		'\u230A'  	};  case "&leftharpoondown;":  	return new char[] {  		'\u21BD'  	};  case "&leftharpoonup;":  	return new char[] {  		'\u21BC'  	};  case "&leftleftarrows;":  	return new char[] {  		'\u21C7'  	};  case "&LeftRightArrow;":  	return new char[] {  		'\u2194'  	};  case "&Leftrightarrow;":  	return new char[] {  		'\u21D4'  	};  case "&leftrightarrow;":  	return new char[] {  		'\u2194'  	};  case "&leftrightarrows;":  	return new char[] {  		'\u21C6'  	};  case "&leftrightharpoons;":  	return new char[] {  		'\u21CB'  	};  case "&leftrightsquigarrow;":  	return new char[] {  		'\u21AD'  	};  case "&LeftRightVector;":  	return new char[] {  		'\u294E'  	};  case "&LeftTee;":  	return new char[] {  		'\u22A3'  	};  case "&LeftTeeArrow;":  	return new char[] {  		'\u21A4'  	};  case "&LeftTeeVector;":  	return new char[] {  		'\u295A'  	};  case "&leftthreetimes;":  	return new char[] {  		'\u22CB'  	};  case "&LeftTriangle;":  	return new char[] {  		'\u22B2'  	};  case "&LeftTriangleBar;":  	return new char[] {  		'\u29CF'  	};  case "&LeftTriangleEqual;":  	return new char[] {  		'\u22B4'  	};  case "&LeftUpDownVector;":  	return new char[] {  		'\u2951'  	};  case "&LeftUpTeeVector;":  	return new char[] {  		'\u2960'  	};  case "&LeftUpVector;":  	return new char[] {  		'\u21BF'  	};  case "&LeftUpVectorBar;":  	return new char[] {  		'\u2958'  	};  case "&LeftVector;":  	return new char[] {  		'\u21BC'  	};  case "&LeftVectorBar;":  	return new char[] {  		'\u2952'  	};  case "&lEg;":  	return new char[] {  		'\u2A8B'  	};  case "&leg;":  	return new char[] {  		'\u22DA'  	};  case "&leq;":  	return new char[] {  		'\u2264'  	};  case "&leqq;":  	return new char[] {  		'\u2266'  	};  case "&leqslant;":  	return new char[] {  		'\u2A7D'  	};  case "&les;":  	return new char[] {  		'\u2A7D'  	};  case "&lescc;":  	return new char[] {  		'\u2AA8'  	};  case "&lesdot;":  	return new char[] {  		'\u2A7F'  	};  case "&lesdoto;":  	return new char[] {  		'\u2A81'  	};  case "&lesdotor;":  	return new char[] {  		'\u2A83'  	};  case "&lesg;":  	return new char[] {  		'\u22DA''  		'\uFE00'  	};  case "&lesges;":  	return new char[] {  		'\u2A93'  	};  case "&lessapprox;":  	return new char[] {  		'\u2A85'  	};  case "&lessdot;":  	return new char[] {  		'\u22D6'  	};  case "&lesseqgtr;":  	return new char[] {  		'\u22DA'  	};  case "&lesseqqgtr;":  	return new char[] {  		'\u2A8B'  	};  case "&LessEqualGreater;":  	return new char[] {  		'\u22DA'  	};  case "&LessFullEqual;":  	return new char[] {  		'\u2266'  	};  case "&LessGreater;":  	return new char[] {  		'\u2276'  	};  case "&lessgtr;":  	return new char[] {  		'\u2276'  	};  case "&LessLess;":  	return new char[] {  		'\u2AA1'  	};  case "&lesssim;":  	return new char[] {  		'\u2272'  	};  case "&LessSlantEqual;":  	return new char[] {  		'\u2A7D'  	};  case "&LessTilde;":  	return new char[] {  		'\u2272'  	};  case "&lfisht;":  	return new char[] {  		'\u297C'  	};  case "&lfloor;":  	return new char[] {  		'\u230A'  	};  case "&Lfr;":  	return new char[] {  		'\uD835''  		'\uDD0F'  	};  case "&lfr;":  	return new char[] {  		'\uD835''  		'\uDD29'  	};  case "&lg;":  	return new char[] {  		'\u2276'  	};  case "&lgE;":  	return new char[] {  		'\u2A91'  	};  case "&lHar;":  	return new char[] {  		'\u2962'  	};  case "&lhard;":  	return new char[] {  		'\u21BD'  	};  case "&lharu;":  	return new char[] {  		'\u21BC'  	};  case "&lharul;":  	return new char[] {  		'\u296A'  	};  case "&lhblk;":  	return new char[] {  		'\u2584'  	};  case "&LJcy;":  	return new char[] {  		'\u0409'  	};  case "&ljcy;":  	return new char[] {  		'\u0459'  	};  case "&Ll;":  	return new char[] {  		'\u22D8'  	};  case "&ll;":  	return new char[] {  		'\u226A'  	};  case "&llarr;":  	return new char[] {  		'\u21C7'  	};  case "&llcorner;":  	return new char[] {  		'\u231E'  	};  case "&Lleftarrow;":  	return new char[] {  		'\u21DA'  	};  case "&llhard;":  	return new char[] {  		'\u296B'  	};  case "&lltri;":  	return new char[] {  		'\u25FA'  	};  case "&Lmidot;":  	return new char[] {  		'\u013F'  	};  case "&lmidot;":  	return new char[] {  		'\u0140'  	};  case "&lmoust;":  	return new char[] {  		'\u23B0'  	};  case "&lmoustache;":  	return new char[] {  		'\u23B0'  	};  case "&lnap;":  	return new char[] {  		'\u2A89'  	};  case "&lnapprox;":  	return new char[] {  		'\u2A89'  	};  case "&lnE;":  	return new char[] {  		'\u2268'  	};  case "&lne;":  	return new char[] {  		'\u2A87'  	};  case "&lneq;":  	return new char[] {  		'\u2A87'  	};  case "&lneqq;":  	return new char[] {  		'\u2268'  	};  case "&lnsim;":  	return new char[] {  		'\u22E6'  	};  case "&loang;":  	return new char[] {  		'\u27EC'  	};  case "&loarr;":  	return new char[] {  		'\u21FD'  	};  case "&lobrk;":  	return new char[] {  		'\u27E6'  	};  case "&LongLeftArrow;":  	return new char[] {  		'\u27F5'  	};  case "&Longleftarrow;":  	return new char[] {  		'\u27F8'  	};  case "&longleftarrow;":  	return new char[] {  		'\u27F5'  	};  case "&LongLeftRightArrow;":  	return new char[] {  		'\u27F7'  	};  case "&Longleftrightarrow;":  	return new char[] {  		'\u27FA'  	};  case "&longleftrightarrow;":  	return new char[] {  		'\u27F7'  	};  case "&longmapsto;":  	return new char[] {  		'\u27FC'  	};  case "&LongRightArrow;":  	return new char[] {  		'\u27F6'  	};  case "&Longrightarrow;":  	return new char[] {  		'\u27F9'  	};  case "&longrightarrow;":  	return new char[] {  		'\u27F6'  	};  case "&looparrowleft;":  	return new char[] {  		'\u21AB'  	};  case "&looparrowright;":  	return new char[] {  		'\u21AC'  	};  case "&lopar;":  	return new char[] {  		'\u2985'  	};  case "&Lopf;":  	return new char[] {  		'\uD835''  		'\uDD43'  	};  case "&lopf;":  	return new char[] {  		'\uD835''  		'\uDD5D'  	};  case "&loplus;":  	return new char[] {  		'\u2A2D'  	};  case "&lotimes;":  	return new char[] {  		'\u2A34'  	};  case "&lowast;":  	return new char[] {  		'\u2217'  	};  case "&lowbar;":  	return new char[] {  		'\u005F'  	};  case "&LowerLeftArrow;":  	return new char[] {  		'\u2199'  	};  case "&LowerRightArrow;":  	return new char[] {  		'\u2198'  	};  case "&loz;":  	return new char[] {  		'\u25CA'  	};  case "&lozenge;":  	return new char[] {  		'\u25CA'  	};  case "&lozf;":  	return new char[] {  		'\u29EB'  	};  case "&lpar;":  	return new char[] {  		'\u0028'  	};  case "&lparlt;":  	return new char[] {  		'\u2993'  	};  case "&lrarr;":  	return new char[] {  		'\u21C6'  	};  case "&lrcorner;":  	return new char[] {  		'\u231F'  	};  case "&lrhar;":  	return new char[] {  		'\u21CB'  	};  case "&lrhard;":  	return new char[] {  		'\u296D'  	};  case "&lrm;":  	return new char[] {  		'\u200E'  	};  case "&lrtri;":  	return new char[] {  		'\u22BF'  	};  case "&lsaquo;":  	return new char[] {  		'\u2039'  	};  case "&Lscr;":  	return new char[] {  		'\u2112'  	};  case "&lscr;":  	return new char[] {  		'\uD835''  		'\uDCC1'  	};  case "&Lsh;":  	return new char[] {  		'\u21B0'  	};  case "&lsh;":  	return new char[] {  		'\u21B0'  	};  case "&lsim;":  	return new char[] {  		'\u2272'  	};  case "&lsime;":  	return new char[] {  		'\u2A8D'  	};  case "&lsimg;":  	return new char[] {  		'\u2A8F'  	};  case "&lsqb;":  	return new char[] {  		'\u005B'  	};  case "&lsquo;":  	return new char[] {  		'\u2018'  	};  case "&lsquor;":  	return new char[] {  		'\u201A'  	};  case "&Lstrok;":  	return new char[] {  		'\u0141'  	};  case "&lstrok;":  	return new char[] {  		'\u0142'  	};  case "&LT;":  	return new char[] {  		'\u003C'  	};  case "&LT":  	return new char[] {  		'\u003C'  	};  case "&Lt;":  	return new char[] {  		'\u226A'  	};  case "&lt;":  	return new char[] {  		'\u003C'  	};  case "&lt":  	return new char[] {  		'\u003C'  	};  case "&ltcc;":  	return new char[] {  		'\u2AA6'  	};  case "&ltcir;":  	return new char[] {  		'\u2A79'  	};  case "&ltdot;":  	return new char[] {  		'\u22D6'  	};  case "&lthree;":  	return new char[] {  		'\u22CB'  	};  case "&ltimes;":  	return new char[] {  		'\u22C9'  	};  case "&ltlarr;":  	return new char[] {  		'\u2976'  	};  case "&ltquest;":  	return new char[] {  		'\u2A7B'  	};  case "&ltri;":  	return new char[] {  		'\u25C3'  	};  case "&ltrie;":  	return new char[] {  		'\u22B4'  	};  case "&ltrif;":  	return new char[] {  		'\u25C2'  	};  case "&ltrPar;":  	return new char[] {  		'\u2996'  	};  case "&lurdshar;":  	return new char[] {  		'\u294A'  	};  case "&luruhar;":  	return new char[] {  		'\u2966'  	};  case "&lvertneqq;":  	return new char[] {  		'\u2268''  		'\uFE00'  	};  case "&lvnE;":  	return new char[] {  		'\u2268''  		'\uFE00'  	};  case "&macr;":  	return new char[] {  		'\u00AF'  	};  case "&macr":  	return new char[] {  		'\u00AF'  	};  case "&male;":  	return new char[] {  		'\u2642'  	};  case "&malt;":  	return new char[] {  		'\u2720'  	};  case "&maltese;":  	return new char[] {  		'\u2720'  	};  case "&Map;":  	return new char[] {  		'\u2905'  	};  case "&map;":  	return new char[] {  		'\u21A6'  	};  case "&mapsto;":  	return new char[] {  		'\u21A6'  	};  case "&mapstodown;":  	return new char[] {  		'\u21A7'  	};  case "&mapstoleft;":  	return new char[] {  		'\u21A4'  	};  case "&mapstoup;":  	return new char[] {  		'\u21A5'  	};  case "&marker;":  	return new char[] {  		'\u25AE'  	};  case "&mcomma;":  	return new char[] {  		'\u2A29'  	};  case "&Mcy;":  	return new char[] {  		'\u041C'  	};  case "&mcy;":  	return new char[] {  		'\u043C'  	};  case "&mdash;":  	return new char[] {  		'\u2014'  	};  case "&mDDot;":  	return new char[] {  		'\u223A'  	};  case "&measuredangle;":  	return new char[] {  		'\u2221'  	};  case "&MediumSpace;":  	return new char[] {  		'\u205F'  	};  case "&Mellintrf;":  	return new char[] {  		'\u2133'  	};  case "&Mfr;":  	return new char[] {  		'\uD835''  		'\uDD10'  	};  case "&mfr;":  	return new char[] {  		'\uD835''  		'\uDD2A'  	};  case "&mho;":  	return new char[] {  		'\u2127'  	};  case "&micro;":  	return new char[] {  		'\u00B5'  	};  case "&micro":  	return new char[] {  		'\u00B5'  	};  case "&mid;":  	return new char[] {  		'\u2223'  	};  case "&midast;":  	return new char[] {  		'\u002A'  	};  case "&midcir;":  	return new char[] {  		'\u2AF0'  	};  case "&middot;":  	return new char[] {  		'\u00B7'  	};  case "&middot":  	return new char[] {  		'\u00B7'  	};  case "&minus;":  	return new char[] {  		'\u2212'  	};  case "&minusb;":  	return new char[] {  		'\u229F'  	};  case "&minusd;":  	return new char[] {  		'\u2238'  	};  case "&minusdu;":  	return new char[] {  		'\u2A2A'  	};  case "&MinusPlus;":  	return new char[] {  		'\u2213'  	};  case "&mlcp;":  	return new char[] {  		'\u2ADB'  	};  case "&mldr;":  	return new char[] {  		'\u2026'  	};  case "&mnplus;":  	return new char[] {  		'\u2213'  	};  case "&models;":  	return new char[] {  		'\u22A7'  	};  case "&Mopf;":  	return new char[] {  		'\uD835''  		'\uDD44'  	};  case "&mopf;":  	return new char[] {  		'\uD835''  		'\uDD5E'  	};  case "&mp;":  	return new char[] {  		'\u2213'  	};  case "&Mscr;":  	return new char[] {  		'\u2133'  	};  case "&mscr;":  	return new char[] {  		'\uD835''  		'\uDCC2'  	};  case "&mstpos;":  	return new char[] {  		'\u223E'  	};  case "&Mu;":  	return new char[] {  		'\u039C'  	};  case "&mu;":  	return new char[] {  		'\u03BC'  	};  case "&multimap;":  	return new char[] {  		'\u22B8'  	};  case "&mumap;":  	return new char[] {  		'\u22B8'  	};  case "&nabla;":  	return new char[] {  		'\u2207'  	};  case "&Nacute;":  	return new char[] {  		'\u0143'  	};  case "&nacute;":  	return new char[] {  		'\u0144'  	};  case "&nang;":  	return new char[] {  		'\u2220''  		'\u20D2'  	};  case "&nap;":  	return new char[] {  		'\u2249'  	};  case "&napE;":  	return new char[] {  		'\u2A70''  		'\u0338'  	};  case "&napid;":  	return new char[] {  		'\u224B''  		'\u0338'  	};  case "&napos;":  	return new char[] {  		'\u0149'  	};  case "&napprox;":  	return new char[] {  		'\u2249'  	};  case "&natur;":  	return new char[] {  		'\u266E'  	};  case "&natural;":  	return new char[] {  		'\u266E'  	};  case "&naturals;":  	return new char[] {  		'\u2115'  	};  case "&nbsp;":  	return new char[] {  		'\u00A0'  	};  case "&nbsp":  	return new char[] {  		'\u00A0'  	};  case "&nbump;":  	return new char[] {  		'\u224E''  		'\u0338'  	};  case "&nbumpe;":  	return new char[] {  		'\u224F''  		'\u0338'  	};  case "&ncap;":  	return new char[] {  		'\u2A43'  	};  case "&Ncaron;":  	return new char[] {  		'\u0147'  	};  case "&ncaron;":  	return new char[] {  		'\u0148'  	};  case "&Ncedil;":  	return new char[] {  		'\u0145'  	};  case "&ncedil;":  	return new char[] {  		'\u0146'  	};  case "&ncong;":  	return new char[] {  		'\u2247'  	};  case "&ncongdot;":  	return new char[] {  		'\u2A6D''  		'\u0338'  	};  case "&ncup;":  	return new char[] {  		'\u2A42'  	};  case "&Ncy;":  	return new char[] {  		'\u041D'  	};  case "&ncy;":  	return new char[] {  		'\u043D'  	};  case "&ndash;":  	return new char[] {  		'\u2013'  	};  case "&ne;":  	return new char[] {  		'\u2260'  	};  case "&nearhk;":  	return new char[] {  		'\u2924'  	};  case "&neArr;":  	return new char[] {  		'\u21D7'  	};  case "&nearr;":  	return new char[] {  		'\u2197'  	};  case "&nearrow;":  	return new char[] {  		'\u2197'  	};  case "&nedot;":  	return new char[] {  		'\u2250''  		'\u0338'  	};  case "&NegativeMediumSpace;":  	return new char[] {  		'\u200B'  	};  case "&NegativeThickSpace;":  	return new char[] {  		'\u200B'  	};  case "&NegativeThinSpace;":  	return new char[] {  		'\u200B'  	};  case "&NegativeVeryThinSpace;":  	return new char[] {  		'\u200B'  	};  case "&nequiv;":  	return new char[] {  		'\u2262'  	};  case "&nesear;":  	return new char[] {  		'\u2928'  	};  case "&nesim;":  	return new char[] {  		'\u2242''  		'\u0338'  	};  case "&NestedGreaterGreater;":  	return new char[] {  		'\u226B'  	};  case "&NestedLessLess;":  	return new char[] {  		'\u226A'  	};  case "&NewLine;":  	return new char[] {  		'\u000A'  	};  case "&nexist;":  	return new char[] {  		'\u2204'  	};  case "&nexists;":  	return new char[] {  		'\u2204'  	};  case "&Nfr;":  	return new char[] {  		'\uD835''  		'\uDD11'  	};  case "&nfr;":  	return new char[] {  		'\uD835''  		'\uDD2B'  	};  case "&ngE;":  	return new char[] {  		'\u2267''  		'\u0338'  	};  case "&nge;":  	return new char[] {  		'\u2271'  	};  case "&ngeq;":  	return new char[] {  		'\u2271'  	};  case "&ngeqq;":  	return new char[] {  		'\u2267''  		'\u0338'  	};  case "&ngeqslant;":  	return new char[] {  		'\u2A7E''  		'\u0338'  	};  case "&nges;":  	return new char[] {  		'\u2A7E''  		'\u0338'  	};  case "&nGg;":  	return new char[] {  		'\u22D9''  		'\u0338'  	};  case "&ngsim;":  	return new char[] {  		'\u2275'  	};  case "&nGt;":  	return new char[] {  		'\u226B''  		'\u20D2'  	};  case "&ngt;":  	return new char[] {  		'\u226F'  	};  case "&ngtr;":  	return new char[] {  		'\u226F'  	};  case "&nGtv;":  	return new char[] {  		'\u226B''  		'\u0338'  	};  case "&nhArr;":  	return new char[] {  		'\u21CE'  	};  case "&nharr;":  	return new char[] {  		'\u21AE'  	};  case "&nhpar;":  	return new char[] {  		'\u2AF2'  	};  case "&ni;":  	return new char[] {  		'\u220B'  	};  case "&nis;":  	return new char[] {  		'\u22FC'  	};  case "&nisd;":  	return new char[] {  		'\u22FA'  	};  case "&niv;":  	return new char[] {  		'\u220B'  	};  case "&NJcy;":  	return new char[] {  		'\u040A'  	};  case "&njcy;":  	return new char[] {  		'\u045A'  	};  case "&nlArr;":  	return new char[] {  		'\u21CD'  	};  case "&nlarr;":  	return new char[] {  		'\u219A'  	};  case "&nldr;":  	return new char[] {  		'\u2025'  	};  case "&nlE;":  	return new char[] {  		'\u2266''  		'\u0338'  	};  case "&nle;":  	return new char[] {  		'\u2270'  	};  case "&nLeftarrow;":  	return new char[] {  		'\u21CD'  	};  case "&nleftarrow;":  	return new char[] {  		'\u219A'  	};  case "&nLeftrightarrow;":  	return new char[] {  		'\u21CE'  	};  case "&nleftrightarrow;":  	return new char[] {  		'\u21AE'  	};  case "&nleq;":  	return new char[] {  		'\u2270'  	};  case "&nleqq;":  	return new char[] {  		'\u2266''  		'\u0338'  	};  case "&nleqslant;":  	return new char[] {  		'\u2A7D''  		'\u0338'  	};  case "&nles;":  	return new char[] {  		'\u2A7D''  		'\u0338'  	};  case "&nless;":  	return new char[] {  		'\u226E'  	};  case "&nLl;":  	return new char[] {  		'\u22D8''  		'\u0338'  	};  case "&nlsim;":  	return new char[] {  		'\u2274'  	};  case "&nLt;":  	return new char[] {  		'\u226A''  		'\u20D2'  	};  case "&nlt;":  	return new char[] {  		'\u226E'  	};  case "&nltri;":  	return new char[] {  		'\u22EA'  	};  case "&nltrie;":  	return new char[] {  		'\u22EC'  	};  case "&nLtv;":  	return new char[] {  		'\u226A''  		'\u0338'  	};  case "&nmid;":  	return new char[] {  		'\u2224'  	};  case "&NoBreak;":  	return new char[] {  		'\u2060'  	};  case "&NonBreakingSpace;":  	return new char[] {  		'\u00A0'  	};  case "&Nopf;":  	return new char[] {  		'\u2115'  	};  case "&nopf;":  	return new char[] {  		'\uD835''  		'\uDD5F'  	};  case "&Not;":  	return new char[] {  		'\u2AEC'  	};  case "&not;":  	return new char[] {  		'\u00AC'  	};  case "&not":  	return new char[] {  		'\u00AC'  	};  case "&NotCongruent;":  	return new char[] {  		'\u2262'  	};  case "&NotCupCap;":  	return new char[] {  		'\u226D'  	};  case "&NotDoubleVerticalBar;":  	return new char[] {  		'\u2226'  	};  case "&NotElement;":  	return new char[] {  		'\u2209'  	};  case "&NotEqual;":  	return new char[] {  		'\u2260'  	};  case "&NotEqualTilde;":  	return new char[] {  		'\u2242''  		'\u0338'  	};  case "&NotExists;":  	return new char[] {  		'\u2204'  	};  case "&NotGreater;":  	return new char[] {  		'\u226F'  	};  case "&NotGreaterEqual;":  	return new char[] {  		'\u2271'  	};  case "&NotGreaterFullEqual;":  	return new char[] {  		'\u2267''  		'\u0338'  	};  case "&NotGreaterGreater;":  	return new char[] {  		'\u226B''  		'\u0338'  	};  case "&NotGreaterLess;":  	return new char[] {  		'\u2279'  	};  case "&NotGreaterSlantEqual;":  	return new char[] {  		'\u2A7E''  		'\u0338'  	};  case "&NotGreaterTilde;":  	return new char[] {  		'\u2275'  	};  case "&NotHumpDownHump;":  	return new char[] {  		'\u224E''  		'\u0338'  	};  case "&NotHumpEqual;":  	return new char[] {  		'\u224F''  		'\u0338'  	};  case "&notin;":  	return new char[] {  		'\u2209'  	};  case "&notindot;":  	return new char[] {  		'\u22F5''  		'\u0338'  	};  case "&notinE;":  	return new char[] {  		'\u22F9''  		'\u0338'  	};  case "&notinva;":  	return new char[] {  		'\u2209'  	};  case "&notinvb;":  	return new char[] {  		'\u22F7'  	};  case "&notinvc;":  	return new char[] {  		'\u22F6'  	};  case "&NotLeftTriangle;":  	return new char[] {  		'\u22EA'  	};  case "&NotLeftTriangleBar;":  	return new char[] {  		'\u29CF''  		'\u0338'  	};  case "&NotLeftTriangleEqual;":  	return new char[] {  		'\u22EC'  	};  case "&NotLess;":  	return new char[] {  		'\u226E'  	};  case "&NotLessEqual;":  	return new char[] {  		'\u2270'  	};  case "&NotLessGreater;":  	return new char[] {  		'\u2278'  	};  case "&NotLessLess;":  	return new char[] {  		'\u226A''  		'\u0338'  	};  case "&NotLessSlantEqual;":  	return new char[] {  		'\u2A7D''  		'\u0338'  	};  case "&NotLessTilde;":  	return new char[] {  		'\u2274'  	};  case "&NotNestedGreaterGreater;":  	return new char[] {  		'\u2AA2''  		'\u0338'  	};  case "&NotNestedLessLess;":  	return new char[] {  		'\u2AA1''  		'\u0338'  	};  case "&notni;":  	return new char[] {  		'\u220C'  	};  case "&notniva;":  	return new char[] {  		'\u220C'  	};  case "&notnivb;":  	return new char[] {  		'\u22FE'  	};  case "&notnivc;":  	return new char[] {  		'\u22FD'  	};  case "&NotPrecedes;":  	return new char[] {  		'\u2280'  	};  case "&NotPrecedesEqual;":  	return new char[] {  		'\u2AAF''  		'\u0338'  	};  case "&NotPrecedesSlantEqual;":  	return new char[] {  		'\u22E0'  	};  case "&NotReverseElement;":  	return new char[] {  		'\u220C'  	};  case "&NotRightTriangle;":  	return new char[] {  		'\u22EB'  	};  case "&NotRightTriangleBar;":  	return new char[] {  		'\u29D0''  		'\u0338'  	};  case "&NotRightTriangleEqual;":  	return new char[] {  		'\u22ED'  	};  case "&NotSquareSubset;":  	return new char[] {  		'\u228F''  		'\u0338'  	};  case "&NotSquareSubsetEqual;":  	return new char[] {  		'\u22E2'  	};  case "&NotSquareSuperset;":  	return new char[] {  		'\u2290''  		'\u0338'  	};  case "&NotSquareSupersetEqual;":  	return new char[] {  		'\u22E3'  	};  case "&NotSubset;":  	return new char[] {  		'\u2282''  		'\u20D2'  	};  case "&NotSubsetEqual;":  	return new char[] {  		'\u2288'  	};  case "&NotSucceeds;":  	return new char[] {  		'\u2281'  	};  case "&NotSucceedsEqual;":  	return new char[] {  		'\u2AB0''  		'\u0338'  	};  case "&NotSucceedsSlantEqual;":  	return new char[] {  		'\u22E1'  	};  case "&NotSucceedsTilde;":  	return new char[] {  		'\u227F''  		'\u0338'  	};  case "&NotSuperset;":  	return new char[] {  		'\u2283''  		'\u20D2'  	};  case "&NotSupersetEqual;":  	return new char[] {  		'\u2289'  	};  case "&NotTilde;":  	return new char[] {  		'\u2241'  	};  case "&NotTildeEqual;":  	return new char[] {  		'\u2244'  	};  case "&NotTildeFullEqual;":  	return new char[] {  		'\u2247'  	};  case "&NotTildeTilde;":  	return new char[] {  		'\u2249'  	};  case "&NotVerticalBar;":  	return new char[] {  		'\u2224'  	};  case "&npar;":  	return new char[] {  		'\u2226'  	};  case "&nparallel;":  	return new char[] {  		'\u2226'  	};  case "&nparsl;":  	return new char[] {  		'\u2AFD''  		'\u20E5'  	};  case "&npart;":  	return new char[] {  		'\u2202''  		'\u0338'  	};  case "&npolint;":  	return new char[] {  		'\u2A14'  	};  case "&npr;":  	return new char[] {  		'\u2280'  	};  case "&nprcue;":  	return new char[] {  		'\u22E0'  	};  case "&npre;":  	return new char[] {  		'\u2AAF''  		'\u0338'  	};  case "&nprec;":  	return new char[] {  		'\u2280'  	};  case "&npreceq;":  	return new char[] {  		'\u2AAF''  		'\u0338'  	};  case "&nrArr;":  	return new char[] {  		'\u21CF'  	};  case "&nrarr;":  	return new char[] {  		'\u219B'  	};  case "&nrarrc;":  	return new char[] {  		'\u2933''  		'\u0338'  	};  case "&nrarrw;":  	return new char[] {  		'\u219D''  		'\u0338'  	};  case "&nRightarrow;":  	return new char[] {  		'\u21CF'  	};  case "&nrightarrow;":  	return new char[] {  		'\u219B'  	};  case "&nrtri;":  	return new char[] {  		'\u22EB'  	};  case "&nrtrie;":  	return new char[] {  		'\u22ED'  	};  case "&nsc;":  	return new char[] {  		'\u2281'  	};  case "&nsccue;":  	return new char[] {  		'\u22E1'  	};  case "&nsce;":  	return new char[] {  		'\u2AB0''  		'\u0338'  	};  case "&Nscr;":  	return new char[] {  		'\uD835''  		'\uDCA9'  	};  case "&nscr;":  	return new char[] {  		'\uD835''  		'\uDCC3'  	};  case "&nshortmid;":  	return new char[] {  		'\u2224'  	};  case "&nshortparallel;":  	return new char[] {  		'\u2226'  	};  case "&nsim;":  	return new char[] {  		'\u2241'  	};  case "&nsime;":  	return new char[] {  		'\u2244'  	};  case "&nsimeq;":  	return new char[] {  		'\u2244'  	};  case "&nsmid;":  	return new char[] {  		'\u2224'  	};  case "&nspar;":  	return new char[] {  		'\u2226'  	};  case "&nsqsube;":  	return new char[] {  		'\u22E2'  	};  case "&nsqsupe;":  	return new char[] {  		'\u22E3'  	};  case "&nsub;":  	return new char[] {  		'\u2284'  	};  case "&nsubE;":  	return new char[] {  		'\u2AC5''  		'\u0338'  	};  case "&nsube;":  	return new char[] {  		'\u2288'  	};  case "&nsubset;":  	return new char[] {  		'\u2282''  		'\u20D2'  	};  case "&nsubseteq;":  	return new char[] {  		'\u2288'  	};  case "&nsubseteqq;":  	return new char[] {  		'\u2AC5''  		'\u0338'  	};  case "&nsucc;":  	return new char[] {  		'\u2281'  	};  case "&nsucceq;":  	return new char[] {  		'\u2AB0''  		'\u0338'  	};  case "&nsup;":  	return new char[] {  		'\u2285'  	};  case "&nsupE;":  	return new char[] {  		'\u2AC6''  		'\u0338'  	};  case "&nsupe;":  	return new char[] {  		'\u2289'  	};  case "&nsupset;":  	return new char[] {  		'\u2283''  		'\u20D2'  	};  case "&nsupseteq;":  	return new char[] {  		'\u2289'  	};  case "&nsupseteqq;":  	return new char[] {  		'\u2AC6''  		'\u0338'  	};  case "&ntgl;":  	return new char[] {  		'\u2279'  	};  case "&Ntilde;":  	return new char[] {  		'\u00D1'  	};  case "&Ntilde":  	return new char[] {  		'\u00D1'  	};  case "&ntilde;":  	return new char[] {  		'\u00F1'  	};  case "&ntilde":  	return new char[] {  		'\u00F1'  	};  case "&ntlg;":  	return new char[] {  		'\u2278'  	};  case "&ntriangleleft;":  	return new char[] {  		'\u22EA'  	};  case "&ntrianglelefteq;":  	return new char[] {  		'\u22EC'  	};  case "&ntriangleright;":  	return new char[] {  		'\u22EB'  	};  case "&ntrianglerighteq;":  	return new char[] {  		'\u22ED'  	};  case "&Nu;":  	return new char[] {  		'\u039D'  	};  case "&nu;":  	return new char[] {  		'\u03BD'  	};  case "&num;":  	return new char[] {  		'\u0023'  	};  case "&numero;":  	return new char[] {  		'\u2116'  	};  case "&numsp;":  	return new char[] {  		'\u2007'  	};  case "&nvap;":  	return new char[] {  		'\u224D''  		'\u20D2'  	};  case "&nVDash;":  	return new char[] {  		'\u22AF'  	};  case "&nVdash;":  	return new char[] {  		'\u22AE'  	};  case "&nvDash;":  	return new char[] {  		'\u22AD'  	};  case "&nvdash;":  	return new char[] {  		'\u22AC'  	};  case "&nvge;":  	return new char[] {  		'\u2265''  		'\u20D2'  	};  case "&nvgt;":  	return new char[] {  		'\u003E''  		'\u20D2'  	};  case "&nvHarr;":  	return new char[] {  		'\u2904'  	};  case "&nvinfin;":  	return new char[] {  		'\u29DE'  	};  case "&nvlArr;":  	return new char[] {  		'\u2902'  	};  case "&nvle;":  	return new char[] {  		'\u2264''  		'\u20D2'  	};  case "&nvlt;":  	return new char[] {  		'\u003C''  		'\u20D2'  	};  case "&nvltrie;":  	return new char[] {  		'\u22B4''  		'\u20D2'  	};  case "&nvrArr;":  	return new char[] {  		'\u2903'  	};  case "&nvrtrie;":  	return new char[] {  		'\u22B5''  		'\u20D2'  	};  case "&nvsim;":  	return new char[] {  		'\u223C''  		'\u20D2'  	};  case "&nwarhk;":  	return new char[] {  		'\u2923'  	};  case "&nwArr;":  	return new char[] {  		'\u21D6'  	};  case "&nwarr;":  	return new char[] {  		'\u2196'  	};  case "&nwarrow;":  	return new char[] {  		'\u2196'  	};  case "&nwnear;":  	return new char[] {  		'\u2927'  	};  case "&Oacute;":  	return new char[] {  		'\u00D3'  	};  case "&Oacute":  	return new char[] {  		'\u00D3'  	};  case "&oacute;":  	return new char[] {  		'\u00F3'  	};  case "&oacute":  	return new char[] {  		'\u00F3'  	};  case "&oast;":  	return new char[] {  		'\u229B'  	};  case "&ocir;":  	return new char[] {  		'\u229A'  	};  case "&Ocirc;":  	return new char[] {  		'\u00D4'  	};  case "&Ocirc":  	return new char[] {  		'\u00D4'  	};  case "&ocirc;":  	return new char[] {  		'\u00F4'  	};  case "&ocirc":  	return new char[] {  		'\u00F4'  	};  case "&Ocy;":  	return new char[] {  		'\u041E'  	};  case "&ocy;":  	return new char[] {  		'\u043E'  	};  case "&odash;":  	return new char[] {  		'\u229D'  	};  case "&Odblac;":  	return new char[] {  		'\u0150'  	};  case "&odblac;":  	return new char[] {  		'\u0151'  	};  case "&odiv;":  	return new char[] {  		'\u2A38'  	};  case "&odot;":  	return new char[] {  		'\u2299'  	};  case "&odsold;":  	return new char[] {  		'\u29BC'  	};  case "&OElig;":  	return new char[] {  		'\u0152'  	};  case "&oelig;":  	return new char[] {  		'\u0153'  	};  case "&ofcir;":  	return new char[] {  		'\u29BF'  	};  case "&Ofr;":  	return new char[] {  		'\uD835''  		'\uDD12'  	};  case "&ofr;":  	return new char[] {  		'\uD835''  		'\uDD2C'  	};  case "&ogon;":  	return new char[] {  		'\u02DB'  	};  case "&Ograve;":  	return new char[] {  		'\u00D2'  	};  case "&Ograve":  	return new char[] {  		'\u00D2'  	};  case "&ograve;":  	return new char[] {  		'\u00F2'  	};  case "&ograve":  	return new char[] {  		'\u00F2'  	};  case "&ogt;":  	return new char[] {  		'\u29C1'  	};  case "&ohbar;":  	return new char[] {  		'\u29B5'  	};  case "&ohm;":  	return new char[] {  		'\u03A9'  	};  case "&oint;":  	return new char[] {  		'\u222E'  	};  case "&olarr;":  	return new char[] {  		'\u21BA'  	};  case "&olcir;":  	return new char[] {  		'\u29BE'  	};  case "&olcross;":  	return new char[] {  		'\u29BB'  	};  case "&oline;":  	return new char[] {  		'\u203E'  	};  case "&olt;":  	return new char[] {  		'\u29C0'  	};  case "&Omacr;":  	return new char[] {  		'\u014C'  	};  case "&omacr;":  	return new char[] {  		'\u014D'  	};  case "&Omega;":  	return new char[] {  		'\u03A9'  	};  case "&omega;":  	return new char[] {  		'\u03C9'  	};  case "&Omicron;":  	return new char[] {  		'\u039F'  	};  case "&omicron;":  	return new char[] {  		'\u03BF'  	};  case "&omid;":  	return new char[] {  		'\u29B6'  	};  case "&ominus;":  	return new char[] {  		'\u2296'  	};  case "&Oopf;":  	return new char[] {  		'\uD835''  		'\uDD46'  	};  case "&oopf;":  	return new char[] {  		'\uD835''  		'\uDD60'  	};  case "&opar;":  	return new char[] {  		'\u29B7'  	};  case "&OpenCurlyDoubleQuote;":  	return new char[] {  		'\u201C'  	};  case "&OpenCurlyQuote;":  	return new char[] {  		'\u2018'  	};  case "&operp;":  	return new char[] {  		'\u29B9'  	};  case "&oplus;":  	return new char[] {  		'\u2295'  	};  case "&Or;":  	return new char[] {  		'\u2A54'  	};  case "&or;":  	return new char[] {  		'\u2228'  	};  case "&orarr;":  	return new char[] {  		'\u21BB'  	};  case "&ord;":  	return new char[] {  		'\u2A5D'  	};  case "&order;":  	return new char[] {  		'\u2134'  	};  case "&orderof;":  	return new char[] {  		'\u2134'  	};  case "&ordf;":  	return new char[] {  		'\u00AA'  	};  case "&ordf":  	return new char[] {  		'\u00AA'  	};  case "&ordm;":  	return new char[] {  		'\u00BA'  	};  case "&ordm":  	return new char[] {  		'\u00BA'  	};  case "&origof;":  	return new char[] {  		'\u22B6'  	};  case "&oror;":  	return new char[] {  		'\u2A56'  	};  case "&orslope;":  	return new char[] {  		'\u2A57'  	};  case "&orv;":  	return new char[] {  		'\u2A5B'  	};  case "&oS;":  	return new char[] {  		'\u24C8'  	};  case "&Oscr;":  	return new char[] {  		'\uD835''  		'\uDCAA'  	};  case "&oscr;":  	return new char[] {  		'\u2134'  	};  case "&Oslash;":  	return new char[] {  		'\u00D8'  	};  case "&Oslash":  	return new char[] {  		'\u00D8'  	};  case "&oslash;":  	return new char[] {  		'\u00F8'  	};  case "&oslash":  	return new char[] {  		'\u00F8'  	};  case "&osol;":  	return new char[] {  		'\u2298'  	};  case "&Otilde;":  	return new char[] {  		'\u00D5'  	};  case "&Otilde":  	return new char[] {  		'\u00D5'  	};  case "&otilde;":  	return new char[] {  		'\u00F5'  	};  case "&otilde":  	return new char[] {  		'\u00F5'  	};  case "&Otimes;":  	return new char[] {  		'\u2A37'  	};  case "&otimes;":  	return new char[] {  		'\u2297'  	};  case "&otimesas;":  	return new char[] {  		'\u2A36'  	};  case "&Ouml;":  	return new char[] {  		'\u00D6'  	};  case "&Ouml":  	return new char[] {  		'\u00D6'  	};  case "&ouml;":  	return new char[] {  		'\u00F6'  	};  case "&ouml":  	return new char[] {  		'\u00F6'  	};  case "&ovbar;":  	return new char[] {  		'\u233D'  	};  case "&OverBar;":  	return new char[] {  		'\u203E'  	};  case "&OverBrace;":  	return new char[] {  		'\u23DE'  	};  case "&OverBracket;":  	return new char[] {  		'\u23B4'  	};  case "&OverParenthesis;":  	return new char[] {  		'\u23DC'  	};  case "&par;":  	return new char[] {  		'\u2225'  	};  case "&para;":  	return new char[] {  		'\u00B6'  	};  case "&para":  	return new char[] {  		'\u00B6'  	};  case "&parallel;":  	return new char[] {  		'\u2225'  	};  case "&parsim;":  	return new char[] {  		'\u2AF3'  	};  case "&parsl;":  	return new char[] {  		'\u2AFD'  	};  case "&part;":  	return new char[] {  		'\u2202'  	};  case "&PartialD;":  	return new char[] {  		'\u2202'  	};  case "&Pcy;":  	return new char[] {  		'\u041F'  	};  case "&pcy;":  	return new char[] {  		'\u043F'  	};  case "&percnt;":  	return new char[] {  		'\u0025'  	};  case "&period;":  	return new char[] {  		'\u002E'  	};  case "&permil;":  	return new char[] {  		'\u2030'  	};  case "&perp;":  	return new char[] {  		'\u22A5'  	};  case "&pertenk;":  	return new char[] {  		'\u2031'  	};  case "&Pfr;":  	return new char[] {  		'\uD835''  		'\uDD13'  	};  case "&pfr;":  	return new char[] {  		'\uD835''  		'\uDD2D'  	};  case "&Phi;":  	return new char[] {  		'\u03A6'  	};  case "&phi;":  	return new char[] {  		'\u03C6'  	};  case "&phiv;":  	return new char[] {  		'\u03D5'  	};  case "&phmmat;":  	return new char[] {  		'\u2133'  	};  case "&phone;":  	return new char[] {  		'\u260E'  	};  case "&Pi;":  	return new char[] {  		'\u03A0'  	};  case "&pi;":  	return new char[] {  		'\u03C0'  	};  case "&pitchfork;":  	return new char[] {  		'\u22D4'  	};  case "&piv;":  	return new char[] {  		'\u03D6'  	};  case "&planck;":  	return new char[] {  		'\u210F'  	};  case "&planckh;":  	return new char[] {  		'\u210E'  	};  case "&plankv;":  	return new char[] {  		'\u210F'  	};  case "&plus;":  	return new char[] {  		'\u002B'  	};  case "&plusacir;":  	return new char[] {  		'\u2A23'  	};  case "&plusb;":  	return new char[] {  		'\u229E'  	};  case "&pluscir;":  	return new char[] {  		'\u2A22'  	};  case "&plusdo;":  	return new char[] {  		'\u2214'  	};  case "&plusdu;":  	return new char[] {  		'\u2A25'  	};  case "&pluse;":  	return new char[] {  		'\u2A72'  	};  case "&PlusMinus;":  	return new char[] {  		'\u00B1'  	};  case "&plusmn;":  	return new char[] {  		'\u00B1'  	};  case "&plusmn":  	return new char[] {  		'\u00B1'  	};  case "&plussim;":  	return new char[] {  		'\u2A26'  	};  case "&plustwo;":  	return new char[] {  		'\u2A27'  	};  case "&pm;":  	return new char[] {  		'\u00B1'  	};  case "&Poincareplane;":  	return new char[] {  		'\u210C'  	};  case "&pointint;":  	return new char[] {  		'\u2A15'  	};  case "&Popf;":  	return new char[] {  		'\u2119'  	};  case "&popf;":  	return new char[] {  		'\uD835''  		'\uDD61'  	};  case "&pound;":  	return new char[] {  		'\u00A3'  	};  case "&pound":  	return new char[] {  		'\u00A3'  	};  case "&Pr;":  	return new char[] {  		'\u2ABB'  	};  case "&pr;":  	return new char[] {  		'\u227A'  	};  case "&prap;":  	return new char[] {  		'\u2AB7'  	};  case "&prcue;":  	return new char[] {  		'\u227C'  	};  case "&prE;":  	return new char[] {  		'\u2AB3'  	};  case "&pre;":  	return new char[] {  		'\u2AAF'  	};  case "&prec;":  	return new char[] {  		'\u227A'  	};  case "&precapprox;":  	return new char[] {  		'\u2AB7'  	};  case "&preccurlyeq;":  	return new char[] {  		'\u227C'  	};  case "&Precedes;":  	return new char[] {  		'\u227A'  	};  case "&PrecedesEqual;":  	return new char[] {  		'\u2AAF'  	};  case "&PrecedesSlantEqual;":  	return new char[] {  		'\u227C'  	};  case "&PrecedesTilde;":  	return new char[] {  		'\u227E'  	};  case "&preceq;":  	return new char[] {  		'\u2AAF'  	};  case "&precnapprox;":  	return new char[] {  		'\u2AB9'  	};  case "&precneqq;":  	return new char[] {  		'\u2AB5'  	};  case "&precnsim;":  	return new char[] {  		'\u22E8'  	};  case "&precsim;":  	return new char[] {  		'\u227E'  	};  case "&Prime;":  	return new char[] {  		'\u2033'  	};  case "&prime;":  	return new char[] {  		'\u2032'  	};  case "&primes;":  	return new char[] {  		'\u2119'  	};  case "&prnap;":  	return new char[] {  		'\u2AB9'  	};  case "&prnE;":  	return new char[] {  		'\u2AB5'  	};  case "&prnsim;":  	return new char[] {  		'\u22E8'  	};  case "&prod;":  	return new char[] {  		'\u220F'  	};  case "&Product;":  	return new char[] {  		'\u220F'  	};  case "&profalar;":  	return new char[] {  		'\u232E'  	};  case "&profline;":  	return new char[] {  		'\u2312'  	};  case "&profsurf;":  	return new char[] {  		'\u2313'  	};  case "&prop;":  	return new char[] {  		'\u221D'  	};  case "&Proportion;":  	return new char[] {  		'\u2237'  	};  case "&Proportional;":  	return new char[] {  		'\u221D'  	};  case "&propto;":  	return new char[] {  		'\u221D'  	};  case "&prsim;":  	return new char[] {  		'\u227E'  	};  case "&prurel;":  	return new char[] {  		'\u22B0'  	};  case "&Pscr;":  	return new char[] {  		'\uD835''  		'\uDCAB'  	};  case "&pscr;":  	return new char[] {  		'\uD835''  		'\uDCC5'  	};  case "&Psi;":  	return new char[] {  		'\u03A8'  	};  case "&psi;":  	return new char[] {  		'\u03C8'  	};  case "&puncsp;":  	return new char[] {  		'\u2008'  	};  case "&Qfr;":  	return new char[] {  		'\uD835''  		'\uDD14'  	};  case "&qfr;":  	return new char[] {  		'\uD835''  		'\uDD2E'  	};  case "&qint;":  	return new char[] {  		'\u2A0C'  	};  case "&Qopf;":  	return new char[] {  		'\u211A'  	};  case "&qopf;":  	return new char[] {  		'\uD835''  		'\uDD62'  	};  case "&qprime;":  	return new char[] {  		'\u2057'  	};  case "&Qscr;":  	return new char[] {  		'\uD835''  		'\uDCAC'  	};  case "&qscr;":  	return new char[] {  		'\uD835''  		'\uDCC6'  	};  case "&quaternions;":  	return new char[] {  		'\u210D'  	};  case "&quatint;":  	return new char[] {  		'\u2A16'  	};  case "&quest;":  	return new char[] {  		'\u003F'  	};  case "&questeq;":  	return new char[] {  		'\u225F'  	};  case "&QUOT;":  	return new char[] {  		'\u0022'  	};  case "&QUOT":  	return new char[] {  		'\u0022'  	};  case "&quot;":  	return new char[] {  		'\u0022'  	};  case "&quot":  	return new char[] {  		'\u0022'  	};  case "&rAarr;":  	return new char[] {  		'\u21DB'  	};  case "&race;":  	return new char[] {  		'\u223D''  		'\u0331'  	};  case "&Racute;":  	return new char[] {  		'\u0154'  	};  case "&racute;":  	return new char[] {  		'\u0155'  	};  case "&radic;":  	return new char[] {  		'\u221A'  	};  case "&raemptyv;":  	return new char[] {  		'\u29B3'  	};  case "&Rang;":  	return new char[] {  		'\u27EB'  	};  case "&rang;":  	return new char[] {  		'\u27E9'  	};  case "&rangd;":  	return new char[] {  		'\u2992'  	};  case "&range;":  	return new char[] {  		'\u29A5'  	};  case "&rangle;":  	return new char[] {  		'\u27E9'  	};  case "&raquo;":  	return new char[] {  		'\u00BB'  	};  case "&raquo":  	return new char[] {  		'\u00BB'  	};  case "&Rarr;":  	return new char[] {  		'\u21A0'  	};  case "&rArr;":  	return new char[] {  		'\u21D2'  	};  case "&rarr;":  	return new char[] {  		'\u2192'  	};  case "&rarrap;":  	return new char[] {  		'\u2975'  	};  case "&rarrb;":  	return new char[] {  		'\u21E5'  	};  case "&rarrbfs;":  	return new char[] {  		'\u2920'  	};  case "&rarrc;":  	return new char[] {  		'\u2933'  	};  case "&rarrfs;":  	return new char[] {  		'\u291E'  	};  case "&rarrhk;":  	return new char[] {  		'\u21AA'  	};  case "&rarrlp;":  	return new char[] {  		'\u21AC'  	};  case "&rarrpl;":  	return new char[] {  		'\u2945'  	};  case "&rarrsim;":  	return new char[] {  		'\u2974'  	};  case "&Rarrtl;":  	return new char[] {  		'\u2916'  	};  case "&rarrtl;":  	return new char[] {  		'\u21A3'  	};  case "&rarrw;":  	return new char[] {  		'\u219D'  	};  case "&rAtail;":  	return new char[] {  		'\u291C'  	};  case "&ratail;":  	return new char[] {  		'\u291A'  	};  case "&ratio;":  	return new char[] {  		'\u2236'  	};  case "&rationals;":  	return new char[] {  		'\u211A'  	};  case "&RBarr;":  	return new char[] {  		'\u2910'  	};  case "&rBarr;":  	return new char[] {  		'\u290F'  	};  case "&rbarr;":  	return new char[] {  		'\u290D'  	};  case "&rbbrk;":  	return new char[] {  		'\u2773'  	};  case "&rbrace;":  	return new char[] {  		'\u007D'  	};  case "&rbrack;":  	return new char[] {  		'\u005D'  	};  case "&rbrke;":  	return new char[] {  		'\u298C'  	};  case "&rbrksld;":  	return new char[] {  		'\u298E'  	};  case "&rbrkslu;":  	return new char[] {  		'\u2990'  	};  case "&Rcaron;":  	return new char[] {  		'\u0158'  	};  case "&rcaron;":  	return new char[] {  		'\u0159'  	};  case "&Rcedil;":  	return new char[] {  		'\u0156'  	};  case "&rcedil;":  	return new char[] {  		'\u0157'  	};  case "&rceil;":  	return new char[] {  		'\u2309'  	};  case "&rcub;":  	return new char[] {  		'\u007D'  	};  case "&Rcy;":  	return new char[] {  		'\u0420'  	};  case "&rcy;":  	return new char[] {  		'\u0440'  	};  case "&rdca;":  	return new char[] {  		'\u2937'  	};  case "&rdldhar;":  	return new char[] {  		'\u2969'  	};  case "&rdquo;":  	return new char[] {  		'\u201D'  	};  case "&rdquor;":  	return new char[] {  		'\u201D'  	};  case "&rdsh;":  	return new char[] {  		'\u21B3'  	};  case "&Re;":  	return new char[] {  		'\u211C'  	};  case "&real;":  	return new char[] {  		'\u211C'  	};  case "&realine;":  	return new char[] {  		'\u211B'  	};  case "&realpart;":  	return new char[] {  		'\u211C'  	};  case "&reals;":  	return new char[] {  		'\u211D'  	};  case "&rect;":  	return new char[] {  		'\u25AD'  	};  case "&REG;":  	return new char[] {  		'\u00AE'  	};  case "&REG":  	return new char[] {  		'\u00AE'  	};  case "&reg;":  	return new char[] {  		'\u00AE'  	};  case "&reg":  	return new char[] {  		'\u00AE'  	};  case "&ReverseElement;":  	return new char[] {  		'\u220B'  	};  case "&ReverseEquilibrium;":  	return new char[] {  		'\u21CB'  	};  case "&ReverseUpEquilibrium;":  	return new char[] {  		'\u296F'  	};  case "&rfisht;":  	return new char[] {  		'\u297D'  	};  case "&rfloor;":  	return new char[] {  		'\u230B'  	};  case "&Rfr;":  	return new char[] {  		'\u211C'  	};  case "&rfr;":  	return new char[] {  		'\uD835''  		'\uDD2F'  	};  case "&rHar;":  	return new char[] {  		'\u2964'  	};  case "&rhard;":  	return new char[] {  		'\u21C1'  	};  case "&rharu;":  	return new char[] {  		'\u21C0'  	};  case "&rharul;":  	return new char[] {  		'\u296C'  	};  case "&Rho;":  	return new char[] {  		'\u03A1'  	};  case "&rho;":  	return new char[] {  		'\u03C1'  	};  case "&rhov;":  	return new char[] {  		'\u03F1'  	};  case "&RightAngleBracket;":  	return new char[] {  		'\u27E9'  	};  case "&RightArrow;":  	return new char[] {  		'\u2192'  	};  case "&Rightarrow;":  	return new char[] {  		'\u21D2'  	};  case "&rightarrow;":  	return new char[] {  		'\u2192'  	};  case "&RightArrowBar;":  	return new char[] {  		'\u21E5'  	};  case "&RightArrowLeftArrow;":  	return new char[] {  		'\u21C4'  	};  case "&rightarrowtail;":  	return new char[] {  		'\u21A3'  	};  case "&RightCeiling;":  	return new char[] {  		'\u2309'  	};  case "&RightDoubleBracket;":  	return new char[] {  		'\u27E7'  	};  case "&RightDownTeeVector;":  	return new char[] {  		'\u295D'  	};  case "&RightDownVector;":  	return new char[] {  		'\u21C2'  	};  case "&RightDownVectorBar;":  	return new char[] {  		'\u2955'  	};  case "&RightFloor;":  	return new char[] {  		'\u230B'  	};  case "&rightharpoondown;":  	return new char[] {  		'\u21C1'  	};  case "&rightharpoonup;":  	return new char[] {  		'\u21C0'  	};  case "&rightleftarrows;":  	return new char[] {  		'\u21C4'  	};  case "&rightleftharpoons;":  	return new char[] {  		'\u21CC'  	};  case "&rightrightarrows;":  	return new char[] {  		'\u21C9'  	};  case "&rightsquigarrow;":  	return new char[] {  		'\u219D'  	};  case "&RightTee;":  	return new char[] {  		'\u22A2'  	};  case "&RightTeeArrow;":  	return new char[] {  		'\u21A6'  	};  case "&RightTeeVector;":  	return new char[] {  		'\u295B'  	};  case "&rightthreetimes;":  	return new char[] {  		'\u22CC'  	};  case "&RightTriangle;":  	return new char[] {  		'\u22B3'  	};  case "&RightTriangleBar;":  	return new char[] {  		'\u29D0'  	};  case "&RightTriangleEqual;":  	return new char[] {  		'\u22B5'  	};  case "&RightUpDownVector;":  	return new char[] {  		'\u294F'  	};  case "&RightUpTeeVector;":  	return new char[] {  		'\u295C'  	};  case "&RightUpVector;":  	return new char[] {  		'\u21BE'  	};  case "&RightUpVectorBar;":  	return new char[] {  		'\u2954'  	};  case "&RightVector;":  	return new char[] {  		'\u21C0'  	};  case "&RightVectorBar;":  	return new char[] {  		'\u2953'  	};  case "&ring;":  	return new char[] {  		'\u02DA'  	};  case "&risingdotseq;":  	return new char[] {  		'\u2253'  	};  case "&rlarr;":  	return new char[] {  		'\u21C4'  	};  case "&rlhar;":  	return new char[] {  		'\u21CC'  	};  case "&rlm;":  	return new char[] {  		'\u200F'  	};  case "&rmoust;":  	return new char[] {  		'\u23B1'  	};  case "&rmoustache;":  	return new char[] {  		'\u23B1'  	};  case "&rnmid;":  	return new char[] {  		'\u2AEE'  	};  case "&roang;":  	return new char[] {  		'\u27ED'  	};  case "&roarr;":  	return new char[] {  		'\u21FE'  	};  case "&robrk;":  	return new char[] {  		'\u27E7'  	};  case "&ropar;":  	return new char[] {  		'\u2986'  	};  case "&Ropf;":  	return new char[] {  		'\u211D'  	};  case "&ropf;":  	return new char[] {  		'\uD835''  		'\uDD63'  	};  case "&roplus;":  	return new char[] {  		'\u2A2E'  	};  case "&rotimes;":  	return new char[] {  		'\u2A35'  	};  case "&RoundImplies;":  	return new char[] {  		'\u2970'  	};  case "&rpar;":  	return new char[] {  		'\u0029'  	};  case "&rpargt;":  	return new char[] {  		'\u2994'  	};  case "&rppolint;":  	return new char[] {  		'\u2A12'  	};  case "&rrarr;":  	return new char[] {  		'\u21C9'  	};  case "&Rrightarrow;":  	return new char[] {  		'\u21DB'  	};  case "&rsaquo;":  	return new char[] {  		'\u203A'  	};  case "&Rscr;":  	return new char[] {  		'\u211B'  	};  case "&rscr;":  	return new char[] {  		'\uD835''  		'\uDCC7'  	};  case "&Rsh;":  	return new char[] {  		'\u21B1'  	};  case "&rsh;":  	return new char[] {  		'\u21B1'  	};  case "&rsqb;":  	return new char[] {  		'\u005D'  	};  case "&rsquo;":  	return new char[] {  		'\u2019'  	};  case "&rsquor;":  	return new char[] {  		'\u2019'  	};  case "&rthree;":  	return new char[] {  		'\u22CC'  	};  case "&rtimes;":  	return new char[] {  		'\u22CA'  	};  case "&rtri;":  	return new char[] {  		'\u25B9'  	};  case "&rtrie;":  	return new char[] {  		'\u22B5'  	};  case "&rtrif;":  	return new char[] {  		'\u25B8'  	};  case "&rtriltri;":  	return new char[] {  		'\u29CE'  	};  case "&RuleDelayed;":  	return new char[] {  		'\u29F4'  	};  case "&ruluhar;":  	return new char[] {  		'\u2968'  	};  case "&rx;":  	return new char[] {  		'\u211E'  	};  case "&Sacute;":  	return new char[] {  		'\u015A'  	};  case "&sacute;":  	return new char[] {  		'\u015B'  	};  case "&sbquo;":  	return new char[] {  		'\u201A'  	};  case "&Sc;":  	return new char[] {  		'\u2ABC'  	};  case "&sc;":  	return new char[] {  		'\u227B'  	};  case "&scap;":  	return new char[] {  		'\u2AB8'  	};  case "&Scaron;":  	return new char[] {  		'\u0160'  	};  case "&scaron;":  	return new char[] {  		'\u0161'  	};  case "&sccue;":  	return new char[] {  		'\u227D'  	};  case "&scE;":  	return new char[] {  		'\u2AB4'  	};  case "&sce;":  	return new char[] {  		'\u2AB0'  	};  case "&Scedil;":  	return new char[] {  		'\u015E'  	};  case "&scedil;":  	return new char[] {  		'\u015F'  	};  case "&Scirc;":  	return new char[] {  		'\u015C'  	};  case "&scirc;":  	return new char[] {  		'\u015D'  	};  case "&scnap;":  	return new char[] {  		'\u2ABA'  	};  case "&scnE;":  	return new char[] {  		'\u2AB6'  	};  case "&scnsim;":  	return new char[] {  		'\u22E9'  	};  case "&scpolint;":  	return new char[] {  		'\u2A13'  	};  case "&scsim;":  	return new char[] {  		'\u227F'  	};  case "&Scy;":  	return new char[] {  		'\u0421'  	};  case "&scy;":  	return new char[] {  		'\u0441'  	};  case "&sdot;":  	return new char[] {  		'\u22C5'  	};  case "&sdotb;":  	return new char[] {  		'\u22A1'  	};  case "&sdote;":  	return new char[] {  		'\u2A66'  	};  case "&searhk;":  	return new char[] {  		'\u2925'  	};  case "&seArr;":  	return new char[] {  		'\u21D8'  	};  case "&searr;":  	return new char[] {  		'\u2198'  	};  case "&searrow;":  	return new char[] {  		'\u2198'  	};  case "&sect;":  	return new char[] {  		'\u00A7'  	};  case "&sect":  	return new char[] {  		'\u00A7'  	};  case "&semi;":  	return new char[] {  		'\u003B'  	};  case "&seswar;":  	return new char[] {  		'\u2929'  	};  case "&setminus;":  	return new char[] {  		'\u2216'  	};  case "&setmn;":  	return new char[] {  		'\u2216'  	};  case "&sext;":  	return new char[] {  		'\u2736'  	};  case "&Sfr;":  	return new char[] {  		'\uD835''  		'\uDD16'  	};  case "&sfr;":  	return new char[] {  		'\uD835''  		'\uDD30'  	};  case "&sfrown;":  	return new char[] {  		'\u2322'  	};  case "&sharp;":  	return new char[] {  		'\u266F'  	};  case "&SHCHcy;":  	return new char[] {  		'\u0429'  	};  case "&shchcy;":  	return new char[] {  		'\u0449'  	};  case "&SHcy;":  	return new char[] {  		'\u0428'  	};  case "&shcy;":  	return new char[] {  		'\u0448'  	};  case "&ShortDownArrow;":  	return new char[] {  		'\u2193'  	};  case "&ShortLeftArrow;":  	return new char[] {  		'\u2190'  	};  case "&shortmid;":  	return new char[] {  		'\u2223'  	};  case "&shortparallel;":  	return new char[] {  		'\u2225'  	};  case "&ShortRightArrow;":  	return new char[] {  		'\u2192'  	};  case "&ShortUpArrow;":  	return new char[] {  		'\u2191'  	};  case "&shy;":  	return new char[] {  		'\u00AD'  	};  case "&shy":  	return new char[] {  		'\u00AD'  	};  case "&Sigma;":  	return new char[] {  		'\u03A3'  	};  case "&sigma;":  	return new char[] {  		'\u03C3'  	};  case "&sigmaf;":  	return new char[] {  		'\u03C2'  	};  case "&sigmav;":  	return new char[] {  		'\u03C2'  	};  case "&sim;":  	return new char[] {  		'\u223C'  	};  case "&simdot;":  	return new char[] {  		'\u2A6A'  	};  case "&sime;":  	return new char[] {  		'\u2243'  	};  case "&simeq;":  	return new char[] {  		'\u2243'  	};  case "&simg;":  	return new char[] {  		'\u2A9E'  	};  case "&simgE;":  	return new char[] {  		'\u2AA0'  	};  case "&siml;":  	return new char[] {  		'\u2A9D'  	};  case "&simlE;":  	return new char[] {  		'\u2A9F'  	};  case "&simne;":  	return new char[] {  		'\u2246'  	};  case "&simplus;":  	return new char[] {  		'\u2A24'  	};  case "&simrarr;":  	return new char[] {  		'\u2972'  	};  case "&slarr;":  	return new char[] {  		'\u2190'  	};  case "&SmallCircle;":  	return new char[] {  		'\u2218'  	};  case "&smallsetminus;":  	return new char[] {  		'\u2216'  	};  case "&smashp;":  	return new char[] {  		'\u2A33'  	};  case "&smeparsl;":  	return new char[] {  		'\u29E4'  	};  case "&smid;":  	return new char[] {  		'\u2223'  	};  case "&smile;":  	return new char[] {  		'\u2323'  	};  case "&smt;":  	return new char[] {  		'\u2AAA'  	};  case "&smte;":  	return new char[] {  		'\u2AAC'  	};  case "&smtes;":  	return new char[] {  		'\u2AAC''  		'\uFE00'  	};  case "&SOFTcy;":  	return new char[] {  		'\u042C'  	};  case "&softcy;":  	return new char[] {  		'\u044C'  	};  case "&sol;":  	return new char[] {  		'\u002F'  	};  case "&solb;":  	return new char[] {  		'\u29C4'  	};  case "&solbar;":  	return new char[] {  		'\u233F'  	};  case "&Sopf;":  	return new char[] {  		'\uD835''  		'\uDD4A'  	};  case "&sopf;":  	return new char[] {  		'\uD835''  		'\uDD64'  	};  case "&spades;":  	return new char[] {  		'\u2660'  	};  case "&spadesuit;":  	return new char[] {  		'\u2660'  	};  case "&spar;":  	return new char[] {  		'\u2225'  	};  case "&sqcap;":  	return new char[] {  		'\u2293'  	};  case "&sqcaps;":  	return new char[] {  		'\u2293''  		'\uFE00'  	};  case "&sqcup;":  	return new char[] {  		'\u2294'  	};  case "&sqcups;":  	return new char[] {  		'\u2294''  		'\uFE00'  	};  case "&Sqrt;":  	return new char[] {  		'\u221A'  	};  case "&sqsub;":  	return new char[] {  		'\u228F'  	};  case "&sqsube;":  	return new char[] {  		'\u2291'  	};  case "&sqsubset;":  	return new char[] {  		'\u228F'  	};  case "&sqsubseteq;":  	return new char[] {  		'\u2291'  	};  case "&sqsup;":  	return new char[] {  		'\u2290'  	};  case "&sqsupe;":  	return new char[] {  		'\u2292'  	};  case "&sqsupset;":  	return new char[] {  		'\u2290'  	};  case "&sqsupseteq;":  	return new char[] {  		'\u2292'  	};  case "&squ;":  	return new char[] {  		'\u25A1'  	};  case "&Square;":  	return new char[] {  		'\u25A1'  	};  case "&square;":  	return new char[] {  		'\u25A1'  	};  case "&SquareIntersection;":  	return new char[] {  		'\u2293'  	};  case "&SquareSubset;":  	return new char[] {  		'\u228F'  	};  case "&SquareSubsetEqual;":  	return new char[] {  		'\u2291'  	};  case "&SquareSuperset;":  	return new char[] {  		'\u2290'  	};  case "&SquareSupersetEqual;":  	return new char[] {  		'\u2292'  	};  case "&SquareUnion;":  	return new char[] {  		'\u2294'  	};  case "&squarf;":  	return new char[] {  		'\u25AA'  	};  case "&squf;":  	return new char[] {  		'\u25AA'  	};  case "&srarr;":  	return new char[] {  		'\u2192'  	};  case "&Sscr;":  	return new char[] {  		'\uD835''  		'\uDCAE'  	};  case "&sscr;":  	return new char[] {  		'\uD835''  		'\uDCC8'  	};  case "&ssetmn;":  	return new char[] {  		'\u2216'  	};  case "&ssmile;":  	return new char[] {  		'\u2323'  	};  case "&sstarf;":  	return new char[] {  		'\u22C6'  	};  case "&Star;":  	return new char[] {  		'\u22C6'  	};  case "&star;":  	return new char[] {  		'\u2606'  	};  case "&starf;":  	return new char[] {  		'\u2605'  	};  case "&straightepsilon;":  	return new char[] {  		'\u03F5'  	};  case "&straightphi;":  	return new char[] {  		'\u03D5'  	};  case "&strns;":  	return new char[] {  		'\u00AF'  	};  case "&Sub;":  	return new char[] {  		'\u22D0'  	};  case "&sub;":  	return new char[] {  		'\u2282'  	};  case "&subdot;":  	return new char[] {  		'\u2ABD'  	};  case "&subE;":  	return new char[] {  		'\u2AC5'  	};  case "&sube;":  	return new char[] {  		'\u2286'  	};  case "&subedot;":  	return new char[] {  		'\u2AC3'  	};  case "&submult;":  	return new char[] {  		'\u2AC1'  	};  case "&subnE;":  	return new char[] {  		'\u2ACB'  	};  case "&subne;":  	return new char[] {  		'\u228A'  	};  case "&subplus;":  	return new char[] {  		'\u2ABF'  	};  case "&subrarr;":  	return new char[] {  		'\u2979'  	};  case "&Subset;":  	return new char[] {  		'\u22D0'  	};  case "&subset;":  	return new char[] {  		'\u2282'  	};  case "&subseteq;":  	return new char[] {  		'\u2286'  	};  case "&subseteqq;":  	return new char[] {  		'\u2AC5'  	};  case "&SubsetEqual;":  	return new char[] {  		'\u2286'  	};  case "&subsetneq;":  	return new char[] {  		'\u228A'  	};  case "&subsetneqq;":  	return new char[] {  		'\u2ACB'  	};  case "&subsim;":  	return new char[] {  		'\u2AC7'  	};  case "&subsub;":  	return new char[] {  		'\u2AD5'  	};  case "&subsup;":  	return new char[] {  		'\u2AD3'  	};  case "&succ;":  	return new char[] {  		'\u227B'  	};  case "&succapprox;":  	return new char[] {  		'\u2AB8'  	};  case "&succcurlyeq;":  	return new char[] {  		'\u227D'  	};  case "&Succeeds;":  	return new char[] {  		'\u227B'  	};  case "&SucceedsEqual;":  	return new char[] {  		'\u2AB0'  	};  case "&SucceedsSlantEqual;":  	return new char[] {  		'\u227D'  	};  case "&SucceedsTilde;":  	return new char[] {  		'\u227F'  	};  case "&succeq;":  	return new char[] {  		'\u2AB0'  	};  case "&succnapprox;":  	return new char[] {  		'\u2ABA'  	};  case "&succneqq;":  	return new char[] {  		'\u2AB6'  	};  case "&succnsim;":  	return new char[] {  		'\u22E9'  	};  case "&succsim;":  	return new char[] {  		'\u227F'  	};  case "&SuchThat;":  	return new char[] {  		'\u220B'  	};  case "&Sum;":  	return new char[] {  		'\u2211'  	};  case "&sum;":  	return new char[] {  		'\u2211'  	};  case "&sung;":  	return new char[] {  		'\u266A'  	};  case "&Sup;":  	return new char[] {  		'\u22D1'  	};  case "&sup;":  	return new char[] {  		'\u2283'  	};  case "&sup1;":  	return new char[] {  		'\u00B9'  	};  case "&sup1":  	return new char[] {  		'\u00B9'  	};  case "&sup2;":  	return new char[] {  		'\u00B2'  	};  case "&sup2":  	return new char[] {  		'\u00B2'  	};  case "&sup3;":  	return new char[] {  		'\u00B3'  	};  case "&sup3":  	return new char[] {  		'\u00B3'  	};  case "&supdot;":  	return new char[] {  		'\u2ABE'  	};  case "&supdsub;":  	return new char[] {  		'\u2AD8'  	};  case "&supE;":  	return new char[] {  		'\u2AC6'  	};  case "&supe;":  	return new char[] {  		'\u2287'  	};  case "&supedot;":  	return new char[] {  		'\u2AC4'  	};  case "&Superset;":  	return new char[] {  		'\u2283'  	};  case "&SupersetEqual;":  	return new char[] {  		'\u2287'  	};  case "&suphsol;":  	return new char[] {  		'\u27C9'  	};  case "&suphsub;":  	return new char[] {  		'\u2AD7'  	};  case "&suplarr;":  	return new char[] {  		'\u297B'  	};  case "&supmult;":  	return new char[] {  		'\u2AC2'  	};  case "&supnE;":  	return new char[] {  		'\u2ACC'  	};  case "&supne;":  	return new char[] {  		'\u228B'  	};  case "&supplus;":  	return new char[] {  		'\u2AC0'  	};  case "&Supset;":  	return new char[] {  		'\u22D1'  	};  case "&supset;":  	return new char[] {  		'\u2283'  	};  case "&supseteq;":  	return new char[] {  		'\u2287'  	};  case "&supseteqq;":  	return new char[] {  		'\u2AC6'  	};  case "&supsetneq;":  	return new char[] {  		'\u228B'  	};  case "&supsetneqq;":  	return new char[] {  		'\u2ACC'  	};  case "&supsim;":  	return new char[] {  		'\u2AC8'  	};  case "&supsub;":  	return new char[] {  		'\u2AD4'  	};  case "&supsup;":  	return new char[] {  		'\u2AD6'  	};  case "&swarhk;":  	return new char[] {  		'\u2926'  	};  case "&swArr;":  	return new char[] {  		'\u21D9'  	};  case "&swarr;":  	return new char[] {  		'\u2199'  	};  case "&swarrow;":  	return new char[] {  		'\u2199'  	};  case "&swnwar;":  	return new char[] {  		'\u292A'  	};  case "&szlig;":  	return new char[] {  		'\u00DF'  	};  case "&szlig":  	return new char[] {  		'\u00DF'  	};  case "&Tab;":  	return new char[] {  		'\u0009'  	};  case "&target;":  	return new char[] {  		'\u2316'  	};  case "&Tau;":  	return new char[] {  		'\u03A4'  	};  case "&tau;":  	return new char[] {  		'\u03C4'  	};  case "&tbrk;":  	return new char[] {  		'\u23B4'  	};  case "&Tcaron;":  	return new char[] {  		'\u0164'  	};  case "&tcaron;":  	return new char[] {  		'\u0165'  	};  case "&Tcedil;":  	return new char[] {  		'\u0162'  	};  case "&tcedil;":  	return new char[] {  		'\u0163'  	};  case "&Tcy;":  	return new char[] {  		'\u0422'  	};  case "&tcy;":  	return new char[] {  		'\u0442'  	};  case "&tdot;":  	return new char[] {  		'\u20DB'  	};  case "&telrec;":  	return new char[] {  		'\u2315'  	};  case "&Tfr;":  	return new char[] {  		'\uD835''  		'\uDD17'  	};  case "&tfr;":  	return new char[] {  		'\uD835''  		'\uDD31'  	};  case "&there4;":  	return new char[] {  		'\u2234'  	};  case "&Therefore;":  	return new char[] {  		'\u2234'  	};  case "&therefore;":  	return new char[] {  		'\u2234'  	};  case "&Theta;":  	return new char[] {  		'\u0398'  	};  case "&theta;":  	return new char[] {  		'\u03B8'  	};  case "&thetasym;":  	return new char[] {  		'\u03D1'  	};  case "&thetav;":  	return new char[] {  		'\u03D1'  	};  case "&thickapprox;":  	return new char[] {  		'\u2248'  	};  case "&thicksim;":  	return new char[] {  		'\u223C'  	};  case "&ThickSpace;":  	return new char[] {  		'\u205F''  		'\u200A'  	};  case "&thinsp;":  	return new char[] {  		'\u2009'  	};  case "&ThinSpace;":  	return new char[] {  		'\u2009'  	};  case "&thkap;":  	return new char[] {  		'\u2248'  	};  case "&thksim;":  	return new char[] {  		'\u223C'  	};  case "&THORN;":  	return new char[] {  		'\u00DE'  	};  case "&THORN":  	return new char[] {  		'\u00DE'  	};  case "&thorn;":  	return new char[] {  		'\u00FE'  	};  case "&thorn":  	return new char[] {  		'\u00FE'  	};  case "&Tilde;":  	return new char[] {  		'\u223C'  	};  case "&tilde;":  	return new char[] {  		'\u02DC'  	};  case "&TildeEqual;":  	return new char[] {  		'\u2243'  	};  case "&TildeFullEqual;":  	return new char[] {  		'\u2245'  	};  case "&TildeTilde;":  	return new char[] {  		'\u2248'  	};  case "&times;":  	return new char[] {  		'\u00D7'  	};  case "&times":  	return new char[] {  		'\u00D7'  	};  case "&timesb;":  	return new char[] {  		'\u22A0'  	};  case "&timesbar;":  	return new char[] {  		'\u2A31'  	};  case "&timesd;":  	return new char[] {  		'\u2A30'  	};  case "&tint;":  	return new char[] {  		'\u222D'  	};  case "&toea;":  	return new char[] {  		'\u2928'  	};  case "&top;":  	return new char[] {  		'\u22A4'  	};  case "&topbot;":  	return new char[] {  		'\u2336'  	};  case "&topcir;":  	return new char[] {  		'\u2AF1'  	};  case "&Topf;":  	return new char[] {  		'\uD835''  		'\uDD4B'  	};  case "&topf;":  	return new char[] {  		'\uD835''  		'\uDD65'  	};  case "&topfork;":  	return new char[] {  		'\u2ADA'  	};  case "&tosa;":  	return new char[] {  		'\u2929'  	};  case "&tprime;":  	return new char[] {  		'\u2034'  	};  case "&TRADE;":  	return new char[] {  		'\u2122'  	};  case "&trade;":  	return new char[] {  		'\u2122'  	};  case "&triangle;":  	return new char[] {  		'\u25B5'  	};  case "&triangledown;":  	return new char[] {  		'\u25BF'  	};  case "&triangleleft;":  	return new char[] {  		'\u25C3'  	};  case "&trianglelefteq;":  	return new char[] {  		'\u22B4'  	};  case "&triangleq;":  	return new char[] {  		'\u225C'  	};  case "&triangleright;":  	return new char[] {  		'\u25B9'  	};  case "&trianglerighteq;":  	return new char[] {  		'\u22B5'  	};  case "&tridot;":  	return new char[] {  		'\u25EC'  	};  case "&trie;":  	return new char[] {  		'\u225C'  	};  case "&triminus;":  	return new char[] {  		'\u2A3A'  	};  case "&TripleDot;":  	return new char[] {  		'\u20DB'  	};  case "&triplus;":  	return new char[] {  		'\u2A39'  	};  case "&trisb;":  	return new char[] {  		'\u29CD'  	};  case "&tritime;":  	return new char[] {  		'\u2A3B'  	};  case "&trpezium;":  	return new char[] {  		'\u23E2'  	};  case "&Tscr;":  	return new char[] {  		'\uD835''  		'\uDCAF'  	};  case "&tscr;":  	return new char[] {  		'\uD835''  		'\uDCC9'  	};  case "&TScy;":  	return new char[] {  		'\u0426'  	};  case "&tscy;":  	return new char[] {  		'\u0446'  	};  case "&TSHcy;":  	return new char[] {  		'\u040B'  	};  case "&tshcy;":  	return new char[] {  		'\u045B'  	};  case "&Tstrok;":  	return new char[] {  		'\u0166'  	};  case "&tstrok;":  	return new char[] {  		'\u0167'  	};  case "&twixt;":  	return new char[] {  		'\u226C'  	};  case "&twoheadleftarrow;":  	return new char[] {  		'\u219E'  	};  case "&twoheadrightarrow;":  	return new char[] {  		'\u21A0'  	};  case "&Uacute;":  	return new char[] {  		'\u00DA'  	};  case "&Uacute":  	return new char[] {  		'\u00DA'  	};  case "&uacute;":  	return new char[] {  		'\u00FA'  	};  case "&uacute":  	return new char[] {  		'\u00FA'  	};  case "&Uarr;":  	return new char[] {  		'\u219F'  	};  case "&uArr;":  	return new char[] {  		'\u21D1'  	};  case "&uarr;":  	return new char[] {  		'\u2191'  	};  case "&Uarrocir;":  	return new char[] {  		'\u2949'  	};  case "&Ubrcy;":  	return new char[] {  		'\u040E'  	};  case "&ubrcy;":  	return new char[] {  		'\u045E'  	};  case "&Ubreve;":  	return new char[] {  		'\u016C'  	};  case "&ubreve;":  	return new char[] {  		'\u016D'  	};  case "&Ucirc;":  	return new char[] {  		'\u00DB'  	};  case "&Ucirc":  	return new char[] {  		'\u00DB'  	};  case "&ucirc;":  	return new char[] {  		'\u00FB'  	};  case "&ucirc":  	return new char[] {  		'\u00FB'  	};  case "&Ucy;":  	return new char[] {  		'\u0423'  	};  case "&ucy;":  	return new char[] {  		'\u0443'  	};  case "&udarr;":  	return new char[] {  		'\u21C5'  	};  case "&Udblac;":  	return new char[] {  		'\u0170'  	};  case "&udblac;":  	return new char[] {  		'\u0171'  	};  case "&udhar;":  	return new char[] {  		'\u296E'  	};  case "&ufisht;":  	return new char[] {  		'\u297E'  	};  case "&Ufr;":  	return new char[] {  		'\uD835''  		'\uDD18'  	};  case "&ufr;":  	return new char[] {  		'\uD835''  		'\uDD32'  	};  case "&Ugrave;":  	return new char[] {  		'\u00D9'  	};  case "&Ugrave":  	return new char[] {  		'\u00D9'  	};  case "&ugrave;":  	return new char[] {  		'\u00F9'  	};  case "&ugrave":  	return new char[] {  		'\u00F9'  	};  case "&uHar;":  	return new char[] {  		'\u2963'  	};  case "&uharl;":  	return new char[] {  		'\u21BF'  	};  case "&uharr;":  	return new char[] {  		'\u21BE'  	};  case "&uhblk;":  	return new char[] {  		'\u2580'  	};  case "&ulcorn;":  	return new char[] {  		'\u231C'  	};  case "&ulcorner;":  	return new char[] {  		'\u231C'  	};  case "&ulcrop;":  	return new char[] {  		'\u230F'  	};  case "&ultri;":  	return new char[] {  		'\u25F8'  	};  case "&Umacr;":  	return new char[] {  		'\u016A'  	};  case "&umacr;":  	return new char[] {  		'\u016B'  	};  case "&uml;":  	return new char[] {  		'\u00A8'  	};  case "&uml":  	return new char[] {  		'\u00A8'  	};  case "&UnderBar;":  	return new char[] {  		'\u005F'  	};  case "&UnderBrace;":  	return new char[] {  		'\u23DF'  	};  case "&UnderBracket;":  	return new char[] {  		'\u23B5'  	};  case "&UnderParenthesis;":  	return new char[] {  		'\u23DD'  	};  case "&Union;":  	return new char[] {  		'\u22C3'  	};  case "&UnionPlus;":  	return new char[] {  		'\u228E'  	};  case "&Uogon;":  	return new char[] {  		'\u0172'  	};  case "&uogon;":  	return new char[] {  		'\u0173'  	};  case "&Uopf;":  	return new char[] {  		'\uD835''  		'\uDD4C'  	};  case "&uopf;":  	return new char[] {  		'\uD835''  		'\uDD66'  	};  case "&UpArrow;":  	return new char[] {  		'\u2191'  	};  case "&Uparrow;":  	return new char[] {  		'\u21D1'  	};  case "&uparrow;":  	return new char[] {  		'\u2191'  	};  case "&UpArrowBar;":  	return new char[] {  		'\u2912'  	};  case "&UpArrowDownArrow;":  	return new char[] {  		'\u21C5'  	};  case "&UpDownArrow;":  	return new char[] {  		'\u2195'  	};  case "&Updownarrow;":  	return new char[] {  		'\u21D5'  	};  case "&updownarrow;":  	return new char[] {  		'\u2195'  	};  case "&UpEquilibrium;":  	return new char[] {  		'\u296E'  	};  case "&upharpoonleft;":  	return new char[] {  		'\u21BF'  	};  case "&upharpoonright;":  	return new char[] {  		'\u21BE'  	};  case "&uplus;":  	return new char[] {  		'\u228E'  	};  case "&UpperLeftArrow;":  	return new char[] {  		'\u2196'  	};  case "&UpperRightArrow;":  	return new char[] {  		'\u2197'  	};  case "&Upsi;":  	return new char[] {  		'\u03D2'  	};  case "&upsi;":  	return new char[] {  		'\u03C5'  	};  case "&upsih;":  	return new char[] {  		'\u03D2'  	};  case "&Upsilon;":  	return new char[] {  		'\u03A5'  	};  case "&upsilon;":  	return new char[] {  		'\u03C5'  	};  case "&UpTee;":  	return new char[] {  		'\u22A5'  	};  case "&UpTeeArrow;":  	return new char[] {  		'\u21A5'  	};  case "&upuparrows;":  	return new char[] {  		'\u21C8'  	};  case "&urcorn;":  	return new char[] {  		'\u231D'  	};  case "&urcorner;":  	return new char[] {  		'\u231D'  	};  case "&urcrop;":  	return new char[] {  		'\u230E'  	};  case "&Uring;":  	return new char[] {  		'\u016E'  	};  case "&uring;":  	return new char[] {  		'\u016F'  	};  case "&urtri;":  	return new char[] {  		'\u25F9'  	};  case "&Uscr;":  	return new char[] {  		'\uD835''  		'\uDCB0'  	};  case "&uscr;":  	return new char[] {  		'\uD835''  		'\uDCCA'  	};  case "&utdot;":  	return new char[] {  		'\u22F0'  	};  case "&Utilde;":  	return new char[] {  		'\u0168'  	};  case "&utilde;":  	return new char[] {  		'\u0169'  	};  case "&utri;":  	return new char[] {  		'\u25B5'  	};  case "&utrif;":  	return new char[] {  		'\u25B4'  	};  case "&uuarr;":  	return new char[] {  		'\u21C8'  	};  case "&Uuml;":  	return new char[] {  		'\u00DC'  	};  case "&Uuml":  	return new char[] {  		'\u00DC'  	};  case "&uuml;":  	return new char[] {  		'\u00FC'  	};  case "&uuml":  	return new char[] {  		'\u00FC'  	};  case "&uwangle;":  	return new char[] {  		'\u29A7'  	};  case "&vangrt;":  	return new char[] {  		'\u299C'  	};  case "&varepsilon;":  	return new char[] {  		'\u03F5'  	};  case "&varkappa;":  	return new char[] {  		'\u03F0'  	};  case "&varnothing;":  	return new char[] {  		'\u2205'  	};  case "&varphi;":  	return new char[] {  		'\u03D5'  	};  case "&varpi;":  	return new char[] {  		'\u03D6'  	};  case "&varpropto;":  	return new char[] {  		'\u221D'  	};  case "&vArr;":  	return new char[] {  		'\u21D5'  	};  case "&varr;":  	return new char[] {  		'\u2195'  	};  case "&varrho;":  	return new char[] {  		'\u03F1'  	};  case "&varsigma;":  	return new char[] {  		'\u03C2'  	};  case "&varsubsetneq;":  	return new char[] {  		'\u228A''  		'\uFE00'  	};  case "&varsubsetneqq;":  	return new char[] {  		'\u2ACB''  		'\uFE00'  	};  case "&varsupsetneq;":  	return new char[] {  		'\u228B''  		'\uFE00'  	};  case "&varsupsetneqq;":  	return new char[] {  		'\u2ACC''  		'\uFE00'  	};  case "&vartheta;":  	return new char[] {  		'\u03D1'  	};  case "&vartriangleleft;":  	return new char[] {  		'\u22B2'  	};  case "&vartriangleright;":  	return new char[] {  		'\u22B3'  	};  case "&Vbar;":  	return new char[] {  		'\u2AEB'  	};  case "&vBar;":  	return new char[] {  		'\u2AE8'  	};  case "&vBarv;":  	return new char[] {  		'\u2AE9'  	};  case "&Vcy;":  	return new char[] {  		'\u0412'  	};  case "&vcy;":  	return new char[] {  		'\u0432'  	};  case "&VDash;":  	return new char[] {  		'\u22AB'  	};  case "&Vdash;":  	return new char[] {  		'\u22A9'  	};  case "&vDash;":  	return new char[] {  		'\u22A8'  	};  case "&vdash;":  	return new char[] {  		'\u22A2'  	};  case "&Vdashl;":  	return new char[] {  		'\u2AE6'  	};  case "&Vee;":  	return new char[] {  		'\u22C1'  	};  case "&vee;":  	return new char[] {  		'\u2228'  	};  case "&veebar;":  	return new char[] {  		'\u22BB'  	};  case "&veeeq;":  	return new char[] {  		'\u225A'  	};  case "&vellip;":  	return new char[] {  		'\u22EE'  	};  case "&Verbar;":  	return new char[] {  		'\u2016'  	};  case "&verbar;":  	return new char[] {  		'\u007C'  	};  case "&Vert;":  	return new char[] {  		'\u2016'  	};  case "&vert;":  	return new char[] {  		'\u007C'  	};  case "&VerticalBar;":  	return new char[] {  		'\u2223'  	};  case "&VerticalLine;":  	return new char[] {  		'\u007C'  	};  case "&VerticalSeparator;":  	return new char[] {  		'\u2758'  	};  case "&VerticalTilde;":  	return new char[] {  		'\u2240'  	};  case "&VeryThinSpace;":  	return new char[] {  		'\u200A'  	};  case "&Vfr;":  	return new char[] {  		'\uD835''  		'\uDD19'  	};  case "&vfr;":  	return new char[] {  		'\uD835''  		'\uDD33'  	};  case "&vltri;":  	return new char[] {  		'\u22B2'  	};  case "&vnsub;":  	return new char[] {  		'\u2282''  		'\u20D2'  	};  case "&vnsup;":  	return new char[] {  		'\u2283''  		'\u20D2'  	};  case "&Vopf;":  	return new char[] {  		'\uD835''  		'\uDD4D'  	};  case "&vopf;":  	return new char[] {  		'\uD835''  		'\uDD67'  	};  case "&vprop;":  	return new char[] {  		'\u221D'  	};  case "&vrtri;":  	return new char[] {  		'\u22B3'  	};  case "&Vscr;":  	return new char[] {  		'\uD835''  		'\uDCB1'  	};  case "&vscr;":  	return new char[] {  		'\uD835''  		'\uDCCB'  	};  case "&vsubnE;":  	return new char[] {  		'\u2ACB''  		'\uFE00'  	};  case "&vsubne;":  	return new char[] {  		'\u228A''  		'\uFE00'  	};  case "&vsupnE;":  	return new char[] {  		'\u2ACC''  		'\uFE00'  	};  case "&vsupne;":  	return new char[] {  		'\u228B''  		'\uFE00'  	};  case "&Vvdash;":  	return new char[] {  		'\u22AA'  	};  case "&vzigzag;":  	return new char[] {  		'\u299A'  	};  case "&Wcirc;":  	return new char[] {  		'\u0174'  	};  case "&wcirc;":  	return new char[] {  		'\u0175'  	};  case "&wedbar;":  	return new char[] {  		'\u2A5F'  	};  case "&Wedge;":  	return new char[] {  		'\u22C0'  	};  case "&wedge;":  	return new char[] {  		'\u2227'  	};  case "&wedgeq;":  	return new char[] {  		'\u2259'  	};  case "&weierp;":  	return new char[] {  		'\u2118'  	};  case "&Wfr;":  	return new char[] {  		'\uD835''  		'\uDD1A'  	};  case "&wfr;":  	return new char[] {  		'\uD835''  		'\uDD34'  	};  case "&Wopf;":  	return new char[] {  		'\uD835''  		'\uDD4E'  	};  case "&wopf;":  	return new char[] {  		'\uD835''  		'\uDD68'  	};  case "&wp;":  	return new char[] {  		'\u2118'  	};  case "&wr;":  	return new char[] {  		'\u2240'  	};  case "&wreath;":  	return new char[] {  		'\u2240'  	};  case "&Wscr;":  	return new char[] {  		'\uD835''  		'\uDCB2'  	};  case "&wscr;":  	return new char[] {  		'\uD835''  		'\uDCCC'  	};  case "&xcap;":  	return new char[] {  		'\u22C2'  	};  case "&xcirc;":  	return new char[] {  		'\u25EF'  	};  case "&xcup;":  	return new char[] {  		'\u22C3'  	};  case "&xdtri;":  	return new char[] {  		'\u25BD'  	};  case "&Xfr;":  	return new char[] {  		'\uD835''  		'\uDD1B'  	};  case "&xfr;":  	return new char[] {  		'\uD835''  		'\uDD35'  	};  case "&xhArr;":  	return new char[] {  		'\u27FA'  	};  case "&xharr;":  	return new char[] {  		'\u27F7'  	};  case "&Xi;":  	return new char[] {  		'\u039E'  	};  case "&xi;":  	return new char[] {  		'\u03BE'  	};  case "&xlArr;":  	return new char[] {  		'\u27F8'  	};  case "&xlarr;":  	return new char[] {  		'\u27F5'  	};  case "&xmap;":  	return new char[] {  		'\u27FC'  	};  case "&xnis;":  	return new char[] {  		'\u22FB'  	};  case "&xodot;":  	return new char[] {  		'\u2A00'  	};  case "&Xopf;":  	return new char[] {  		'\uD835''  		'\uDD4F'  	};  case "&xopf;":  	return new char[] {  		'\uD835''  		'\uDD69'  	};  case "&xoplus;":  	return new char[] {  		'\u2A01'  	};  case "&xotime;":  	return new char[] {  		'\u2A02'  	};  case "&xrArr;":  	return new char[] {  		'\u27F9'  	};  case "&xrarr;":  	return new char[] {  		'\u27F6'  	};  case "&Xscr;":  	return new char[] {  		'\uD835''  		'\uDCB3'  	};  case "&xscr;":  	return new char[] {  		'\uD835''  		'\uDCCD'  	};  case "&xsqcup;":  	return new char[] {  		'\u2A06'  	};  case "&xuplus;":  	return new char[] {  		'\u2A04'  	};  case "&xutri;":  	return new char[] {  		'\u25B3'  	};  case "&xvee;":  	return new char[] {  		'\u22C1'  	};  case "&xwedge;":  	return new char[] {  		'\u22C0'  	};  case "&Yacute;":  	return new char[] {  		'\u00DD'  	};  case "&Yacute":  	return new char[] {  		'\u00DD'  	};  case "&yacute;":  	return new char[] {  		'\u00FD'  	};  case "&yacute":  	return new char[] {  		'\u00FD'  	};  case "&YAcy;":  	return new char[] {  		'\u042F'  	};  case "&yacy;":  	return new char[] {  		'\u044F'  	};  case "&Ycirc;":  	return new char[] {  		'\u0176'  	};  case "&ycirc;":  	return new char[] {  		'\u0177'  	};  case "&Ycy;":  	return new char[] {  		'\u042B'  	};  case "&ycy;":  	return new char[] {  		'\u044B'  	};  case "&yen;":  	return new char[] {  		'\u00A5'  	};  case "&yen":  	return new char[] {  		'\u00A5'  	};  case "&Yfr;":  	return new char[] {  		'\uD835''  		'\uDD1C'  	};  case "&yfr;":  	return new char[] {  		'\uD835''  		'\uDD36'  	};  case "&YIcy;":  	return new char[] {  		'\u0407'  	};  case "&yicy;":  	return new char[] {  		'\u0457'  	};  case "&Yopf;":  	return new char[] {  		'\uD835''  		'\uDD50'  	};  case "&yopf;":  	return new char[] {  		'\uD835''  		'\uDD6A'  	};  case "&Yscr;":  	return new char[] {  		'\uD835''  		'\uDCB4'  	};  case "&yscr;":  	return new char[] {  		'\uD835''  		'\uDCCE'  	};  case "&YUcy;":  	return new char[] {  		'\u042E'  	};  case "&yucy;":  	return new char[] {  		'\u044E'  	};  case "&Yuml;":  	return new char[] {  		'\u0178'  	};  case "&yuml;":  	return new char[] {  		'\u00FF'  	};  case "&yuml":  	return new char[] {  		'\u00FF'  	};  case "&Zacute;":  	return new char[] {  		'\u0179'  	};  case "&zacute;":  	return new char[] {  		'\u017A'  	};  case "&Zcaron;":  	return new char[] {  		'\u017D'  	};  case "&zcaron;":  	return new char[] {  		'\u017E'  	};  case "&Zcy;":  	return new char[] {  		'\u0417'  	};  case "&zcy;":  	return new char[] {  		'\u0437'  	};  case "&Zdot;":  	return new char[] {  		'\u017B'  	};  case "&zdot;":  	return new char[] {  		'\u017C'  	};  case "&zeetrf;":  	return new char[] {  		'\u2128'  	};  case "&ZeroWidthSpace;":  	return new char[] {  		'\u200B'  	};  case "&Zeta;":  	return new char[] {  		'\u0396'  	};  case "&zeta;":  	return new char[] {  		'\u03B6'  	};  case "&Zfr;":  	return new char[] {  		'\u2128'  	};  case "&zfr;":  	return new char[] {  		'\uD835''  		'\uDD37'  	};  case "&ZHcy;":  	return new char[] {  		'\u0416'  	};  case "&zhcy;":  	return new char[] {  		'\u0436'  	};  case "&zigrarr;":  	return new char[] {  		'\u21DD'  	};  case "&Zopf;":  	return new char[] {  		'\u2124'  	};  case "&zopf;":  	return new char[] {  		'\uD835''  		'\uDD6B'  	};  case "&Zscr;":  	return new char[] {  		'\uD835''  		'\uDCB5'  	};  case "&zscr;":  	return new char[] {  		'\uD835''  		'\uDCCF'  	};  case "&zwj;":  	return new char[] {  		'\u200D'  	};  case "&zwnj;":  	return new char[] {  		'\u200C'  	};  }  
Missing Default,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,charcterReference,The following switch statement is missing a default case: switch (c) {  case '\n':  case '\f':  case '\t':  case ' ':  case '<':  case '&':  	return null;  case '#':  	number = true;  	goto charcterReference_NUMBER;  }  
Missing Default,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,Parse,The following switch statement is missing a default case: switch (text) {  case "public":  	pointer += 5;  	STATE = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;  	continue;  case "system":  	pointer += 5;  	STATE = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;  	continue;  }  
Missing Default,HTML5,Tokenizer,C:\repos\msarca_html5\HTML5\Tokenizer.cs,ParseEof,The following switch statement is missing a default case: switch (STATE) {  case DATA_STATE:  case RCDATA_STATE:  case RAWTEXT_STATE:  case SCRIPT_DATA_STATE:  case PLAINTEXT_STATE:  	EmitEofToken ();  	break;  case CHARACTER_REFERENCE_IN_RCDATA_STATE:  	STATE = RCDATA_STATE;  	goto REPROCESS;  case TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = DATA_STATE;  	goto REPROCESS;  case END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = DATA_STATE;  	goto REPROCESS;  case RCDATA_LESS_THEN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RCDATA_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RCDATA_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 + TempBufferPtr >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = RCDATA_STATE;  	goto REPROCESS;  case RAWTEXT_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case RAWTEXT_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case RAWTEXT_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 + TempBufferPtr >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = RAWTEXT_STATE;  	goto REPROCESS;  case SCRIPT_DATA_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPE_START_STATE:  case SCRIPT_DATA_ESCAPE_START_DASH_STATE:  	STATE = SCRIPT_DATA_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE:  	unchecked {  		if (DataBufferPtr == DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE:  	unchecked {  		if (DataBufferPtr + 2 >= DataBufferLength)  			DataBufferDoubleSize ();  		DataBuffer [DataBufferPtr++] = '<';  		DataBuffer [DataBufferPtr++] = '/';  		EmitTmpBuffer ();  	}  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE:  	STATE = SCRIPT_DATA_ESCAPED_STATE;  	goto REPROCESS;  case SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE:  	STATE = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;  	goto REPROCESS;  case CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE:  	STATE = LAST_STATE;  	goto REPROCESS;  case MARKUP_DECLARATION_OPEN_STATE:  	STATE = BOGUS_COMMENT_STATE;  	goto REPROCESS;  case COMMENT_START_STATE:  case COMMENT_START_DASH_STATE:  case COMMENT_STATE:  case COMMENT_END_DASH_STATE:  case COMMENT_END_STATE:  case COMMENT_END_BANG_STATE:  	EmitCommentToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case DOCTYPE_STATE:  case BEFORE_DOCTYPE_NAME_STATE:  case DOCTYPE_NAME_STATE:  case AFTER_DOCTYPE_NAME_STATE:  	doctype.NewDoctype ();  	doctype.ForceQuirks = true;  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE:  case BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  case DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE:  case DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE:  case AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE:  case BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE:  case AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE:  case BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  case DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE:  case DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE:  case AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE:  	doctype.ForceQuirks = true;  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case BOGUS_DOCTYPE_STATE:  	EmitDoctypeToken ();  	STATE = DATA_STATE;  	goto REPROCESS;  case CHARACTER_REFERENCE_IN_DATA_STATE:  case TAG_NAME_STATE:  case SCRIPT_DATA_ESCAPED_STATE:  case SCRIPT_DATA_ESCAPED_DASH_STATE:  case SCRIPT_DATA_ESCAPED_DASH_DASH_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE:  case SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE:  case BEFORE_ATTRIBUTE_NAME_STATE:  case ATTRIBUTE_NAME_STATE:  case AFTER_ATTRIBUTE_NAME_STATE:  case BEFORE_ATTRIBUTE_VALUE_STATE:  case ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE:  case ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE:  case ATTRIBUTE_VALUE_UNQUOTED_STATE:  case AFTER_ATTRIBUTE_VALUE_QUOTED_STATE:  case SELF_CLOSING_START_TAG_STATE:  case BOGUS_COMMENT_STATE:  case CDATA_SECTION_STATE:  	STATE = DATA_STATE;  	goto REPROCESS;  }  
Missing Default,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,HeadingInScope,The following switch statement is missing a default case: switch (node.TagName) {  case "h1":  case "h2":  case "h3":  case "h4":  case "h5":  case "h6":  	if (node.Namespace == NS_HTML)  		return true;  	continue;  case "applet":  case "caption":  case "html":  case "table":  case "td":  case "th":  case "marquee":  case "object":  	if (node.Namespace == NS_HTML)  		return false;  	continue;  case "mi":  case "mo":  case "mn":  case "ms":  case "mtext":  case "annotation-xml":  	if (node.Namespace == NS_MathML)  		return false;  	continue;  case "foreignObject":  case "desc":  case "title":  	if (node.Namespace == NS_SVG)  		return false;  	continue;  }  
Missing Default,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,ElementInScope,The following switch statement is missing a default case: switch (node.TagName) {  case "applet":  case "caption":  case "html":  case "table":  case "td":  case "th":  case "marquee":  case "object":  	if (node.Namespace == NS_HTML)  		return false;  	continue;  case "mi":  case "mo":  case "mn":  case "ms":  case "mtext":  case "annotation-xml":  	if (node.Namespace == NS_MathML)  		return false;  	continue;  case "foreignObject":  case "desc":  case "title":  	if (node.Namespace == NS_SVG)  		return false;  	continue;  }  
Missing Default,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,ElementInListItemScope,The following switch statement is missing a default case: switch (node.TagName) {  case "applet":  case "caption":  case "html":  case "table":  case "td":  case "th":  case "marquee":  case "object":  case "ol":  case "ul":  	if (node.Namespace == NS_HTML)  		return false;  	continue;  case "mi":  case "mo":  case "mn":  case "ms":  case "mtext":  case "annotation-xml":  	if (node.Namespace == NS_MathML)  		return false;  	continue;  case "foreignObject":  case "desc":  case "title":  	if (node.Namespace == NS_SVG)  		return false;  	continue;  }  
Missing Default,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,ElementInButtonScope,The following switch statement is missing a default case: switch (node.TagName) {  case "applet":  case "caption":  case "html":  case "table":  case "td":  case "th":  case "marquee":  case "object":  case "button":  	if (node.Namespace == NS_HTML)  		return false;  	continue;  case "mi":  case "mo":  case "mn":  case "ms":  case "mtext":  case "annotation-xml":  	if (node.Namespace == NS_MathML)  		return false;  	continue;  case "foreignObject":  case "desc":  case "title":  	if (node.Namespace == NS_SVG)  		return false;  	continue;  }  
Missing Default,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,AdjustSVGAttributes,The following switch statement is missing a default case: switch (attribute.Name) {  case "attributename":  	attribute.Name = "attributeName";  	break;  case "attributetype":  	attribute.Name = "attributeType";  	break;  case "basefrequency":  	attribute.Name = "baseFrequency";  	break;  case "baseprofile":  	attribute.Name = "baseProfile";  	break;  case "calcmode":  	attribute.Name = "calcMode";  	break;  case "clippathunits":  	attribute.Name = "clipPathUnits";  	break;  case "contentscripttype":  	attribute.Name = "contentScriptType";  	break;  case "contentstyletype":  	attribute.Name = "contentStyleType";  	break;  case "diffuseconstant":  	attribute.Name = "diffuseConstant";  	break;  case "edgemode":  	attribute.Name = "edgeMode";  	break;  case "externalresourcesrequired":  	attribute.Name = "externalResourcesRequired";  	break;  case "filterres":  	attribute.Name = "filterRes";  	break;  case "filterunits":  	attribute.Name = "filterUnits";  	break;  case "glyphref":  	attribute.Name = "glyphRef";  	break;  case "gradienttransform":  	attribute.Name = "gradientTransform";  	break;  case "gradientunits":  	attribute.Name = "gradientUnits";  	break;  case "kernelmatrix":  	attribute.Name = "kernelMatrix";  	break;  case "kernelunitlength":  	attribute.Name = "kernelUnitLength";  	break;  case "keypoints":  	attribute.Name = "keyPoints";  	break;  case "keysplines":  	attribute.Name = "keySplines";  	break;  case "keytimes":  	attribute.Name = "keyTimes";  	break;  case "lengthadjust":  	attribute.Name = "lengthAdjust";  	break;  case "limitingconeangle":  	attribute.Name = "limitingConeAngle";  	break;  case "markerheight":  	attribute.Name = "markerHeight";  	break;  case "markerunits":  	attribute.Name = "markerUnits";  	break;  case "markerwidth":  	attribute.Name = "markerWidth";  	break;  case "maskcontentunits":  	attribute.Name = "maskContentUnits";  	break;  case "maskunits":  	attribute.Name = "maskUnits";  	break;  case "numoctaves":  	attribute.Name = "numOctaves";  	break;  case "pathlength":  	attribute.Name = "pathLength";  	break;  case "patterncontentunits":  	attribute.Name = "patternContentUnits";  	break;  case "patterntransform":  	attribute.Name = "patternTransform";  	break;  case "patternunits":  	attribute.Name = "patternUnits";  	break;  case "pointsatx":  	attribute.Name = "pointsAtX";  	break;  case "pointsaty":  	attribute.Name = "pointsAtY";  	break;  case "pointsatz":  	attribute.Name = "pointsAtZ";  	break;  case "preservealpha":  	attribute.Name = "preserveAlpha";  	break;  case "preserveaspectratio":  	attribute.Name = "preserveAspectRatio";  	break;  case "primitiveunits":  	attribute.Name = "primitiveUnits";  	break;  case "refx":  	attribute.Name = "refX";  	break;  case "refy":  	attribute.Name = "refY";  	break;  case "repeatcount":  	attribute.Name = "repeatCount";  	break;  case "repeatdur":  	attribute.Name = "repeatDur";  	break;  case "requiredextensions":  	attribute.Name = "requiredExtensions";  	break;  case "requiredfeatures":  	attribute.Name = "requiredFeatures";  	break;  case "specularconstant":  	attribute.Name = "specularConstant";  	break;  case "specularexponent":  	attribute.Name = "specularExponent";  	break;  case "spreadmethod":  	attribute.Name = "spreadMethod";  	break;  case "startoffset":  	attribute.Name = "startOffset";  	break;  case "stddeviation":  	attribute.Name = "stdDeviation";  	break;  case "stitchtiles":  	attribute.Name = "stitchTiles";  	break;  case "surfacescale":  	attribute.Name = "surfaceScale";  	break;  case "systemlanguage":  	attribute.Name = "systemLanguage";  	break;  case "tablevalues":  	attribute.Name = "tableValues";  	break;  case "targetx":  	attribute.Name = "targetX";  	break;  case "targety":  	attribute.Name = "targetY";  	break;  case "textlength":  	attribute.Name = "textLength";  	break;  case "viewbox":  	attribute.Name = "viewBox";  	break;  case "viewtarget":  	attribute.Name = "viewTarget";  	break;  case "xchannelselector":  	attribute.Name = "xChannelSelector";  	break;  case "ychannelselector":  	attribute.Name = "yChannelSelector";  	break;  case "zoomandpan":  	attribute.Name = "zoomAndPan";  	break;  }  
Missing Default,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,AdjustForeignAttributes,The following switch statement is missing a default case: switch (attribute.Name) {  case "xlink:actuate":  case "xlink:arcrole":  case "xlink:href":  case "xlink:role":  case "xlink:show":  case "xlink:title":  case "xlink:type":  	attribute.Namespace = NS_XLink;  	break;  case "xml:base":  case "xml:lang":  case "xml:space":  	attribute.Namespace = NS_XML;  	break;  case "xmlns":  case "xmlns:xlink":  	attribute.Namespace = NS_XMLNS;  	break;  }  
Missing Default,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,AdjustSVGTagName,The following switch statement is missing a default case: switch (tagName) {  case "altglyph":  	return "altGlyph";  case "altglyphdef":  	return "altGlyphDef";  case "altglyphitem":  	return "altGlyphItem";  case "animatecolor":  	return "animateColor";  case "animatemotion":  	return "animateMotion";  case "animatetransform":  	return "animateTransform";  case "clippath":  	return "clipPath";  case "feblend":  	return "feBlend";  case "fecolormatrix":  	return "feColorMatrix";  case "fecomponenttransfer":  	return "feComponentTransfer";  case "fecomposite":  	return "feComposite";  case "feconvolvematrix":  	return "feConvolveMatrix";  case "fediffuselighting":  	return "feDiffuseLighting";  case "fedisplacementmap":  	return "feDisplacementMap";  case "fedistantlight":  	return "feDistantLight";  case "feflood":  	return "feFlood";  case "fefunca":  	return "feFuncA";  case "fefuncb":  	return "feFuncB";  case "fefuncg":  	return "feFuncG";  case "fefuncr":  	return "feFuncR";  case "fegaussianblur":  	return "feGaussianBlur";  case "feimage":  	return "feImage";  case "femerge":  	return "feMerge";  case "femergenode":  	return "feMergeNode";  case "femorphology":  	return "feMorphology";  case "feoffset":  	return "feOffset";  case "fepointlight":  	return "fePointLight";  case "fespecularlighting":  	return "feSpecularLighting";  case "fespotlight":  	return "feSpotLight";  case "fetile":  	return "feTile";  case "feturbulence":  	return "feTurbulence";  case "foreignobject":  	return "foreignObject";  case "glyphref":  	return "glyphRef";  case "lineargradient":  	return "linearGradient";  case "radialgradient":  	return "radialGradient";  case "textpath":  	return "textPath";  }  
Missing Default,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,StartTagToken,The following switch statement is missing a default case: switch (O.Current.TagName) {  case "h1":  case "h2":  case "h3":  case "h4":  case "h5":  case "h6":  	O.Pop ();  	break;  }  
Missing Default,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,StartTagToken,The following switch statement is missing a default case: switch (attr.Name) {  case "color":  case "face":  case "size":  	foundAttribute = true;  	continue;  }  
Missing Default,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,CharToken,The following switch statement is missing a default case: switch (t [i]) {  case '\u0020':  case '\u0009':  case '\u000a':  case '\u000c':  case '\u000d':  	buffer [bufferPtr++] = t [i];  	continue;  }  
Missing Default,HTML5,TreeBuilder,C:\repos\msarca_html5\HTML5\TreeBuilder.cs,EofToken,The following switch statement is missing a default case: switch (mode) {  case INITIAL:  	DocMode = DocumentQuirkFlag.QuirksMode;  	INSERTION_MODE = BEFORE_HTML;  	mode = REPROCESS;  	goto EVAL;  //EofToken(REPROCESS);  //break;  case BEFORE_HTML: {  	T element = CreateElement ("html"' null' NS_HTML);  	AppendElementToDocument (element);  	O.Push (new Element<T> (element' "html"' NS_HTML));  	INSERTION_MODE = BEFORE_HEAD;  	mode = REPROCESS;  	goto EVAL;  	// EofToken(REPROCESS);  }  //break;  case BEFORE_HEAD: {  	ElementToken fakeToken = new ElementToken ("head");  	StartTagToken (ref fakeToken' mode);  	mode = REPROCESS;  	goto EVAL;  }  //EofToken(REPROCESS);  //break;  case IN_HEAD:  	EndTagToken ("head"' mode);  	mode = REPROCESS;  	goto EVAL;  //EofToken(REPROCESS);  //break;  case IN_HEAD_NOSCRIPT:  	EndTagToken ("noscript"' mode);  	mode = REPROCESS;  	goto EVAL;  //EofToken(REPROCESS);  //break;  case AFTER_HEAD: {  	ElementToken fakeToken = new ElementToken ("body");  	StartTagToken (ref fakeToken' mode);  	FRAMESETOK = true;  	mode = REPROCESS;  	goto EVAL;  }  //EofToken(REPROCESS);  //break;  case IN_BODY:  	StopParsing ();  	break;  case TEXT:  	if (O.Current.TagName == "script")  		SetScriptFlag (O.Current.Value' ScriptElementFlag.AlreadyStarted' true);  	O.Pop ();  	INSERTION_MODE = ORIGINAL_INSERTION_MODE;  	mode = REPROCESS;  	goto EVAL;  //EofToken(REPROCESS);  //break;  case IN_TABLE:  	StopParsing ();  	break;  case IN_TABLE_TEXT: {  	if (ContainsNonWhiteSpace (ref pendingTokenList' 0' pendingTokenListPtr)) {  		FOSTER_PARENTED = true;  		CharToken (ref pendingTokenList' 0' pendingTokenListPtr' IN_BODY);  		FOSTER_PARENTED = false;  	}  	else {  		InsertCharacters (new string (pendingTokenList' 0' pendingTokenListPtr));  	}  	INSERTION_MODE = ORIGINAL_INSERTION_MODE;  	mode = REPROCESS;  	goto EVAL;  	//EofToken(REPROCESS);  }  //break;  case IN_CAPTION:  	mode = IN_BODY;  	goto EVAL;  //EofToken(IN_BODY);  //break;  case IN_COLUMN_GROUP:  	if (O.Current.TagName == "html")  		StopParsing ();  	else {  		if (EndTagToken ("colgroup"' mode) != 0) {  			mode = REPROCESS;  			goto EVAL;  			//EofToken(REPROCESS);  		}  	}  	break;  case IN_TABLE_BODY:  	mode = IN_TABLE;  	goto EVAL;  //EofToken(IN_TABLE);  //break;  case IN_ROW:  	mode = IN_TABLE;  	goto EVAL;  //EofToken(IN_TABLE);  //break;  case IN_CELL:  	mode = IN_BODY;  	goto EVAL;  //EofToken(IN_BODY);  //break;  case IN_SELECT:  	StopParsing ();  	break;  case IN_SELECT_IN_TABLE:  	mode = IN_SELECT;  	goto EVAL;  //EofToken(IN_SELECT);  //break;  case AFTER_BODY:  	StopParsing ();  	break;  case IN_FRAMESET:  	StopParsing ();  	break;  case AFTER_FRAMESET:  	StopParsing ();  	break;  case AFTER_AFTER_BODY:  	StopParsing ();  	break;  case AFTER_AFTER_FRAMESET:  	StopParsing ();  	break;  case IN_FOREIGN_CONTENT:  	StopParsing ();  	break;  }  
