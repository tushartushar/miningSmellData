Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CommandLine,LongOptionParser,C:\repos\nodatime_nodatime\lib\commandline\CommandLine.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,CommandLine,OptionGroupParser,C:\repos\nodatime_nodatime\lib\commandline\CommandLine.cs,Parse,Cyclomatic complexity of the method is 12
Complex Method,CommandLine.Text,HelpText,C:\repos\nodatime_nodatime\lib\commandline\CommandLineText.cs,AutoBuild,Cyclomatic complexity of the method is 8
Complex Method,CommandLine.Text,HelpText,C:\repos\nodatime_nodatime\lib\commandline\CommandLineText.cs,RenderParsingErrorsText,Cyclomatic complexity of the method is 10
Complex Method,CommandLine.Text,HelpText,C:\repos\nodatime_nodatime\lib\commandline\CommandLineText.cs,AddOption,Cyclomatic complexity of the method is 10
Long Parameter List,CommandLine.Text,MultiLineTextAttribute,C:\repos\nodatime_nodatime\lib\commandline\CommandLineText.cs,MultiLineTextAttribute,The method has 5 parameters. Parameters: line1' line2' line3' line4' line5
Long Parameter List,CommandLine.Text,AssemblyLicenseAttribute,C:\repos\nodatime_nodatime\lib\commandline\CommandLineText.cs,AssemblyLicenseAttribute,The method has 5 parameters. Parameters: line1' line2' line3' line4' line5
Long Parameter List,CommandLine.Text,AssemblyUsageAttribute,C:\repos\nodatime_nodatime\lib\commandline\CommandLineText.cs,AssemblyUsageAttribute,The method has 5 parameters. Parameters: line1' line2' line3' line4' line5
Long Identifier,NodaTime.TzValidate.NzdCompatibility,ZoneDumper,C:\repos\nodatime_nodatime\src\NodaTime.TzValidate.NzdCompatibility\ZoneDumper.cs,,The length of the parameter LineFormatWithoutAbbreviations is 30.
Long Statement,NodaTime.TzValidate.NzdCompatibility,Options,C:\repos\nodatime_nodatime\src\NodaTime.TzValidate.NzdCompatibility\Options.cs,GetUsage,The length of the statement  "            help.AddPreOptionsLine("Usage: NodaTime.TzValidate.NzdCompatibility [-s data-source] [-f from-year] [-t to-year] [-z zone id] [-o output] [-hash] [-noabbr]"); " is 158.
Long Statement,NodaTime.TzValidate.NzdCompatibility,Program,C:\repos\nodatime_nodatime\src\NodaTime.TzValidate.NzdCompatibility\Program.cs,Main,The length of the statement  "            ICommandLineParser parser = new CommandLineParser(new CommandLineParserSettings(Console.Error) { MutuallyExclusive = true }); " is 125.
Long Statement,CommandLine.Text,HelpText,C:\repos\nodatime_nodatime\lib\commandline\CommandLineText.cs,AutoBuild,The length of the statement  "            if (title == null) throw new InvalidOperationException("HelpText::AutoBuild() requires that you define AssemblyTitleAttribute."); " is 129.
Long Statement,CommandLine.Text,HelpText,C:\repos\nodatime_nodatime\lib\commandline\CommandLineText.cs,AutoBuild,The length of the statement  "            if (version == null) throw new InvalidOperationException("HelpText::AutoBuild() requires that you define AssemblyInformationalVersionAttribute."); " is 146.
Long Statement,CommandLine.Text,HelpText,C:\repos\nodatime_nodatime\lib\commandline\CommandLineText.cs,AutoBuild,The length of the statement  "            if (copyright == null) throw new InvalidOperationException("HelpText::AutoBuild() requires that you define AssemblyCopyrightAttribute."); " is 137.
Magic Number,NodaTime.TzValidate.NzdCompatibility,Options,C:\repos\nodatime_nodatime\src\NodaTime.TzValidate.NzdCompatibility\Options.cs,GetUsage,The following statement contains a magic number: var help = new HelpText(new HeadingInfo("NzdCompatibility"))              {                  AdditionalNewLineAfterOption = true'                  Copyright = new CopyrightInfo("The Noda Time Authors"' 2017)              };
Magic Number,CommandLine,LongOptionParser,C:\repos\nodatime_nodatime\lib\commandline\CommandLine.cs,Parse,The following statement contains a magic number: var parts = argumentEnumerator.Current.Substring(2).Split(new[] { '=' }' 2);
Magic Number,CommandLine,LongOptionParser,C:\repos\nodatime_nodatime\lib\commandline\CommandLine.cs,Parse,The following statement contains a magic number: var parts = argumentEnumerator.Current.Substring(2).Split(new[] { '=' }' 2);
Magic Number,CommandLine,LongOptionParser,C:\repos\nodatime_nodatime\lib\commandline\CommandLine.cs,Parse,The following statement contains a magic number: if (!option.IsBoolean)              {                  if (parts.Length == 1 && (argumentEnumerator.IsLast || !ArgumentParser.IsInputValue(argumentEnumerator.Next)))                      return ParserState.Failure;                    if (parts.Length == 2)                  {                      if (!option.IsArray)                      {                          valueSetting = option.SetValue(parts[1]' options);                          if (!valueSetting)                              this.DefineOptionThatViolatesFormat(option);                            return ArgumentParser.BooleanToParserState(valueSetting);                      }                        ArgumentParser.EnsureOptionAttributeIsArrayCompatible(option);                        var items = ArgumentParser.GetNextInputValues(argumentEnumerator);                      items.Insert(0' parts[1]);                        valueSetting = option.SetValue(items' options);                      if (!valueSetting)                          this.DefineOptionThatViolatesFormat(option);                        return ArgumentParser.BooleanToParserState(valueSetting);                  }                  else                  {                      if (!option.IsArray)                      {                          valueSetting = option.SetValue(argumentEnumerator.Next' options);                          if (!valueSetting)                              this.DefineOptionThatViolatesFormat(option);                            return ArgumentParser.BooleanToParserState(valueSetting' true);                      }                        ArgumentParser.EnsureOptionAttributeIsArrayCompatible(option);                        var items = ArgumentParser.GetNextInputValues(argumentEnumerator);                        valueSetting = option.SetValue(items' options);                      if (!valueSetting)                          this.DefineOptionThatViolatesFormat(option);                        //return ArgumentParser.BooleanToParserState(valueSetting' true);                      return ArgumentParser.BooleanToParserState(valueSetting);                  }              }
Magic Number,CommandLine,LongOptionParser,C:\repos\nodatime_nodatime\lib\commandline\CommandLine.cs,Parse,The following statement contains a magic number: if (parts.Length == 2)                  return ParserState.Failure;
Magic Number,CommandLine,OptionMap,C:\repos\nodatime_nodatime\lib\commandline\CommandLine.cs,OptionMap,The following statement contains a magic number: _map = new Dictionary<string' OptionInfo>(capacity * 2' comparer);
Magic Number,CommandLine.Text,CopyrightInfo,C:\repos\nodatime_nodatime\lib\commandline\CommandLineText.cs,CopyrightInfo,The following statement contains a magic number: const int extraLength = 10;
Magic Number,CommandLine.Text,CopyrightInfo,C:\repos\nodatime_nodatime\lib\commandline\CommandLineText.cs,CopyrightInfo,The following statement contains a magic number: _builder = new StringBuilder                      (CopyrightWord.Length + author.Length + (4 * years.Length) + extraLength);
Magic Number,CommandLine.Text,CopyrightInfo,C:\repos\nodatime_nodatime\lib\commandline\CommandLineText.cs,FormatYears,The following statement contains a magic number: var yearsPart = new StringBuilder (years.Length * 6);
Magic Number,CommandLine.Text,HeadingInfo,C:\repos\nodatime_nodatime\lib\commandline\CommandLineText.cs,WriteMessage,The following statement contains a magic number: var builder = new StringBuilder (_programName.Length + message.Length + 2);
Magic Number,CommandLine.Text,HelpText,C:\repos\nodatime_nodatime\lib\commandline\CommandLineText.cs,DefaultParsingErrorsHandler,The following statement contains a magic number: if (options.InternalLastPostParsingState.Errors.Count > 0)              {                  var errors = current.RenderParsingErrorsText(options' 2); // indent with two spaces                  if (!string.IsNullOrEmpty(errors))                  {                      current.AddPreOptionsLine(string.Concat(Environment.NewLine' current.SentenceBuilder.ErrorsHeadingText));                      //current.AddPreOptionsLine(errors);                      var lines = errors.Split(new string[] { Environment.NewLine }' StringSplitOptions.None);                      foreach (var line in lines) { current.AddPreOptionsLine(line); }                  }              }
Magic Number,CommandLine.Text,HelpText,C:\repos\nodatime_nodatime\lib\commandline\CommandLineText.cs,AddOptions,The following statement contains a magic number: int remainingSpace = maximumLength - (maxLength + 6);
Magic Number,CommandLine.Text,HelpText,C:\repos\nodatime_nodatime\lib\commandline\CommandLineText.cs,AddOption,The following statement contains a magic number: if (!string.IsNullOrEmpty (option.HelpText)) {                  do {                      int wordBuffer = 0;                      var words = option.HelpText.Split (new[] {' '});                      for (int i = 0; i < words.Length; i++) {                          if (words [i].Length < (widthOfHelpText - wordBuffer)) {                              _optionsHelp.Append (words [i]);                              wordBuffer += words [i].Length;                              if ((widthOfHelpText - wordBuffer) > 1 && i != words.Length - 1) {                                  _optionsHelp.Append (" ");                                  wordBuffer++;                              }                          } else if (words [i].Length >= widthOfHelpText && wordBuffer == 0) {                              _optionsHelp.Append (words [i].Substring (                                  0'                                  widthOfHelpText                              ));                              wordBuffer = widthOfHelpText;                              break;                          } else {                              break;                          }                      }                      option.HelpText = option.HelpText.Substring (Math.Min (                          wordBuffer'                          option.HelpText.Length                      ))                          .Trim ();                      if (option.HelpText.Length > 0) {                          _optionsHelp.Append (Environment.NewLine);                          _optionsHelp.Append (new string (' '' maxLength + 6));                      }                  } while (option.HelpText.Length > widthOfHelpText);              }
Magic Number,CommandLine.Text,HelpText,C:\repos\nodatime_nodatime\lib\commandline\CommandLineText.cs,ToString,The following statement contains a magic number: const int extraLength = 10;
Magic Number,CommandLine.Text,HelpText,C:\repos\nodatime_nodatime\lib\commandline\CommandLineText.cs,GetMaxLength,The following statement contains a magic number: foreach (BaseOptionAttribute option in optionList) {                  int optionLength = 0;                  bool hasShort = option.HasShortName;                  bool hasLong = option.HasLongName;                  if (hasShort) {                      optionLength += option.ShortName.Length;                      if (AddDashesToOption)                          ++optionLength;                  }                  if (hasLong) {                      optionLength += option.LongName.Length;                      if (AddDashesToOption)                          optionLength += 2;                  }                  if (hasShort && hasLong) {                      optionLength += 2; // "' "                  }                  length = Math.Max (length' optionLength);              }
Magic Number,CommandLine.Text,HelpText,C:\repos\nodatime_nodatime\lib\commandline\CommandLineText.cs,GetMaxLength,The following statement contains a magic number: foreach (BaseOptionAttribute option in optionList) {                  int optionLength = 0;                  bool hasShort = option.HasShortName;                  bool hasLong = option.HasLongName;                  if (hasShort) {                      optionLength += option.ShortName.Length;                      if (AddDashesToOption)                          ++optionLength;                  }                  if (hasLong) {                      optionLength += option.LongName.Length;                      if (AddDashesToOption)                          optionLength += 2;                  }                  if (hasShort && hasLong) {                      optionLength += 2; // "' "                  }                  length = Math.Max (length' optionLength);              }
