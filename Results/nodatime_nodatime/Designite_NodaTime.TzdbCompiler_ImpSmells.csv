Implementation smell,Namespace,Class,File,Method,Description
Long Method,NodaTime.TzdbCompiler.Tzdb,DateTimeZoneBuilder,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\DateTimeZoneBuilder.cs,AddIntervals,The method has 144 lines of code.
Complex Method,NodaTime.TzdbCompiler.Tzdb,DateTimeZoneBuilder,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\DateTimeZoneBuilder.cs,AddIntervals,Cyclomatic complexity of the method is 13
Complex Method,NodaTime.TzdbCompiler.Tzdb,Tokens,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\Tokens.cs,Tokenize,Cyclomatic complexity of the method is 8
Complex Method,NodaTime.TzdbCompiler.Tzdb,TzdbStreamWriter,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbStreamWriter.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,NodaTime.TzdbCompiler.Tzdb,TzdbZoneInfoParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneInfoParser.cs,ParseDateTimeOfYear,Cyclomatic complexity of the method is 10
Complex Method,NodaTime.TzdbCompiler.Tzdb,TzdbZoneInfoParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneInfoParser.cs,ParseLine,Cyclomatic complexity of the method is 8
Long Parameter List,NodaTime.TzdbCompiler.Tzdb,ZoneLine,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\ZoneLine.cs,ZoneLine,The method has 6 parameters. Parameters: name' offset' rules' format' untilYear' untilYearOffset
Long Parameter List,NodaTime.TzdbCompiler.Tzdb,ZoneRuleSet,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\ZoneRuleSet.cs,ZoneRuleSet,The method has 5 parameters. Parameters: name' standardOffset' savings' upperYear' upperYearOffset
Long Identifier,NodaTime.TzdbCompiler.Tzdb,TzdbStreamWriter,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbStreamWriter.cs,Write,The length of the parameter additionalWindowsNameToIdMappings is 33.
Long Statement,NodaTime.TzdbCompiler,CompilerOptions,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\CompilerOptions.cs,GetUsage,The length of the statement  "            help.AddPreOptionsLine("Usage: NodaTime.TzdbCompiler -s <tzdb directory> -w <windowsZone.xml file/dir> -o <output file> [-t ResX/Resource/NodaZoneData]"); " is 154.
Long Statement,NodaTime.TzdbCompiler,Program,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Program.cs,Main,The length of the statement  "            ICommandLineParser parser = new CommandLineParser(new CommandLineParserSettings(Console.Error) { MutuallyExclusive = true }); " is 125.
Long Statement,NodaTime.TzdbCompiler,Program,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Program.cs,LoadWindowsZones,The length of the statement  "                throw new Exception($"No zones files suitable for version {targetTzdbVersion}. Found versions targeting: [{versions}]"); " is 120.
Long Statement,NodaTime.TzdbCompiler,Program,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Program.cs,LoadWindowsZones,The length of the statement  "            Console.WriteLine($"Picked Windows Zones with TZDB version {bestFile.TzdbVersion} out of [{versions}] as best match for {targetTzdbVersion}"); " is 142.
Long Statement,NodaTime.TzdbCompiler.Tzdb,CldrWindowsZonesParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\CldrWindowsZonesParser.cs,Parse,The length of the statement  "            var tzdbVersion = document.Root.Element("windowsZones")?.Element("mapTimezones")?.Attribute("typeVersion")?.Value ?? ""; " is 120.
Long Statement,NodaTime.TzdbCompiler.Tzdb,CldrWindowsZonesParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\CldrWindowsZonesParser.cs,Parse,The length of the statement  "            var windowsVersion = document.Root.Element("windowsZones")?.Element("mapTimezones")?.Attribute("otherVersion")?.Value ?? ""; " is 124.
Long Statement,NodaTime.TzdbCompiler.Tzdb,DateTimeZoneBuilder,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\DateTimeZoneBuilder.cs,Build,The length of the statement  "            Preconditions.CheckArgument(ruleSets.Count > 0' nameof(ruleSets)' "Cannot create a time zone without any Zone entries"); " is 120.
Long Statement,NodaTime.TzdbCompiler.Tzdb,DateTimeZoneBuilder,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\DateTimeZoneBuilder.cs,AddIntervals,The length of the statement  "                    .Select(rule => new { rule' prev = rule.PreviousOrSame(start' lastZoneInterval.StandardOffset' lastZoneInterval.Savings) }) " is 123.
Long Statement,NodaTime.TzdbCompiler.Tzdb,ParserHelper,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\ParserHelper.cs,ConvertMinuteToTicks,The length of the statement  "            int value = Int32.Parse(text' NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite' CultureInfo.InvariantCulture); " is 126.
Long Statement,NodaTime.TzdbCompiler.Tzdb,ParserHelper,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\ParserHelper.cs,ConvertSecondsWithFractionalToTicks,The length of the statement  "            double number = Double.Parse(text' NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowDecimalPoint' " is 133.
Long Statement,NodaTime.TzdbCompiler.Tzdb,TzdbStreamWriter,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbStreamWriter.cs,Write,The length of the statement  "            var stringPool = CreateOptimizedStringPool(zones' database.ZoneLocations' database.Zone1970Locations' cldrWindowsZones); " is 120.
Long Statement,NodaTime.TzdbCompiler.Tzdb,TzdbStreamWriter,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbStreamWriter.cs,Write,The length of the statement  "                (additionalWindowsNameToIdMappings.ToDictionary(pair => pair.Key' pair => cldrWindowsZones.PrimaryMapping[pair.Value])); " is 120.
Long Statement,NodaTime.TzdbCompiler.Tzdb,TzdbZoneInfoCompiler,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneInfoCompiler.cs,LoadLocationFiles,The length of the statement  "                var iso3166Dict = iso3166.ToDictionary(bits => bits[0]' bits => new TzdbZone1970Location.Country(code: bits[0]' name: bits[1])); " is 128.
Long Statement,NodaTime.TzdbCompiler.Tzdb,TzdbZoneLocationParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneLocationParser.cs,ParseLocation,The length of the statement  "            Preconditions.CheckArgument(bits.Length == 3 || bits.Length == 4' nameof(line)' "Line must have 3 or 4 tab-separated values"); " is 126.
Long Statement,NodaTime.TzdbCompiler.Tzdb,TzdbZoneLocationParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneLocationParser.cs,ParseEnhancedLocation,The length of the statement  "            Preconditions.CheckArgument(bits.Length == 3 || bits.Length == 4' nameof(line)' "Line must have 3 or 4 tab-separated values"); " is 126.
Long Statement,NodaTime.TzdbCompiler.Tzdb,ZoneLine,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\ZoneLine.cs,Equals,The length of the statement  "            var result = Name == other.Name && StandardOffset == other.StandardOffset && Rules == other.Rules && Format == other.Format && UntilYear == other.UntilYear; " is 156.
Magic Number,NodaTime.TzdbCompiler,CompilerOptions,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\CompilerOptions.cs,GetUsage,The following statement contains a magic number: var help = new HelpText(new HeadingInfo(typeof(CompilerOptions).Namespace))              {                  AdditionalNewLineAfterOption = true'                  Copyright = new CopyrightInfo("The Noda Time Authors"' 2009)              };
Magic Number,NodaTime.TzdbCompiler.Tzdb,DateTimeZoneBuilder,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\DateTimeZoneBuilder.cs,AddIntervals,The following statement contains a magic number: ruleSet.IsInfinite && activeRules.Count == 2
Magic Number,NodaTime.TzdbCompiler.Tzdb,ParserHelper,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\ParserHelper.cs,ConvertHourToTicks,The following statement contains a magic number: value < -23 || value > 23
Magic Number,NodaTime.TzdbCompiler.Tzdb,ParserHelper,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\ParserHelper.cs,ConvertHourToTicks,The following statement contains a magic number: value < -23 || value > 23
Magic Number,NodaTime.TzdbCompiler.Tzdb,ParserHelper,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\ParserHelper.cs,ConvertMinuteToTicks,The following statement contains a magic number: value < 0 || value > 59
Magic Number,NodaTime.TzdbCompiler.Tzdb,ParserHelper,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\ParserHelper.cs,ConvertSecondsWithFractionalToTicks,The following statement contains a magic number: number < 0.0 || number >= 60.0
Magic Number,NodaTime.TzdbCompiler.Tzdb,ParserHelper,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\ParserHelper.cs,ParseOffset,The following statement contains a magic number: parts.Length > 3
Magic Number,NodaTime.TzdbCompiler.Tzdb,ParserHelper,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\ParserHelper.cs,ParseOffset,The following statement contains a magic number: ticks += ConvertSecondsWithFractionalToTicks(parts[2]);
Magic Number,NodaTime.TzdbCompiler.Tzdb,ParserHelper,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\ParserHelper.cs,ParseOffset,The following statement contains a magic number: parts.Length > 2
Magic Number,NodaTime.TzdbCompiler.Tzdb,RuleLine,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\RuleLine.cs,GetYearPredicate,The following statement contains a magic number: switch (Type)              {                  case "odd":                      return year => year % 2 == 1;                  case "even":                      return year => year % 2 == 0;                  default:                      throw new NotSupportedException($"Noda Time does not support rules of type {Type}");              }
Magic Number,NodaTime.TzdbCompiler.Tzdb,RuleLine,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\RuleLine.cs,GetYearPredicate,The following statement contains a magic number: switch (Type)              {                  case "odd":                      return year => year % 2 == 1;                  case "even":                      return year => year % 2 == 0;                  default:                      throw new NotSupportedException($"Noda Time does not support rules of type {Type}");              }
Magic Number,NodaTime.TzdbCompiler.Tzdb,TzdbZoneInfoCompiler,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneInfoCompiler.cs,InferVersion,The following statement contains a magic number: var version = line.Substring(8).Trim();
Magic Number,NodaTime.TzdbCompiler.Tzdb,TzdbZoneInfoParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneInfoParser.cs,ParseDateTimeOfYear,The following statement contains a magic number: dayOfWeek = ParseDayOfWeek(on.Substring(4));
Magic Number,NodaTime.TzdbCompiler.Tzdb,TzdbZoneInfoParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneInfoParser.cs,ParseRule,The following statement contains a magic number: fromYear = 1900;
Magic Number,NodaTime.TzdbCompiler.Tzdb,TzdbZoneLocationParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneLocationParser.cs,ParseLocation,The following statement contains a magic number: Preconditions.CheckArgument(bits.Length == 3 || bits.Length == 4' nameof(line)' "Line must have 3 or 4 tab-separated values");
Magic Number,NodaTime.TzdbCompiler.Tzdb,TzdbZoneLocationParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneLocationParser.cs,ParseLocation,The following statement contains a magic number: Preconditions.CheckArgument(bits.Length == 3 || bits.Length == 4' nameof(line)' "Line must have 3 or 4 tab-separated values");
Magic Number,NodaTime.TzdbCompiler.Tzdb,TzdbZoneLocationParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneLocationParser.cs,ParseLocation,The following statement contains a magic number: string zoneId = bits[2];
Magic Number,NodaTime.TzdbCompiler.Tzdb,TzdbZoneLocationParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneLocationParser.cs,ParseLocation,The following statement contains a magic number: string comment = bits.Length == 4 ? bits[3] : "";
Magic Number,NodaTime.TzdbCompiler.Tzdb,TzdbZoneLocationParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneLocationParser.cs,ParseLocation,The following statement contains a magic number: string comment = bits.Length == 4 ? bits[3] : "";
Magic Number,NodaTime.TzdbCompiler.Tzdb,TzdbZoneLocationParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneLocationParser.cs,ParseEnhancedLocation,The following statement contains a magic number: Preconditions.CheckArgument(bits.Length == 3 || bits.Length == 4' nameof(line)' "Line must have 3 or 4 tab-separated values");
Magic Number,NodaTime.TzdbCompiler.Tzdb,TzdbZoneLocationParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneLocationParser.cs,ParseEnhancedLocation,The following statement contains a magic number: Preconditions.CheckArgument(bits.Length == 3 || bits.Length == 4' nameof(line)' "Line must have 3 or 4 tab-separated values");
Magic Number,NodaTime.TzdbCompiler.Tzdb,TzdbZoneLocationParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneLocationParser.cs,ParseEnhancedLocation,The following statement contains a magic number: string zoneId = bits[2];
Magic Number,NodaTime.TzdbCompiler.Tzdb,TzdbZoneLocationParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneLocationParser.cs,ParseEnhancedLocation,The following statement contains a magic number: string comment = bits.Length == 4 ? bits[3] : "";
Magic Number,NodaTime.TzdbCompiler.Tzdb,TzdbZoneLocationParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneLocationParser.cs,ParseEnhancedLocation,The following statement contains a magic number: string comment = bits.Length == 4 ? bits[3] : "";
Magic Number,NodaTime.TzdbCompiler.Tzdb,TzdbZoneLocationParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneLocationParser.cs,ParseCoordinates,The following statement contains a magic number: Preconditions.CheckArgument(text.Length == 11 || text.Length == 15' "point"' "Invalid coordinates");
Magic Number,NodaTime.TzdbCompiler.Tzdb,TzdbZoneLocationParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneLocationParser.cs,ParseCoordinates,The following statement contains a magic number: Preconditions.CheckArgument(text.Length == 11 || text.Length == 15' "point"' "Invalid coordinates");
Magic Number,NodaTime.TzdbCompiler.Tzdb,TzdbZoneLocationParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneLocationParser.cs,ParseCoordinates,The following statement contains a magic number: latDegrees = int.Parse(text.Substring(1' 2));
Magic Number,NodaTime.TzdbCompiler.Tzdb,TzdbZoneLocationParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneLocationParser.cs,ParseCoordinates,The following statement contains a magic number: latMinutes = int.Parse(text.Substring(3' 2));
Magic Number,NodaTime.TzdbCompiler.Tzdb,TzdbZoneLocationParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneLocationParser.cs,ParseCoordinates,The following statement contains a magic number: latMinutes = int.Parse(text.Substring(3' 2));
Magic Number,NodaTime.TzdbCompiler.Tzdb,TzdbZoneLocationParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneLocationParser.cs,ParseCoordinates,The following statement contains a magic number: longSign = text[5] == '-' ? -1 : 1;
Magic Number,NodaTime.TzdbCompiler.Tzdb,TzdbZoneLocationParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneLocationParser.cs,ParseCoordinates,The following statement contains a magic number: longDegrees = int.Parse(text.Substring(6' 3));
Magic Number,NodaTime.TzdbCompiler.Tzdb,TzdbZoneLocationParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneLocationParser.cs,ParseCoordinates,The following statement contains a magic number: longDegrees = int.Parse(text.Substring(6' 3));
Magic Number,NodaTime.TzdbCompiler.Tzdb,TzdbZoneLocationParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneLocationParser.cs,ParseCoordinates,The following statement contains a magic number: longMinutes = int.Parse(text.Substring(9' 2));
Magic Number,NodaTime.TzdbCompiler.Tzdb,TzdbZoneLocationParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneLocationParser.cs,ParseCoordinates,The following statement contains a magic number: longMinutes = int.Parse(text.Substring(9' 2));
Magic Number,NodaTime.TzdbCompiler.Tzdb,TzdbZoneLocationParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneLocationParser.cs,ParseCoordinates,The following statement contains a magic number: text.Length == 11
Magic Number,NodaTime.TzdbCompiler.Tzdb,TzdbZoneLocationParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneLocationParser.cs,ParseCoordinates,The following statement contains a magic number: return new[] {                  latSign * (latDegrees * 3600 + latMinutes * 60 + latSeconds)'                  longSign * (longDegrees * 3600 + longMinutes * 60 + longSeconds)              };
Magic Number,NodaTime.TzdbCompiler.Tzdb,TzdbZoneLocationParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneLocationParser.cs,ParseCoordinates,The following statement contains a magic number: return new[] {                  latSign * (latDegrees * 3600 + latMinutes * 60 + latSeconds)'                  longSign * (longDegrees * 3600 + longMinutes * 60 + longSeconds)              };
Magic Number,NodaTime.TzdbCompiler.Tzdb,TzdbZoneLocationParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneLocationParser.cs,ParseCoordinates,The following statement contains a magic number: return new[] {                  latSign * (latDegrees * 3600 + latMinutes * 60 + latSeconds)'                  longSign * (longDegrees * 3600 + longMinutes * 60 + longSeconds)              };
Magic Number,NodaTime.TzdbCompiler.Tzdb,TzdbZoneLocationParser,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\TzdbZoneLocationParser.cs,ParseCoordinates,The following statement contains a magic number: return new[] {                  latSign * (latDegrees * 3600 + latMinutes * 60 + latSeconds)'                  longSign * (longDegrees * 3600 + longMinutes * 60 + longSeconds)              };
Magic Number,NodaTime.TzdbCompiler.Tzdb,ZoneLine,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\ZoneLine.cs,FormatName,The following statement contains a magic number: var right = Format.Substring(index + 2);
Magic Number,NodaTime.TzdbCompiler.Tzdb,ZoneLine,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.TzdbCompiler\Tzdb\ZoneLine.cs,FormatName,The following statement contains a magic number: var right = Format.Substring(index + 2);
