Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NodaTime.NzdPrinter,Program,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.NzdPrinter\Program.cs,Main,Cyclomatic complexity of the method is 10
Long Statement,NodaTime.NzdPrinter,Program,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.NzdPrinter\Program.cs,ReadPrecalculatedTimeZone,The length of the statement  "                Console.WriteLine(Invariant($"  {start:uuuu-MM-dd'T'HH:mm:ss} - {nextStart:uuuu-MM-dd'T'HH:mm:ss}; wall offset: {offset}; savings: {savings}; name: {name}")); " is 158.
Long Statement,NodaTime.NzdPrinter,Program,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.NzdPrinter\Program.cs,ReadPrecalculatedTimeZone,The length of the statement  "                Console.WriteLine($"    Daylight time: {daylightYearOffset}; offset: {standardOffset + savings}; name: {daylightName}"); " is 120.
Long Statement,NodaTime.NzdPrinter,Program,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.NzdPrinter\Program.cs,ReadZoneLocations,The length of the statement  "                Console.WriteLine($"  Lat seconds: {latitudeSeconds}; long seconds: {longitudeSeconds}: country: {countryName} ({countryCode}); id: {zoneId}; comment: {comment}"); " is 163.
Long Statement,NodaTime.NzdPrinter,Program,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.NzdPrinter\Program.cs,ReadZone1970Locations,The length of the statement  "                Console.WriteLine($"  Lat seconds: {latitudeSeconds}; long seconds: {longitudeSeconds}: countries: [{countries}]; id: {zoneId}; comment: {comment}"); " is 149.
Magic Number,NodaTime.NzdPrinter,Program,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.NzdPrinter\Program.cs,ReadZone1970Locations,The following statement contains a magic number: countries.Length -= 2;
Missing Default,NodaTime.NzdPrinter,Program,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.NzdPrinter\Program.cs,Main,The following switch statement is missing a default case: switch (field.Id)                  {                      case StringPool:                          stringPool = ReadStringPool(reader);                          break;                      case TzdbStreamFieldId.TimeZone:                          ReadTimeZone(reader);                          break;                      case TzdbVersion:                          Console.WriteLine($"TZDB version: {reader.ReadString()}");                          break;                      case TzdbIdMap:                          ReadMap(reader);                          break;                      case CldrSupplementalWindowsZones:                          ReadWindowsZones(reader);                          break;                      case WindowsAdditionalStandardNameToIdMapping:                          ReadMap(reader);                          break;                      case ZoneLocations:                          ReadZoneLocations(reader);                          break;                      case Zone1970Locations:                          ReadZone1970Locations(reader);                          break;                  }
