Implementation smell,Namespace,Class,File,Method,Description
Long Statement,DocfxAnnotationGenerator,Program,C:\repos\nodatime_nodatime\build\DocfxAnnotationGenerator\Program.cs,AnnotateNotNullReturns,The length of the statement  "                throw new Exception($"UIDs with no return description:{Environment.NewLine}{string.Join(Environment.NewLine' errors)}"); " is 120.
Long Statement,DocfxAnnotationGenerator,ReflectionMember,C:\repos\nodatime_nodatime\build\DocfxAnnotationGenerator\ReflectionMember.cs,GetUid,The length of the statement  "                case GenericInstanceType git: return $"{RemoveArity(name)}{GetGenericArgumentNames(git.GenericArguments' useTypeArgumentNames)}"; " is 129.
Magic Number,DocfxAnnotationGenerator,NuGetPackage,C:\repos\nodatime_nodatime\build\DocfxAnnotationGenerator\NuGetPackage.cs,Load,The following statement contains a magic number: using (var zip = ZipArchive.Open(file))              {                  foreach (var entry in zip.Entries)                  {                      if (entry.Key.EndsWith(".nuspec"))                      {                          using (var stream = entry.OpenEntryStream())                          {                              manifest = XDocument.Load(stream);                          }                      }                      else if (entry.Key.StartsWith("lib/") && entry.Key.EndsWith(".dll"))                      {                          var path = entry.Key.Substring(4);                          string targetFramework = Path.GetDirectoryName(path);                          // Simplify the world somewhat...                          if (targetFramework.StartsWith("portable-"))                          {                              targetFramework = "PCL";                          }                          var assemblyFile = Path.GetFileName(path);                          using (var stream = entry.OpenEntryStream())                          {                              // Mono.Cecil requires the stream to be seekable. It's simplest                              // just to copy the whole DLL to a MemoryStream and pass that to Cecil.                              var ms = new MemoryStream();                              stream.CopyTo(ms);                              ms.Position = 0;                              assemblies.Add(BuildAssembly.Load(targetFramework' assemblyFile' ms));                          }                      }                  }              }
Magic Number,DocfxAnnotationGenerator,Program,C:\repos\nodatime_nodatime\build\DocfxAnnotationGenerator\Program.cs,Main,The following statement contains a magic number: if (args.Length < 4)              {                  Console.WriteLine("Arguments: <docfx root> <packages dir> <src root> <version1> <version2> ...");                  Console.WriteLine("The docfx root dir should contain the obj directory");                  Console.WriteLine("The packages dir should contain the nuget packages (as NodaTime-1.0.x.nupkg etc)");                  Console.WriteLine("The src root dir should contain the 'unstable' code");                  return 1;              }
Magic Number,DocfxAnnotationGenerator,Program,C:\repos\nodatime_nodatime\build\DocfxAnnotationGenerator\Program.cs,Main,The following statement contains a magic number: var instance = new Program(args.Skip(3)' args[0]' args[1]' args[2]);
Magic Number,DocfxAnnotationGenerator,Program,C:\repos\nodatime_nodatime\build\DocfxAnnotationGenerator\Program.cs,Main,The following statement contains a magic number: var instance = new Program(args.Skip(3)' args[0]' args[1]' args[2]);
Magic Number,DocfxAnnotationGenerator,Program,C:\repos\nodatime_nodatime\build\DocfxAnnotationGenerator\Program.cs,AnnotateNotNullParameters,The following statement contains a magic number: foreach (var member in members)              {                  var document = FindDocument(release' files' member.DocfxUid);                  var node = FindChildByUid(document' "items"' member.DocfxUid);                    if (!node.Children.TryGetValue("exceptions"' out YamlNode exceptions))                  {                      exceptions = new YamlSequenceNode();                      node.Add("exceptions"' exceptions);                  }                  YamlSequenceNode exceptionsSequence = (YamlSequenceNode) exceptions;                  var currentArgumentNullException = exceptionsSequence.Children                      .Cast<YamlMappingNode>()                      .SingleOrDefault(e => ((YamlScalarNode)e.Children["type"]).Value == "System.ArgumentNullException");                  if (currentArgumentNullException != null)                  {                      exceptionsSequence.Children.Remove(currentArgumentNullException);                  }                    var names = member.NotNullParameters.ToList();                  string message;                                    if (names.Count == 1)                  {                      message = $"{ParamRef(names[0])} is null.";                  }                  else                  {                      StringBuilder builder = new StringBuilder();                      for (int i = 0; i < names.Count - 2; i++)                      {                          builder.Append($"{ParamRef(names[i])}' ");                      }                      builder.Append($"{ParamRef(names[names.Count - 2])} or {ParamRef(names.Last())} is null");                      message = builder.ToString();                  }                  exceptionsSequence.Children.Add(new YamlMappingNode                  {                      { "type"' "System.ArgumentNullException" }'                      { "commentId"' "T:System.ArgumentNullException" }'                      { "description"' message }                  });                    // Make sure the reference to ArgumentNullException is present                  var reference = FindChildByUid(document' "references"' "System.ArgumentNullException");                  if (reference == null)                  {                      ((YamlSequenceNode)document.Children["references"]).Add(new YamlMappingNode                      {                          { "uid"' "System.ArgumentNullException" }'                          { "commentId"' "T:System.ArgumentNullException" }'                          { "parent"' "System" }'                          { "isExternal"' "true" }'                          { "name"' "ArgumentNullException" }'                          { "nameWithType"' "ArgumentNullException" }'                          { "fullName"' "System.ArgumentNullException" }                      });                  }              }
Magic Number,DocfxAnnotationGenerator,Program,C:\repos\nodatime_nodatime\build\DocfxAnnotationGenerator\Program.cs,AnnotateNotNullParameters,The following statement contains a magic number: foreach (var member in members)              {                  var document = FindDocument(release' files' member.DocfxUid);                  var node = FindChildByUid(document' "items"' member.DocfxUid);                    if (!node.Children.TryGetValue("exceptions"' out YamlNode exceptions))                  {                      exceptions = new YamlSequenceNode();                      node.Add("exceptions"' exceptions);                  }                  YamlSequenceNode exceptionsSequence = (YamlSequenceNode) exceptions;                  var currentArgumentNullException = exceptionsSequence.Children                      .Cast<YamlMappingNode>()                      .SingleOrDefault(e => ((YamlScalarNode)e.Children["type"]).Value == "System.ArgumentNullException");                  if (currentArgumentNullException != null)                  {                      exceptionsSequence.Children.Remove(currentArgumentNullException);                  }                    var names = member.NotNullParameters.ToList();                  string message;                                    if (names.Count == 1)                  {                      message = $"{ParamRef(names[0])} is null.";                  }                  else                  {                      StringBuilder builder = new StringBuilder();                      for (int i = 0; i < names.Count - 2; i++)                      {                          builder.Append($"{ParamRef(names[i])}' ");                      }                      builder.Append($"{ParamRef(names[names.Count - 2])} or {ParamRef(names.Last())} is null");                      message = builder.ToString();                  }                  exceptionsSequence.Children.Add(new YamlMappingNode                  {                      { "type"' "System.ArgumentNullException" }'                      { "commentId"' "T:System.ArgumentNullException" }'                      { "description"' message }                  });                    // Make sure the reference to ArgumentNullException is present                  var reference = FindChildByUid(document' "references"' "System.ArgumentNullException");                  if (reference == null)                  {                      ((YamlSequenceNode)document.Children["references"]).Add(new YamlMappingNode                      {                          { "uid"' "System.ArgumentNullException" }'                          { "commentId"' "T:System.ArgumentNullException" }'                          { "parent"' "System" }'                          { "isExternal"' "true" }'                          { "name"' "ArgumentNullException" }'                          { "nameWithType"' "ArgumentNullException" }'                          { "fullName"' "System.ArgumentNullException" }                      });                  }              }
