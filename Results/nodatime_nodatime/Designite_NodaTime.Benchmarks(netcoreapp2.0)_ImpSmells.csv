Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,NodaTime.Benchmarks.NodaTimeTests.Calendars,IsoCalendarBenchmarks,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.Benchmarks\NodaTimeTests\Calendars\IsoCalendarBenchmarks.cs,,The length of the parameter SampleNotOptimizedYearMonthDay is 30.
Long Identifier,NodaTime.Benchmarks.NodaTimeTests.Text,LocalTimePatternBenchmarks,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.Benchmarks\NodaTimeTests\Text\LocalTimePatternBenchmarks.cs,,The length of the parameter SampleIsoFormattedTimeWithNanos is 31.
Long Statement,NodaTime.Benchmarks.BclTests,DateTimeBenchmarks,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.Benchmarks\BclTests\DateTimeBenchmarks.cs,TryParseExact,The length of the statement  "            return DateTime.TryParseExact("26/12/2009 10:08:30"' "dd/MM/yyyy HH:mm:ss"' CultureInfo.InvariantCulture' DateTimeStyles.None' out DateTime result); " is 148.
Magic Number,NodaTime.Benchmarks.NodaTimeTests,CachedDateTimeZoneBenchmarks,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.Benchmarks\NodaTimeTests\CachedDateTimeZoneBenchmarks.cs,CachedDateTimeZoneBenchmarks,The following statement contains a magic number: var adjustment = Duration.FromTicks(TicksPerDay * 365);
Magic Number,NodaTime.Benchmarks.NodaTimeTests,CachedDateTimeZoneBenchmarks,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.Benchmarks\NodaTimeTests\CachedDateTimeZoneBenchmarks.cs,CachedDateTimeZoneBenchmarks,The following statement contains a magic number: var twoDays = Duration.FromTicks(TicksPerDay * 2);
Magic Number,NodaTime.Benchmarks.NodaTimeTests,LocalDateBenchmarks,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.Benchmarks\NodaTimeTests\LocalDateBenchmarks.cs,ConstructionAvoidingCache,The following statement contains a magic number: year <= 3000
Magic Number,NodaTime.Benchmarks.NodaTimeTests,LocalDateBenchmarks,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.Benchmarks\NodaTimeTests\LocalDateBenchmarks.cs,FromWeekYearWeekAndDay,The following statement contains a magic number: LocalDate.FromWeekYearWeekAndDay(2009' 1' NodaTime.IsoDayOfWeek.Thursday);
Magic Number,NodaTime.Benchmarks.NodaTimeTests,StandardDaylightAlternatingMapBenchmarks,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.Benchmarks\NodaTimeTests\StandardDaylightAlternatingMapBenchmarks.cs,StandardDaylightAlternatingMapBenchmarks,The following statement contains a magic number: SampleZone = new StandardDaylightAlternatingMap(Offset.FromHours(-8)'                  new ZoneRecurrence("PDT"' Offset.FromHours(1)'                      new ZoneYearOffset(TransitionMode.Wall' monthOfYear: 3' dayOfMonth: 8' dayOfWeek: 7'                                         advance: true' timeOfDay: new LocalTime(2' 0))'                      int.MinValue' int.MaxValue)'                  new ZoneRecurrence("PST"' Offset.FromHours(0)'                      new ZoneYearOffset(TransitionMode.Standard' monthOfYear: 11' dayOfMonth: 1' dayOfWeek: 7'                                         advance: true' timeOfDay: new LocalTime(2' 0))'                      int.MinValue' int.MaxValue));
Magic Number,NodaTime.Benchmarks.NodaTimeTests,StandardDaylightAlternatingMapBenchmarks,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.Benchmarks\NodaTimeTests\StandardDaylightAlternatingMapBenchmarks.cs,StandardDaylightAlternatingMapBenchmarks,The following statement contains a magic number: SampleZone = new StandardDaylightAlternatingMap(Offset.FromHours(-8)'                  new ZoneRecurrence("PDT"' Offset.FromHours(1)'                      new ZoneYearOffset(TransitionMode.Wall' monthOfYear: 3' dayOfMonth: 8' dayOfWeek: 7'                                         advance: true' timeOfDay: new LocalTime(2' 0))'                      int.MinValue' int.MaxValue)'                  new ZoneRecurrence("PST"' Offset.FromHours(0)'                      new ZoneYearOffset(TransitionMode.Standard' monthOfYear: 11' dayOfMonth: 1' dayOfWeek: 7'                                         advance: true' timeOfDay: new LocalTime(2' 0))'                      int.MinValue' int.MaxValue));
Magic Number,NodaTime.Benchmarks.NodaTimeTests,StandardDaylightAlternatingMapBenchmarks,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.Benchmarks\NodaTimeTests\StandardDaylightAlternatingMapBenchmarks.cs,StandardDaylightAlternatingMapBenchmarks,The following statement contains a magic number: SampleZone = new StandardDaylightAlternatingMap(Offset.FromHours(-8)'                  new ZoneRecurrence("PDT"' Offset.FromHours(1)'                      new ZoneYearOffset(TransitionMode.Wall' monthOfYear: 3' dayOfMonth: 8' dayOfWeek: 7'                                         advance: true' timeOfDay: new LocalTime(2' 0))'                      int.MinValue' int.MaxValue)'                  new ZoneRecurrence("PST"' Offset.FromHours(0)'                      new ZoneYearOffset(TransitionMode.Standard' monthOfYear: 11' dayOfMonth: 1' dayOfWeek: 7'                                         advance: true' timeOfDay: new LocalTime(2' 0))'                      int.MinValue' int.MaxValue));
Magic Number,NodaTime.Benchmarks.NodaTimeTests,StandardDaylightAlternatingMapBenchmarks,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.Benchmarks\NodaTimeTests\StandardDaylightAlternatingMapBenchmarks.cs,StandardDaylightAlternatingMapBenchmarks,The following statement contains a magic number: SampleZone = new StandardDaylightAlternatingMap(Offset.FromHours(-8)'                  new ZoneRecurrence("PDT"' Offset.FromHours(1)'                      new ZoneYearOffset(TransitionMode.Wall' monthOfYear: 3' dayOfMonth: 8' dayOfWeek: 7'                                         advance: true' timeOfDay: new LocalTime(2' 0))'                      int.MinValue' int.MaxValue)'                  new ZoneRecurrence("PST"' Offset.FromHours(0)'                      new ZoneYearOffset(TransitionMode.Standard' monthOfYear: 11' dayOfMonth: 1' dayOfWeek: 7'                                         advance: true' timeOfDay: new LocalTime(2' 0))'                      int.MinValue' int.MaxValue));
Magic Number,NodaTime.Benchmarks.NodaTimeTests,StandardDaylightAlternatingMapBenchmarks,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.Benchmarks\NodaTimeTests\StandardDaylightAlternatingMapBenchmarks.cs,StandardDaylightAlternatingMapBenchmarks,The following statement contains a magic number: SampleZone = new StandardDaylightAlternatingMap(Offset.FromHours(-8)'                  new ZoneRecurrence("PDT"' Offset.FromHours(1)'                      new ZoneYearOffset(TransitionMode.Wall' monthOfYear: 3' dayOfMonth: 8' dayOfWeek: 7'                                         advance: true' timeOfDay: new LocalTime(2' 0))'                      int.MinValue' int.MaxValue)'                  new ZoneRecurrence("PST"' Offset.FromHours(0)'                      new ZoneYearOffset(TransitionMode.Standard' monthOfYear: 11' dayOfMonth: 1' dayOfWeek: 7'                                         advance: true' timeOfDay: new LocalTime(2' 0))'                      int.MinValue' int.MaxValue));
Magic Number,NodaTime.Benchmarks.NodaTimeTests,StandardDaylightAlternatingMapBenchmarks,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.Benchmarks\NodaTimeTests\StandardDaylightAlternatingMapBenchmarks.cs,StandardDaylightAlternatingMapBenchmarks,The following statement contains a magic number: SampleZone = new StandardDaylightAlternatingMap(Offset.FromHours(-8)'                  new ZoneRecurrence("PDT"' Offset.FromHours(1)'                      new ZoneYearOffset(TransitionMode.Wall' monthOfYear: 3' dayOfMonth: 8' dayOfWeek: 7'                                         advance: true' timeOfDay: new LocalTime(2' 0))'                      int.MinValue' int.MaxValue)'                  new ZoneRecurrence("PST"' Offset.FromHours(0)'                      new ZoneYearOffset(TransitionMode.Standard' monthOfYear: 11' dayOfMonth: 1' dayOfWeek: 7'                                         advance: true' timeOfDay: new LocalTime(2' 0))'                      int.MinValue' int.MaxValue));
Magic Number,NodaTime.Benchmarks.NodaTimeTests,StandardDaylightAlternatingMapBenchmarks,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.Benchmarks\NodaTimeTests\StandardDaylightAlternatingMapBenchmarks.cs,StandardDaylightAlternatingMapBenchmarks,The following statement contains a magic number: SampleZone = new StandardDaylightAlternatingMap(Offset.FromHours(-8)'                  new ZoneRecurrence("PDT"' Offset.FromHours(1)'                      new ZoneYearOffset(TransitionMode.Wall' monthOfYear: 3' dayOfMonth: 8' dayOfWeek: 7'                                         advance: true' timeOfDay: new LocalTime(2' 0))'                      int.MinValue' int.MaxValue)'                  new ZoneRecurrence("PST"' Offset.FromHours(0)'                      new ZoneYearOffset(TransitionMode.Standard' monthOfYear: 11' dayOfMonth: 1' dayOfWeek: 7'                                         advance: true' timeOfDay: new LocalTime(2' 0))'                      int.MinValue' int.MaxValue));
Magic Number,NodaTime.Benchmarks.NodaTimeTests,StandardDaylightAlternatingMapBenchmarks,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.Benchmarks\NodaTimeTests\StandardDaylightAlternatingMapBenchmarks.cs,StandardDaylightAlternatingMapBenchmarks,The following statement contains a magic number: SampleZone = new StandardDaylightAlternatingMap(Offset.FromHours(-8)'                  new ZoneRecurrence("PDT"' Offset.FromHours(1)'                      new ZoneYearOffset(TransitionMode.Wall' monthOfYear: 3' dayOfMonth: 8' dayOfWeek: 7'                                         advance: true' timeOfDay: new LocalTime(2' 0))'                      int.MinValue' int.MaxValue)'                  new ZoneRecurrence("PST"' Offset.FromHours(0)'                      new ZoneYearOffset(TransitionMode.Standard' monthOfYear: 11' dayOfMonth: 1' dayOfWeek: 7'                                         advance: true' timeOfDay: new LocalTime(2' 0))'                      int.MinValue' int.MaxValue));
Magic Number,NodaTime.Benchmarks.NodaTimeTests.Calendars,HebrewCalendarBenchmarks,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.Benchmarks\NodaTimeTests\Calendars\HebrewCalendarBenchmarks.cs,TestLeapCycle,The following statement contains a magic number: year < 5419
Magic Number,NodaTime.Benchmarks.NodaTimeTests.Calendars,IsoCalendarBenchmarks,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.Benchmarks\NodaTimeTests\Calendars\IsoCalendarBenchmarks.cs,GetDaysInMonth_NotFebruary,The following statement contains a magic number: CalendarSystem.Iso.GetDaysInMonth(2012' 1);
Magic Number,NodaTime.Benchmarks.NodaTimeTests.Calendars,IsoCalendarBenchmarks,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.Benchmarks\NodaTimeTests\Calendars\IsoCalendarBenchmarks.cs,GetDaysInMonth_FebruaryNonLeap,The following statement contains a magic number: CalendarSystem.Iso.GetDaysInMonth(2011' 2);
Magic Number,NodaTime.Benchmarks.NodaTimeTests.Calendars,IsoCalendarBenchmarks,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.Benchmarks\NodaTimeTests\Calendars\IsoCalendarBenchmarks.cs,GetDaysInMonth_FebruaryNonLeap,The following statement contains a magic number: CalendarSystem.Iso.GetDaysInMonth(2011' 2);
Magic Number,NodaTime.Benchmarks.NodaTimeTests.Calendars,IsoCalendarBenchmarks,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.Benchmarks\NodaTimeTests\Calendars\IsoCalendarBenchmarks.cs,GetDaysInMonth_FebruaryLeap,The following statement contains a magic number: CalendarSystem.Iso.GetDaysInMonth(2012' 2);
Magic Number,NodaTime.Benchmarks.NodaTimeTests.Calendars,IsoCalendarBenchmarks,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.Benchmarks\NodaTimeTests\Calendars\IsoCalendarBenchmarks.cs,GetDaysInMonth_FebruaryLeap,The following statement contains a magic number: CalendarSystem.Iso.GetDaysInMonth(2012' 2);
Magic Number,NodaTime.Benchmarks.NodaTimeTests.Calendars,IsoCalendarBenchmarks,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.Benchmarks\NodaTimeTests\Calendars\IsoCalendarBenchmarks.cs,GetStartOfYearInDays_InOptimizedRange,The following statement contains a magic number: IsoCalculator.GetStartOfYearInDays(2000);
Magic Number,NodaTime.Benchmarks.NodaTimeTests.Calendars,IsoCalendarBenchmarks,C:\research\architectureSmells\repos\nodatime_nodatime\src\NodaTime.Benchmarks\NodaTimeTests\Calendars\IsoCalendarBenchmarks.cs,GetStartOfYearInDays_OutsideOptimizedRange,The following statement contains a magic number: IsoCalculator.GetStartOfYearInDays(1600);
