Implementation smell,Namespace,Class,File,Method,Description
Long Method,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The method has 106 lines of code.
Complex Method,NodaTime.Benchmarks,BenchmarkEnvironment,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,Equals,Cyclomatic complexity of the method is 14
Complex Method,NodaTime.Benchmarks,BenchmarkEnvironment,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,GetHashCode,Cyclomatic complexity of the method is 11
Complex Method,NodaTime.Benchmarks,BenchmarkEnvironment,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,Cyclomatic complexity of the method is 11
Complex Method,NodaTime.Benchmarks,BenchmarkEnvironment,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,Cyclomatic complexity of the method is 11
Complex Method,NodaTime.Benchmarks,BenchmarkEnvironment,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,Cyclomatic complexity of the method is 12
Complex Method,NodaTime.Benchmarks,BenchmarkRun,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,Equals,Cyclomatic complexity of the method is 10
Complex Method,NodaTime.Benchmarks,BenchmarkRun,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,Cyclomatic complexity of the method is 10
Complex Method,NodaTime.Benchmarks,BenchmarkType,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,Equals,Cyclomatic complexity of the method is 9
Complex Method,NodaTime.Benchmarks,Benchmark,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,Equals,Cyclomatic complexity of the method is 9
Complex Method,NodaTime.Benchmarks,Benchmark,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,Cyclomatic complexity of the method is 9
Complex Method,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,Equals,Cyclomatic complexity of the method is 27
Complex Method,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,GetHashCode,Cyclomatic complexity of the method is 25
Complex Method,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,Cyclomatic complexity of the method is 25
Complex Method,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,Cyclomatic complexity of the method is 25
Complex Method,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,Cyclomatic complexity of the method is 26
Long Identifier,NodaTime.Benchmarks,BenchmarkEnvironment,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,,The length of the parameter BenchmarkEnvironmentIdFieldNumber is 33.
Long Identifier,NodaTime.Benchmarks,BenchmarkRun,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,,The length of the parameter BenchmarkEnvironmentIdFieldNumber is 33.
Long Identifier,NodaTime.Benchmarks,BenchmarkRun,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,,The length of the parameter BenchmarkDotNetVersionFieldNumber is 33.
Long Statement,BenchmarkUploader,Program,C:\repos\nodatime_nodatime\build\BenchmarkUploader\Program.cs,ProcessRun,The length of the statement  "            var start = DateTimeOffset.ParseExact(File.ReadAllText(startFile).Trim()' "yyyy-MM-ddTHH:mm:sszzz"' CultureInfo.InvariantCulture); " is 130.
Long Statement,BenchmarkUploader,Program,C:\repos\nodatime_nodatime\build\BenchmarkUploader\Program.cs,ProcessRun,The length of the statement  "            var end = DateTimeOffset.ParseExact(File.ReadAllText(endFile).Trim()' "yyyy-MM-ddTHH:mm:sszzz"' CultureInfo.InvariantCulture); " is 126.
Magic Number,NodaTime.Benchmarks,BenchmarkEnvironment,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (BenchmarkEnvironmentId.Length != 0) {          output.WriteRawTag(10);          output.WriteString(BenchmarkEnvironmentId);        }
Magic Number,NodaTime.Benchmarks,BenchmarkEnvironment,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (Machine.Length != 0) {          output.WriteRawTag(18);          output.WriteString(Machine);        }
Magic Number,NodaTime.Benchmarks,BenchmarkEnvironment,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (OperatingSystem.Length != 0) {          output.WriteRawTag(26);          output.WriteString(OperatingSystem);        }
Magic Number,NodaTime.Benchmarks,BenchmarkEnvironment,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (Processor.Length != 0) {          output.WriteRawTag(34);          output.WriteString(Processor);        }
Magic Number,NodaTime.Benchmarks,BenchmarkEnvironment,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (ProcessorCount != 0) {          output.WriteRawTag(40);          output.WriteInt32(ProcessorCount);        }
Magic Number,NodaTime.Benchmarks,BenchmarkEnvironment,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (Architecture.Length != 0) {          output.WriteRawTag(50);          output.WriteString(Architecture);        }
Magic Number,NodaTime.Benchmarks,BenchmarkEnvironment,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (TargetFramework.Length != 0) {          output.WriteRawTag(58);          output.WriteString(TargetFramework);        }
Magic Number,NodaTime.Benchmarks,BenchmarkEnvironment,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (JitModules.Length != 0) {          output.WriteRawTag(66);          output.WriteString(JitModules);        }
Magic Number,NodaTime.Benchmarks,BenchmarkEnvironment,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (HasRyuJit != false) {          output.WriteRawTag(72);          output.WriteBool(HasRyuJit);        }
Magic Number,NodaTime.Benchmarks,BenchmarkEnvironment,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (RuntimeVersion.Length != 0) {          output.WriteRawTag(82);          output.WriteString(RuntimeVersion);        }
Magic Number,NodaTime.Benchmarks,BenchmarkEnvironment,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkEnvironmentId = input.ReadString();              break;            }            case 18: {              Machine = input.ReadString();              break;            }            case 26: {              OperatingSystem = input.ReadString();              break;            }            case 34: {              Processor = input.ReadString();              break;            }            case 40: {              ProcessorCount = input.ReadInt32();              break;            }            case 50: {              Architecture = input.ReadString();              break;            }            case 58: {              TargetFramework = input.ReadString();              break;            }            case 66: {              JitModules = input.ReadString();              break;            }            case 72: {              HasRyuJit = input.ReadBool();              break;            }            case 82: {              RuntimeVersion = input.ReadString();              break;            }            case 802: {              runs_.AddEntriesFrom(input' _repeated_runs_codec);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,BenchmarkEnvironment,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkEnvironmentId = input.ReadString();              break;            }            case 18: {              Machine = input.ReadString();              break;            }            case 26: {              OperatingSystem = input.ReadString();              break;            }            case 34: {              Processor = input.ReadString();              break;            }            case 40: {              ProcessorCount = input.ReadInt32();              break;            }            case 50: {              Architecture = input.ReadString();              break;            }            case 58: {              TargetFramework = input.ReadString();              break;            }            case 66: {              JitModules = input.ReadString();              break;            }            case 72: {              HasRyuJit = input.ReadBool();              break;            }            case 82: {              RuntimeVersion = input.ReadString();              break;            }            case 802: {              runs_.AddEntriesFrom(input' _repeated_runs_codec);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,BenchmarkEnvironment,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkEnvironmentId = input.ReadString();              break;            }            case 18: {              Machine = input.ReadString();              break;            }            case 26: {              OperatingSystem = input.ReadString();              break;            }            case 34: {              Processor = input.ReadString();              break;            }            case 40: {              ProcessorCount = input.ReadInt32();              break;            }            case 50: {              Architecture = input.ReadString();              break;            }            case 58: {              TargetFramework = input.ReadString();              break;            }            case 66: {              JitModules = input.ReadString();              break;            }            case 72: {              HasRyuJit = input.ReadBool();              break;            }            case 82: {              RuntimeVersion = input.ReadString();              break;            }            case 802: {              runs_.AddEntriesFrom(input' _repeated_runs_codec);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,BenchmarkEnvironment,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkEnvironmentId = input.ReadString();              break;            }            case 18: {              Machine = input.ReadString();              break;            }            case 26: {              OperatingSystem = input.ReadString();              break;            }            case 34: {              Processor = input.ReadString();              break;            }            case 40: {              ProcessorCount = input.ReadInt32();              break;            }            case 50: {              Architecture = input.ReadString();              break;            }            case 58: {              TargetFramework = input.ReadString();              break;            }            case 66: {              JitModules = input.ReadString();              break;            }            case 72: {              HasRyuJit = input.ReadBool();              break;            }            case 82: {              RuntimeVersion = input.ReadString();              break;            }            case 802: {              runs_.AddEntriesFrom(input' _repeated_runs_codec);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,BenchmarkEnvironment,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkEnvironmentId = input.ReadString();              break;            }            case 18: {              Machine = input.ReadString();              break;            }            case 26: {              OperatingSystem = input.ReadString();              break;            }            case 34: {              Processor = input.ReadString();              break;            }            case 40: {              ProcessorCount = input.ReadInt32();              break;            }            case 50: {              Architecture = input.ReadString();              break;            }            case 58: {              TargetFramework = input.ReadString();              break;            }            case 66: {              JitModules = input.ReadString();              break;            }            case 72: {              HasRyuJit = input.ReadBool();              break;            }            case 82: {              RuntimeVersion = input.ReadString();              break;            }            case 802: {              runs_.AddEntriesFrom(input' _repeated_runs_codec);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,BenchmarkEnvironment,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkEnvironmentId = input.ReadString();              break;            }            case 18: {              Machine = input.ReadString();              break;            }            case 26: {              OperatingSystem = input.ReadString();              break;            }            case 34: {              Processor = input.ReadString();              break;            }            case 40: {              ProcessorCount = input.ReadInt32();              break;            }            case 50: {              Architecture = input.ReadString();              break;            }            case 58: {              TargetFramework = input.ReadString();              break;            }            case 66: {              JitModules = input.ReadString();              break;            }            case 72: {              HasRyuJit = input.ReadBool();              break;            }            case 82: {              RuntimeVersion = input.ReadString();              break;            }            case 802: {              runs_.AddEntriesFrom(input' _repeated_runs_codec);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,BenchmarkEnvironment,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkEnvironmentId = input.ReadString();              break;            }            case 18: {              Machine = input.ReadString();              break;            }            case 26: {              OperatingSystem = input.ReadString();              break;            }            case 34: {              Processor = input.ReadString();              break;            }            case 40: {              ProcessorCount = input.ReadInt32();              break;            }            case 50: {              Architecture = input.ReadString();              break;            }            case 58: {              TargetFramework = input.ReadString();              break;            }            case 66: {              JitModules = input.ReadString();              break;            }            case 72: {              HasRyuJit = input.ReadBool();              break;            }            case 82: {              RuntimeVersion = input.ReadString();              break;            }            case 802: {              runs_.AddEntriesFrom(input' _repeated_runs_codec);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,BenchmarkEnvironment,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkEnvironmentId = input.ReadString();              break;            }            case 18: {              Machine = input.ReadString();              break;            }            case 26: {              OperatingSystem = input.ReadString();              break;            }            case 34: {              Processor = input.ReadString();              break;            }            case 40: {              ProcessorCount = input.ReadInt32();              break;            }            case 50: {              Architecture = input.ReadString();              break;            }            case 58: {              TargetFramework = input.ReadString();              break;            }            case 66: {              JitModules = input.ReadString();              break;            }            case 72: {              HasRyuJit = input.ReadBool();              break;            }            case 82: {              RuntimeVersion = input.ReadString();              break;            }            case 802: {              runs_.AddEntriesFrom(input' _repeated_runs_codec);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,BenchmarkEnvironment,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkEnvironmentId = input.ReadString();              break;            }            case 18: {              Machine = input.ReadString();              break;            }            case 26: {              OperatingSystem = input.ReadString();              break;            }            case 34: {              Processor = input.ReadString();              break;            }            case 40: {              ProcessorCount = input.ReadInt32();              break;            }            case 50: {              Architecture = input.ReadString();              break;            }            case 58: {              TargetFramework = input.ReadString();              break;            }            case 66: {              JitModules = input.ReadString();              break;            }            case 72: {              HasRyuJit = input.ReadBool();              break;            }            case 82: {              RuntimeVersion = input.ReadString();              break;            }            case 802: {              runs_.AddEntriesFrom(input' _repeated_runs_codec);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,BenchmarkEnvironment,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkEnvironmentId = input.ReadString();              break;            }            case 18: {              Machine = input.ReadString();              break;            }            case 26: {              OperatingSystem = input.ReadString();              break;            }            case 34: {              Processor = input.ReadString();              break;            }            case 40: {              ProcessorCount = input.ReadInt32();              break;            }            case 50: {              Architecture = input.ReadString();              break;            }            case 58: {              TargetFramework = input.ReadString();              break;            }            case 66: {              JitModules = input.ReadString();              break;            }            case 72: {              HasRyuJit = input.ReadBool();              break;            }            case 82: {              RuntimeVersion = input.ReadString();              break;            }            case 802: {              runs_.AddEntriesFrom(input' _repeated_runs_codec);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,BenchmarkEnvironment,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkEnvironmentId = input.ReadString();              break;            }            case 18: {              Machine = input.ReadString();              break;            }            case 26: {              OperatingSystem = input.ReadString();              break;            }            case 34: {              Processor = input.ReadString();              break;            }            case 40: {              ProcessorCount = input.ReadInt32();              break;            }            case 50: {              Architecture = input.ReadString();              break;            }            case 58: {              TargetFramework = input.ReadString();              break;            }            case 66: {              JitModules = input.ReadString();              break;            }            case 72: {              HasRyuJit = input.ReadBool();              break;            }            case 82: {              RuntimeVersion = input.ReadString();              break;            }            case 802: {              runs_.AddEntriesFrom(input' _repeated_runs_codec);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,BenchmarkRun,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (BenchmarkRunId.Length != 0) {          output.WriteRawTag(10);          output.WriteString(BenchmarkRunId);        }
Magic Number,NodaTime.Benchmarks,BenchmarkRun,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (BenchmarkEnvironmentId.Length != 0) {          output.WriteRawTag(18);          output.WriteString(BenchmarkEnvironmentId);        }
Magic Number,NodaTime.Benchmarks,BenchmarkRun,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (Commit.Length != 0) {          output.WriteRawTag(26);          output.WriteString(Commit);        }
Magic Number,NodaTime.Benchmarks,BenchmarkRun,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (start_ != null) {          output.WriteRawTag(34);          output.WriteMessage(Start);        }
Magic Number,NodaTime.Benchmarks,BenchmarkRun,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (end_ != null) {          output.WriteRawTag(42);          output.WriteMessage(End);        }
Magic Number,NodaTime.Benchmarks,BenchmarkRun,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (BenchmarkDotNetVersion.Length != 0) {          output.WriteRawTag(82);          output.WriteString(BenchmarkDotNetVersion);        }
Magic Number,NodaTime.Benchmarks,BenchmarkRun,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkRunId = input.ReadString();              break;            }            case 18: {              BenchmarkEnvironmentId = input.ReadString();              break;            }            case 26: {              Commit = input.ReadString();              break;            }            case 34: {              if (start_ == null) {                start_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();              }              input.ReadMessage(start_);              break;            }            case 42: {              if (end_ == null) {                end_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();              }              input.ReadMessage(end_);              break;            }            case 82: {              BenchmarkDotNetVersion = input.ReadString();              break;            }            case 802: {              types_.AddEntriesFrom(input' _repeated_types_codec);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,BenchmarkRun,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkRunId = input.ReadString();              break;            }            case 18: {              BenchmarkEnvironmentId = input.ReadString();              break;            }            case 26: {              Commit = input.ReadString();              break;            }            case 34: {              if (start_ == null) {                start_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();              }              input.ReadMessage(start_);              break;            }            case 42: {              if (end_ == null) {                end_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();              }              input.ReadMessage(end_);              break;            }            case 82: {              BenchmarkDotNetVersion = input.ReadString();              break;            }            case 802: {              types_.AddEntriesFrom(input' _repeated_types_codec);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,BenchmarkRun,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkRunId = input.ReadString();              break;            }            case 18: {              BenchmarkEnvironmentId = input.ReadString();              break;            }            case 26: {              Commit = input.ReadString();              break;            }            case 34: {              if (start_ == null) {                start_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();              }              input.ReadMessage(start_);              break;            }            case 42: {              if (end_ == null) {                end_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();              }              input.ReadMessage(end_);              break;            }            case 82: {              BenchmarkDotNetVersion = input.ReadString();              break;            }            case 802: {              types_.AddEntriesFrom(input' _repeated_types_codec);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,BenchmarkRun,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkRunId = input.ReadString();              break;            }            case 18: {              BenchmarkEnvironmentId = input.ReadString();              break;            }            case 26: {              Commit = input.ReadString();              break;            }            case 34: {              if (start_ == null) {                start_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();              }              input.ReadMessage(start_);              break;            }            case 42: {              if (end_ == null) {                end_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();              }              input.ReadMessage(end_);              break;            }            case 82: {              BenchmarkDotNetVersion = input.ReadString();              break;            }            case 802: {              types_.AddEntriesFrom(input' _repeated_types_codec);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,BenchmarkRun,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkRunId = input.ReadString();              break;            }            case 18: {              BenchmarkEnvironmentId = input.ReadString();              break;            }            case 26: {              Commit = input.ReadString();              break;            }            case 34: {              if (start_ == null) {                start_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();              }              input.ReadMessage(start_);              break;            }            case 42: {              if (end_ == null) {                end_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();              }              input.ReadMessage(end_);              break;            }            case 82: {              BenchmarkDotNetVersion = input.ReadString();              break;            }            case 802: {              types_.AddEntriesFrom(input' _repeated_types_codec);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,BenchmarkRun,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkRunId = input.ReadString();              break;            }            case 18: {              BenchmarkEnvironmentId = input.ReadString();              break;            }            case 26: {              Commit = input.ReadString();              break;            }            case 34: {              if (start_ == null) {                start_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();              }              input.ReadMessage(start_);              break;            }            case 42: {              if (end_ == null) {                end_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();              }              input.ReadMessage(end_);              break;            }            case 82: {              BenchmarkDotNetVersion = input.ReadString();              break;            }            case 802: {              types_.AddEntriesFrom(input' _repeated_types_codec);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,BenchmarkRun,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkRunId = input.ReadString();              break;            }            case 18: {              BenchmarkEnvironmentId = input.ReadString();              break;            }            case 26: {              Commit = input.ReadString();              break;            }            case 34: {              if (start_ == null) {                start_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();              }              input.ReadMessage(start_);              break;            }            case 42: {              if (end_ == null) {                end_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();              }              input.ReadMessage(end_);              break;            }            case 82: {              BenchmarkDotNetVersion = input.ReadString();              break;            }            case 802: {              types_.AddEntriesFrom(input' _repeated_types_codec);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,BenchmarkType,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (BenchmarkTypeId.Length != 0) {          output.WriteRawTag(10);          output.WriteString(BenchmarkTypeId);        }
Magic Number,NodaTime.Benchmarks,BenchmarkType,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (BenchmarkRunId.Length != 0) {          output.WriteRawTag(18);          output.WriteString(BenchmarkRunId);        }
Magic Number,NodaTime.Benchmarks,BenchmarkType,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (FullTypeName.Length != 0) {          output.WriteRawTag(26);          output.WriteString(FullTypeName);        }
Magic Number,NodaTime.Benchmarks,BenchmarkType,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (Namespace.Length != 0) {          output.WriteRawTag(34);          output.WriteString(Namespace);        }
Magic Number,NodaTime.Benchmarks,BenchmarkType,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (Type.Length != 0) {          output.WriteRawTag(42);          output.WriteString(Type);        }
Magic Number,NodaTime.Benchmarks,BenchmarkType,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkTypeId = input.ReadString();              break;            }            case 18: {              BenchmarkRunId = input.ReadString();              break;            }            case 26: {              FullTypeName = input.ReadString();              break;            }            case 34: {              Namespace = input.ReadString();              break;            }            case 42: {              Type = input.ReadString();              break;            }            case 802: {              benchmarks_.AddEntriesFrom(input' _repeated_benchmarks_codec);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,BenchmarkType,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkTypeId = input.ReadString();              break;            }            case 18: {              BenchmarkRunId = input.ReadString();              break;            }            case 26: {              FullTypeName = input.ReadString();              break;            }            case 34: {              Namespace = input.ReadString();              break;            }            case 42: {              Type = input.ReadString();              break;            }            case 802: {              benchmarks_.AddEntriesFrom(input' _repeated_benchmarks_codec);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,BenchmarkType,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkTypeId = input.ReadString();              break;            }            case 18: {              BenchmarkRunId = input.ReadString();              break;            }            case 26: {              FullTypeName = input.ReadString();              break;            }            case 34: {              Namespace = input.ReadString();              break;            }            case 42: {              Type = input.ReadString();              break;            }            case 802: {              benchmarks_.AddEntriesFrom(input' _repeated_benchmarks_codec);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,BenchmarkType,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkTypeId = input.ReadString();              break;            }            case 18: {              BenchmarkRunId = input.ReadString();              break;            }            case 26: {              FullTypeName = input.ReadString();              break;            }            case 34: {              Namespace = input.ReadString();              break;            }            case 42: {              Type = input.ReadString();              break;            }            case 802: {              benchmarks_.AddEntriesFrom(input' _repeated_benchmarks_codec);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,BenchmarkType,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkTypeId = input.ReadString();              break;            }            case 18: {              BenchmarkRunId = input.ReadString();              break;            }            case 26: {              FullTypeName = input.ReadString();              break;            }            case 34: {              Namespace = input.ReadString();              break;            }            case 42: {              Type = input.ReadString();              break;            }            case 802: {              benchmarks_.AddEntriesFrom(input' _repeated_benchmarks_codec);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,BenchmarkType,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkTypeId = input.ReadString();              break;            }            case 18: {              BenchmarkRunId = input.ReadString();              break;            }            case 26: {              FullTypeName = input.ReadString();              break;            }            case 34: {              Namespace = input.ReadString();              break;            }            case 42: {              Type = input.ReadString();              break;            }            case 802: {              benchmarks_.AddEntriesFrom(input' _repeated_benchmarks_codec);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Benchmark,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (BenchmarkId.Length != 0) {          output.WriteRawTag(10);          output.WriteString(BenchmarkId);        }
Magic Number,NodaTime.Benchmarks,Benchmark,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (BenchmarkTypeId.Length != 0) {          output.WriteRawTag(18);          output.WriteString(BenchmarkTypeId);        }
Magic Number,NodaTime.Benchmarks,Benchmark,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (Method.Length != 0) {          output.WriteRawTag(26);          output.WriteString(Method);        }
Magic Number,NodaTime.Benchmarks,Benchmark,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (FullMethodName.Length != 0) {          output.WriteRawTag(34);          output.WriteString(FullMethodName);        }
Magic Number,NodaTime.Benchmarks,Benchmark,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (Parameters.Length != 0) {          output.WriteRawTag(42);          output.WriteString(Parameters);        }
Magic Number,NodaTime.Benchmarks,Benchmark,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (statistics_ != null) {          output.WriteRawTag(50);          output.WriteMessage(Statistics);        }
Magic Number,NodaTime.Benchmarks,Benchmark,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkId = input.ReadString();              break;            }            case 18: {              BenchmarkTypeId = input.ReadString();              break;            }            case 26: {              Method = input.ReadString();              break;            }            case 34: {              FullMethodName = input.ReadString();              break;            }            case 42: {              Parameters = input.ReadString();              break;            }            case 50: {              if (statistics_ == null) {                statistics_ = new global::NodaTime.Benchmarks.Statistics();              }              input.ReadMessage(statistics_);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Benchmark,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkId = input.ReadString();              break;            }            case 18: {              BenchmarkTypeId = input.ReadString();              break;            }            case 26: {              Method = input.ReadString();              break;            }            case 34: {              FullMethodName = input.ReadString();              break;            }            case 42: {              Parameters = input.ReadString();              break;            }            case 50: {              if (statistics_ == null) {                statistics_ = new global::NodaTime.Benchmarks.Statistics();              }              input.ReadMessage(statistics_);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Benchmark,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkId = input.ReadString();              break;            }            case 18: {              BenchmarkTypeId = input.ReadString();              break;            }            case 26: {              Method = input.ReadString();              break;            }            case 34: {              FullMethodName = input.ReadString();              break;            }            case 42: {              Parameters = input.ReadString();              break;            }            case 50: {              if (statistics_ == null) {                statistics_ = new global::NodaTime.Benchmarks.Statistics();              }              input.ReadMessage(statistics_);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Benchmark,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkId = input.ReadString();              break;            }            case 18: {              BenchmarkTypeId = input.ReadString();              break;            }            case 26: {              Method = input.ReadString();              break;            }            case 34: {              FullMethodName = input.ReadString();              break;            }            case 42: {              Parameters = input.ReadString();              break;            }            case 50: {              if (statistics_ == null) {                statistics_ = new global::NodaTime.Benchmarks.Statistics();              }              input.ReadMessage(statistics_);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Benchmark,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkId = input.ReadString();              break;            }            case 18: {              BenchmarkTypeId = input.ReadString();              break;            }            case 26: {              Method = input.ReadString();              break;            }            case 34: {              FullMethodName = input.ReadString();              break;            }            case 42: {              Parameters = input.ReadString();              break;            }            case 50: {              if (statistics_ == null) {                statistics_ = new global::NodaTime.Benchmarks.Statistics();              }              input.ReadMessage(statistics_);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Benchmark,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              BenchmarkId = input.ReadString();              break;            }            case 18: {              BenchmarkTypeId = input.ReadString();              break;            }            case 26: {              Method = input.ReadString();              break;            }            case 34: {              FullMethodName = input.ReadString();              break;            }            case 42: {              Parameters = input.ReadString();              break;            }            case 50: {              if (statistics_ == null) {                statistics_ = new global::NodaTime.Benchmarks.Statistics();              }              input.ReadMessage(statistics_);              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (TestCount != 0) {          output.WriteRawTag(8);          output.WriteInt32(TestCount);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (Mean != 0D) {          output.WriteRawTag(17);          output.WriteDouble(Mean);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (Min != 0D) {          output.WriteRawTag(25);          output.WriteDouble(Min);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (Max != 0D) {          output.WriteRawTag(33);          output.WriteDouble(Max);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (Median != 0D) {          output.WriteRawTag(41);          output.WriteDouble(Median);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (LowerFence != 0D) {          output.WriteRawTag(49);          output.WriteDouble(LowerFence);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (UpperFence != 0D) {          output.WriteRawTag(57);          output.WriteDouble(UpperFence);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (Q1 != 0D) {          output.WriteRawTag(65);          output.WriteDouble(Q1);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (Q3 != 0D) {          output.WriteRawTag(73);          output.WriteDouble(Q3);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (InterquartileRange != 0D) {          output.WriteRawTag(81);          output.WriteDouble(InterquartileRange);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (StandardError != 0D) {          output.WriteRawTag(89);          output.WriteDouble(StandardError);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (Variance != 0D) {          output.WriteRawTag(97);          output.WriteDouble(Variance);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (StandardDeviation != 0D) {          output.WriteRawTag(105);          output.WriteDouble(StandardDeviation);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (Skewness != 0D) {          output.WriteRawTag(113);          output.WriteDouble(Skewness);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (Kurtosis != 0D) {          output.WriteRawTag(121);          output.WriteDouble(Kurtosis);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (P0 != 0D) {          output.WriteRawTag(145' 3);          output.WriteDouble(P0);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (P0 != 0D) {          output.WriteRawTag(145' 3);          output.WriteDouble(P0);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (P25 != 0D) {          output.WriteRawTag(153' 3);          output.WriteDouble(P25);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (P25 != 0D) {          output.WriteRawTag(153' 3);          output.WriteDouble(P25);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (P50 != 0D) {          output.WriteRawTag(161' 3);          output.WriteDouble(P50);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (P50 != 0D) {          output.WriteRawTag(161' 3);          output.WriteDouble(P50);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (P67 != 0D) {          output.WriteRawTag(169' 3);          output.WriteDouble(P67);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (P67 != 0D) {          output.WriteRawTag(169' 3);          output.WriteDouble(P67);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (P80 != 0D) {          output.WriteRawTag(177' 3);          output.WriteDouble(P80);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (P80 != 0D) {          output.WriteRawTag(177' 3);          output.WriteDouble(P80);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (P85 != 0D) {          output.WriteRawTag(185' 3);          output.WriteDouble(P85);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (P85 != 0D) {          output.WriteRawTag(185' 3);          output.WriteDouble(P85);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (P90 != 0D) {          output.WriteRawTag(193' 3);          output.WriteDouble(P90);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (P90 != 0D) {          output.WriteRawTag(193' 3);          output.WriteDouble(P90);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (P95 != 0D) {          output.WriteRawTag(201' 3);          output.WriteDouble(P95);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (P95 != 0D) {          output.WriteRawTag(201' 3);          output.WriteDouble(P95);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (P100 != 0D) {          output.WriteRawTag(209' 3);          output.WriteDouble(P100);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,WriteTo,The following statement contains a magic number: if (P100 != 0D) {          output.WriteRawTag(209' 3);          output.WriteDouble(P100);        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (Mean != 0D) {          size += 1 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (Min != 0D) {          size += 1 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (Max != 0D) {          size += 1 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (Median != 0D) {          size += 1 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (LowerFence != 0D) {          size += 1 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (UpperFence != 0D) {          size += 1 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (Q1 != 0D) {          size += 1 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (Q3 != 0D) {          size += 1 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (InterquartileRange != 0D) {          size += 1 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (StandardError != 0D) {          size += 1 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (Variance != 0D) {          size += 1 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (StandardDeviation != 0D) {          size += 1 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (Skewness != 0D) {          size += 1 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (Kurtosis != 0D) {          size += 1 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (P0 != 0D) {          size += 2 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (P0 != 0D) {          size += 2 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (P25 != 0D) {          size += 2 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (P25 != 0D) {          size += 2 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (P50 != 0D) {          size += 2 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (P50 != 0D) {          size += 2 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (P67 != 0D) {          size += 2 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (P67 != 0D) {          size += 2 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (P80 != 0D) {          size += 2 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (P80 != 0D) {          size += 2 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (P85 != 0D) {          size += 2 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (P85 != 0D) {          size += 2 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (P90 != 0D) {          size += 2 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (P90 != 0D) {          size += 2 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (P95 != 0D) {          size += 2 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (P95 != 0D) {          size += 2 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (P100 != 0D) {          size += 2 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,CalculateSize,The following statement contains a magic number: if (P100 != 0D) {          size += 2 + 8;        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              TestCount = input.ReadInt32();              break;            }            case 17: {              Mean = input.ReadDouble();              break;            }            case 25: {              Min = input.ReadDouble();              break;            }            case 33: {              Max = input.ReadDouble();              break;            }            case 41: {              Median = input.ReadDouble();              break;            }            case 49: {              LowerFence = input.ReadDouble();              break;            }            case 57: {              UpperFence = input.ReadDouble();              break;            }            case 65: {              Q1 = input.ReadDouble();              break;            }            case 73: {              Q3 = input.ReadDouble();              break;            }            case 81: {              InterquartileRange = input.ReadDouble();              break;            }            case 89: {              StandardError = input.ReadDouble();              break;            }            case 97: {              Variance = input.ReadDouble();              break;            }            case 105: {              StandardDeviation = input.ReadDouble();              break;            }            case 113: {              Skewness = input.ReadDouble();              break;            }            case 121: {              Kurtosis = input.ReadDouble();              break;            }            case 401: {              P0 = input.ReadDouble();              break;            }            case 409: {              P25 = input.ReadDouble();              break;            }            case 417: {              P50 = input.ReadDouble();              break;            }            case 425: {              P67 = input.ReadDouble();              break;            }            case 433: {              P80 = input.ReadDouble();              break;            }            case 441: {              P85 = input.ReadDouble();              break;            }            case 449: {              P90 = input.ReadDouble();              break;            }            case 457: {              P95 = input.ReadDouble();              break;            }            case 465: {              P100 = input.ReadDouble();              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              TestCount = input.ReadInt32();              break;            }            case 17: {              Mean = input.ReadDouble();              break;            }            case 25: {              Min = input.ReadDouble();              break;            }            case 33: {              Max = input.ReadDouble();              break;            }            case 41: {              Median = input.ReadDouble();              break;            }            case 49: {              LowerFence = input.ReadDouble();              break;            }            case 57: {              UpperFence = input.ReadDouble();              break;            }            case 65: {              Q1 = input.ReadDouble();              break;            }            case 73: {              Q3 = input.ReadDouble();              break;            }            case 81: {              InterquartileRange = input.ReadDouble();              break;            }            case 89: {              StandardError = input.ReadDouble();              break;            }            case 97: {              Variance = input.ReadDouble();              break;            }            case 105: {              StandardDeviation = input.ReadDouble();              break;            }            case 113: {              Skewness = input.ReadDouble();              break;            }            case 121: {              Kurtosis = input.ReadDouble();              break;            }            case 401: {              P0 = input.ReadDouble();              break;            }            case 409: {              P25 = input.ReadDouble();              break;            }            case 417: {              P50 = input.ReadDouble();              break;            }            case 425: {              P67 = input.ReadDouble();              break;            }            case 433: {              P80 = input.ReadDouble();              break;            }            case 441: {              P85 = input.ReadDouble();              break;            }            case 449: {              P90 = input.ReadDouble();              break;            }            case 457: {              P95 = input.ReadDouble();              break;            }            case 465: {              P100 = input.ReadDouble();              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              TestCount = input.ReadInt32();              break;            }            case 17: {              Mean = input.ReadDouble();              break;            }            case 25: {              Min = input.ReadDouble();              break;            }            case 33: {              Max = input.ReadDouble();              break;            }            case 41: {              Median = input.ReadDouble();              break;            }            case 49: {              LowerFence = input.ReadDouble();              break;            }            case 57: {              UpperFence = input.ReadDouble();              break;            }            case 65: {              Q1 = input.ReadDouble();              break;            }            case 73: {              Q3 = input.ReadDouble();              break;            }            case 81: {              InterquartileRange = input.ReadDouble();              break;            }            case 89: {              StandardError = input.ReadDouble();              break;            }            case 97: {              Variance = input.ReadDouble();              break;            }            case 105: {              StandardDeviation = input.ReadDouble();              break;            }            case 113: {              Skewness = input.ReadDouble();              break;            }            case 121: {              Kurtosis = input.ReadDouble();              break;            }            case 401: {              P0 = input.ReadDouble();              break;            }            case 409: {              P25 = input.ReadDouble();              break;            }            case 417: {              P50 = input.ReadDouble();              break;            }            case 425: {              P67 = input.ReadDouble();              break;            }            case 433: {              P80 = input.ReadDouble();              break;            }            case 441: {              P85 = input.ReadDouble();              break;            }            case 449: {              P90 = input.ReadDouble();              break;            }            case 457: {              P95 = input.ReadDouble();              break;            }            case 465: {              P100 = input.ReadDouble();              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              TestCount = input.ReadInt32();              break;            }            case 17: {              Mean = input.ReadDouble();              break;            }            case 25: {              Min = input.ReadDouble();              break;            }            case 33: {              Max = input.ReadDouble();              break;            }            case 41: {              Median = input.ReadDouble();              break;            }            case 49: {              LowerFence = input.ReadDouble();              break;            }            case 57: {              UpperFence = input.ReadDouble();              break;            }            case 65: {              Q1 = input.ReadDouble();              break;            }            case 73: {              Q3 = input.ReadDouble();              break;            }            case 81: {              InterquartileRange = input.ReadDouble();              break;            }            case 89: {              StandardError = input.ReadDouble();              break;            }            case 97: {              Variance = input.ReadDouble();              break;            }            case 105: {              StandardDeviation = input.ReadDouble();              break;            }            case 113: {              Skewness = input.ReadDouble();              break;            }            case 121: {              Kurtosis = input.ReadDouble();              break;            }            case 401: {              P0 = input.ReadDouble();              break;            }            case 409: {              P25 = input.ReadDouble();              break;            }            case 417: {              P50 = input.ReadDouble();              break;            }            case 425: {              P67 = input.ReadDouble();              break;            }            case 433: {              P80 = input.ReadDouble();              break;            }            case 441: {              P85 = input.ReadDouble();              break;            }            case 449: {              P90 = input.ReadDouble();              break;            }            case 457: {              P95 = input.ReadDouble();              break;            }            case 465: {              P100 = input.ReadDouble();              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              TestCount = input.ReadInt32();              break;            }            case 17: {              Mean = input.ReadDouble();              break;            }            case 25: {              Min = input.ReadDouble();              break;            }            case 33: {              Max = input.ReadDouble();              break;            }            case 41: {              Median = input.ReadDouble();              break;            }            case 49: {              LowerFence = input.ReadDouble();              break;            }            case 57: {              UpperFence = input.ReadDouble();              break;            }            case 65: {              Q1 = input.ReadDouble();              break;            }            case 73: {              Q3 = input.ReadDouble();              break;            }            case 81: {              InterquartileRange = input.ReadDouble();              break;            }            case 89: {              StandardError = input.ReadDouble();              break;            }            case 97: {              Variance = input.ReadDouble();              break;            }            case 105: {              StandardDeviation = input.ReadDouble();              break;            }            case 113: {              Skewness = input.ReadDouble();              break;            }            case 121: {              Kurtosis = input.ReadDouble();              break;            }            case 401: {              P0 = input.ReadDouble();              break;            }            case 409: {              P25 = input.ReadDouble();              break;            }            case 417: {              P50 = input.ReadDouble();              break;            }            case 425: {              P67 = input.ReadDouble();              break;            }            case 433: {              P80 = input.ReadDouble();              break;            }            case 441: {              P85 = input.ReadDouble();              break;            }            case 449: {              P90 = input.ReadDouble();              break;            }            case 457: {              P95 = input.ReadDouble();              break;            }            case 465: {              P100 = input.ReadDouble();              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              TestCount = input.ReadInt32();              break;            }            case 17: {              Mean = input.ReadDouble();              break;            }            case 25: {              Min = input.ReadDouble();              break;            }            case 33: {              Max = input.ReadDouble();              break;            }            case 41: {              Median = input.ReadDouble();              break;            }            case 49: {              LowerFence = input.ReadDouble();              break;            }            case 57: {              UpperFence = input.ReadDouble();              break;            }            case 65: {              Q1 = input.ReadDouble();              break;            }            case 73: {              Q3 = input.ReadDouble();              break;            }            case 81: {              InterquartileRange = input.ReadDouble();              break;            }            case 89: {              StandardError = input.ReadDouble();              break;            }            case 97: {              Variance = input.ReadDouble();              break;            }            case 105: {              StandardDeviation = input.ReadDouble();              break;            }            case 113: {              Skewness = input.ReadDouble();              break;            }            case 121: {              Kurtosis = input.ReadDouble();              break;            }            case 401: {              P0 = input.ReadDouble();              break;            }            case 409: {              P25 = input.ReadDouble();              break;            }            case 417: {              P50 = input.ReadDouble();              break;            }            case 425: {              P67 = input.ReadDouble();              break;            }            case 433: {              P80 = input.ReadDouble();              break;            }            case 441: {              P85 = input.ReadDouble();              break;            }            case 449: {              P90 = input.ReadDouble();              break;            }            case 457: {              P95 = input.ReadDouble();              break;            }            case 465: {              P100 = input.ReadDouble();              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              TestCount = input.ReadInt32();              break;            }            case 17: {              Mean = input.ReadDouble();              break;            }            case 25: {              Min = input.ReadDouble();              break;            }            case 33: {              Max = input.ReadDouble();              break;            }            case 41: {              Median = input.ReadDouble();              break;            }            case 49: {              LowerFence = input.ReadDouble();              break;            }            case 57: {              UpperFence = input.ReadDouble();              break;            }            case 65: {              Q1 = input.ReadDouble();              break;            }            case 73: {              Q3 = input.ReadDouble();              break;            }            case 81: {              InterquartileRange = input.ReadDouble();              break;            }            case 89: {              StandardError = input.ReadDouble();              break;            }            case 97: {              Variance = input.ReadDouble();              break;            }            case 105: {              StandardDeviation = input.ReadDouble();              break;            }            case 113: {              Skewness = input.ReadDouble();              break;            }            case 121: {              Kurtosis = input.ReadDouble();              break;            }            case 401: {              P0 = input.ReadDouble();              break;            }            case 409: {              P25 = input.ReadDouble();              break;            }            case 417: {              P50 = input.ReadDouble();              break;            }            case 425: {              P67 = input.ReadDouble();              break;            }            case 433: {              P80 = input.ReadDouble();              break;            }            case 441: {              P85 = input.ReadDouble();              break;            }            case 449: {              P90 = input.ReadDouble();              break;            }            case 457: {              P95 = input.ReadDouble();              break;            }            case 465: {              P100 = input.ReadDouble();              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              TestCount = input.ReadInt32();              break;            }            case 17: {              Mean = input.ReadDouble();              break;            }            case 25: {              Min = input.ReadDouble();              break;            }            case 33: {              Max = input.ReadDouble();              break;            }            case 41: {              Median = input.ReadDouble();              break;            }            case 49: {              LowerFence = input.ReadDouble();              break;            }            case 57: {              UpperFence = input.ReadDouble();              break;            }            case 65: {              Q1 = input.ReadDouble();              break;            }            case 73: {              Q3 = input.ReadDouble();              break;            }            case 81: {              InterquartileRange = input.ReadDouble();              break;            }            case 89: {              StandardError = input.ReadDouble();              break;            }            case 97: {              Variance = input.ReadDouble();              break;            }            case 105: {              StandardDeviation = input.ReadDouble();              break;            }            case 113: {              Skewness = input.ReadDouble();              break;            }            case 121: {              Kurtosis = input.ReadDouble();              break;            }            case 401: {              P0 = input.ReadDouble();              break;            }            case 409: {              P25 = input.ReadDouble();              break;            }            case 417: {              P50 = input.ReadDouble();              break;            }            case 425: {              P67 = input.ReadDouble();              break;            }            case 433: {              P80 = input.ReadDouble();              break;            }            case 441: {              P85 = input.ReadDouble();              break;            }            case 449: {              P90 = input.ReadDouble();              break;            }            case 457: {              P95 = input.ReadDouble();              break;            }            case 465: {              P100 = input.ReadDouble();              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              TestCount = input.ReadInt32();              break;            }            case 17: {              Mean = input.ReadDouble();              break;            }            case 25: {              Min = input.ReadDouble();              break;            }            case 33: {              Max = input.ReadDouble();              break;            }            case 41: {              Median = input.ReadDouble();              break;            }            case 49: {              LowerFence = input.ReadDouble();              break;            }            case 57: {              UpperFence = input.ReadDouble();              break;            }            case 65: {              Q1 = input.ReadDouble();              break;            }            case 73: {              Q3 = input.ReadDouble();              break;            }            case 81: {              InterquartileRange = input.ReadDouble();              break;            }            case 89: {              StandardError = input.ReadDouble();              break;            }            case 97: {              Variance = input.ReadDouble();              break;            }            case 105: {              StandardDeviation = input.ReadDouble();              break;            }            case 113: {              Skewness = input.ReadDouble();              break;            }            case 121: {              Kurtosis = input.ReadDouble();              break;            }            case 401: {              P0 = input.ReadDouble();              break;            }            case 409: {              P25 = input.ReadDouble();              break;            }            case 417: {              P50 = input.ReadDouble();              break;            }            case 425: {              P67 = input.ReadDouble();              break;            }            case 433: {              P80 = input.ReadDouble();              break;            }            case 441: {              P85 = input.ReadDouble();              break;            }            case 449: {              P90 = input.ReadDouble();              break;            }            case 457: {              P95 = input.ReadDouble();              break;            }            case 465: {              P100 = input.ReadDouble();              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              TestCount = input.ReadInt32();              break;            }            case 17: {              Mean = input.ReadDouble();              break;            }            case 25: {              Min = input.ReadDouble();              break;            }            case 33: {              Max = input.ReadDouble();              break;            }            case 41: {              Median = input.ReadDouble();              break;            }            case 49: {              LowerFence = input.ReadDouble();              break;            }            case 57: {              UpperFence = input.ReadDouble();              break;            }            case 65: {              Q1 = input.ReadDouble();              break;            }            case 73: {              Q3 = input.ReadDouble();              break;            }            case 81: {              InterquartileRange = input.ReadDouble();              break;            }            case 89: {              StandardError = input.ReadDouble();              break;            }            case 97: {              Variance = input.ReadDouble();              break;            }            case 105: {              StandardDeviation = input.ReadDouble();              break;            }            case 113: {              Skewness = input.ReadDouble();              break;            }            case 121: {              Kurtosis = input.ReadDouble();              break;            }            case 401: {              P0 = input.ReadDouble();              break;            }            case 409: {              P25 = input.ReadDouble();              break;            }            case 417: {              P50 = input.ReadDouble();              break;            }            case 425: {              P67 = input.ReadDouble();              break;            }            case 433: {              P80 = input.ReadDouble();              break;            }            case 441: {              P85 = input.ReadDouble();              break;            }            case 449: {              P90 = input.ReadDouble();              break;            }            case 457: {              P95 = input.ReadDouble();              break;            }            case 465: {              P100 = input.ReadDouble();              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              TestCount = input.ReadInt32();              break;            }            case 17: {              Mean = input.ReadDouble();              break;            }            case 25: {              Min = input.ReadDouble();              break;            }            case 33: {              Max = input.ReadDouble();              break;            }            case 41: {              Median = input.ReadDouble();              break;            }            case 49: {              LowerFence = input.ReadDouble();              break;            }            case 57: {              UpperFence = input.ReadDouble();              break;            }            case 65: {              Q1 = input.ReadDouble();              break;            }            case 73: {              Q3 = input.ReadDouble();              break;            }            case 81: {              InterquartileRange = input.ReadDouble();              break;            }            case 89: {              StandardError = input.ReadDouble();              break;            }            case 97: {              Variance = input.ReadDouble();              break;            }            case 105: {              StandardDeviation = input.ReadDouble();              break;            }            case 113: {              Skewness = input.ReadDouble();              break;            }            case 121: {              Kurtosis = input.ReadDouble();              break;            }            case 401: {              P0 = input.ReadDouble();              break;            }            case 409: {              P25 = input.ReadDouble();              break;            }            case 417: {              P50 = input.ReadDouble();              break;            }            case 425: {              P67 = input.ReadDouble();              break;            }            case 433: {              P80 = input.ReadDouble();              break;            }            case 441: {              P85 = input.ReadDouble();              break;            }            case 449: {              P90 = input.ReadDouble();              break;            }            case 457: {              P95 = input.ReadDouble();              break;            }            case 465: {              P100 = input.ReadDouble();              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              TestCount = input.ReadInt32();              break;            }            case 17: {              Mean = input.ReadDouble();              break;            }            case 25: {              Min = input.ReadDouble();              break;            }            case 33: {              Max = input.ReadDouble();              break;            }            case 41: {              Median = input.ReadDouble();              break;            }            case 49: {              LowerFence = input.ReadDouble();              break;            }            case 57: {              UpperFence = input.ReadDouble();              break;            }            case 65: {              Q1 = input.ReadDouble();              break;            }            case 73: {              Q3 = input.ReadDouble();              break;            }            case 81: {              InterquartileRange = input.ReadDouble();              break;            }            case 89: {              StandardError = input.ReadDouble();              break;            }            case 97: {              Variance = input.ReadDouble();              break;            }            case 105: {              StandardDeviation = input.ReadDouble();              break;            }            case 113: {              Skewness = input.ReadDouble();              break;            }            case 121: {              Kurtosis = input.ReadDouble();              break;            }            case 401: {              P0 = input.ReadDouble();              break;            }            case 409: {              P25 = input.ReadDouble();              break;            }            case 417: {              P50 = input.ReadDouble();              break;            }            case 425: {              P67 = input.ReadDouble();              break;            }            case 433: {              P80 = input.ReadDouble();              break;            }            case 441: {              P85 = input.ReadDouble();              break;            }            case 449: {              P90 = input.ReadDouble();              break;            }            case 457: {              P95 = input.ReadDouble();              break;            }            case 465: {              P100 = input.ReadDouble();              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              TestCount = input.ReadInt32();              break;            }            case 17: {              Mean = input.ReadDouble();              break;            }            case 25: {              Min = input.ReadDouble();              break;            }            case 33: {              Max = input.ReadDouble();              break;            }            case 41: {              Median = input.ReadDouble();              break;            }            case 49: {              LowerFence = input.ReadDouble();              break;            }            case 57: {              UpperFence = input.ReadDouble();              break;            }            case 65: {              Q1 = input.ReadDouble();              break;            }            case 73: {              Q3 = input.ReadDouble();              break;            }            case 81: {              InterquartileRange = input.ReadDouble();              break;            }            case 89: {              StandardError = input.ReadDouble();              break;            }            case 97: {              Variance = input.ReadDouble();              break;            }            case 105: {              StandardDeviation = input.ReadDouble();              break;            }            case 113: {              Skewness = input.ReadDouble();              break;            }            case 121: {              Kurtosis = input.ReadDouble();              break;            }            case 401: {              P0 = input.ReadDouble();              break;            }            case 409: {              P25 = input.ReadDouble();              break;            }            case 417: {              P50 = input.ReadDouble();              break;            }            case 425: {              P67 = input.ReadDouble();              break;            }            case 433: {              P80 = input.ReadDouble();              break;            }            case 441: {              P85 = input.ReadDouble();              break;            }            case 449: {              P90 = input.ReadDouble();              break;            }            case 457: {              P95 = input.ReadDouble();              break;            }            case 465: {              P100 = input.ReadDouble();              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              TestCount = input.ReadInt32();              break;            }            case 17: {              Mean = input.ReadDouble();              break;            }            case 25: {              Min = input.ReadDouble();              break;            }            case 33: {              Max = input.ReadDouble();              break;            }            case 41: {              Median = input.ReadDouble();              break;            }            case 49: {              LowerFence = input.ReadDouble();              break;            }            case 57: {              UpperFence = input.ReadDouble();              break;            }            case 65: {              Q1 = input.ReadDouble();              break;            }            case 73: {              Q3 = input.ReadDouble();              break;            }            case 81: {              InterquartileRange = input.ReadDouble();              break;            }            case 89: {              StandardError = input.ReadDouble();              break;            }            case 97: {              Variance = input.ReadDouble();              break;            }            case 105: {              StandardDeviation = input.ReadDouble();              break;            }            case 113: {              Skewness = input.ReadDouble();              break;            }            case 121: {              Kurtosis = input.ReadDouble();              break;            }            case 401: {              P0 = input.ReadDouble();              break;            }            case 409: {              P25 = input.ReadDouble();              break;            }            case 417: {              P50 = input.ReadDouble();              break;            }            case 425: {              P67 = input.ReadDouble();              break;            }            case 433: {              P80 = input.ReadDouble();              break;            }            case 441: {              P85 = input.ReadDouble();              break;            }            case 449: {              P90 = input.ReadDouble();              break;            }            case 457: {              P95 = input.ReadDouble();              break;            }            case 465: {              P100 = input.ReadDouble();              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              TestCount = input.ReadInt32();              break;            }            case 17: {              Mean = input.ReadDouble();              break;            }            case 25: {              Min = input.ReadDouble();              break;            }            case 33: {              Max = input.ReadDouble();              break;            }            case 41: {              Median = input.ReadDouble();              break;            }            case 49: {              LowerFence = input.ReadDouble();              break;            }            case 57: {              UpperFence = input.ReadDouble();              break;            }            case 65: {              Q1 = input.ReadDouble();              break;            }            case 73: {              Q3 = input.ReadDouble();              break;            }            case 81: {              InterquartileRange = input.ReadDouble();              break;            }            case 89: {              StandardError = input.ReadDouble();              break;            }            case 97: {              Variance = input.ReadDouble();              break;            }            case 105: {              StandardDeviation = input.ReadDouble();              break;            }            case 113: {              Skewness = input.ReadDouble();              break;            }            case 121: {              Kurtosis = input.ReadDouble();              break;            }            case 401: {              P0 = input.ReadDouble();              break;            }            case 409: {              P25 = input.ReadDouble();              break;            }            case 417: {              P50 = input.ReadDouble();              break;            }            case 425: {              P67 = input.ReadDouble();              break;            }            case 433: {              P80 = input.ReadDouble();              break;            }            case 441: {              P85 = input.ReadDouble();              break;            }            case 449: {              P90 = input.ReadDouble();              break;            }            case 457: {              P95 = input.ReadDouble();              break;            }            case 465: {              P100 = input.ReadDouble();              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              TestCount = input.ReadInt32();              break;            }            case 17: {              Mean = input.ReadDouble();              break;            }            case 25: {              Min = input.ReadDouble();              break;            }            case 33: {              Max = input.ReadDouble();              break;            }            case 41: {              Median = input.ReadDouble();              break;            }            case 49: {              LowerFence = input.ReadDouble();              break;            }            case 57: {              UpperFence = input.ReadDouble();              break;            }            case 65: {              Q1 = input.ReadDouble();              break;            }            case 73: {              Q3 = input.ReadDouble();              break;            }            case 81: {              InterquartileRange = input.ReadDouble();              break;            }            case 89: {              StandardError = input.ReadDouble();              break;            }            case 97: {              Variance = input.ReadDouble();              break;            }            case 105: {              StandardDeviation = input.ReadDouble();              break;            }            case 113: {              Skewness = input.ReadDouble();              break;            }            case 121: {              Kurtosis = input.ReadDouble();              break;            }            case 401: {              P0 = input.ReadDouble();              break;            }            case 409: {              P25 = input.ReadDouble();              break;            }            case 417: {              P50 = input.ReadDouble();              break;            }            case 425: {              P67 = input.ReadDouble();              break;            }            case 433: {              P80 = input.ReadDouble();              break;            }            case 441: {              P85 = input.ReadDouble();              break;            }            case 449: {              P90 = input.ReadDouble();              break;            }            case 457: {              P95 = input.ReadDouble();              break;            }            case 465: {              P100 = input.ReadDouble();              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              TestCount = input.ReadInt32();              break;            }            case 17: {              Mean = input.ReadDouble();              break;            }            case 25: {              Min = input.ReadDouble();              break;            }            case 33: {              Max = input.ReadDouble();              break;            }            case 41: {              Median = input.ReadDouble();              break;            }            case 49: {              LowerFence = input.ReadDouble();              break;            }            case 57: {              UpperFence = input.ReadDouble();              break;            }            case 65: {              Q1 = input.ReadDouble();              break;            }            case 73: {              Q3 = input.ReadDouble();              break;            }            case 81: {              InterquartileRange = input.ReadDouble();              break;            }            case 89: {              StandardError = input.ReadDouble();              break;            }            case 97: {              Variance = input.ReadDouble();              break;            }            case 105: {              StandardDeviation = input.ReadDouble();              break;            }            case 113: {              Skewness = input.ReadDouble();              break;            }            case 121: {              Kurtosis = input.ReadDouble();              break;            }            case 401: {              P0 = input.ReadDouble();              break;            }            case 409: {              P25 = input.ReadDouble();              break;            }            case 417: {              P50 = input.ReadDouble();              break;            }            case 425: {              P67 = input.ReadDouble();              break;            }            case 433: {              P80 = input.ReadDouble();              break;            }            case 441: {              P85 = input.ReadDouble();              break;            }            case 449: {              P90 = input.ReadDouble();              break;            }            case 457: {              P95 = input.ReadDouble();              break;            }            case 465: {              P100 = input.ReadDouble();              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              TestCount = input.ReadInt32();              break;            }            case 17: {              Mean = input.ReadDouble();              break;            }            case 25: {              Min = input.ReadDouble();              break;            }            case 33: {              Max = input.ReadDouble();              break;            }            case 41: {              Median = input.ReadDouble();              break;            }            case 49: {              LowerFence = input.ReadDouble();              break;            }            case 57: {              UpperFence = input.ReadDouble();              break;            }            case 65: {              Q1 = input.ReadDouble();              break;            }            case 73: {              Q3 = input.ReadDouble();              break;            }            case 81: {              InterquartileRange = input.ReadDouble();              break;            }            case 89: {              StandardError = input.ReadDouble();              break;            }            case 97: {              Variance = input.ReadDouble();              break;            }            case 105: {              StandardDeviation = input.ReadDouble();              break;            }            case 113: {              Skewness = input.ReadDouble();              break;            }            case 121: {              Kurtosis = input.ReadDouble();              break;            }            case 401: {              P0 = input.ReadDouble();              break;            }            case 409: {              P25 = input.ReadDouble();              break;            }            case 417: {              P50 = input.ReadDouble();              break;            }            case 425: {              P67 = input.ReadDouble();              break;            }            case 433: {              P80 = input.ReadDouble();              break;            }            case 441: {              P85 = input.ReadDouble();              break;            }            case 449: {              P90 = input.ReadDouble();              break;            }            case 457: {              P95 = input.ReadDouble();              break;            }            case 465: {              P100 = input.ReadDouble();              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              TestCount = input.ReadInt32();              break;            }            case 17: {              Mean = input.ReadDouble();              break;            }            case 25: {              Min = input.ReadDouble();              break;            }            case 33: {              Max = input.ReadDouble();              break;            }            case 41: {              Median = input.ReadDouble();              break;            }            case 49: {              LowerFence = input.ReadDouble();              break;            }            case 57: {              UpperFence = input.ReadDouble();              break;            }            case 65: {              Q1 = input.ReadDouble();              break;            }            case 73: {              Q3 = input.ReadDouble();              break;            }            case 81: {              InterquartileRange = input.ReadDouble();              break;            }            case 89: {              StandardError = input.ReadDouble();              break;            }            case 97: {              Variance = input.ReadDouble();              break;            }            case 105: {              StandardDeviation = input.ReadDouble();              break;            }            case 113: {              Skewness = input.ReadDouble();              break;            }            case 121: {              Kurtosis = input.ReadDouble();              break;            }            case 401: {              P0 = input.ReadDouble();              break;            }            case 409: {              P25 = input.ReadDouble();              break;            }            case 417: {              P50 = input.ReadDouble();              break;            }            case 425: {              P67 = input.ReadDouble();              break;            }            case 433: {              P80 = input.ReadDouble();              break;            }            case 441: {              P85 = input.ReadDouble();              break;            }            case 449: {              P90 = input.ReadDouble();              break;            }            case 457: {              P95 = input.ReadDouble();              break;            }            case 465: {              P100 = input.ReadDouble();              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              TestCount = input.ReadInt32();              break;            }            case 17: {              Mean = input.ReadDouble();              break;            }            case 25: {              Min = input.ReadDouble();              break;            }            case 33: {              Max = input.ReadDouble();              break;            }            case 41: {              Median = input.ReadDouble();              break;            }            case 49: {              LowerFence = input.ReadDouble();              break;            }            case 57: {              UpperFence = input.ReadDouble();              break;            }            case 65: {              Q1 = input.ReadDouble();              break;            }            case 73: {              Q3 = input.ReadDouble();              break;            }            case 81: {              InterquartileRange = input.ReadDouble();              break;            }            case 89: {              StandardError = input.ReadDouble();              break;            }            case 97: {              Variance = input.ReadDouble();              break;            }            case 105: {              StandardDeviation = input.ReadDouble();              break;            }            case 113: {              Skewness = input.ReadDouble();              break;            }            case 121: {              Kurtosis = input.ReadDouble();              break;            }            case 401: {              P0 = input.ReadDouble();              break;            }            case 409: {              P25 = input.ReadDouble();              break;            }            case 417: {              P50 = input.ReadDouble();              break;            }            case 425: {              P67 = input.ReadDouble();              break;            }            case 433: {              P80 = input.ReadDouble();              break;            }            case 441: {              P85 = input.ReadDouble();              break;            }            case 449: {              P90 = input.ReadDouble();              break;            }            case 457: {              P95 = input.ReadDouble();              break;            }            case 465: {              P100 = input.ReadDouble();              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              TestCount = input.ReadInt32();              break;            }            case 17: {              Mean = input.ReadDouble();              break;            }            case 25: {              Min = input.ReadDouble();              break;            }            case 33: {              Max = input.ReadDouble();              break;            }            case 41: {              Median = input.ReadDouble();              break;            }            case 49: {              LowerFence = input.ReadDouble();              break;            }            case 57: {              UpperFence = input.ReadDouble();              break;            }            case 65: {              Q1 = input.ReadDouble();              break;            }            case 73: {              Q3 = input.ReadDouble();              break;            }            case 81: {              InterquartileRange = input.ReadDouble();              break;            }            case 89: {              StandardError = input.ReadDouble();              break;            }            case 97: {              Variance = input.ReadDouble();              break;            }            case 105: {              StandardDeviation = input.ReadDouble();              break;            }            case 113: {              Skewness = input.ReadDouble();              break;            }            case 121: {              Kurtosis = input.ReadDouble();              break;            }            case 401: {              P0 = input.ReadDouble();              break;            }            case 409: {              P25 = input.ReadDouble();              break;            }            case 417: {              P50 = input.ReadDouble();              break;            }            case 425: {              P67 = input.ReadDouble();              break;            }            case 433: {              P80 = input.ReadDouble();              break;            }            case 441: {              P85 = input.ReadDouble();              break;            }            case 449: {              P90 = input.ReadDouble();              break;            }            case 457: {              P95 = input.ReadDouble();              break;            }            case 465: {              P100 = input.ReadDouble();              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              TestCount = input.ReadInt32();              break;            }            case 17: {              Mean = input.ReadDouble();              break;            }            case 25: {              Min = input.ReadDouble();              break;            }            case 33: {              Max = input.ReadDouble();              break;            }            case 41: {              Median = input.ReadDouble();              break;            }            case 49: {              LowerFence = input.ReadDouble();              break;            }            case 57: {              UpperFence = input.ReadDouble();              break;            }            case 65: {              Q1 = input.ReadDouble();              break;            }            case 73: {              Q3 = input.ReadDouble();              break;            }            case 81: {              InterquartileRange = input.ReadDouble();              break;            }            case 89: {              StandardError = input.ReadDouble();              break;            }            case 97: {              Variance = input.ReadDouble();              break;            }            case 105: {              StandardDeviation = input.ReadDouble();              break;            }            case 113: {              Skewness = input.ReadDouble();              break;            }            case 121: {              Kurtosis = input.ReadDouble();              break;            }            case 401: {              P0 = input.ReadDouble();              break;            }            case 409: {              P25 = input.ReadDouble();              break;            }            case 417: {              P50 = input.ReadDouble();              break;            }            case 425: {              P67 = input.ReadDouble();              break;            }            case 433: {              P80 = input.ReadDouble();              break;            }            case 441: {              P85 = input.ReadDouble();              break;            }            case 449: {              P90 = input.ReadDouble();              break;            }            case 457: {              P95 = input.ReadDouble();              break;            }            case 465: {              P100 = input.ReadDouble();              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              TestCount = input.ReadInt32();              break;            }            case 17: {              Mean = input.ReadDouble();              break;            }            case 25: {              Min = input.ReadDouble();              break;            }            case 33: {              Max = input.ReadDouble();              break;            }            case 41: {              Median = input.ReadDouble();              break;            }            case 49: {              LowerFence = input.ReadDouble();              break;            }            case 57: {              UpperFence = input.ReadDouble();              break;            }            case 65: {              Q1 = input.ReadDouble();              break;            }            case 73: {              Q3 = input.ReadDouble();              break;            }            case 81: {              InterquartileRange = input.ReadDouble();              break;            }            case 89: {              StandardError = input.ReadDouble();              break;            }            case 97: {              Variance = input.ReadDouble();              break;            }            case 105: {              StandardDeviation = input.ReadDouble();              break;            }            case 113: {              Skewness = input.ReadDouble();              break;            }            case 121: {              Kurtosis = input.ReadDouble();              break;            }            case 401: {              P0 = input.ReadDouble();              break;            }            case 409: {              P25 = input.ReadDouble();              break;            }            case 417: {              P50 = input.ReadDouble();              break;            }            case 425: {              P67 = input.ReadDouble();              break;            }            case 433: {              P80 = input.ReadDouble();              break;            }            case 441: {              P85 = input.ReadDouble();              break;            }            case 449: {              P90 = input.ReadDouble();              break;            }            case 457: {              P95 = input.ReadDouble();              break;            }            case 465: {              P100 = input.ReadDouble();              break;            }          }        }
Magic Number,NodaTime.Benchmarks,Statistics,C:\repos\nodatime_nodatime\build\BenchmarkUploader\BenchmarkProtos.cs,MergeFrom,The following statement contains a magic number: while ((tag = input.ReadTag()) != 0) {          switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              TestCount = input.ReadInt32();              break;            }            case 17: {              Mean = input.ReadDouble();              break;            }            case 25: {              Min = input.ReadDouble();              break;            }            case 33: {              Max = input.ReadDouble();              break;            }            case 41: {              Median = input.ReadDouble();              break;            }            case 49: {              LowerFence = input.ReadDouble();              break;            }            case 57: {              UpperFence = input.ReadDouble();              break;            }            case 65: {              Q1 = input.ReadDouble();              break;            }            case 73: {              Q3 = input.ReadDouble();              break;            }            case 81: {              InterquartileRange = input.ReadDouble();              break;            }            case 89: {              StandardError = input.ReadDouble();              break;            }            case 97: {              Variance = input.ReadDouble();              break;            }            case 105: {              StandardDeviation = input.ReadDouble();              break;            }            case 113: {              Skewness = input.ReadDouble();              break;            }            case 121: {              Kurtosis = input.ReadDouble();              break;            }            case 401: {              P0 = input.ReadDouble();              break;            }            case 409: {              P25 = input.ReadDouble();              break;            }            case 417: {              P50 = input.ReadDouble();              break;            }            case 425: {              P67 = input.ReadDouble();              break;            }            case 433: {              P80 = input.ReadDouble();              break;            }            case 441: {              P85 = input.ReadDouble();              break;            }            case 449: {              P90 = input.ReadDouble();              break;            }            case 457: {              P95 = input.ReadDouble();              break;            }            case 465: {              P100 = input.ReadDouble();              break;            }          }        }
Magic Number,BenchmarkUploader,Program,C:\repos\nodatime_nodatime\build\BenchmarkUploader\Program.cs,Main,The following statement contains a magic number: if (args.Length != 3)              {                  Console.WriteLine("Arguments: <results root directory> <bucket> <object prefix>");                  return 1;              }
Magic Number,BenchmarkUploader,Program,C:\repos\nodatime_nodatime\build\BenchmarkUploader\Program.cs,Main,The following statement contains a magic number: try              {                  MainImpl(args[0]' args[1]' args[2]);                  return 0;              }              catch (Exception e)              {                  Console.WriteLine($"Error: {e}");                  return 1;              }
