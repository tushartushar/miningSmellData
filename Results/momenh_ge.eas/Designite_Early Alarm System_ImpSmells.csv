Implementation smell,Namespace,Class,File,Method,Description
Complex Method,EarlyAlarmSystem.Alarms,AlarmsFactory,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Alarms\AlarmsFactory.cs,GenerateAlarm,Cyclomatic complexity of the method is 9
Complex Method,EarlyAlarmSystem.Alarms,AlarmBase,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Alarms\AlarmBase.cs,checkingThread,Cyclomatic complexity of the method is 9
Complex Method,EarlyAlarmSystem.Database,AlarmsBD,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Database\Alarms.cs,IsAlarmValue,Cyclomatic complexity of the method is 20
Complex Method,EarlyAlarmSystem.Network,SMSSender_Resalty,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\SMSSender_Resalty.cs,sendSMS,Cyclomatic complexity of the method is 8
Complex Method,EarlyAlarmSystem.Network,NetworkHandler,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkHandler.cs,HandleIncommingNetowrkCommunication,Cyclomatic complexity of the method is 11
Complex Method,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,Cyclomatic complexity of the method is 17
Complex Method,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,saveNetworkPacketToDB,Cyclomatic complexity of the method is 21
Complex Method,EarlyAlarmSystem,Program,C:\repos\momenh_ge.eas\server\Early Alarm System\Program.cs,Main,Cyclomatic complexity of the method is 11
Long Parameter List,EarlyAlarmSystem.Database,AlarmsBD,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Database\Alarms.cs,AlarmsBD,The method has 8 parameters.
Long Parameter List,EarlyAlarmSystem.Database,VariablesDB,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Database\Variables.cs,VariablesDB,The method has 5 parameters.
Long Statement,EarlyAlarmSystem.Alarms,AlarmBase,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Alarms\AlarmBase.cs,getAlarmEmailMessage,The length of the statement  "	string message = string.Format ("Site [{0}] has a problem detected in alarm [{1}] - variable [{2}] : [{3}] - NEED YOUR IMMEDIATE ATTENTION"' site.SiteName' alarm.ID' alarm.TypeID' variables [0].Value); " is 201.
Long Statement,EarlyAlarmSystem.Alarms,AlarmBase,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Alarms\AlarmBase.cs,getAlarmSMSMessage,The length of the statement  "	string message = string.Format ("Site [{0}] has a problem detected in alarm [{1}] - variable [{2}] : [{3}] - NEED YOUR IMMEDIATE ATTENTION"' site.SiteName' alarm.ID' alarm.TypeID' variables [0].Value); " is 201.
Long Statement,EarlyAlarmSystem.Alarms,WaterInTemp,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Alarms\WaterInTemp.cs,getAlarmEmailMessage,The length of the statement  "		message = string.Format ("- a problem detected in Temprature Of In Water To Helium Compressor [{0}]"' variables [0].Value); " is 123.
Long Statement,EarlyAlarmSystem.Alarms,WaterOutTemprature,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Alarms\WaterOutTemprature.cs,getAlarmEmailMessage,The length of the statement  "		message = string.Format ("- a problem detected in Temprature Of Out Water From Helium Compressor [{0}]"' variables [0].Value); " is 126.
Long Statement,EarlyAlarmSystem.Database,AlarmsBD,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Database\Alarms.cs,GetAlarm,The length of the statement  "		AlarmsBD result = new AlarmsBD (alarmId' dt.Rows [0] ["TypeID"].ToString ()' (AlarmOperator)Enum.Parse (typeof(AlarmOperator)' dt.Rows [0] ["Operation"].ToString ()' true)' Convert.ToDouble (dt.Rows [0] ["AlarmValue"])' Convert.ToInt32 (dt.Rows [0] ["AlarmFreq"])' Convert.ToInt32 (dt.Rows [0] ["AlarmPeriod1"])' Convert.ToInt32 (dt.Rows [0] ["AlarmPeriod2"])' Convert.ToInt32 (dt.Rows [0] ["AlarmPeriod3"])); " is 409.
Long Statement,EarlyAlarmSystem.Database,AlarmsBD,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Database\Alarms.cs,GetAllAlarms,The length of the statement  "			result [i] = new AlarmsBD (dt.Rows [i] ["ID"].ToString ()' dt.Rows [i] ["TypeID"].ToString ()' (AlarmOperator)Enum.Parse (typeof(AlarmOperator)' dt.Rows [i] ["Operation"].ToString ()' true)' Convert.ToDouble (dt.Rows [i] ["AlarmValue"])' Convert.ToInt32 (dt.Rows [i] ["AlarmFreq"])' Convert.ToInt32 (dt.Rows [i] ["AlarmPeriod1"])' Convert.ToInt32 (dt.Rows [i] ["AlarmPeriod2"])' Convert.ToInt32 (dt.Rows [i] ["AlarmPeriod3"])); " is 427.
Long Statement,EarlyAlarmSystem.Database,SitesBD,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Database\Sites.cs,GetSite,The length of the statement  "		SitesBD result = new SitesBD (siteId' dt.Rows [0] ["SiteName"].ToString ()' dt.Rows [0] ["IdentificationNumber"].ToString ()); " is 126.
Long Statement,EarlyAlarmSystem.Database,SitesBD,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Database\Sites.cs,GetAllSites,The length of the statement  "			result [i] = new SitesBD (dt.Rows [i] ["ID"].ToString ()' dt.Rows [i] ["SiteName"].ToString ()' dt.Rows [i] ["IdentificationNumber"].ToString ()); " is 146.
Long Statement,EarlyAlarmSystem.Database,VariablesDB,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Database\Variables.cs,InsertNullVariable,The length of the statement  "	bool insertResult = db.executeInsert (string.Format ("Insert Into Variables (TypeID'SiteID'ReadDate'Value) Values ('{0}'''{1}'''{2}''NULL)"' typeId' siteID' readDate.ToString ("yyyy-MM-dd HH:mm:ss"))); " is 201.
Long Statement,EarlyAlarmSystem.Database,VariablesDB,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Database\Variables.cs,GetNewVariable,The length of the statement  "	bool insertResult = db.executeInsert (string.Format ("Insert Into Variables (TypeID'SiteID'ReadDate'Value) Values ('{0}'''{1}'''{2}''{3})"' typeId' siteID' readDate.ToString ("yyyy-MM-dd HH:mm:ss")' value)); " is 207.
Long Statement,EarlyAlarmSystem.Database,VariablesDB,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Database\Variables.cs,GetNewVariable,The length of the statement  "		DataTable dt = db.executeRead (string.Format ("Select ID From Variables Where TypeID = '{0}' AND SiteID = '{1}' AND ReadDate = '{2}' AND Value = {3}"' typeId' siteID' readDate.ToString ("yyyy-MM-dd HH:mm:ss")' value)); " is 218.
Long Statement,EarlyAlarmSystem.Database,VariablesDB,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Database\Variables.cs,GetVariable,The length of the statement  "		VariablesDB result = new VariablesDB (Convert.ToInt32 (dt.Rows [0] ["ID"])' dt.Rows [0] ["TypeID"].ToString ()' dt.Rows [0] ["SiteID"].ToString ()' Convert.ToDateTime (dt.Rows [0] ["ReadDate"])' Convert.ToDouble (dt.Rows [0] ["Value"])); " is 237.
Long Statement,EarlyAlarmSystem.Database,VariablesDB,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Database\Variables.cs,GetAllVariableBelongToTypeAndSite,The length of the statement  "	DataTable dt = db.executeRead ("Select * From Variables Where TypeID = '" + typeId + "' AND SiteID = '" + siteID + "'"); " is 120.
Long Statement,EarlyAlarmSystem.Database,VariablesDB,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Database\Variables.cs,GetAllVariableBelongToTypeAndSite,The length of the statement  "				result [i] = new VariablesDB (Convert.ToInt32 (dt.Rows [i] ["ID"])' typeId' siteID' Convert.ToDateTime (dt.Rows [i] ["ReadDate"])' Convert.ToDouble (dt.Rows [i] ["Value"])); " is 173.
Long Statement,EarlyAlarmSystem.Database,VariablesDB,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Database\Variables.cs,GetTop5VariableBelongToTypeAndSite,The length of the statement  "	DataTable dt = db.executeRead ("Select TOP 5 * From Variables Where TypeID = '" + typeId + "' AND SiteID = '" + siteID + "' ORDER BY ReadDate DESC"); " is 149.
Long Statement,EarlyAlarmSystem.Database,VariablesDB,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Database\Variables.cs,GetTop5VariableBelongToTypeAndSite,The length of the statement  "				result.Add (new VariablesDB (Convert.ToInt32 (dt.Rows [i] ["ID"])' typeId' siteID' Convert.ToDateTime (dt.Rows [i] ["ReadDate"])' Convert.ToDouble (dt.Rows [i] ["Value"]))); " is 173.
Long Statement,EarlyAlarmSystem.Database,VariablesDB,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Database\Variables.cs,GetTop5VariableBelongToTypeAndSite,The length of the statement  "				result.Add (new VariablesDB (Convert.ToInt32 (dt.Rows [i] ["ID"])' typeId' siteID' Convert.ToDateTime (dt.Rows [i] ["ReadDate"])' Convert.ToDouble (-101223568912))); " is 165.
Long Statement,EarlyAlarmSystem.Database,VariablesDB,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Database\Variables.cs,GetTop5VariableBelongToTypeAndSiteThatIsNotNULL,The length of the statement  "	DataTable dt = db.executeRead ("Select TOP 5 * From Variables Where TypeID = '" + typeId + "' AND SiteID = '" + siteID + "' AND Value IS NOT NULL ORDER BY ReadDate DESC"); " is 171.
Long Statement,EarlyAlarmSystem.Database,VariablesDB,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Database\Variables.cs,GetTop5VariableBelongToTypeAndSiteThatIsNotNULL,The length of the statement  "				result.Add (new VariablesDB (Convert.ToInt32 (dt.Rows [i] ["ID"])' typeId' siteID' Convert.ToDateTime (dt.Rows [i] ["ReadDate"])' Convert.ToDouble (dt.Rows [i] ["Value"]))); " is 173.
Long Statement,EarlyAlarmSystem.Log,Logger,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Log\Logger.cs,logInfo,The length of the statement  "			logFile.WriteLine (string.Format ("[{0}] - [Thread:{1}] - {2}"' DateTime.Now.ToString ()' System.Threading.Thread.CurrentThread.ManagedThreadId' msg)); " is 151.
Long Statement,EarlyAlarmSystem.Log,Logger,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Log\Logger.cs,logError,The length of the statement  "			logFile.WriteLine (string.Format ("[{0}] - [Thread:{1}] - {2}"' DateTime.Now.ToString ()' System.Threading.Thread.CurrentThread.ManagedThreadId' msg)); " is 151.
Long Statement,EarlyAlarmSystem.Network,SMSSender_Resalty,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\SMSSender_Resalty.cs,sendSMS,The length of the statement  "	if (System.Configuration.ConfigurationManager.AppSettings ["SendSMS"].Equals ("True"' StringComparison.OrdinalIgnoreCase)) { " is 124.
Long Statement,EarlyAlarmSystem.Network,SMSSender_Resalty,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\SMSSender_Resalty.cs,sendSMS,The length of the statement  "	if (System.Configuration.ConfigurationManager.AppSettings ["SendSMS"].Equals ("True"' StringComparison.OrdinalIgnoreCase)) { " is 124.
Long Statement,EarlyAlarmSystem.Network,EmailSMSHandler,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\EmailSMSHandler.cs,EmailsSenderTimer_Tick,The length of the statement  "					string message = string.Format ("Site : {0} \r\n\r\nHave The Following Alarms : \r\n\r\n{1} \r\n\r\n <span style=\"color: red;text-decoration: blink;font-weight: bold;\">NEED YOUR IMMEDIATE ATTENTION</span>"' item.Key.SiteName' item.Value); " is 240.
Long Statement,EarlyAlarmSystem.Network,EmailSMSHandler,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\EmailSMSHandler.cs,EmailsSenderTimer_Tick,The length of the statement  "					string smsMessage = string.Format ("Site : {0} - Alarms: [{1}] - ATTENTION"' item.Key.SiteName' SMSsMessagesBodies [item.Key]); " is 127.
Long Statement,EarlyAlarmSystem.Network,EmailSMSHandler,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\EmailSMSHandler.cs,getEmailList,The length of the statement  "	DataTable dt = db.executeRead ("SELECT AlarmEmails.EmailAddress FROM AlarmEmails INNER JOIN AlramEmails_Sites ON AlarmEmails.PersonID = AlramEmails_Sites.PersonID AND AlramEmails_Sites.SiteID = '" + site.ID + "'"); " is 214.
Long Statement,EarlyAlarmSystem.Network,EmailSMSHandler,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\EmailSMSHandler.cs,getSMSList,The length of the statement  "	DataTable dt = db.executeRead ("SELECT AlarmSMSs.SMSNumber FROM AlarmSMSs INNER JOIN AlramSMSs_Sites ON AlarmSMSs.PersonID = AlramSMSs_Sites.PersonID AND AlramSMSs_Sites.SiteID = '" + site.ID + "'"); " is 199.
Long Statement,EarlyAlarmSystem.Network,EmailSender,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\EmailSender.cs,sendEmail,The length of the statement  "	if (System.Configuration.ConfigurationManager.AppSettings ["SendEmail"].Equals ("True"' StringComparison.OrdinalIgnoreCase)) { " is 126.
Long Statement,EarlyAlarmSystem.Network,EmailSender,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\EmailSender.cs,sendEmail,The length of the statement  "		MailAddress fromAddress = new MailAddress (System.Configuration.ConfigurationManager.AppSettings ["EmailMessageFromAddress"]' System.Configuration.ConfigurationManager.AppSettings ["EmailMessageFromName"]); " is 206.
Long Statement,EarlyAlarmSystem.Network,EmailSender,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\EmailSender.cs,sendEmail,The length of the statement  "	if (System.Configuration.ConfigurationManager.AppSettings ["SendEmail"].Equals ("True"' StringComparison.OrdinalIgnoreCase)) { " is 126.
Long Statement,EarlyAlarmSystem.Network,EmailSender,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\EmailSender.cs,sendEmail,The length of the statement  "		MailAddress fromAddress = new MailAddress (System.Configuration.ConfigurationManager.AppSettings ["EmailMessageFromAddress"]' System.Configuration.ConfigurationManager.AppSettings ["EmailMessageFromName"]); " is 206.
Long Statement,EarlyAlarmSystem.Network,EmailSender,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\EmailSender.cs,sendAlarmToAllAddress,The length of the statement  "	string[] addresses = System.Configuration.ConfigurationManager.AppSettings ["EmailAddressesToReciveAlarms"].Split (new char[] { " is 127.
Long Statement,EarlyAlarmSystem.Network,NetworkHandler,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkHandler.cs,HandleIncommingNetowrkCommunication,The length of the statement  "			int ConnectionTimeOutInSecs = int.Parse (System.Configuration.ConfigurationManager.AppSettings ["ConnectionTimeOutInSecs"]); " is 124.
Long Statement,EarlyAlarmSystem.Network,NetworkHandler,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkHandler.cs,HandleIncommingNetowrkCommunication,The length of the statement  "					Logger.MAINLOGGER.logInfo (string.Format ("Recived Data Length : {0} - buffer length :{1}"' bytesRec' dataBuffer.Count)); " is 121.
Long Statement,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,saveNetworkPacketToDB,The length of the statement  "		VariablesDB.GetNewVariable ("HlmComWrFl"' siteID' packet.RTC' Convert.ToDouble (packet.HeliumCompressorFlowOfWaterOnOff)); " is 122.
Long Statement,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,saveNetworkPacketToDB,The length of the statement  "		VariablesDB.GetNewVariable ("WtrSolVlv "' siteID' packet.RTC' Convert.ToDouble (packet.SolinoidValveOnWaterShillerStatus)); " is 123.
Long Statement,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,saveNullNetworkPacketToDB,The length of the statement  "	if (vars.Length > 0 && vars [0].Value == (-101223568912))//(-101223568912) iisa constant represent null [used only on VariablesDB.GetTop5VariableBelongToTypeAndSite] " is 165.
Long Statement,EarlyAlarmSystem.Network,SMSSender,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\SMSSender.cs,sendSMS,The length of the statement  "	if (System.Configuration.ConfigurationManager.AppSettings ["SendSMS"].Equals ("True"' StringComparison.OrdinalIgnoreCase)) { " is 124.
Long Statement,EarlyAlarmSystem.Network,SMSSender,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\SMSSender.cs,sendSMS,The length of the statement  "		string URLFormat = "http://sms.masrbokra.com/sms/sendsms.php?user={0}&password={1}&numbers={2}&sender={3}&message={4}&lang=en"; " is 127.
Long Statement,EarlyAlarmSystem.Network,SMSSender,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\SMSSender.cs,sendSMS,The length of the statement  "	if (System.Configuration.ConfigurationManager.AppSettings ["SendSMS"].Equals ("True"' StringComparison.OrdinalIgnoreCase)) { " is 124.
Long Statement,EarlyAlarmSystem.Network,SMSSender,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\SMSSender.cs,sendSMS,The length of the statement  "		string URLFormat = "http://sms.masrbokra.com/sms/sendsms.php?user={0}&password={1}&numbers={2}&sender={3}&message={4}&lang=en"; " is 127.
Long Statement,EarlyAlarmSystem,Program,C:\repos\momenh_ge.eas\server\Early Alarm System\Program.cs,Main,The length of the statement  "	var exists = System.Diagnostics.Process.GetProcessesByName (System.IO.Path.GetFileNameWithoutExtension (System.Reflection.Assembly.GetEntryAssembly ().Location)).Count () > 1; " is 175.
Long Statement,EarlyAlarmSystem,Program,C:\repos\momenh_ge.eas\server\Early Alarm System\Program.cs,Main,The length of the statement  "	string TimeStamp = string.Format ("{0}-{1}-{2}-{3}"' StartTime.DayOfYear' StartTime.Hour' StartTime.Minute' StartTime.Second); " is 126.
Long Statement,EarlyAlarmSystem,Program,C:\repos\momenh_ge.eas\server\Early Alarm System\Program.cs,Main,The length of the statement  "		System.Threading.Thread PacketsHandlerThread = new System.Threading.Thread (NetworkHandler.HandleIncommingNetowrkCommunication); " is 128.
Magic Number,EarlyAlarmSystem.Alarms,AlarmBase,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Alarms\AlarmBase.cs,AlarmBase,The following statement contains a magic number: checkTimer.Interval = (1000) * 60 * interval;  
Magic Number,EarlyAlarmSystem.Alarms,AlarmBase,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Alarms\AlarmBase.cs,AlarmBase,The following statement contains a magic number: checkTimer.Interval = (1000) * 60 * interval;  
Magic Number,EarlyAlarmSystem.Alarms,AlarmBase,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Alarms\AlarmBase.cs,IsToSendAlarm,The following statement contains a magic number: if (numberOfAlarmsSend [site.ID] == 0) {  	if (lastSendAlarmTime [site.ID].AddMinutes (alarm.AlarmPeriod1) <= DateTime.Now)  		result = true;  }  else if (numberOfAlarmsSend [site.ID] == 1 || numberOfAlarmsSend [site.ID] == 2) {  	if (lastSendAlarmTime [site.ID].AddMinutes (alarm.AlarmPeriod2) <= DateTime.Now)  		result = true;  }  else {  	if (lastSendAlarmTime [site.ID].AddMinutes (alarm.AlarmPeriod3) <= DateTime.Now)  		result = true;  }  
Magic Number,EarlyAlarmSystem.Alarms,AlarmBase,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Alarms\AlarmBase.cs,IsToSendAlarm,The following statement contains a magic number: if (numberOfAlarmsSend [site.ID] == 1 || numberOfAlarmsSend [site.ID] == 2) {  	if (lastSendAlarmTime [site.ID].AddMinutes (alarm.AlarmPeriod2) <= DateTime.Now)  		result = true;  }  else {  	if (lastSendAlarmTime [site.ID].AddMinutes (alarm.AlarmPeriod3) <= DateTime.Now)  		result = true;  }  
Magic Number,EarlyAlarmSystem.Database,VariablesDB,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Database\Variables.cs,GetTop5VariableBelongToTypeAndSite,The following statement contains a magic number: if (dt.Rows.Count > 0) {  	List<VariablesDB> result = new List<VariablesDB> (dt.Rows.Count);  	for (int i = 0; i < dt.Rows.Count; i++) {  		if (dt.Rows [i] ["Value"] != System.DBNull.Value) {  			result.Add (new VariablesDB (Convert.ToInt32 (dt.Rows [i] ["ID"])' typeId' siteID' Convert.ToDateTime (dt.Rows [i] ["ReadDate"])' Convert.ToDouble (dt.Rows [i] ["Value"])));  		}  		else {  			result.Add (new VariablesDB (Convert.ToInt32 (dt.Rows [i] ["ID"])' typeId' siteID' Convert.ToDateTime (dt.Rows [i] ["ReadDate"])' Convert.ToDouble (-101223568912)));  			//constant that represent null  		}  	}  	return result.ToArray ();  }  else {  	throw new Exception ("can not read data");  }  
Magic Number,EarlyAlarmSystem.Database,VariablesDB,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Database\Variables.cs,GetTop5VariableBelongToTypeAndSite,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (dt.Rows [i] ["Value"] != System.DBNull.Value) {  		result.Add (new VariablesDB (Convert.ToInt32 (dt.Rows [i] ["ID"])' typeId' siteID' Convert.ToDateTime (dt.Rows [i] ["ReadDate"])' Convert.ToDouble (dt.Rows [i] ["Value"])));  	}  	else {  		result.Add (new VariablesDB (Convert.ToInt32 (dt.Rows [i] ["ID"])' typeId' siteID' Convert.ToDateTime (dt.Rows [i] ["ReadDate"])' Convert.ToDouble (-101223568912)));  		//constant that represent null  	}  }  
Magic Number,EarlyAlarmSystem.Database,VariablesDB,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Database\Variables.cs,GetTop5VariableBelongToTypeAndSite,The following statement contains a magic number: if (dt.Rows [i] ["Value"] != System.DBNull.Value) {  	result.Add (new VariablesDB (Convert.ToInt32 (dt.Rows [i] ["ID"])' typeId' siteID' Convert.ToDateTime (dt.Rows [i] ["ReadDate"])' Convert.ToDouble (dt.Rows [i] ["Value"])));  }  else {  	result.Add (new VariablesDB (Convert.ToInt32 (dt.Rows [i] ["ID"])' typeId' siteID' Convert.ToDateTime (dt.Rows [i] ["ReadDate"])' Convert.ToDouble (-101223568912)));  	//constant that represent null  }  
Magic Number,EarlyAlarmSystem.Database,VariablesDB,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Database\Variables.cs,GetTop5VariableBelongToTypeAndSite,The following statement contains a magic number: result.Add (new VariablesDB (Convert.ToInt32 (dt.Rows [i] ["ID"])' typeId' siteID' Convert.ToDateTime (dt.Rows [i] ["ReadDate"])' Convert.ToDouble (-101223568912)));  
Magic Number,EarlyAlarmSystem.Network,EmailSMSHandler,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\EmailSMSHandler.cs,EmailSMSHandler,The following statement contains a magic number: EmailsSenderTimer.Interval = (1000) * 60 * interval;  
Magic Number,EarlyAlarmSystem.Network,EmailSMSHandler,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\EmailSMSHandler.cs,EmailSMSHandler,The following statement contains a magic number: EmailsSenderTimer.Interval = (1000) * 60 * interval;  
Magic Number,EarlyAlarmSystem.Network,NetworkHandler,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkHandler.cs,HandleIncommingNetowrkCommunication,The following statement contains a magic number: try {  	listener.Bind (localEndPoint);  	listener.Listen (10);  	Logger.MAINLOGGER.logInfo (string.Format ("Server Started Successfully On {0}"' listener.LocalEndPoint.ToString ()));  	// Start listening for connections.  	while (true) {  		Logger.MAINLOGGER.logInfo ("Waiting for a connection...");  		// Program is suspended while waiting for an incoming connection.  		Socket handler = listener.Accept ();  		DateTime ConnectionStartTime = DateTime.Now;  		int ConnectionTimeOutInSecs = int.Parse (System.Configuration.ConfigurationManager.AppSettings ["ConnectionTimeOutInSecs"]);  		Logger.MAINLOGGER.logInfo (string.Format ("Connection Established With {0}"' handler.RemoteEndPoint.ToString ()));  		List<byte> dataBuffer = new List<byte> ();  		while (true) {  			if (handler.Available != 0) {  				byte[] bytes = new byte[handler.Available];  				int bytesRec = handler.Receive (bytes);  				dataBuffer.AddRange (bytes);  				Logger.MAINLOGGER.logInfo (string.Format ("Recived Data Length : {0} - buffer length :{1}"' bytesRec' dataBuffer.Count));  			}  			if (dataBuffer.Count >= 20) {  				byte[] bytes = dataBuffer.ToArray ();  				int bytesRec = bytes.Length;  				try {  					//proccess network data  					NetworkPacket dataPacket = NetworkPacket.trasnlateNetworkCommunicationPacket (bytes);  					//save recived data  					NetworkPacket.saveNetworkPacketToDB (dataPacket);  				}  				catch (Exception ex) {  					try {  						EmailSender.sendApplicationErrorMail (ex);  						SMSSender.sendApplicationErrorSMS (ex);  					}  					catch (Exception exx) {  						Logger.MAINLOGGER.logError ("error sending application error messages  - THIS IS HOPLESS :)"' exx);  					}  					string errorMesage = "error trasnlating or saving network packet - data : ";  					for (int i = 0; i < bytes.Length; i++)  						if (i == 0)  							errorMesage += bytes [i].ToString ();  						else  							errorMesage += "'" + bytes [i].ToString ();  					Logger.MAINLOGGER.logError (errorMesage' ex);  					Logger.MAINLOGGER.logInfo ("\nend of data buffer");  				}  				dataBuffer.Clear ();  			}  			if (!isConnected (handler))  				break;  			if (ConnectionStartTime.AddSeconds (ConnectionTimeOutInSecs) < DateTime.Now) {  				Logger.MAINLOGGER.logInfo (string.Format ("Connection TimeOut With {0}"' handler.RemoteEndPoint.ToString ()));  				break;  			}  		}  		Logger.MAINLOGGER.logInfo (string.Format ("Connection Closed With {0}"' handler.RemoteEndPoint.ToString ()));  		try {  			handler.Shutdown (SocketShutdown.Both);  			handler.Close ();  		}  		catch (Exception ex) {  			Logger.MAINLOGGER.logError (ex);  		}  	}  }  catch (Exception e) {  	try {  		EmailSender.sendApplicationErrorMail (e);  		SMSSender.sendApplicationErrorSMS (e);  	}  	catch (Exception exx) {  		Logger.MAINLOGGER.logError ("error sending application error messages  - THIS IS HOPLESS :)"' exx);  	}  	Logger.MAINLOGGER.logError (e);  }  
Magic Number,EarlyAlarmSystem.Network,NetworkHandler,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkHandler.cs,HandleIncommingNetowrkCommunication,The following statement contains a magic number: try {  	listener.Bind (localEndPoint);  	listener.Listen (10);  	Logger.MAINLOGGER.logInfo (string.Format ("Server Started Successfully On {0}"' listener.LocalEndPoint.ToString ()));  	// Start listening for connections.  	while (true) {  		Logger.MAINLOGGER.logInfo ("Waiting for a connection...");  		// Program is suspended while waiting for an incoming connection.  		Socket handler = listener.Accept ();  		DateTime ConnectionStartTime = DateTime.Now;  		int ConnectionTimeOutInSecs = int.Parse (System.Configuration.ConfigurationManager.AppSettings ["ConnectionTimeOutInSecs"]);  		Logger.MAINLOGGER.logInfo (string.Format ("Connection Established With {0}"' handler.RemoteEndPoint.ToString ()));  		List<byte> dataBuffer = new List<byte> ();  		while (true) {  			if (handler.Available != 0) {  				byte[] bytes = new byte[handler.Available];  				int bytesRec = handler.Receive (bytes);  				dataBuffer.AddRange (bytes);  				Logger.MAINLOGGER.logInfo (string.Format ("Recived Data Length : {0} - buffer length :{1}"' bytesRec' dataBuffer.Count));  			}  			if (dataBuffer.Count >= 20) {  				byte[] bytes = dataBuffer.ToArray ();  				int bytesRec = bytes.Length;  				try {  					//proccess network data  					NetworkPacket dataPacket = NetworkPacket.trasnlateNetworkCommunicationPacket (bytes);  					//save recived data  					NetworkPacket.saveNetworkPacketToDB (dataPacket);  				}  				catch (Exception ex) {  					try {  						EmailSender.sendApplicationErrorMail (ex);  						SMSSender.sendApplicationErrorSMS (ex);  					}  					catch (Exception exx) {  						Logger.MAINLOGGER.logError ("error sending application error messages  - THIS IS HOPLESS :)"' exx);  					}  					string errorMesage = "error trasnlating or saving network packet - data : ";  					for (int i = 0; i < bytes.Length; i++)  						if (i == 0)  							errorMesage += bytes [i].ToString ();  						else  							errorMesage += "'" + bytes [i].ToString ();  					Logger.MAINLOGGER.logError (errorMesage' ex);  					Logger.MAINLOGGER.logInfo ("\nend of data buffer");  				}  				dataBuffer.Clear ();  			}  			if (!isConnected (handler))  				break;  			if (ConnectionStartTime.AddSeconds (ConnectionTimeOutInSecs) < DateTime.Now) {  				Logger.MAINLOGGER.logInfo (string.Format ("Connection TimeOut With {0}"' handler.RemoteEndPoint.ToString ()));  				break;  			}  		}  		Logger.MAINLOGGER.logInfo (string.Format ("Connection Closed With {0}"' handler.RemoteEndPoint.ToString ()));  		try {  			handler.Shutdown (SocketShutdown.Both);  			handler.Close ();  		}  		catch (Exception ex) {  			Logger.MAINLOGGER.logError (ex);  		}  	}  }  catch (Exception e) {  	try {  		EmailSender.sendApplicationErrorMail (e);  		SMSSender.sendApplicationErrorSMS (e);  	}  	catch (Exception exx) {  		Logger.MAINLOGGER.logError ("error sending application error messages  - THIS IS HOPLESS :)"' exx);  	}  	Logger.MAINLOGGER.logError (e);  }  
Magic Number,EarlyAlarmSystem.Network,NetworkHandler,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkHandler.cs,HandleIncommingNetowrkCommunication,The following statement contains a magic number: listener.Listen (10);  
Magic Number,EarlyAlarmSystem.Network,NetworkHandler,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkHandler.cs,HandleIncommingNetowrkCommunication,The following statement contains a magic number: while (true) {  	Logger.MAINLOGGER.logInfo ("Waiting for a connection...");  	// Program is suspended while waiting for an incoming connection.  	Socket handler = listener.Accept ();  	DateTime ConnectionStartTime = DateTime.Now;  	int ConnectionTimeOutInSecs = int.Parse (System.Configuration.ConfigurationManager.AppSettings ["ConnectionTimeOutInSecs"]);  	Logger.MAINLOGGER.logInfo (string.Format ("Connection Established With {0}"' handler.RemoteEndPoint.ToString ()));  	List<byte> dataBuffer = new List<byte> ();  	while (true) {  		if (handler.Available != 0) {  			byte[] bytes = new byte[handler.Available];  			int bytesRec = handler.Receive (bytes);  			dataBuffer.AddRange (bytes);  			Logger.MAINLOGGER.logInfo (string.Format ("Recived Data Length : {0} - buffer length :{1}"' bytesRec' dataBuffer.Count));  		}  		if (dataBuffer.Count >= 20) {  			byte[] bytes = dataBuffer.ToArray ();  			int bytesRec = bytes.Length;  			try {  				//proccess network data  				NetworkPacket dataPacket = NetworkPacket.trasnlateNetworkCommunicationPacket (bytes);  				//save recived data  				NetworkPacket.saveNetworkPacketToDB (dataPacket);  			}  			catch (Exception ex) {  				try {  					EmailSender.sendApplicationErrorMail (ex);  					SMSSender.sendApplicationErrorSMS (ex);  				}  				catch (Exception exx) {  					Logger.MAINLOGGER.logError ("error sending application error messages  - THIS IS HOPLESS :)"' exx);  				}  				string errorMesage = "error trasnlating or saving network packet - data : ";  				for (int i = 0; i < bytes.Length; i++)  					if (i == 0)  						errorMesage += bytes [i].ToString ();  					else  						errorMesage += "'" + bytes [i].ToString ();  				Logger.MAINLOGGER.logError (errorMesage' ex);  				Logger.MAINLOGGER.logInfo ("\nend of data buffer");  			}  			dataBuffer.Clear ();  		}  		if (!isConnected (handler))  			break;  		if (ConnectionStartTime.AddSeconds (ConnectionTimeOutInSecs) < DateTime.Now) {  			Logger.MAINLOGGER.logInfo (string.Format ("Connection TimeOut With {0}"' handler.RemoteEndPoint.ToString ()));  			break;  		}  	}  	Logger.MAINLOGGER.logInfo (string.Format ("Connection Closed With {0}"' handler.RemoteEndPoint.ToString ()));  	try {  		handler.Shutdown (SocketShutdown.Both);  		handler.Close ();  	}  	catch (Exception ex) {  		Logger.MAINLOGGER.logError (ex);  	}  }  
Magic Number,EarlyAlarmSystem.Network,NetworkHandler,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkHandler.cs,HandleIncommingNetowrkCommunication,The following statement contains a magic number: while (true) {  	if (handler.Available != 0) {  		byte[] bytes = new byte[handler.Available];  		int bytesRec = handler.Receive (bytes);  		dataBuffer.AddRange (bytes);  		Logger.MAINLOGGER.logInfo (string.Format ("Recived Data Length : {0} - buffer length :{1}"' bytesRec' dataBuffer.Count));  	}  	if (dataBuffer.Count >= 20) {  		byte[] bytes = dataBuffer.ToArray ();  		int bytesRec = bytes.Length;  		try {  			//proccess network data  			NetworkPacket dataPacket = NetworkPacket.trasnlateNetworkCommunicationPacket (bytes);  			//save recived data  			NetworkPacket.saveNetworkPacketToDB (dataPacket);  		}  		catch (Exception ex) {  			try {  				EmailSender.sendApplicationErrorMail (ex);  				SMSSender.sendApplicationErrorSMS (ex);  			}  			catch (Exception exx) {  				Logger.MAINLOGGER.logError ("error sending application error messages  - THIS IS HOPLESS :)"' exx);  			}  			string errorMesage = "error trasnlating or saving network packet - data : ";  			for (int i = 0; i < bytes.Length; i++)  				if (i == 0)  					errorMesage += bytes [i].ToString ();  				else  					errorMesage += "'" + bytes [i].ToString ();  			Logger.MAINLOGGER.logError (errorMesage' ex);  			Logger.MAINLOGGER.logInfo ("\nend of data buffer");  		}  		dataBuffer.Clear ();  	}  	if (!isConnected (handler))  		break;  	if (ConnectionStartTime.AddSeconds (ConnectionTimeOutInSecs) < DateTime.Now) {  		Logger.MAINLOGGER.logInfo (string.Format ("Connection TimeOut With {0}"' handler.RemoteEndPoint.ToString ()));  		break;  	}  }  
Magic Number,EarlyAlarmSystem.Network,NetworkHandler,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkHandler.cs,HandleIncommingNetowrkCommunication,The following statement contains a magic number: if (dataBuffer.Count >= 20) {  	byte[] bytes = dataBuffer.ToArray ();  	int bytesRec = bytes.Length;  	try {  		//proccess network data  		NetworkPacket dataPacket = NetworkPacket.trasnlateNetworkCommunicationPacket (bytes);  		//save recived data  		NetworkPacket.saveNetworkPacketToDB (dataPacket);  	}  	catch (Exception ex) {  		try {  			EmailSender.sendApplicationErrorMail (ex);  			SMSSender.sendApplicationErrorSMS (ex);  		}  		catch (Exception exx) {  			Logger.MAINLOGGER.logError ("error sending application error messages  - THIS IS HOPLESS :)"' exx);  		}  		string errorMesage = "error trasnlating or saving network packet - data : ";  		for (int i = 0; i < bytes.Length; i++)  			if (i == 0)  				errorMesage += bytes [i].ToString ();  			else  				errorMesage += "'" + bytes [i].ToString ();  		Logger.MAINLOGGER.logError (errorMesage' ex);  		Logger.MAINLOGGER.logInfo ("\nend of data buffer");  	}  	dataBuffer.Clear ();  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: result.SiteIdentifier = BitConverter.ToUInt16 (data' 2);  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: switch (sectionID) {  case 0x0001:  	//ENVIRONMENT  	if (sectionBytesNumbers == 10) {  		result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  		result.AmbientTemp1 /= 10;  		result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  		result.AmbientTemp2 /= 10;  		result.HumiditySensor = BitConverter.ToInt16 (data' 12);  		result.HumiditySensor /= 10;  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for environmental network data packet");  	break;  case 0x0002:  	//COOLING  	if (sectionBytesNumbers == 16) {  		short WaterShiller = BitConverter.ToInt16 (data' 8);  		result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  		short CompressorData = BitConverter.ToInt16 (data' 10);  		result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  		result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  		result.HeliumCompressorInWaterTemperature /= 10;  		result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  		result.HeliumCompressorOutWaterTemperature /= 10;  		short WaterFlow = BitConverter.ToInt16 (data' 16);  		result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  		short SolinoidStatus = BitConverter.ToInt16 (data' 18);  		result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  		double TimeData = BitConverter.ToInt32 (data' 20);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 24);  		endFlag = BitConverter.ToUInt16 (data' 28);  	}  	else  		throw new Exception ("wrong length for cooling network data packet");  	break;  case 0x0003:  	//SYSTEM  	if (sectionBytesNumbers == 10) {  		short SystemPower = BitConverter.ToInt16 (data' 8);  		result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  		result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  		result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  		double TimeData = BitConverter.ToInt32 (data' 14);  		//TODO .. time translation  		result.RTC = DateTime.Now;  		//get CRC and endFlag  		CRCData = BitConverter.ToInt32 (data' 18);  		endFlag = BitConverter.ToUInt16 (data' 22);  	}  	else  		throw new Exception ("wrong length for system network data packet");  	break;  default:  	throw new Exception ("unsupport section flage");  	break;  }  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 10) {  	result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  	result.AmbientTemp1 /= 10;  	result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  	result.AmbientTemp2 /= 10;  	result.HumiditySensor = BitConverter.ToInt16 (data' 12);  	result.HumiditySensor /= 10;  	double TimeData = BitConverter.ToInt32 (data' 14);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 18);  	endFlag = BitConverter.ToUInt16 (data' 22);  }  else  	throw new Exception ("wrong length for environmental network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 10) {  	result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  	result.AmbientTemp1 /= 10;  	result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  	result.AmbientTemp2 /= 10;  	result.HumiditySensor = BitConverter.ToInt16 (data' 12);  	result.HumiditySensor /= 10;  	double TimeData = BitConverter.ToInt32 (data' 14);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 18);  	endFlag = BitConverter.ToUInt16 (data' 22);  }  else  	throw new Exception ("wrong length for environmental network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 10) {  	result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  	result.AmbientTemp1 /= 10;  	result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  	result.AmbientTemp2 /= 10;  	result.HumiditySensor = BitConverter.ToInt16 (data' 12);  	result.HumiditySensor /= 10;  	double TimeData = BitConverter.ToInt32 (data' 14);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 18);  	endFlag = BitConverter.ToUInt16 (data' 22);  }  else  	throw new Exception ("wrong length for environmental network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 10) {  	result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  	result.AmbientTemp1 /= 10;  	result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  	result.AmbientTemp2 /= 10;  	result.HumiditySensor = BitConverter.ToInt16 (data' 12);  	result.HumiditySensor /= 10;  	double TimeData = BitConverter.ToInt32 (data' 14);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 18);  	endFlag = BitConverter.ToUInt16 (data' 22);  }  else  	throw new Exception ("wrong length for environmental network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 10) {  	result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  	result.AmbientTemp1 /= 10;  	result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  	result.AmbientTemp2 /= 10;  	result.HumiditySensor = BitConverter.ToInt16 (data' 12);  	result.HumiditySensor /= 10;  	double TimeData = BitConverter.ToInt32 (data' 14);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 18);  	endFlag = BitConverter.ToUInt16 (data' 22);  }  else  	throw new Exception ("wrong length for environmental network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 10) {  	result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  	result.AmbientTemp1 /= 10;  	result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  	result.AmbientTemp2 /= 10;  	result.HumiditySensor = BitConverter.ToInt16 (data' 12);  	result.HumiditySensor /= 10;  	double TimeData = BitConverter.ToInt32 (data' 14);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 18);  	endFlag = BitConverter.ToUInt16 (data' 22);  }  else  	throw new Exception ("wrong length for environmental network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 10) {  	result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  	result.AmbientTemp1 /= 10;  	result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  	result.AmbientTemp2 /= 10;  	result.HumiditySensor = BitConverter.ToInt16 (data' 12);  	result.HumiditySensor /= 10;  	double TimeData = BitConverter.ToInt32 (data' 14);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 18);  	endFlag = BitConverter.ToUInt16 (data' 22);  }  else  	throw new Exception ("wrong length for environmental network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 10) {  	result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  	result.AmbientTemp1 /= 10;  	result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  	result.AmbientTemp2 /= 10;  	result.HumiditySensor = BitConverter.ToInt16 (data' 12);  	result.HumiditySensor /= 10;  	double TimeData = BitConverter.ToInt32 (data' 14);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 18);  	endFlag = BitConverter.ToUInt16 (data' 22);  }  else  	throw new Exception ("wrong length for environmental network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 10) {  	result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  	result.AmbientTemp1 /= 10;  	result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  	result.AmbientTemp2 /= 10;  	result.HumiditySensor = BitConverter.ToInt16 (data' 12);  	result.HumiditySensor /= 10;  	double TimeData = BitConverter.ToInt32 (data' 14);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 18);  	endFlag = BitConverter.ToUInt16 (data' 22);  }  else  	throw new Exception ("wrong length for environmental network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 10) {  	result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  	result.AmbientTemp1 /= 10;  	result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  	result.AmbientTemp2 /= 10;  	result.HumiditySensor = BitConverter.ToInt16 (data' 12);  	result.HumiditySensor /= 10;  	double TimeData = BitConverter.ToInt32 (data' 14);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 18);  	endFlag = BitConverter.ToUInt16 (data' 22);  }  else  	throw new Exception ("wrong length for environmental network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: result.AmbientTemp1 = BitConverter.ToInt16 (data' 8);  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: result.AmbientTemp1 /= 10;  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: result.AmbientTemp2 = BitConverter.ToInt16 (data' 10);  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: result.AmbientTemp2 /= 10;  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: result.HumiditySensor = BitConverter.ToInt16 (data' 12);  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: result.HumiditySensor /= 10;  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: CRCData = BitConverter.ToInt32 (data' 18);  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: endFlag = BitConverter.ToUInt16 (data' 22);  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 16) {  	short WaterShiller = BitConverter.ToInt16 (data' 8);  	result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  	short CompressorData = BitConverter.ToInt16 (data' 10);  	result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  	result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  	result.HeliumCompressorInWaterTemperature /= 10;  	result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  	result.HeliumCompressorOutWaterTemperature /= 10;  	short WaterFlow = BitConverter.ToInt16 (data' 16);  	result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  	short SolinoidStatus = BitConverter.ToInt16 (data' 18);  	result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  	double TimeData = BitConverter.ToInt32 (data' 20);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 24);  	endFlag = BitConverter.ToUInt16 (data' 28);  }  else  	throw new Exception ("wrong length for cooling network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 16) {  	short WaterShiller = BitConverter.ToInt16 (data' 8);  	result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  	short CompressorData = BitConverter.ToInt16 (data' 10);  	result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  	result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  	result.HeliumCompressorInWaterTemperature /= 10;  	result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  	result.HeliumCompressorOutWaterTemperature /= 10;  	short WaterFlow = BitConverter.ToInt16 (data' 16);  	result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  	short SolinoidStatus = BitConverter.ToInt16 (data' 18);  	result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  	double TimeData = BitConverter.ToInt32 (data' 20);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 24);  	endFlag = BitConverter.ToUInt16 (data' 28);  }  else  	throw new Exception ("wrong length for cooling network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 16) {  	short WaterShiller = BitConverter.ToInt16 (data' 8);  	result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  	short CompressorData = BitConverter.ToInt16 (data' 10);  	result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  	result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  	result.HeliumCompressorInWaterTemperature /= 10;  	result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  	result.HeliumCompressorOutWaterTemperature /= 10;  	short WaterFlow = BitConverter.ToInt16 (data' 16);  	result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  	short SolinoidStatus = BitConverter.ToInt16 (data' 18);  	result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  	double TimeData = BitConverter.ToInt32 (data' 20);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 24);  	endFlag = BitConverter.ToUInt16 (data' 28);  }  else  	throw new Exception ("wrong length for cooling network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 16) {  	short WaterShiller = BitConverter.ToInt16 (data' 8);  	result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  	short CompressorData = BitConverter.ToInt16 (data' 10);  	result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  	result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  	result.HeliumCompressorInWaterTemperature /= 10;  	result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  	result.HeliumCompressorOutWaterTemperature /= 10;  	short WaterFlow = BitConverter.ToInt16 (data' 16);  	result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  	short SolinoidStatus = BitConverter.ToInt16 (data' 18);  	result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  	double TimeData = BitConverter.ToInt32 (data' 20);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 24);  	endFlag = BitConverter.ToUInt16 (data' 28);  }  else  	throw new Exception ("wrong length for cooling network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 16) {  	short WaterShiller = BitConverter.ToInt16 (data' 8);  	result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  	short CompressorData = BitConverter.ToInt16 (data' 10);  	result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  	result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  	result.HeliumCompressorInWaterTemperature /= 10;  	result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  	result.HeliumCompressorOutWaterTemperature /= 10;  	short WaterFlow = BitConverter.ToInt16 (data' 16);  	result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  	short SolinoidStatus = BitConverter.ToInt16 (data' 18);  	result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  	double TimeData = BitConverter.ToInt32 (data' 20);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 24);  	endFlag = BitConverter.ToUInt16 (data' 28);  }  else  	throw new Exception ("wrong length for cooling network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 16) {  	short WaterShiller = BitConverter.ToInt16 (data' 8);  	result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  	short CompressorData = BitConverter.ToInt16 (data' 10);  	result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  	result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  	result.HeliumCompressorInWaterTemperature /= 10;  	result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  	result.HeliumCompressorOutWaterTemperature /= 10;  	short WaterFlow = BitConverter.ToInt16 (data' 16);  	result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  	short SolinoidStatus = BitConverter.ToInt16 (data' 18);  	result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  	double TimeData = BitConverter.ToInt32 (data' 20);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 24);  	endFlag = BitConverter.ToUInt16 (data' 28);  }  else  	throw new Exception ("wrong length for cooling network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 16) {  	short WaterShiller = BitConverter.ToInt16 (data' 8);  	result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  	short CompressorData = BitConverter.ToInt16 (data' 10);  	result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  	result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  	result.HeliumCompressorInWaterTemperature /= 10;  	result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  	result.HeliumCompressorOutWaterTemperature /= 10;  	short WaterFlow = BitConverter.ToInt16 (data' 16);  	result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  	short SolinoidStatus = BitConverter.ToInt16 (data' 18);  	result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  	double TimeData = BitConverter.ToInt32 (data' 20);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 24);  	endFlag = BitConverter.ToUInt16 (data' 28);  }  else  	throw new Exception ("wrong length for cooling network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 16) {  	short WaterShiller = BitConverter.ToInt16 (data' 8);  	result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  	short CompressorData = BitConverter.ToInt16 (data' 10);  	result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  	result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  	result.HeliumCompressorInWaterTemperature /= 10;  	result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  	result.HeliumCompressorOutWaterTemperature /= 10;  	short WaterFlow = BitConverter.ToInt16 (data' 16);  	result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  	short SolinoidStatus = BitConverter.ToInt16 (data' 18);  	result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  	double TimeData = BitConverter.ToInt32 (data' 20);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 24);  	endFlag = BitConverter.ToUInt16 (data' 28);  }  else  	throw new Exception ("wrong length for cooling network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 16) {  	short WaterShiller = BitConverter.ToInt16 (data' 8);  	result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  	short CompressorData = BitConverter.ToInt16 (data' 10);  	result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  	result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  	result.HeliumCompressorInWaterTemperature /= 10;  	result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  	result.HeliumCompressorOutWaterTemperature /= 10;  	short WaterFlow = BitConverter.ToInt16 (data' 16);  	result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  	short SolinoidStatus = BitConverter.ToInt16 (data' 18);  	result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  	double TimeData = BitConverter.ToInt32 (data' 20);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 24);  	endFlag = BitConverter.ToUInt16 (data' 28);  }  else  	throw new Exception ("wrong length for cooling network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 16) {  	short WaterShiller = BitConverter.ToInt16 (data' 8);  	result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  	short CompressorData = BitConverter.ToInt16 (data' 10);  	result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  	result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  	result.HeliumCompressorInWaterTemperature /= 10;  	result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  	result.HeliumCompressorOutWaterTemperature /= 10;  	short WaterFlow = BitConverter.ToInt16 (data' 16);  	result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  	short SolinoidStatus = BitConverter.ToInt16 (data' 18);  	result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  	double TimeData = BitConverter.ToInt32 (data' 20);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 24);  	endFlag = BitConverter.ToUInt16 (data' 28);  }  else  	throw new Exception ("wrong length for cooling network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 16) {  	short WaterShiller = BitConverter.ToInt16 (data' 8);  	result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  	short CompressorData = BitConverter.ToInt16 (data' 10);  	result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  	result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  	result.HeliumCompressorInWaterTemperature /= 10;  	result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  	result.HeliumCompressorOutWaterTemperature /= 10;  	short WaterFlow = BitConverter.ToInt16 (data' 16);  	result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  	short SolinoidStatus = BitConverter.ToInt16 (data' 18);  	result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  	double TimeData = BitConverter.ToInt32 (data' 20);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 24);  	endFlag = BitConverter.ToUInt16 (data' 28);  }  else  	throw new Exception ("wrong length for cooling network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 16) {  	short WaterShiller = BitConverter.ToInt16 (data' 8);  	result.WaterShellerOnOffMotor = (WaterShiller == 0 ? false : true);  	short CompressorData = BitConverter.ToInt16 (data' 10);  	result.HeliumCompressorOnOffMotor = (CompressorData == 0 ? false : true);  	result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  	result.HeliumCompressorInWaterTemperature /= 10;  	result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  	result.HeliumCompressorOutWaterTemperature /= 10;  	short WaterFlow = BitConverter.ToInt16 (data' 16);  	result.HeliumCompressorFlowOfWaterOnOff = (WaterFlow == 0 ? false : true);  	short SolinoidStatus = BitConverter.ToInt16 (data' 18);  	result.SolinoidValveOnWaterShillerStatus = (SolinoidStatus == 0 ? false : true);  	double TimeData = BitConverter.ToInt32 (data' 20);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 24);  	endFlag = BitConverter.ToUInt16 (data' 28);  }  else  	throw new Exception ("wrong length for cooling network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: result.HeliumCompressorInWaterTemperature = BitConverter.ToInt16 (data' 12);  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: result.HeliumCompressorInWaterTemperature /= 10;  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: result.HeliumCompressorOutWaterTemperature = BitConverter.ToInt16 (data' 14);  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: result.HeliumCompressorOutWaterTemperature /= 10;  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: CRCData = BitConverter.ToInt32 (data' 24);  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: endFlag = BitConverter.ToUInt16 (data' 28);  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 10) {  	short SystemPower = BitConverter.ToInt16 (data' 8);  	result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  	result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  	result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  	double TimeData = BitConverter.ToInt32 (data' 14);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 18);  	endFlag = BitConverter.ToUInt16 (data' 22);  }  else  	throw new Exception ("wrong length for system network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 10) {  	short SystemPower = BitConverter.ToInt16 (data' 8);  	result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  	result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  	result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  	double TimeData = BitConverter.ToInt32 (data' 14);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 18);  	endFlag = BitConverter.ToUInt16 (data' 22);  }  else  	throw new Exception ("wrong length for system network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 10) {  	short SystemPower = BitConverter.ToInt16 (data' 8);  	result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  	result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  	result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  	double TimeData = BitConverter.ToInt32 (data' 14);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 18);  	endFlag = BitConverter.ToUInt16 (data' 22);  }  else  	throw new Exception ("wrong length for system network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 10) {  	short SystemPower = BitConverter.ToInt16 (data' 8);  	result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  	result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  	result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  	double TimeData = BitConverter.ToInt32 (data' 14);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 18);  	endFlag = BitConverter.ToUInt16 (data' 22);  }  else  	throw new Exception ("wrong length for system network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 10) {  	short SystemPower = BitConverter.ToInt16 (data' 8);  	result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  	result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  	result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  	double TimeData = BitConverter.ToInt32 (data' 14);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 18);  	endFlag = BitConverter.ToUInt16 (data' 22);  }  else  	throw new Exception ("wrong length for system network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 10) {  	short SystemPower = BitConverter.ToInt16 (data' 8);  	result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  	result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  	result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  	double TimeData = BitConverter.ToInt32 (data' 14);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 18);  	endFlag = BitConverter.ToUInt16 (data' 22);  }  else  	throw new Exception ("wrong length for system network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: if (sectionBytesNumbers == 10) {  	short SystemPower = BitConverter.ToInt16 (data' 8);  	result.SystemPowerOnOff = (SystemPower == 0 ? false : true);  	result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  	result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  	double TimeData = BitConverter.ToInt32 (data' 14);  	//TODO .. time translation  	result.RTC = DateTime.Now;  	//get CRC and endFlag  	CRCData = BitConverter.ToInt32 (data' 18);  	endFlag = BitConverter.ToUInt16 (data' 22);  }  else  	throw new Exception ("wrong length for system network data packet");  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: result.TechnicalAlarm = BitConverter.ToInt16 (data' 10);  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: result.PhaseStatus = BitConverter.ToUInt16 (data' 12);  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: CRCData = BitConverter.ToInt32 (data' 18);  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,trasnlateNetworkCommunicationPacket,The following statement contains a magic number: endFlag = BitConverter.ToUInt16 (data' 22);  
Magic Number,EarlyAlarmSystem.Network,NetworkPacket,C:\repos\momenh_ge.eas\server\Early Alarm System\Code\Network\NetworkPacket.cs,saveNullNetworkPacketToDB,The following statement contains a magic number: if (vars.Length > 0 && vars [0].Value == (-101223568912))//(-101223568912) iisa constant represent null [used only on VariablesDB.GetTop5VariableBelongToTypeAndSite]   {  	//do not insert NULLs in database  }  else {  	VariablesDB.InsertNullVariable ("AmbTmp1   "' siteID' RTC);  	VariablesDB.InsertNullVariable ("AmbTmp2   "' siteID' RTC);  	VariablesDB.InsertNullVariable ("HmdSnsor  "' siteID' RTC);  	VariablesDB.InsertNullVariable ("WtrChrPwr "' siteID' RTC);  	VariablesDB.InsertNullVariable ("HlmComPwr "' siteID' RTC);  	VariablesDB.InsertNullVariable ("HlmComWrIT"' siteID' RTC);  	VariablesDB.InsertNullVariable ("HlmComWrOT"' siteID' RTC);  	VariablesDB.InsertNullVariable ("HlmComWrFl"' siteID' RTC);  	VariablesDB.InsertNullVariable ("WtrSolVlv "' siteID' RTC);  	VariablesDB.InsertNullVariable ("SysPwr    "' siteID' RTC);  	VariablesDB.InsertNullVariable ("PhaseStat "' siteID' RTC);  	//VariablesDB.InsertNullVariable("SysTecAlrm"' siteID' RTC);  }  
Magic Number,EarlyAlarmSystem,Program,C:\repos\momenh_ge.eas\server\Early Alarm System\Program.cs,Main,The following statement contains a magic number: try {  	if (args.Length > 0) {  		if (args.Length == 2) {  			if (args [0] == "-W") {  				int number = int.Parse (args [1]);  				System.Threading.Thread.Sleep (1000 * number);  			}  		}  	}  }  catch (Exception ex) {  	Console.WriteLine ("exception : " + ex.Message + " bt : " + ex.StackTrace);  	Console.WriteLine ("arguments is in work format - Expected -W [num]");  	return;  }  
Magic Number,EarlyAlarmSystem,Program,C:\repos\momenh_ge.eas\server\Early Alarm System\Program.cs,Main,The following statement contains a magic number: try {  	if (args.Length > 0) {  		if (args.Length == 2) {  			if (args [0] == "-W") {  				int number = int.Parse (args [1]);  				System.Threading.Thread.Sleep (1000 * number);  			}  		}  	}  }  catch (Exception ex) {  	Console.WriteLine ("exception : " + ex.Message + " bt : " + ex.StackTrace);  	Console.WriteLine ("arguments is in work format - Expected -W [num]");  	return;  }  
Magic Number,EarlyAlarmSystem,Program,C:\repos\momenh_ge.eas\server\Early Alarm System\Program.cs,Main,The following statement contains a magic number: if (args.Length > 0) {  	if (args.Length == 2) {  		if (args [0] == "-W") {  			int number = int.Parse (args [1]);  			System.Threading.Thread.Sleep (1000 * number);  		}  	}  }  
Magic Number,EarlyAlarmSystem,Program,C:\repos\momenh_ge.eas\server\Early Alarm System\Program.cs,Main,The following statement contains a magic number: if (args.Length > 0) {  	if (args.Length == 2) {  		if (args [0] == "-W") {  			int number = int.Parse (args [1]);  			System.Threading.Thread.Sleep (1000 * number);  		}  	}  }  
Magic Number,EarlyAlarmSystem,Program,C:\repos\momenh_ge.eas\server\Early Alarm System\Program.cs,Main,The following statement contains a magic number: if (args.Length == 2) {  	if (args [0] == "-W") {  		int number = int.Parse (args [1]);  		System.Threading.Thread.Sleep (1000 * number);  	}  }  
Magic Number,EarlyAlarmSystem,Program,C:\repos\momenh_ge.eas\server\Early Alarm System\Program.cs,Main,The following statement contains a magic number: if (args.Length == 2) {  	if (args [0] == "-W") {  		int number = int.Parse (args [1]);  		System.Threading.Thread.Sleep (1000 * number);  	}  }  
Magic Number,EarlyAlarmSystem,Program,C:\repos\momenh_ge.eas\server\Early Alarm System\Program.cs,Main,The following statement contains a magic number: if (args [0] == "-W") {  	int number = int.Parse (args [1]);  	System.Threading.Thread.Sleep (1000 * number);  }  
Magic Number,EarlyAlarmSystem,Program,C:\repos\momenh_ge.eas\server\Early Alarm System\Program.cs,Main,The following statement contains a magic number: System.Threading.Thread.Sleep (1000 * number);  
Magic Number,EarlyAlarmSystem,Program,C:\repos\momenh_ge.eas\server\Early Alarm System\Program.cs,Main,The following statement contains a magic number: try {  	//step 1 load all sites from database  	SitesBD[] allSites;  	try {  		allSites = SitesBD.GetAllSites ();  	}  	catch (Exception ex) {  		EmailSender.sendApplicationErrorMail (ex);  		SMSSender.sendApplicationErrorSMS (ex);  		Logger.MAINLOGGER.logInfo ("error loading sites");  		return;  	}  	Logger.MAINLOGGER.logInfo ("All Sites Loaded");  	//step 2 load all alarms from database  	AlarmsBD[] allAlarms;  	try {  		allAlarms = AlarmsBD.GetAllAlarms ();  	}  	catch (Exception ex) {  		try {  			EmailSender.sendApplicationErrorMail (ex);  			SMSSender.sendApplicationErrorSMS (ex);  		}  		catch (Exception exx) {  			Logger.MAINLOGGER.logError ("error sending application error messages  - THIS IS HOPLESS :)"' exx);  		}  		Logger.MAINLOGGER.logInfo ("error loading alarms");  		return;  	}  	Logger.MAINLOGGER.logInfo ("All Alarms Loaded");  	alarmsHandlers = new AlarmBase[allAlarms.Length];  	//Step 3 start Master Messsage Handler  	EmailSMSHandler.MasterMessagesHandler = new EmailSMSHandler (allSites);  	//step 4 for every alarm type install a separate checking thread  	for (int i = 0; i < allAlarms.Length; i++) {  		//if (allAlarms[i].ID == "AmbTmp1_MN")  		alarmsHandlers [i] = AlarmsFactory.GenerateAlarm (allAlarms [i]' allSites);  	}  	Logger.MAINLOGGER.logInfo ("All Alarms Threaded Handlers Started ");  	//step 5 start network port to listenning for incomming connection  	//step 6 loop over the method of checking for incoming connections  	//step 7 decifer the incomming data and save to database  	//step 8 repeat 6-7 steps   	//all steps 5->8 is done here  	System.Threading.Thread PacketsHandlerThread = new System.Threading.Thread (NetworkHandler.HandleIncommingNetowrkCommunication);  	PacketsHandlerThread.Start ();  	//here we wait untill it is time to restart application  	while (DateTime.Now < EndTime) {  		System.Threading.Thread.Sleep ((1000) * (60) * (5));  	}  	PacketsHandlerThread.Abort ();  	//start new instance but till it to wait for about 10 secs  	Logger.MAINLOGGER.logInfo ("restart server as planned - time : " + EndTime.ToString ());  	System.Diagnostics.Process.Start (System.Reflection.Assembly.GetEntryAssembly ().Location' "-W 10");  }  catch (Exception ex) {  	Logger.MAINLOGGER.logError ("General Fatal Error"' ex);  }  
Magic Number,EarlyAlarmSystem,Program,C:\repos\momenh_ge.eas\server\Early Alarm System\Program.cs,Main,The following statement contains a magic number: try {  	//step 1 load all sites from database  	SitesBD[] allSites;  	try {  		allSites = SitesBD.GetAllSites ();  	}  	catch (Exception ex) {  		EmailSender.sendApplicationErrorMail (ex);  		SMSSender.sendApplicationErrorSMS (ex);  		Logger.MAINLOGGER.logInfo ("error loading sites");  		return;  	}  	Logger.MAINLOGGER.logInfo ("All Sites Loaded");  	//step 2 load all alarms from database  	AlarmsBD[] allAlarms;  	try {  		allAlarms = AlarmsBD.GetAllAlarms ();  	}  	catch (Exception ex) {  		try {  			EmailSender.sendApplicationErrorMail (ex);  			SMSSender.sendApplicationErrorSMS (ex);  		}  		catch (Exception exx) {  			Logger.MAINLOGGER.logError ("error sending application error messages  - THIS IS HOPLESS :)"' exx);  		}  		Logger.MAINLOGGER.logInfo ("error loading alarms");  		return;  	}  	Logger.MAINLOGGER.logInfo ("All Alarms Loaded");  	alarmsHandlers = new AlarmBase[allAlarms.Length];  	//Step 3 start Master Messsage Handler  	EmailSMSHandler.MasterMessagesHandler = new EmailSMSHandler (allSites);  	//step 4 for every alarm type install a separate checking thread  	for (int i = 0; i < allAlarms.Length; i++) {  		//if (allAlarms[i].ID == "AmbTmp1_MN")  		alarmsHandlers [i] = AlarmsFactory.GenerateAlarm (allAlarms [i]' allSites);  	}  	Logger.MAINLOGGER.logInfo ("All Alarms Threaded Handlers Started ");  	//step 5 start network port to listenning for incomming connection  	//step 6 loop over the method of checking for incoming connections  	//step 7 decifer the incomming data and save to database  	//step 8 repeat 6-7 steps   	//all steps 5->8 is done here  	System.Threading.Thread PacketsHandlerThread = new System.Threading.Thread (NetworkHandler.HandleIncommingNetowrkCommunication);  	PacketsHandlerThread.Start ();  	//here we wait untill it is time to restart application  	while (DateTime.Now < EndTime) {  		System.Threading.Thread.Sleep ((1000) * (60) * (5));  	}  	PacketsHandlerThread.Abort ();  	//start new instance but till it to wait for about 10 secs  	Logger.MAINLOGGER.logInfo ("restart server as planned - time : " + EndTime.ToString ());  	System.Diagnostics.Process.Start (System.Reflection.Assembly.GetEntryAssembly ().Location' "-W 10");  }  catch (Exception ex) {  	Logger.MAINLOGGER.logError ("General Fatal Error"' ex);  }  
Magic Number,EarlyAlarmSystem,Program,C:\repos\momenh_ge.eas\server\Early Alarm System\Program.cs,Main,The following statement contains a magic number: try {  	//step 1 load all sites from database  	SitesBD[] allSites;  	try {  		allSites = SitesBD.GetAllSites ();  	}  	catch (Exception ex) {  		EmailSender.sendApplicationErrorMail (ex);  		SMSSender.sendApplicationErrorSMS (ex);  		Logger.MAINLOGGER.logInfo ("error loading sites");  		return;  	}  	Logger.MAINLOGGER.logInfo ("All Sites Loaded");  	//step 2 load all alarms from database  	AlarmsBD[] allAlarms;  	try {  		allAlarms = AlarmsBD.GetAllAlarms ();  	}  	catch (Exception ex) {  		try {  			EmailSender.sendApplicationErrorMail (ex);  			SMSSender.sendApplicationErrorSMS (ex);  		}  		catch (Exception exx) {  			Logger.MAINLOGGER.logError ("error sending application error messages  - THIS IS HOPLESS :)"' exx);  		}  		Logger.MAINLOGGER.logInfo ("error loading alarms");  		return;  	}  	Logger.MAINLOGGER.logInfo ("All Alarms Loaded");  	alarmsHandlers = new AlarmBase[allAlarms.Length];  	//Step 3 start Master Messsage Handler  	EmailSMSHandler.MasterMessagesHandler = new EmailSMSHandler (allSites);  	//step 4 for every alarm type install a separate checking thread  	for (int i = 0; i < allAlarms.Length; i++) {  		//if (allAlarms[i].ID == "AmbTmp1_MN")  		alarmsHandlers [i] = AlarmsFactory.GenerateAlarm (allAlarms [i]' allSites);  	}  	Logger.MAINLOGGER.logInfo ("All Alarms Threaded Handlers Started ");  	//step 5 start network port to listenning for incomming connection  	//step 6 loop over the method of checking for incoming connections  	//step 7 decifer the incomming data and save to database  	//step 8 repeat 6-7 steps   	//all steps 5->8 is done here  	System.Threading.Thread PacketsHandlerThread = new System.Threading.Thread (NetworkHandler.HandleIncommingNetowrkCommunication);  	PacketsHandlerThread.Start ();  	//here we wait untill it is time to restart application  	while (DateTime.Now < EndTime) {  		System.Threading.Thread.Sleep ((1000) * (60) * (5));  	}  	PacketsHandlerThread.Abort ();  	//start new instance but till it to wait for about 10 secs  	Logger.MAINLOGGER.logInfo ("restart server as planned - time : " + EndTime.ToString ());  	System.Diagnostics.Process.Start (System.Reflection.Assembly.GetEntryAssembly ().Location' "-W 10");  }  catch (Exception ex) {  	Logger.MAINLOGGER.logError ("General Fatal Error"' ex);  }  
Magic Number,EarlyAlarmSystem,Program,C:\repos\momenh_ge.eas\server\Early Alarm System\Program.cs,Main,The following statement contains a magic number: while (DateTime.Now < EndTime) {  	System.Threading.Thread.Sleep ((1000) * (60) * (5));  }  
Magic Number,EarlyAlarmSystem,Program,C:\repos\momenh_ge.eas\server\Early Alarm System\Program.cs,Main,The following statement contains a magic number: while (DateTime.Now < EndTime) {  	System.Threading.Thread.Sleep ((1000) * (60) * (5));  }  
Magic Number,EarlyAlarmSystem,Program,C:\repos\momenh_ge.eas\server\Early Alarm System\Program.cs,Main,The following statement contains a magic number: while (DateTime.Now < EndTime) {  	System.Threading.Thread.Sleep ((1000) * (60) * (5));  }  
Magic Number,EarlyAlarmSystem,Program,C:\repos\momenh_ge.eas\server\Early Alarm System\Program.cs,Main,The following statement contains a magic number: System.Threading.Thread.Sleep ((1000) * (60) * (5));  
Magic Number,EarlyAlarmSystem,Program,C:\repos\momenh_ge.eas\server\Early Alarm System\Program.cs,Main,The following statement contains a magic number: System.Threading.Thread.Sleep ((1000) * (60) * (5));  
Magic Number,EarlyAlarmSystem,Program,C:\repos\momenh_ge.eas\server\Early Alarm System\Program.cs,Main,The following statement contains a magic number: System.Threading.Thread.Sleep ((1000) * (60) * (5));  
