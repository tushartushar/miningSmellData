Design smell,Namespace,Class,File,Cause
Unutilized Abstraction,Ploeh.AutoFixture.AutoMoq,MockType,F:\newReposMay17\AutoFixture_AutoFixture\Src\AutoMoq\MockType.cs,The tool detected the smell in this class because this class is potentially unused.   (Please ignore the smell if the reported class is auto-generated and/or used to serve a specific known purpose.)
Imperative Abstraction,Ploeh.AutoFixture.AutoMoq,MockVirtualMethodsCommand,F:\newReposMay17\AutoFixture_AutoFixture\Src\AutoMoq\MockVirtualMethodsCommand.cs,The tool detected the smell in this class because it looks like that an operation is turned into a class. This class contains only the following public method: Execute
Unutilized Abstraction,Ploeh.AutoFixture.AutoMoq.Extensions,MethodInfoExtensions,F:\newReposMay17\AutoFixture_AutoFixture\Src\AutoMoq\Extensions\MethodInfoBaseExtensions.cs,The tool detected the smell in this class because this class is potentially unused.   (Please ignore the smell if the reported class is auto-generated and/or used to serve a specific known purpose.)
Unutilized Abstraction,Ploeh.AutoFixture.AutoMoq.Extensions,TypeExtensions,F:\newReposMay17\AutoFixture_AutoFixture\Src\AutoMoq\Extensions\TypeExtensions.cs,The tool detected the smell in this class because this class is potentially unused.   (Please ignore the smell if the reported class is auto-generated and/or used to serve a specific known purpose.)
Missing Hierarchy,Ploeh.AutoFixture.AutoMoq,MockPostprocessor,F:\newReposMay17\AutoFixture_AutoFixture\Src\AutoMoq\MockPostprocessor.cs,The tool detected the smell because a set of type checks are performed to explicitly manage variation in behavior where a hierarchy could have been formed consisting of these participating types. The participating types that were checked are: NoSpecimen' OmitSpecimen (in method "Create" of class "MockPostprocessor").
Missing Hierarchy,Ploeh.AutoFixture.AutoMoq,MockRelay,F:\newReposMay17\AutoFixture_AutoFixture\Src\AutoMoq\MockRelay.cs,The tool detected the smell because a set of type checks are performed to explicitly manage variation in behavior where a hierarchy could have been formed consisting of these participating types. The participating types that were checked are: NoSpecimen' OmitSpecimen (in method "Create" of class "MockRelay").
