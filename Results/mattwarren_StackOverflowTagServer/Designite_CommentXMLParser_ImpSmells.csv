Implementation smell,Namespace,Class,File,Method,Description
Magic Number,CommentXMLParser,Program,C:\repos\mattwarren_StackOverflowTagServer\CommentXMLParser\Program.cs,Main,The following statement contains a magic number: if (recreate)              {                  var timer = Stopwatch.StartNew();                  var questions = SimpleStreamAxis(inputUrl)                      .Where(el => (string) el.Attribute("PostTypeId") == "1")                      .Select(el =>                      {                          return new Question                          {                              Id = long.Parse((string)el.Attribute("Id"))'                              Title = (string)el.Attribute("Title")'                              RawTags = (string)el.Attribute("Tags")'                              CreationDate =                                  DateTime.Parse((string)el.Attribute("CreationDate")' null' DateTimeStyles.RoundtripKind)'                              LastActivityDate =                                  DateTime.Parse((string)el.Attribute("LastActivityDate")' null' DateTimeStyles.RoundtripKind)'                              Score = ParseIntOrNullable((string)el.Attribute("Score"))'                              ViewCount = ParseIntOrNullable((string)el.Attribute("ViewCount"))'                              AnswerCount = ParseIntOrNullable((string)el.Attribute("AnswerCount"))'                              AcceptedAnswerId = ParseIntOrNullable((string)el.Attribute("AcceptedAnswerId"))                          };                      })                      //.Take(1000)                      .ToList();                  timer.Stop();                    Console.WriteLine("Took {0} ({1'6} ms) to process {2} items"'                                    timer.Elapsed' timer.ElapsedMilliseconds' questions.Count);                    foreach (var value in questions.Take(10))                  {                      Console.WriteLine(value);                  }                    if (File.Exists(filename))                      File.Delete(filename);                    var fileWriteTimer = Stopwatch.StartNew();                  using (var file = File.Create(filename))                  {                      //Serializer.Serialize(file' values.Where(x => x.AcceptedAnswerId == null).Take(100).ToList());                      //Serializer.Serialize(file' values.Where(x => x.AnswerCount == null).Take(100).ToList());                      Serializer.Serialize(file' questions);                      //Serializer.Serialize()                  }                  fileWriteTimer.Stop();                  Console.WriteLine("Took {0} to serialise {1} items to the file"' fileWriteTimer.Elapsed' questions.Count);              }
Magic Number,CommentXMLParser,Program,C:\repos\mattwarren_StackOverflowTagServer\CommentXMLParser\Program.cs,Main,The following statement contains a magic number: var mostViews = rttQuestions.OrderByDescending(x => x.ViewCount).Take(100).ToList();
Magic Number,CommentXMLParser,Program,C:\repos\mattwarren_StackOverflowTagServer\CommentXMLParser\Program.cs,HumanReadableFileSize,The following statement contains a magic number: while (numBytes >= 1024 && order + 1 < sizes.Length)              {                  order++;                  numBytes = numBytes / 1024;              }
Magic Number,CommentXMLParser,Program,C:\repos\mattwarren_StackOverflowTagServer\CommentXMLParser\Program.cs,HumanReadableFileSize,The following statement contains a magic number: while (numBytes >= 1024 && order + 1 < sizes.Length)              {                  order++;                  numBytes = numBytes / 1024;              }
Missing Default,CommentXMLParser,Program,C:\repos\mattwarren_StackOverflowTagServer\CommentXMLParser\Program.cs,SimpleStreamAxis,The following switch statement is missing a default case: switch (reader.NodeType)                      {                          case XmlNodeType.Element:                              //if (reader.Name == matchName)                              {                                  //XElement el = XElement.ReadFrom(reader) as XElement;                                  var el = XNode.ReadFrom(reader) as XElement;                                  if (el != null)                                      yield return el;                              }                              break;                      }
