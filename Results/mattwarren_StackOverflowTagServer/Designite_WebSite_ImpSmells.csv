Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Server.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,GetSample,Cyclomatic complexity of the method is 8
Complex Method,Server.Areas.HelpPage,ObjectGenerator,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\SampleGeneration\ObjectGenerator.cs,GenerateObject,Cyclomatic complexity of the method is 11
Complex Method,Server.Areas.HelpPage,ObjectGenerator,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\SampleGeneration\ObjectGenerator.cs,GenerateGenericType,Cyclomatic complexity of the method is 12
Complex Method,Server.Areas.HelpPage.ModelDescriptions,ModelDescriptionGenerator,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\ModelDescriptions\ModelDescriptionGenerator.cs,GetOrCreateModelDescription,Cyclomatic complexity of the method is 17
Complex Method,Server.Infrastructure,ActionWebApiFilter,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Infrastructure\ActionWebApiFilter.cs,OnActionExecuted,Cyclomatic complexity of the method is 8
Long Parameter List,Server.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\HelpPageConfigurationExtensions.cs,SetSampleRequest,The method has 5 parameters. Parameters: config' sample' mediaType' controllerName' actionName
Long Parameter List,Server.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\HelpPageConfigurationExtensions.cs,SetSampleRequest,The method has 6 parameters. Parameters: config' sample' mediaType' controllerName' actionName' parameterNames
Long Parameter List,Server.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\HelpPageConfigurationExtensions.cs,SetSampleResponse,The method has 5 parameters. Parameters: config' sample' mediaType' controllerName' actionName
Long Parameter List,Server.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\HelpPageConfigurationExtensions.cs,SetSampleResponse,The method has 6 parameters. Parameters: config' sample' mediaType' controllerName' actionName' parameterNames
Long Parameter List,Server.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\HelpPageConfigurationExtensions.cs,SetActualRequestType,The method has 5 parameters. Parameters: config' type' controllerName' actionName' parameterNames
Long Parameter List,Server.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\HelpPageConfigurationExtensions.cs,SetActualResponseType,The method has 5 parameters. Parameters: config' type' controllerName' actionName' parameterNames
Long Parameter List,Server.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,GetActionSample,The method has 7 parameters. Parameters: controllerName' actionName' parameterNames' type' formatter' mediaType' sampleDirection
Long Parameter List,Server.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,ResolveType,The method has 6 parameters. Parameters: api' controllerName' actionName' parameterNames' sampleDirection' formatters
Long Parameter List,Server.Areas.HelpPage,HelpPageSampleKey,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\SampleGeneration\HelpPageSampleKey.cs,HelpPageSampleKey,The method has 5 parameters. Parameters: mediaType' sampleDirection' controllerName' actionName' parameterNames
Long Parameter List,Server.Controllers,QueryController,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Controllers\QueryController.cs,GetDebugInfo,The method has 8 parameters. Parameters: queryInfo' result' leppieWildcards' leppieExpandedTags' totalTime' queryTime' tagsExpansionTime' exclusionBitMapTime
Long Statement,Server,WebApiApplication,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Global.asax.cs,DownloadBlob,The length of the statement  "                Trace.WriteLine(string.Format("File {0}' Info (on disk) {1:N0} bytes"' Path.GetFileName(outputPath)' new FileInfo(outputPath).Length)); " is 135.
Long Statement,Server.Areas.HelpPage,HelpPageConfig,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\App_Start\HelpPageConfig.cs,Register,The length of the statement  "            //config.SetDocumentationProvider(new XmlDocumentationProvider(HttpContext.Current.Server.MapPath("~/App_Data/XmlDocument.xml"))); " is 130.
Long Statement,Server.Areas.HelpPage,HelpPageConfig,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\App_Start\HelpPageConfig.cs,Register,The length of the statement  "            //// Uncomment the following to use "sample string" as the sample for all actions that have string as the body parameter or return type. " is 136.
Long Statement,Server.Areas.HelpPage,HelpPageConfig,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\App_Start\HelpPageConfig.cs,Register,The length of the statement  "            //// Also' the string arrays will be used for IEnumerable<string>. The sample objects will be serialized into different media type  " is 130.
Long Statement,Server.Areas.HelpPage,HelpPageConfig,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\App_Start\HelpPageConfig.cs,Register,The length of the statement  "            //// Uncomment the following to use "[0]=foo&[1]=bar" directly as the sample for all actions that support form URL encoded format " is 129.
Long Statement,Server.Areas.HelpPage,HelpPageConfig,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\App_Start\HelpPageConfig.cs,Register,The length of the statement  "            //config.SetSampleForType("[0]=foo&[1]=bar"' new MediaTypeHeaderValue("application/x-www-form-urlencoded")' typeof(IEnumerable<string>)); " is 137.
Long Statement,Server.Areas.HelpPage,HelpPageConfig,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\App_Start\HelpPageConfig.cs,Register,The length of the statement  "            //// Uncomment the following to use "1234" directly as the request sample for media type "text/plain" on the controller named "Values" " is 134.
Long Statement,Server.Areas.HelpPage,HelpPageConfig,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\App_Start\HelpPageConfig.cs,Register,The length of the statement  "            //// Uncomment the following to use the image on "../images/aspNetHome.png" directly as the response sample for media type "image/png" " is 134.
Long Statement,Server.Areas.HelpPage,HelpPageConfig,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\App_Start\HelpPageConfig.cs,Register,The length of the statement  "            //config.SetSampleResponse(new ImageSample("../images/aspNetHome.png")' new MediaTypeHeaderValue("image/png")' "Values"' "Get"' "id"); " is 134.
Long Statement,Server.Areas.HelpPage,HelpPageConfig,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\App_Start\HelpPageConfig.cs,Register,The length of the statement  "            //// Uncomment the following to correct the sample request when the action expects an HttpRequestMessage with ObjectContent<string>. " is 132.
Long Statement,Server.Areas.HelpPage,HelpPageConfig,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\App_Start\HelpPageConfig.cs,Register,The length of the statement  "            //// The sample will be generated as if the controller named "Values" and action named "Get" were having string as the body parameter. " is 134.
Long Statement,Server.Areas.HelpPage,HelpPageConfig,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\App_Start\HelpPageConfig.cs,Register,The length of the statement  "            //// Uncomment the following to correct the sample response when the action returns an HttpResponseMessage with ObjectContent<string>. " is 134.
Long Statement,Server.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\HelpPageConfigurationExtensions.cs,SetSampleRequest,The length of the statement  "            config.GetHelpPageSampleGenerator().ActionSamples.Add(new HelpPageSampleKey(mediaType' SampleDirection.Request' controllerName' actionName' new[] { "*" })' sample); " is 164.
Long Statement,Server.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\HelpPageConfigurationExtensions.cs,SetSampleRequest,The length of the statement  "            config.GetHelpPageSampleGenerator().ActionSamples.Add(new HelpPageSampleKey(mediaType' SampleDirection.Request' controllerName' actionName' parameterNames)' sample); " is 165.
Long Statement,Server.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\HelpPageConfigurationExtensions.cs,SetSampleResponse,The length of the statement  "            config.GetHelpPageSampleGenerator().ActionSamples.Add(new HelpPageSampleKey(mediaType' SampleDirection.Response' controllerName' actionName' new[] { "*" })' sample); " is 165.
Long Statement,Server.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\HelpPageConfigurationExtensions.cs,SetSampleResponse,The length of the statement  "            config.GetHelpPageSampleGenerator().ActionSamples.Add(new HelpPageSampleKey(mediaType' SampleDirection.Response' controllerName' actionName' parameterNames)' sample); " is 166.
Long Statement,Server.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\HelpPageConfigurationExtensions.cs,SetActualRequestType,The length of the statement  "            config.GetHelpPageSampleGenerator().ActualHttpMessageTypes.Add(new HelpPageSampleKey(SampleDirection.Request' controllerName' actionName' new[] { "*" })' type); " is 160.
Long Statement,Server.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\HelpPageConfigurationExtensions.cs,SetActualRequestType,The length of the statement  "            config.GetHelpPageSampleGenerator().ActualHttpMessageTypes.Add(new HelpPageSampleKey(SampleDirection.Request' controllerName' actionName' parameterNames)' type); " is 161.
Long Statement,Server.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\HelpPageConfigurationExtensions.cs,SetActualResponseType,The length of the statement  "            config.GetHelpPageSampleGenerator().ActualHttpMessageTypes.Add(new HelpPageSampleKey(SampleDirection.Response' controllerName' actionName' new[] { "*" })' type); " is 161.
Long Statement,Server.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\HelpPageConfigurationExtensions.cs,SetActualResponseType,The length of the statement  "            config.GetHelpPageSampleGenerator().ActualHttpMessageTypes.Add(new HelpPageSampleKey(SampleDirection.Response' controllerName' actionName' parameterNames)' type); " is 162.
Long Statement,Server.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\HelpPageConfigurationExtensions.cs,GetHelpPageApiModel,The length of the statement  "                ApiDescription apiDescription = apiDescriptions.FirstOrDefault(api => String.Equals(api.GetFriendlyId()' apiDescriptionId' StringComparison.OrdinalIgnoreCase)); " is 160.
Long Statement,Server.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\HelpPageConfigurationExtensions.cs,GenerateUriParameters,The length of the statement  "                            uriParameter.Annotations.Add(new ParameterAnnotation() { Documentation = "Default value is " + Convert.ToString(defaultValue' CultureInfo.InvariantCulture) }); " is 159.
Long Statement,Server.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,GetSample,The length of the statement  "            // Here we cannot rely on formatters because we don't know what's in the HttpResponseMessage' it might not even use formatters. " is 127.
Long Statement,Server.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,GetSample,The length of the statement  "                            object sample = GetActionSample(controllerName' actionName' parameterNames' type' formatter' mediaType' sampleDirection); " is 121.
Long Statement,Server.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,GetActionSample,The length of the statement  "            // First' try to get the sample provided for the specified mediaType' sampleDirection' controllerName' actionName and parameterNames. " is 133.
Long Statement,Server.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,GetActionSample,The length of the statement  "            // If not found' try to get the sample provided for the specified mediaType' sampleDirection' controllerName and actionName regardless of the parameterNames. " is 157.
Long Statement,Server.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,GetActionSample,The length of the statement  "            if (ActionSamples.TryGetValue(new HelpPageSampleKey(mediaType' sampleDirection' controllerName' actionName' parameterNames)' out sample) || " is 139.
Long Statement,Server.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,GetActionSample,The length of the statement  "                ActionSamples.TryGetValue(new HelpPageSampleKey(mediaType' sampleDirection' controllerName' actionName' new[] { "*" })' out sample) || " is 134.
Long Statement,Server.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,ResolveType,The length of the statement  "            if (ActualHttpMessageTypes.TryGetValue(new HelpPageSampleKey(sampleDirection' controllerName' actionName' parameterNames)' out type) || " is 135.
Long Statement,Server.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,ResolveType,The length of the statement  "                ActualHttpMessageTypes.TryGetValue(new HelpPageSampleKey(sampleDirection' controllerName' actionName' new[] { "*" })' out type)) " is 128.
Long Statement,Server.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,ResolveType,The length of the statement  "                        ApiParameterDescription requestBodyParameter = api.ParameterDescriptions.FirstOrDefault(p => p.Source == ApiParameterSource.FromBody); " is 134.
Long Statement,Server.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,WriteSampleObjectUsingFormatter,The length of the statement  "                    "An exception has occurred while using the formatter '{0}' to generate sample for media type '{1}'. Exception message: {2}"' " is 124.
Long Statement,Server.Areas.HelpPage,XmlDocumentationProvider,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\XmlDocumentationProvider.cs,GetDocumentation,The length of the statement  "            ReflectedHttpParameterDescriptor reflectedParameterDescriptor = parameterDescriptor as ReflectedHttpParameterDescriptor; " is 120.
Long Statement,Server.Areas.HelpPage,XmlDocumentationProvider,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\XmlDocumentationProvider.cs,GetDocumentation,The length of the statement  "                    XPathNavigator parameterNode = methodNode.SelectSingleNode(String.Format(CultureInfo.InvariantCulture' ParameterExpression' parameterName)); " is 140.
Long Statement,Server.Areas.HelpPage,XmlDocumentationProvider,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\XmlDocumentationProvider.cs,GetDocumentation,The length of the statement  "            string memberName = String.Format(CultureInfo.InvariantCulture' "{0}.{1}"' GetTypeName(member.DeclaringType)' member.Name); " is 123.
Long Statement,Server.Areas.HelpPage,XmlDocumentationProvider,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\XmlDocumentationProvider.cs,GetMethodNode,The length of the statement  "                string selectExpression = String.Format(CultureInfo.InvariantCulture' MethodExpression' GetMemberName(reflectedActionDescriptor.MethodInfo)); " is 141.
Long Statement,Server.Areas.HelpPage.ModelDescriptions,ModelNameHelper,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\ModelDescriptions\ModelNameHelper.cs,GetModelName,The length of the statement  "                modelName = String.Format(CultureInfo.InvariantCulture' "{0}Of{1}"' genericTypeName' String.Join("And"' argumentTypeNames)); " is 124.
Long Statement,Server.Controllers,InfoController,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Controllers\InfoController.cs,GetAPIInfo,The length of the statement  "                        { urlRoot + "Tags/c%23"' "c# questions (have to escape \"c#\" -> \"c%23\")' defaults to QueryType.ViewCount' pageSize = 50' skip = 0" }' " is 136.
Long Statement,Server.Controllers,InfoController,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Controllers\InfoController.cs,GetAPIInfo,The length of the statement  "                        { urlRoot + "Query/.net?operator=OR-NOT&otherTag=jquery&useLinq=true"' "OR NOT' i.e. 'C# OR NOT jQuery' BUT using LINQ" }' " is 122.
Long Statement,Server.Controllers,InfoController,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Controllers\InfoController.cs,GetAPIInfo,The length of the statement  "                        { urlRoot + "/Wildcards/?wildcards=*c%23*'*java*"' "Show all the Tags that matches the given wildcards (comma seperated list' starts-with' end-with or contains only)" }' " is 169.
Long Statement,Server.Controllers,InfoController,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Controllers\InfoController.cs,GetAPIInfo,The length of the statement  "                        { urlRoot + "/Wildcards/?wildcards=*c%23'c%23*'.net"' "Show all the Tags that matches the given wildcards (comma seperated list' starts-with' end-with or contains only)" }' " is 172.
Long Statement,Server.Controllers,QueryController,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Controllers\QueryController.cs,GetDebugInfo,The length of the statement  "                QueryType = queryInfo.Type.ToString()' // In QueryInfo this is just printed as the number' i.e. "3"' rather than "ViewCount" " is 124.
Long Statement,Server.Controllers,QueryController,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Controllers\QueryController.cs,GetDebugInfo,The length of the statement  "                ShouldHaveBeenExcludedResults = WebApiApplication.TagServer.Value.GetShouldHaveBeenExcludedResults(result.Questions' queryInfo' leppieExpandedTags)' " is 148.
Long Statement,Server.Controllers,WildcardController,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Controllers\WildcardController.cs,Expand,The length of the statement  "                //QuestionsIncludingExpandedTags = ((ulong)WebApiApplication.TagServer.Value.Questions.Count - bitMapIndex.GetCardinality()).ToString("N0")' " is 140.
Long Statement,Server.Controllers,WildcardController,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Controllers\WildcardController.cs,Expand,The length of the statement  "                InitialWildcards = useLeppieWildcards ? "USING Leppie's Wildcards' list to big to print!!!" : String.Join(" - "' initialWildcards)' " is 131.
Long Statement,Server.Infrastructure,ActionWebApiFilter,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Infrastructure\ActionWebApiFilter.cs,OnActionExecuted,The length of the statement  "                Trace.WriteLine(String.Format("    Took {0} ({1:N2} msecs)"' Timer.Value.Elapsed' Timer.Value.Elapsed.TotalMilliseconds)); " is 122.
Long Statement,Server.Infrastructure,ActionWebApiFilter,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Infrastructure\ActionWebApiFilter.cs,OnActionExecuted,The length of the statement  "                        var headersAsText = String.Join("' "' headers.Select(h => String.Format("{0}: {1}"' h.Key' String.Join("' "' h.Value)))); " is 121.
Complex Conditional,Server.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,GetActionSample,The conditional expression  "ActionSamples.TryGetValue(new HelpPageSampleKey(mediaType' sampleDirection' controllerName' actionName' parameterNames)' out sample) ||                  ActionSamples.TryGetValue(new HelpPageSampleKey(mediaType' sampleDirection' controllerName' actionName' new[] { "*" })' out sample) ||                  ActionSamples.TryGetValue(new HelpPageSampleKey(mediaType' type)' out sample) ||                  ActionSamples.TryGetValue(new HelpPageSampleKey(mediaType)' out sample)"  is complex.
Complex Conditional,Server.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,GetAllActionSamples,The conditional expression  "String.Equals(controllerName' sampleKey.ControllerName' StringComparison.OrdinalIgnoreCase) &&                      String.Equals(actionName' sampleKey.ActionName' StringComparison.OrdinalIgnoreCase) &&                      (sampleKey.ParameterNames.SetEquals(new[] { "*" }) || parameterNamesSet.SetEquals(sampleKey.ParameterNames)) &&                      sampleDirection == sampleKey.SampleDirection"  is complex.
Empty Catch Block,Server.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,GetSampleObject,The method has an empty catch block.
Magic Number,Server.Areas.HelpPage,ObjectGenerator,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\SampleGeneration\ObjectGenerator.cs,GenerateGenericType,The following statement contains a magic number: if (genericArguments.Length == 2)              {                  if (genericTypeDefinition == typeof(IDictionary<'>))                  {                      Type dictionaryType = typeof(Dictionary<'>).MakeGenericType(genericArguments);                      return GenerateDictionary(dictionaryType' collectionSize' createdObjectReferences);                  }                    Type closedDictionaryType = typeof(IDictionary<'>).MakeGenericType(genericArguments[0]' genericArguments[1]);                  if (closedDictionaryType.IsAssignableFrom(type))                  {                      return GenerateDictionary(type' collectionSize' createdObjectReferences);                  }              }
Magic Number,Server.Areas.HelpPage,SimpleTypeObjectGenerator,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\SampleGeneration\ObjectGenerator.cs,InitializeGenerators,The following statement contains a magic number: return new Dictionary<Type' Func<long' object>>                  {                      { typeof(Boolean)' index => true }'                      { typeof(Byte)' index => (Byte)64 }'                      { typeof(Char)' index => (Char)65 }'                      { typeof(DateTime)' index => DateTime.Now }'                      { typeof(DateTimeOffset)' index => new DateTimeOffset(DateTime.Now) }'                      { typeof(DBNull)' index => DBNull.Value }'                      { typeof(Decimal)' index => (Decimal)index }'                      { typeof(Double)' index => (Double)(index + 0.1) }'                      { typeof(Guid)' index => Guid.NewGuid() }'                      { typeof(Int16)' index => (Int16)(index % Int16.MaxValue) }'                      { typeof(Int32)' index => (Int32)(index % Int32.MaxValue) }'                      { typeof(Int64)' index => (Int64)index }'                      { typeof(Object)' index => new object() }'                      { typeof(SByte)' index => (SByte)64 }'                      { typeof(Single)' index => (Single)(index + 0.1) }'                      {                           typeof(String)' index =>                          {                              return String.Format(CultureInfo.CurrentCulture' "sample string {0}"' index);                          }                      }'                      {                           typeof(TimeSpan)' index =>                          {                              return TimeSpan.FromTicks(1234567);                          }                      }'                      { typeof(UInt16)' index => (UInt16)(index % UInt16.MaxValue) }'                      { typeof(UInt32)' index => (UInt32)(index % UInt32.MaxValue) }'                      { typeof(UInt64)' index => (UInt64)index }'                      {                           typeof(Uri)' index =>                          {                              return new Uri(String.Format(CultureInfo.CurrentCulture' "http://webapihelppage{0}.com"' index));                          }                      }'                  };
Magic Number,Server.Areas.HelpPage,SimpleTypeObjectGenerator,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\SampleGeneration\ObjectGenerator.cs,InitializeGenerators,The following statement contains a magic number: return new Dictionary<Type' Func<long' object>>                  {                      { typeof(Boolean)' index => true }'                      { typeof(Byte)' index => (Byte)64 }'                      { typeof(Char)' index => (Char)65 }'                      { typeof(DateTime)' index => DateTime.Now }'                      { typeof(DateTimeOffset)' index => new DateTimeOffset(DateTime.Now) }'                      { typeof(DBNull)' index => DBNull.Value }'                      { typeof(Decimal)' index => (Decimal)index }'                      { typeof(Double)' index => (Double)(index + 0.1) }'                      { typeof(Guid)' index => Guid.NewGuid() }'                      { typeof(Int16)' index => (Int16)(index % Int16.MaxValue) }'                      { typeof(Int32)' index => (Int32)(index % Int32.MaxValue) }'                      { typeof(Int64)' index => (Int64)index }'                      { typeof(Object)' index => new object() }'                      { typeof(SByte)' index => (SByte)64 }'                      { typeof(Single)' index => (Single)(index + 0.1) }'                      {                           typeof(String)' index =>                          {                              return String.Format(CultureInfo.CurrentCulture' "sample string {0}"' index);                          }                      }'                      {                           typeof(TimeSpan)' index =>                          {                              return TimeSpan.FromTicks(1234567);                          }                      }'                      { typeof(UInt16)' index => (UInt16)(index % UInt16.MaxValue) }'                      { typeof(UInt32)' index => (UInt32)(index % UInt32.MaxValue) }'                      { typeof(UInt64)' index => (UInt64)index }'                      {                           typeof(Uri)' index =>                          {                              return new Uri(String.Format(CultureInfo.CurrentCulture' "http://webapihelppage{0}.com"' index));                          }                      }'                  };
Magic Number,Server.Areas.HelpPage,SimpleTypeObjectGenerator,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\SampleGeneration\ObjectGenerator.cs,InitializeGenerators,The following statement contains a magic number: return new Dictionary<Type' Func<long' object>>                  {                      { typeof(Boolean)' index => true }'                      { typeof(Byte)' index => (Byte)64 }'                      { typeof(Char)' index => (Char)65 }'                      { typeof(DateTime)' index => DateTime.Now }'                      { typeof(DateTimeOffset)' index => new DateTimeOffset(DateTime.Now) }'                      { typeof(DBNull)' index => DBNull.Value }'                      { typeof(Decimal)' index => (Decimal)index }'                      { typeof(Double)' index => (Double)(index + 0.1) }'                      { typeof(Guid)' index => Guid.NewGuid() }'                      { typeof(Int16)' index => (Int16)(index % Int16.MaxValue) }'                      { typeof(Int32)' index => (Int32)(index % Int32.MaxValue) }'                      { typeof(Int64)' index => (Int64)index }'                      { typeof(Object)' index => new object() }'                      { typeof(SByte)' index => (SByte)64 }'                      { typeof(Single)' index => (Single)(index + 0.1) }'                      {                           typeof(String)' index =>                          {                              return String.Format(CultureInfo.CurrentCulture' "sample string {0}"' index);                          }                      }'                      {                           typeof(TimeSpan)' index =>                          {                              return TimeSpan.FromTicks(1234567);                          }                      }'                      { typeof(UInt16)' index => (UInt16)(index % UInt16.MaxValue) }'                      { typeof(UInt32)' index => (UInt32)(index % UInt32.MaxValue) }'                      { typeof(UInt64)' index => (UInt64)index }'                      {                           typeof(Uri)' index =>                          {                              return new Uri(String.Format(CultureInfo.CurrentCulture' "http://webapihelppage{0}.com"' index));                          }                      }'                  };
Magic Number,Server.Areas.HelpPage,SimpleTypeObjectGenerator,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\SampleGeneration\ObjectGenerator.cs,InitializeGenerators,The following statement contains a magic number: return new Dictionary<Type' Func<long' object>>                  {                      { typeof(Boolean)' index => true }'                      { typeof(Byte)' index => (Byte)64 }'                      { typeof(Char)' index => (Char)65 }'                      { typeof(DateTime)' index => DateTime.Now }'                      { typeof(DateTimeOffset)' index => new DateTimeOffset(DateTime.Now) }'                      { typeof(DBNull)' index => DBNull.Value }'                      { typeof(Decimal)' index => (Decimal)index }'                      { typeof(Double)' index => (Double)(index + 0.1) }'                      { typeof(Guid)' index => Guid.NewGuid() }'                      { typeof(Int16)' index => (Int16)(index % Int16.MaxValue) }'                      { typeof(Int32)' index => (Int32)(index % Int32.MaxValue) }'                      { typeof(Int64)' index => (Int64)index }'                      { typeof(Object)' index => new object() }'                      { typeof(SByte)' index => (SByte)64 }'                      { typeof(Single)' index => (Single)(index + 0.1) }'                      {                           typeof(String)' index =>                          {                              return String.Format(CultureInfo.CurrentCulture' "sample string {0}"' index);                          }                      }'                      {                           typeof(TimeSpan)' index =>                          {                              return TimeSpan.FromTicks(1234567);                          }                      }'                      { typeof(UInt16)' index => (UInt16)(index % UInt16.MaxValue) }'                      { typeof(UInt32)' index => (UInt32)(index % UInt32.MaxValue) }'                      { typeof(UInt64)' index => (UInt64)index }'                      {                           typeof(Uri)' index =>                          {                              return new Uri(String.Format(CultureInfo.CurrentCulture' "http://webapihelppage{0}.com"' index));                          }                      }'                  };
Magic Number,Server.Areas.HelpPage,SimpleTypeObjectGenerator,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\SampleGeneration\ObjectGenerator.cs,InitializeGenerators,The following statement contains a magic number: return new Dictionary<Type' Func<long' object>>                  {                      { typeof(Boolean)' index => true }'                      { typeof(Byte)' index => (Byte)64 }'                      { typeof(Char)' index => (Char)65 }'                      { typeof(DateTime)' index => DateTime.Now }'                      { typeof(DateTimeOffset)' index => new DateTimeOffset(DateTime.Now) }'                      { typeof(DBNull)' index => DBNull.Value }'                      { typeof(Decimal)' index => (Decimal)index }'                      { typeof(Double)' index => (Double)(index + 0.1) }'                      { typeof(Guid)' index => Guid.NewGuid() }'                      { typeof(Int16)' index => (Int16)(index % Int16.MaxValue) }'                      { typeof(Int32)' index => (Int32)(index % Int32.MaxValue) }'                      { typeof(Int64)' index => (Int64)index }'                      { typeof(Object)' index => new object() }'                      { typeof(SByte)' index => (SByte)64 }'                      { typeof(Single)' index => (Single)(index + 0.1) }'                      {                           typeof(String)' index =>                          {                              return String.Format(CultureInfo.CurrentCulture' "sample string {0}"' index);                          }                      }'                      {                           typeof(TimeSpan)' index =>                          {                              return TimeSpan.FromTicks(1234567);                          }                      }'                      { typeof(UInt16)' index => (UInt16)(index % UInt16.MaxValue) }'                      { typeof(UInt32)' index => (UInt32)(index % UInt32.MaxValue) }'                      { typeof(UInt64)' index => (UInt64)index }'                      {                           typeof(Uri)' index =>                          {                              return new Uri(String.Format(CultureInfo.CurrentCulture' "http://webapihelppage{0}.com"' index));                          }                      }'                  };
Magic Number,Server.Areas.HelpPage,SimpleTypeObjectGenerator,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\SampleGeneration\ObjectGenerator.cs,InitializeGenerators,The following statement contains a magic number: return new Dictionary<Type' Func<long' object>>                  {                      { typeof(Boolean)' index => true }'                      { typeof(Byte)' index => (Byte)64 }'                      { typeof(Char)' index => (Char)65 }'                      { typeof(DateTime)' index => DateTime.Now }'                      { typeof(DateTimeOffset)' index => new DateTimeOffset(DateTime.Now) }'                      { typeof(DBNull)' index => DBNull.Value }'                      { typeof(Decimal)' index => (Decimal)index }'                      { typeof(Double)' index => (Double)(index + 0.1) }'                      { typeof(Guid)' index => Guid.NewGuid() }'                      { typeof(Int16)' index => (Int16)(index % Int16.MaxValue) }'                      { typeof(Int32)' index => (Int32)(index % Int32.MaxValue) }'                      { typeof(Int64)' index => (Int64)index }'                      { typeof(Object)' index => new object() }'                      { typeof(SByte)' index => (SByte)64 }'                      { typeof(Single)' index => (Single)(index + 0.1) }'                      {                           typeof(String)' index =>                          {                              return String.Format(CultureInfo.CurrentCulture' "sample string {0}"' index);                          }                      }'                      {                           typeof(TimeSpan)' index =>                          {                              return TimeSpan.FromTicks(1234567);                          }                      }'                      { typeof(UInt16)' index => (UInt16)(index % UInt16.MaxValue) }'                      { typeof(UInt32)' index => (UInt32)(index % UInt32.MaxValue) }'                      { typeof(UInt64)' index => (UInt64)index }'                      {                           typeof(Uri)' index =>                          {                              return new Uri(String.Format(CultureInfo.CurrentCulture' "http://webapihelppage{0}.com"' index));                          }                      }'                  };
Magic Number,Server.Areas.HelpPage.ModelDescriptions,ModelDescriptionGenerator,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\ModelDescriptions\ModelDescriptionGenerator.cs,GetOrCreateModelDescription,The following statement contains a magic number: if (modelType.IsGenericType)              {                  Type[] genericArguments = modelType.GetGenericArguments();                    if (genericArguments.Length == 1)                  {                      Type enumerableType = typeof(IEnumerable<>).MakeGenericType(genericArguments);                      if (enumerableType.IsAssignableFrom(modelType))                      {                          return GenerateCollectionModelDescription(modelType' genericArguments[0]);                      }                  }                  if (genericArguments.Length == 2)                  {                      Type dictionaryType = typeof(IDictionary<'>).MakeGenericType(genericArguments);                      if (dictionaryType.IsAssignableFrom(modelType))                      {                          return GenerateDictionaryModelDescription(modelType' genericArguments[0]' genericArguments[1]);                      }                        Type keyValuePairType = typeof(KeyValuePair<'>).MakeGenericType(genericArguments);                      if (keyValuePairType.IsAssignableFrom(modelType))                      {                          return GenerateKeyValuePairModelDescription(modelType' genericArguments[0]' genericArguments[1]);                      }                  }              }
Magic Number,Server.Controllers,InfoController,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Controllers\InfoController.cs,GetAPIInfo,The following statement contains a magic number: return new              {                  SampleUrls = new                  {                      BasicQueries = new Dictionary<string' string>                      {                          { urlRoot + "Tags/c%23"' "c# questions (have to escape \"c#\" -> \"c%23\")' defaults to QueryType.ViewCount' pageSize = 50' skip = 0" }'                          { urlRoot + "Tags/c%23?Type=LastActivityDate&PageSize=25"' "25 Most Recent c# questions" }'                          { urlRoot + "Tags/c%23?Type=Score&PageSize=1&Skip=71993"' "Lowest scoring c# question" }'                          { urlRoot + "Tags/.net?Type=AnswerCount&PageSize=1"' "The .NET question with the most answers" }                      }.ToArray()'                      AdvancedQueries = new Dictionary<string' string>                      {                          { urlRoot + "Query/.net?operator=AND&otherTag=jquery"' "AND' i.e. 'C# AND jQuery'" }'                          { urlRoot + "Query/.net?operator=OR&otherTag=jquery"' "OR' i.e. 'C# OR jQuery'" }'                          { urlRoot + "Query/.net?operator=OR-NOT&otherTag=jquery"' "OR NOT' i.e. 'C# OR NOT jQuery'" }'                          { urlRoot + "Query/.net?operator=OR-NOT&otherTag=jquery&useLinq=true"' "OR NOT' i.e. 'C# OR NOT jQuery' BUT using LINQ" }'                      }.ToArray()'                      AdvancedQueryParameters = new Dictionary<string' string>                      {                          { "OtherTag"' "i.e. 'c# AND jQuery' (&otherTag=jquery)" }'                          { "Type"' "Can be " + String.Join("' "' Enum.GetNames(typeof(QueryType))) }'                          { "Operator"' "Can be 'AND'' 'AND-NOT'' 'OR'' 'OR-NOT'' 'NOT'" }'                          { "PageSize"' "1 to 50" }'                          { "Skip"' "0 to 'as many as you want!!'" }'                          { "UseLinq"' "i.e. '&UseLinq=true' (will be slower than the default mode)" }'                          { "UseLeppieExclusions"' "See " + urlRoot + "/Wildcards/LeppieExpandedTags for the full list" }'                          { "DebugMode"' "i.e. '&DebugMode=true'" }                      }'                      //RelatedTagQueries = new Dictionary<string' string>                      //{                      //}.ToArray()'                      Questions = new Dictionary<string' string>                      {                          { urlRoot + "Questions/472906"' "Get an individual question (by Id)" }'                      }.ToArray()'                      Wildcards = new Dictionary<string' string>                      {                          { urlRoot + "/Wildcards/?wildcards=*c%23*'*java*"' "Show all the Tags that matches the given wildcards (comma seperated list' starts-with' end-with or contains only)" }'                          { urlRoot + "/Wildcards/?wildcards=*c%23'c%23*'.net"' "Show all the Tags that matches the given wildcards (comma seperated list' starts-with' end-with or contains only)" }'                          { urlRoot + "/Wildcards/?useLeppieWildcards=true"'                              "Show all the Tags that matches the exclusion list from Leppie (see " +                              urlRoot + "Wildcards/LeppieExpandedTags and " + urlRoot + "Wildcards/LeppieWildcards for the full list)"                          }'                      }.ToArray()'                  }'                  SetupMessages = Logger.Messages'                  Top50Tags = tagServer.AllTags                                       .Take(50)'                  Bottom50Tags = tagServer.AllTags                                          .OrderBy(t => t.Value)                                          .Take(50)              };
Magic Number,Server.Controllers,InfoController,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Controllers\InfoController.cs,GetAPIInfo,The following statement contains a magic number: return new              {                  SampleUrls = new                  {                      BasicQueries = new Dictionary<string' string>                      {                          { urlRoot + "Tags/c%23"' "c# questions (have to escape \"c#\" -> \"c%23\")' defaults to QueryType.ViewCount' pageSize = 50' skip = 0" }'                          { urlRoot + "Tags/c%23?Type=LastActivityDate&PageSize=25"' "25 Most Recent c# questions" }'                          { urlRoot + "Tags/c%23?Type=Score&PageSize=1&Skip=71993"' "Lowest scoring c# question" }'                          { urlRoot + "Tags/.net?Type=AnswerCount&PageSize=1"' "The .NET question with the most answers" }                      }.ToArray()'                      AdvancedQueries = new Dictionary<string' string>                      {                          { urlRoot + "Query/.net?operator=AND&otherTag=jquery"' "AND' i.e. 'C# AND jQuery'" }'                          { urlRoot + "Query/.net?operator=OR&otherTag=jquery"' "OR' i.e. 'C# OR jQuery'" }'                          { urlRoot + "Query/.net?operator=OR-NOT&otherTag=jquery"' "OR NOT' i.e. 'C# OR NOT jQuery'" }'                          { urlRoot + "Query/.net?operator=OR-NOT&otherTag=jquery&useLinq=true"' "OR NOT' i.e. 'C# OR NOT jQuery' BUT using LINQ" }'                      }.ToArray()'                      AdvancedQueryParameters = new Dictionary<string' string>                      {                          { "OtherTag"' "i.e. 'c# AND jQuery' (&otherTag=jquery)" }'                          { "Type"' "Can be " + String.Join("' "' Enum.GetNames(typeof(QueryType))) }'                          { "Operator"' "Can be 'AND'' 'AND-NOT'' 'OR'' 'OR-NOT'' 'NOT'" }'                          { "PageSize"' "1 to 50" }'                          { "Skip"' "0 to 'as many as you want!!'" }'                          { "UseLinq"' "i.e. '&UseLinq=true' (will be slower than the default mode)" }'                          { "UseLeppieExclusions"' "See " + urlRoot + "/Wildcards/LeppieExpandedTags for the full list" }'                          { "DebugMode"' "i.e. '&DebugMode=true'" }                      }'                      //RelatedTagQueries = new Dictionary<string' string>                      //{                      //}.ToArray()'                      Questions = new Dictionary<string' string>                      {                          { urlRoot + "Questions/472906"' "Get an individual question (by Id)" }'                      }.ToArray()'                      Wildcards = new Dictionary<string' string>                      {                          { urlRoot + "/Wildcards/?wildcards=*c%23*'*java*"' "Show all the Tags that matches the given wildcards (comma seperated list' starts-with' end-with or contains only)" }'                          { urlRoot + "/Wildcards/?wildcards=*c%23'c%23*'.net"' "Show all the Tags that matches the given wildcards (comma seperated list' starts-with' end-with or contains only)" }'                          { urlRoot + "/Wildcards/?useLeppieWildcards=true"'                              "Show all the Tags that matches the exclusion list from Leppie (see " +                              urlRoot + "Wildcards/LeppieExpandedTags and " + urlRoot + "Wildcards/LeppieWildcards for the full list)"                          }'                      }.ToArray()'                  }'                  SetupMessages = Logger.Messages'                  Top50Tags = tagServer.AllTags                                       .Take(50)'                  Bottom50Tags = tagServer.AllTags                                          .OrderBy(t => t.Value)                                          .Take(50)              };
Magic Number,Server.Controllers,QueryController,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Controllers\QueryController.cs,GetQueryInfo,The following statement contains a magic number: return new QueryInfo              {                  Type = QueryStringProcessor.GetEnum(queryStringPairs' "type"' QueryType.ViewCount)'                  PageSize = QueryStringProcessor.GetInt(queryStringPairs' "pageSize"' 50)'                  Skip = QueryStringProcessor.GetInt(queryStringPairs' "skip"' 0)'                    Tag = tag'                  OtherTag = QueryStringProcessor.GetString(queryStringPairs' "otherTag"' "")'                  Operator = QueryStringProcessor.GetString(queryStringPairs' "operator"' "AND")'                    UseLinq = QueryStringProcessor.GetBool(queryStringPairs' "useLinq"' false)'                  UseBitMapIndexes = QueryStringProcessor.GetBool(queryStringPairs' "bitMapIndex"' false)'                    UseLeppieExclusions = QueryStringProcessor.GetBool(queryStringPairs' "leppieExclusions"' false)'                  DebugMode = QueryStringProcessor.GetBool(queryStringPairs' "debugMode"' false)              };
Magic Number,Server.Controllers,TagsController,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Controllers\TagsController.cs,Get,The following statement contains a magic number: var pageSize = QueryStringProcessor.GetInt(queryStringPairs' "pageSize"' 50);
Missing Default,Server.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\mattwarren_StackOverflowTagServer\WebSite\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,IsFormatSupported,The following switch statement is missing a default case: switch (sampleDirection)              {                  case SampleDirection.Request:                      return formatter.CanReadType(type);                  case SampleDirection.Response:                      return formatter.CanWriteType(type);              }
