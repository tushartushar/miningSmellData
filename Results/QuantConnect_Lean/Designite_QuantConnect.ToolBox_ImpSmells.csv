Implementation smell,Namespace,Class,File,Method,Description
Long Method,QuantConnect.ToolBox.EstimizeDataDownloader,EstimizeEstimateDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\EstimizeDataDownloader\EstimizeEstimateDataDownloader.cs,Run,The method has 122 lines of code.
Long Method,QuantConnect.ToolBox.EstimizeDataDownloader,EstimizeReleaseDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\EstimizeDataDownloader\EstimizeReleaseDataDownloader.cs,Run,The method has 115 lines of code.
Long Method,QuantConnect.ToolBox,Program,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Program.cs,Main,The method has 236 lines of code.
Long Method,QuantConnect.ToolBox.RandomDataGenerator,DividendSplitMapGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\DividendSplitMapGenerator.cs,GenerateSplitsDividends,The method has 115 lines of code.
Long Method,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorSettings.cs,FromCommandLineArguments,The method has 210 lines of code.
Long Method,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorProgram.cs,GenerateRandomData,The method has 133 lines of code.
Long Method,QuantConnect.ToolBox.SECDataDownloader,SECDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataDownloader.cs,Download,The method has 231 lines of code.
Long Method,QuantConnect.ToolBox.SECDataDownloader,SECDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataConverter.cs,Process,The method has 223 lines of code.
Long Method,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,Convert,The method has 108 lines of code.
Long Method,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesReader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesReader.cs,Parse,The method has 134 lines of code.
Long Method,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsReader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsReader.cs,Parse,The method has 125 lines of code.
Long Method,QuantConnect.ToolBox.CoarseUniverseGenerator,CoarseUniverseGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\CoarseUniverseGeneratorProgram.cs,ProcessDailyFolder,The method has 158 lines of code.
Long Method,QuantConnect.ToolBox.IQFeed,IQFeedDataQueueUniverseProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,LoadSymbols,The method has 165 lines of code.
Long Method,QuantConnect.ToolBox.TiingoNewsConverter,TiingoNewsConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TiingoNewsConverter\TiingoNewsConverter.cs,Convert,The method has 114 lines of code.
Long Method,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsIndicatorDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsIndicatorDownloader.cs,Run,The method has 110 lines of code.
Complex Method,QuantConnect.ToolBox.Benzinga,BenzingaNewsDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Benzinga\BenzingaNewsDataConverter.cs,FilterArticlesAndIndexes,Cyclomatic complexity of the method is 13
Complex Method,QuantConnect.ToolBox,Program,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Program.cs,Main,Cyclomatic complexity of the method is 38
Complex Method,QuantConnect.ToolBox,TickAggregator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TickAggregator.cs,ForTickTypes,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.ToolBox.IBDownloader,IBDownloaderProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IBDownloader\IBDownloaderProgram.cs,IBDownloader,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.ToolBox.IEX,IEXDataQueueHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IEX\IEXDataQueueHandler.cs,ProcessHistoryRequests,Cyclomatic complexity of the method is 16
Complex Method,QuantConnect.ToolBox.PsychSignalDataConverter,PsychSignalDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\PsychSignalDataConverter\PsychSignalDataConverter.cs,Convert,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.ToolBox.RandomDataGenerator,DividendSplitMapGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\DividendSplitMapGenerator.cs,GenerateSplitsDividends,Cyclomatic complexity of the method is 16
Complex Method,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorSettings.cs,FromCommandLineArguments,Cyclomatic complexity of the method is 36
Complex Method,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorProgram.cs,GenerateRandomData,Cyclomatic complexity of the method is 15
Complex Method,QuantConnect.ToolBox.RandomDataGenerator,RandomValueGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomValueGenerator.cs,NextTickTime,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.ToolBox.RandomDataGenerator,TickGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\TickGenerator.cs,GenerateTicks,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.ToolBox.SECDataDownloader,SECDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataDownloader.cs,Download,Cyclomatic complexity of the method is 18
Complex Method,QuantConnect.ToolBox.SECDataDownloader,SECDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataConverter.cs,Process,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.ToolBox.SmartInsider,SmartInsiderConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SmartInsider\SmartInsiderConverter.cs,Process,Cyclomatic complexity of the method is 10
Complex Method,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesReader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesReader.cs,Parse,Cyclomatic complexity of the method is 14
Complex Method,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsReader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsReader.cs,Parse,Cyclomatic complexity of the method is 14
Complex Method,QuantConnect.ToolBox.CoarseUniverseGenerator,CoarseUniverseGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\CoarseUniverseGeneratorProgram.cs,ProcessDailyFolder,Cyclomatic complexity of the method is 19
Complex Method,QuantConnect.ToolBox.DukascopyDownloader,DukascopyDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopyDataDownloader.cs,Get,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.ToolBox.FxcmVolumeDownload,FxcmVolumeDownloadProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeDownloadProgram.cs,FxcmVolumeDownload,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.ToolBox.IQFeed,HistoryPort,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,ProcessHistoryRequests,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.ToolBox.IQFeed,HistoryPort,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,GetData,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.ToolBox.IQFeed,IQFeedDataQueueUniverseProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,LoadSymbols,Cyclomatic complexity of the method is 21
Complex Method,QuantConnect.ToolBox.IQFeed,IQFeedDataQueueUniverseProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,LoadSymbolOnDemand,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.ToolBox.IQFeed,ClientStatsEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQAdminSocketClient.cs,ClientStatsEventArgs,Cyclomatic complexity of the method is 11
Complex Method,QuantConnect.ToolBox.IQFeed,IQAdminSocketClient,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQAdminSocketClient.cs,OnTextLineEvent,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,Cyclomatic complexity of the method is 57
Complex Method,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,Cyclomatic complexity of the method is 39
Complex Method,QuantConnect.ToolBox.IQFeed,IQLevel1Client,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,OnTextLineEvent,Cyclomatic complexity of the method is 12
Complex Method,QuantConnect.ToolBox.IQFeed,LookupTickEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupTickEventArgs,Cyclomatic complexity of the method is 10
Complex Method,QuantConnect.ToolBox.IQFeed,LookupIntervalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupIntervalEventArgs,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.ToolBox.IQFeed,LookupDayWeekMonthEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupDayWeekMonthEventArgs,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,OnTextLineEvent,Cyclomatic complexity of the method is 16
Complex Method,QuantConnect.ToolBox.IQFeed,Status,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,Cyclomatic complexity of the method is 17
Complex Method,QuantConnect.ToolBox.KaikoDataConverter,KaikoDataConverterProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\KaikoDataConverter\KaikoDataConverterProgram.cs,KaikoDataConverter,Cyclomatic complexity of the method is 10
Complex Method,QuantConnect.ToolBox.KrakenDownloader,KrakenDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\KrakenDataDownloader\KrakenDataDownloader.cs,Get,Cyclomatic complexity of the method is 11
Complex Method,QuantConnect.ToolBox.NseMarketDataConverter,NseMarketDataConverterProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\NseMarketDataConverter\NseMarketDataConverterProgram.cs,GetSymbol,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.ToolBox.OandaDownloader,OandaDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\OandaDownloader\OandaDataDownloader.cs,Get,Cyclomatic complexity of the method is 14
Complex Method,QuantConnect.ToolBox.TiingoNewsConverter,TiingoNewsConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TiingoNewsConverter\TiingoNewsConverter.cs,Convert,Cyclomatic complexity of the method is 14
Complex Method,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsCalendarDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsCalendarDownloader.cs,ParseDecimal,Cyclomatic complexity of the method is 11
Long Parameter List,QuantConnect.ToolBox.Benzinga,BenzingaNewsDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Benzinga\BenzingaNewsDataDownloader.cs,TryWriteToFile,The method has 5 parameters. Parameters: rawContents' tempFile' finalFileBackup' finalFile' forceOverwrite
Long Parameter List,QuantConnect.ToolBox.CoinApi,CoinApiSymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoinApi\CoinApiSymbolMapper.cs,GetLeanSymbol,The method has 6 parameters. Parameters: brokerageSymbol' securityType' market' expirationDate' strike' optionRight
Long Parameter List,QuantConnect.ToolBox,FxcmVolumeDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeDownloader.cs,Run,The method has 5 parameters. Parameters: symbol' resolution' startUtc' endUtc' update
Long Parameter List,QuantConnect.ToolBox,DataProcessor,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IDataProcessor.cs,AddResolution,The method has 5 parameters. Parameters: dataDirectory' tickType' root' resolution' sourceIsTick
Long Parameter List,QuantConnect.ToolBox,LeanDataReader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\LeanDataReader.cs,LeanDataReader,The method has 5 parameters. Parameters: config' symbol' resolution' date' dataFolder
Long Parameter List,QuantConnect.ToolBox,RawFileProcessor,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RawFileProcessor.cs,Run,The method has 5 parameters. Parameters: name' sources' streamProvider' streamParser' processors
Long Parameter List,QuantConnect.ToolBox.IEX,IEXDownloaderProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IEX\IEXDownloaderProgram.cs,IEXDownloader,The method has 5 parameters. Parameters: tickers' resolution' fromDate' toDate' apiKey
Long Parameter List,QuantConnect.ToolBox.PsychSignalDataConverter,PsychSignalDataConverterProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\PsychSignalDataConverter\PsychSignalDataConverterProgram.cs,PsychSignalDataDownloader,The method has 5 parameters. Parameters: startDateUtc' endDateUtc' rawDataDestination' apiKey' dataSource
Long Parameter List,QuantConnect.ToolBox.RandomDataGenerator,DividendSplitMapGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\DividendSplitMapGenerator.cs,DividendSplitMapGenerator,The method has 6 parameters. Parameters: symbol' settings' randomValueGenerator' random' delistDate' willBeDelisted
Long Parameter List,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorSettings.cs,FromCommandLineArguments,The method has 16 parameters. Parameters: startDateString' endDateString' symbolCountString' market' securityTypeString' resolutionString' dataDensityString' includeCoarseString' quoteTradeRatioString' randomSeedString' hasIpoPercentageString' hasRenamePercentageString' hasSplitsPercentageString' hasDividendsPercentageString' dividendEveryQuarterPercentageString' output
Long Parameter List,QuantConnect.ToolBox.RandomDataGenerator,IRandomValueGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\IRandomValueGenerator.cs,NextTick,The method has 5 parameters. Parameters: symbol' dateTime' tickType' previousValue' maximumPercentDeviation
Long Parameter List,QuantConnect.ToolBox.RandomDataGenerator,IRandomValueGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\IRandomValueGenerator.cs,NextOption,The method has 5 parameters. Parameters: market' minExpiry' maxExpiry' underlyingPrice' maximumStrikePriceDeviation
Long Parameter List,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorProgram.cs,RandomDataGenerator,The method has 15 parameters. Parameters: startDateString' endDateString' symbolCountString' market' securityTypeString' resolutionString' dataDensityString' includeCoarseString' quoteTradeRatioString' randomSeed' hasIpoPercentageString' hasRenamePercentageString' hasSplitsPercentageString' hasDividendsPercentageString' dividendEveryQuarterPercentageString
Long Parameter List,QuantConnect.ToolBox.RandomDataGenerator,RandomValueGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomValueGenerator.cs,NextTick,The method has 5 parameters. Parameters: symbol' dateTime' tickType' previousValue' maximumPercentDeviation
Long Parameter List,QuantConnect.ToolBox.RandomDataGenerator,RandomValueGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomValueGenerator.cs,NextOption,The method has 5 parameters. Parameters: market' minExpiry' maxExpiry' underlyingPrice' maximumStrikePriceDeviation
Long Parameter List,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,AlgoSeekFuturesConverter,The method has 5 parameters. Parameters: resolutions' referenceDate' remote' source' destination
Long Parameter List,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesProcessor,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesProcessor.cs,AlgoSeekFuturesProcessor,The method has 5 parameters. Parameters: symbol' date' tickType' resolution' dataDirectory
Long Parameter List,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,AlgoSeekOptionsConverter,The method has 6 parameters. Parameters: resolution' referenceDate' remote' remoteMask' source' destination
Long Parameter List,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,WriteToDisk,The method has 5 parameters. Parameters: processors' waitForFlush' peekTickTime' step' final
Long Parameter List,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsProcessor,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsProcessor.cs,AlgoSeekOptionsProcessor,The method has 5 parameters. Parameters: symbol' date' tickType' resolution' dataDirectory
Long Parameter List,QuantConnect.ToolBox.CoarseUniverseGenerator,CoarseUniverseGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\CoarseUniverseGeneratorProgram.cs,ProcessDailyFolder,The method has 7 parameters. Parameters: dailyFolder' coarseFolder' mapFileResolver' factorFileProvider' exclusions' ignoreMapless' symbolResolver
Long Parameter List,QuantConnect.ToolBox.DukascopyDownloader,DukascopyDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopyDataDownloader.cs,AppendTicksToList,The method has 5 parameters. Parameters: symbol' bytesBi5' date' timeOffset' pointValue
Long Parameter List,QuantConnect.ToolBox.DukascopyDownloader,DukascopySymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopySymbolMapper.cs,GetLeanSymbol,The method has 6 parameters. Parameters: brokerageSymbol' securityType' market' expirationDate' strike' optionRight
Long Parameter List,QuantConnect.ToolBox.IQFeed,IQFeedDataQueueUniverseProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,GetLeanSymbol,The method has 6 parameters. Parameters: ticker' securityType' market' expirationDate' strike' optionRight
Long Parameter List,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,RequestTickData,The method has 5 parameters. Parameters: symbol' days' oldToNew' timeStartInDay' timeEndInDay
Long Parameter List,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,RequestTickData,The method has 6 parameters. Parameters: symbol' start' end' oldToNew' timeStartInDay' timeEndInDay
Long Parameter List,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,RequestIntervalData,The method has 6 parameters. Parameters: symbol' interval' days' oldToNew' timeStartInDay' timeEndInDay
Long Parameter List,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,RequestIntervalData,The method has 7 parameters. Parameters: symbol' interval' start' end' oldToNew' timeStartInDay' timeEndInDay
Long Identifier,QuantConnect.ToolBox.Benzinga,BenzingaNewsDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Benzinga\BenzingaNewsDataConverter.cs,WriteIndexesToFile,The length of the parameter existingReferenceFileBackupPath is 31.
Long Identifier,QuantConnect.ToolBox.CoinApi,CoinApiDataQueueHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoinApi\CoinApiDataQueueHandler.cs,,The length of the parameter _minimumTimeBetweenHelloMessages is 32.
Long Identifier,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorSettings.cs,FromCommandLineArguments,The length of the parameter dividendEveryQuarterPercentageString is 36.
Long Identifier,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorSettings.cs,FromCommandLineArguments,The length of the parameter dividendEveryQuarterPercentage is 30.
Long Identifier,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorProgram.cs,RandomDataGenerator,The length of the parameter dividendEveryQuarterPercentageString is 36.
Long Identifier,QuantConnect.ToolBox.SECDataDownloader,SECDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataDownloader.cs,Download,The length of the parameter cikRankAndFileTickerListTempPath is 32.
Long Identifier,QuantConnect.ToolBox.CoarseUniverseGenerator,CoarseUniverseGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\CoarseUniverseGeneratorProgram.cs,ProcessDailyFolder,The length of the parameter previousTickerFineFundamentalFolder is 35.
Long Identifier,QuantConnect.ToolBox.CoarseUniverseGenerator,CoarseUniverseGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\CoarseUniverseGeneratorProgram.cs,ProcessDailyFolder,The length of the parameter previousTickerFineAvailableDates is 32.
Long Statement,QuantConnect.ToolBox.Benzinga,BenzingaNewsDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Benzinga\BenzingaNewsDataConverter.cs,WriteToFile,The length of the statement  "                Log.Trace($"BenzingaNewsDataConverter.WriteToFile(): Begin writing and compressing indexes for date {kvp.Key:yyyy-MM-dd}"); " is 123.
Long Statement,QuantConnect.ToolBox.Benzinga,BenzingaNewsDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Benzinga\BenzingaNewsDataConverter.cs,FilterArticlesAndIndexes,The length of the statement  "                        Log.Error($"BenzingaDataConverter.SerializeArticlesAndIndexes(): Ticker {symbol.Value} contains invalid character ':'. Skipping"); " is 130.
Long Statement,QuantConnect.ToolBox.Benzinga,BenzingaNewsDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Benzinga\BenzingaNewsDataConverter.cs,FilterArticlesAndIndexes,The length of the statement  "                        Log.Error($"BenzingaDataConverter.SerializeArticlesAndIndexes(): Ticker {symbol.Value} is invalid in Windows. Skipping"); " is 121.
Long Statement,QuantConnect.ToolBox.Benzinga,BenzingaNewsDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Benzinga\BenzingaNewsDataConverter.cs,FilterArticlesAndIndexes,The length of the statement  "                        var referenceFile = new FileInfo(Path.Combine(_processedFilesDirectory.FullName' symbol.Value.ToLowerInvariant()' $"{article.UpdatedAt.Date:yyyyMMdd}.csv")); " is 157.
Long Statement,QuantConnect.ToolBox.Benzinga,BenzingaNewsDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Benzinga\BenzingaNewsDataConverter.cs,FilterArticlesAndIndexes,The length of the statement  "                                var zipFile = new FileInfo(Path.Combine(_processedFilesDirectory.FullName' "content"' $"{article.UpdatedAt.Date:yyyyMMdd}.zip")); " is 129.
Long Statement,QuantConnect.ToolBox.Benzinga,BenzingaNewsDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Benzinga\BenzingaNewsDataConverter.cs,FilterArticlesAndIndexes,The length of the statement  "                                    Log.Trace($"BenzingaNewsDataConverter.FilterArticlesAndIndexes(): Opening {zipFile.FullName} to get existing index UpdatedAt time"); " is 132.
Long Statement,QuantConnect.ToolBox.Benzinga,BenzingaNewsDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Benzinga\BenzingaNewsDataConverter.cs,FilterArticlesAndIndexes,The length of the statement  "                                .ToDictionary(kvp => kvp.Key' kvp => JsonConvert.DeserializeObject<BenzingaNews>(kvp.Value' new BenzingaNewsJsonConverter()).UpdatedAt); " is 136.
Long Statement,QuantConnect.ToolBox.Benzinga,BenzingaNewsDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Benzinga\BenzingaNewsDataConverter.cs,FilterArticlesAndIndexes,The length of the statement  "                    Log.Error($"BenzingaDataConverter.SerializeArticlesAndIndexes(): Skipping news article {article.Id} because no tickers are associated with it"); " is 144.
Long Statement,QuantConnect.ToolBox.Benzinga,BenzingaNewsDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Benzinga\BenzingaNewsDataConverter.cs,FilterArticlesAndIndexes,The length of the statement  "                    Log.Error($"BenzingaDataConverter.FilterArticlesAndIndexes(): Skipping news article {article.Id} because there are no Symbols associated with this article"); " is 157.
Long Statement,QuantConnect.ToolBox.Benzinga,BenzingaNewsDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Benzinga\BenzingaNewsDataConverter.cs,FilterArticlesAndIndexes,The length of the statement  "                filtered.ArticleContents[$"{article.Id}.json"] = JsonConvert.SerializeObject(article' Formatting.None' new BenzingaNewsJsonConverter()); " is 136.
Long Statement,QuantConnect.ToolBox.Benzinga,BenzingaNewsDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Benzinga\BenzingaNewsDataConverter.cs,WriteIndexesToFile,The length of the statement  "                var referenceFileDirectory = new DirectoryInfo(Path.Combine(_destinationDirectory.FullName' symbol.Value.ToLowerInvariant())); " is 126.
Long Statement,QuantConnect.ToolBox.Benzinga,BenzingaNewsDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Benzinga\BenzingaNewsDataConverter.cs,WriteIndexesToFile,The length of the statement  "                var referenceFile = new FileInfo(Path.Combine(referenceFileDirectory.FullName' $"{indexCollection.Date.ToStringInvariant(DateFormat.EightCharacter)}.csv")); " is 156.
Long Statement,QuantConnect.ToolBox.Benzinga,BenzingaNewsDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Benzinga\BenzingaNewsDataConverter.cs,WriteIndexesToFile,The length of the statement  "                    Log.Trace($"BenzingaDataConverter.WriteToFile(): Moving existing reference file to backup location: {existingReferenceFileBackupPath}"); " is 136.
Long Statement,QuantConnect.ToolBox.Benzinga,BenzingaNewsDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Benzinga\BenzingaNewsDataConverter.cs,WriteIndexesToFile,The length of the statement  "                    Log.Error(error' $"BenzingaDataConverter.WriteToFile(): Failed to move file to: {referenceFile.FullName} - Skipping..."); " is 121.
Long Statement,QuantConnect.ToolBox.Benzinga,BenzingaNewsDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Benzinga\BenzingaNewsDataConverter.cs,WriteIndexesToFile,The length of the statement  "                        Log.Error($"BenzingaDataConverter.WriteToFile(): Moving backup file: {existingReferenceFileBackupPath} back to original location: {referenceFile.FullName}"); " is 157.
Long Statement,QuantConnect.ToolBox.Benzinga,BenzingaNewsDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Benzinga\BenzingaNewsDataConverter.cs,CompressData,The length of the statement  "                    Log.Trace($"BenzingaNewsDataConverter.CompressData(): ZIP file already contains all contents we planned to write. Skipping."); " is 126.
Long Statement,QuantConnect.ToolBox.Benzinga,BenzingaNewsDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Benzinga\BenzingaNewsDataConverter.cs,CompressData,The length of the statement  "                var excludedArticles = filtered.ArticleContents.Where(kvp => missingArticles.Contains(kvp.Key)).ToDictionary(kvp => kvp.Key' kvp => kvp.Value); " is 143.
Long Statement,QuantConnect.ToolBox.Benzinga,BenzingaNewsDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Benzinga\BenzingaNewsDataConverter.cs,CompressData,The length of the statement  "                Log.Trace($"BenzingaDataConverter.WriteToFile(): Moving existing zip file for {filtered.Date:yyyyMMdd} to temp directory as: {compressedFinalBackup.Name}"); " is 156.
Long Statement,QuantConnect.ToolBox.Benzinga,BenzingaNewsDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Benzinga\BenzingaNewsDataConverter.cs,CompressData,The length of the statement  "                Log.Trace($"BenzingaDataConverter.WriteToFile(): Moving compressed file to final location: {compressedFinal.FullName}"); " is 120.
Long Statement,QuantConnect.ToolBox.Benzinga,BenzingaNewsDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Benzinga\BenzingaNewsDataConverter.cs,CompressData,The length of the statement  "                Log.Error(e' $"Failed to compress to {compressedFinal.FullName}. Restoring backup from temp: {compressedFinalBackup.Name}"); " is 124.
Long Statement,QuantConnect.ToolBox.Benzinga,BenzingaProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Benzinga\BenzingaProgram.cs,BenzingaNewsDataConverter,The length of the statement  "            var converter = new BenzingaNewsDataConverter(new DirectoryInfo(source)' new DirectoryInfo(destination)' new DirectoryInfo(processedFilesDirectory)); " is 149.
Long Statement,QuantConnect.ToolBox.Benzinga,BenzingaNewsDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Benzinga\BenzingaNewsDataDownloader.cs,Download,The length of the statement  "                                var rawContents = client.DownloadString($"{_baseUrl}/news?token={_apiKey}&pageSize=100&displayOutput=full&date={date:yyyy-MM-dd}&page={page}"); " is 143.
Long Statement,QuantConnect.ToolBox.Benzinga,BenzingaNewsDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Benzinga\BenzingaNewsDataDownloader.cs,Download,The length of the statement  "                                    Log.Trace($"BenzingaNewsDataDownloader.Download(): Exhausted available data for {date:yyyy-MM-dd} - Exiting download loop"); " is 124.
Long Statement,QuantConnect.ToolBox.Benzinga,BenzingaNewsDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Benzinga\BenzingaNewsDataDownloader.cs,TryWriteToFile,The length of the statement  "                    Log.Trace($"BenzingaNewsDataDownloader.WriteToFile(): Moving existing raw API response to backup location: {finalFileBackup.FullName}"); " is 136.
Long Statement,QuantConnect.ToolBox.CoinApiDataConverter,CoinApiDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoinApiDataConverter\CoinApiDataConverter.cs,ProcessEntry,The length of the statement  "                writer = new LeanDataWriter(consolidator.Resolution' entryData.Symbol' _destinationFolder.FullName' entryData.TickType); " is 120.
Long Statement,QuantConnect.ToolBox.CoinApi,CoinApiSymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoinApi\CoinApiSymbolMapper.cs,LoadSymbolMap,The length of the statement  "                    throw new Exception($"CoinApiSymbolMapper.LoadSymbolMap(): File not found: {_coinApiSymbolsListFile.FullName}' please " + " is 121.
Long Statement,QuantConnect.ToolBox.EstimizeDataDownloader,EstimizeConsensusDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\EstimizeDataDownloader\EstimizeConsensusDataDownloader.cs,Run,The length of the statement  "                    var releases = File.ReadAllLines(releaseFile).Where(x => !string.IsNullOrWhiteSpace(x)).Select(x => new EstimizeRelease(x)); " is 124.
Long Statement,QuantConnect.ToolBox.EstimizeDataDownloader,EstimizeConsensusDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\EstimizeDataDownloader\EstimizeConsensusDataDownloader.cs,Run,The length of the statement  "                            Log.Trace($"EstimizeConsensusDataDownloader.Run(): Duplicate entry found for ID {release.Id} in {finalPath} on: {release.ReleaseDate}"); " is 136.
Long Statement,QuantConnect.ToolBox.EstimizeDataDownloader,EstimizeConsensusDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\EstimizeDataDownloader\EstimizeConsensusDataDownloader.cs,Run,The length of the statement  "                        Log.Trace($"EstimizeConsensusDataDownloader.Run(): Earnings release: {release.ReleaseDate:yyyy-MM-dd} - Parsing Estimate {release.Id} for: {ticker}"); " is 150.
Long Statement,QuantConnect.ToolBox.EstimizeDataDownloader,EstimizeConsensusDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\EstimizeDataDownloader\EstimizeConsensusDataDownloader.cs,Run,The length of the statement  "                            Log.Error(e' $"EstimizeConsensusDataDownloader.Run(): RateGate failed. Sleeping for 110 milliseconds with Thread.Sleep()"); " is 123.
Long Statement,QuantConnect.ToolBox.EstimizeDataDownloader,EstimizeConsensusDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\EstimizeDataDownloader\EstimizeConsensusDataDownloader.cs,Run,The length of the statement  "                        .Select(x => $"{x.UpdatedAt.ToUniversalTime():yyyyMMdd HH:mm:ss}'{x.Id}'{x.Source}'{x.Type}'{x.Mean}'{x.High}'{x.Low}'{x.StandardDeviation}'{x.FiscalYear}'{x.FiscalQuarter}'{x.Count}"); " is 185.
Long Statement,QuantConnect.ToolBox.EstimizeDataDownloader,EstimizeConsensusDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\EstimizeDataDownloader\EstimizeConsensusDataDownloader.cs,Run,The length of the statement  "                    Log.Trace($"EstimizeConsensusDataDownloader.Run(): EstimizeConsensus files for {ticker} created : {stopwatch.Elapsed}"); " is 120.
Long Statement,QuantConnect.ToolBox.EstimizeDataDownloader,EstimizeEstimateDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\EstimizeDataDownloader\EstimizeEstimateDataDownloader.cs,Run,The length of the statement  "                        Log.Error(e' $"EstimizeEstimateDataDownloader.Run(): RateGate failed. Sleeping for 110 milliseconds with Thread.Sleep()"); " is 122.
Long Statement,QuantConnect.ToolBox.EstimizeDataDownloader,EstimizeEstimateDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\EstimizeDataDownloader\EstimizeEstimateDataDownloader.cs,Run,The length of the statement  "                                                    Log.Trace($"EstimizeEstimateDataDownloader.Run(): New ticker is null. Old ticker: {oldTicker} - on: {createdAt.ToStringInvariant()}"); " is 134.
Long Statement,QuantConnect.ToolBox.EstimizeDataDownloader,EstimizeReleaseDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\EstimizeDataDownloader\EstimizeReleaseDataDownloader.cs,Run,The length of the statement  "                        Log.Error(e' $"EstimizeReleaseDataDownloader.Run(): RateGate failed. Sleeping for 110 milliseconds with Thread.Sleep()"); " is 121.
Long Statement,QuantConnect.ToolBox.EstimizeDataDownloader,EstimizeReleaseDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\EstimizeDataDownloader\EstimizeReleaseDataDownloader.cs,Run,The length of the statement  "                                                    Log.Trace($"EstimizeReleaseDataDownloader.Run(): Failed to find mapping for null new ticker. Old ticker: {oldTicker} - on: {releaseDate}"); " is 139.
Long Statement,QuantConnect.ToolBox.EstimizeDataDownloader,EstimizeReleaseDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\EstimizeDataDownloader\EstimizeReleaseDataDownloader.cs,Run,The length of the statement  "                                        var csvContents = kvp.Select(x => $"{x.ReleaseDate.ToUniversalTime():yyyyMMdd HH:mm:ss}'{x.Id}'{x.FiscalYear}'{x.FiscalQuarter}'{x.Eps}'{x.Revenue}'{x.ConsensusEpsEstimate}'{x.ConsensusRevenueEstimate}'{x.WallStreetEpsEstimate}'{x.WallStreetRevenueEstimate}'{x.ConsensusWeightedEpsEstimate}'{x.ConsensusWeightedRevenueEstimate}"); " is 330.
Long Statement,QuantConnect.ToolBox.EstimizeDataDownloader,EstimizeDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\EstimizeDataDownloader\EstimizeDataDownloader.cs,SaveContentToFile,The length of the statement  "            var finalLines = lines.OrderBy(x => DateTime.ParseExact(x.Split(''').First()' "yyyyMMdd HH:mm:ss"' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal)) " is 163.
Long Statement,QuantConnect.ToolBox.GDAXDownloader,GDAXDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\GDAXDownloader\GDAXDownloader.cs,Get,The length of the statement  "                Log.Trace($"Getting data for timeperiod from {windowStartTime.ToStringInvariant()} to {windowEndTime.ToStringInvariant()}.."); " is 126.
Long Statement,QuantConnect.ToolBox,Program,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Program.cs,Main,The length of the statement  "                        IEXDownloaderProgram.IEXDownloader(tickers' resolution' fromDate' toDate' GetParameterOrExit(optionsObject' "api-key")); " is 120.
Long Statement,QuantConnect.ToolBox,Program,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Program.cs,Main,The length of the statement  "                            GetParameterOrDefault(optionsObject' "destination-dir"' Path.Combine(Globals.DataFolder' "alternative"' "psychsignal"' "raw-psychsignal"))' " is 139.
Long Statement,QuantConnect.ToolBox,Program,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Program.cs,Main,The length of the statement  "                        CoinApiDataConverterProgram.CoinApiDataProgram(GetParameterOrExit(optionsObject' "date")' GetParameterOrExit(optionsObject' "market")' " is 134.
Long Statement,QuantConnect.ToolBox,FxcmVolumeWriter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeWriter.cs,Write,The length of the statement  "            // Seems the data has some duplicate values! This makes the writer throws an error. So' just in case' we clean the data from duplicates. " is 136.
Long Statement,QuantConnect.ToolBox,FxcmVolumeWriter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeWriter.cs,WriteMinuteData,The length of the statement  "                    sb.AppendLine($"{obs.Time.TimeOfDay.TotalMilliseconds.ToStringInvariant()}'{obs.Value.ToStringInvariant()}'{obs.Transactions}"); " is 128.
Long Statement,QuantConnect.ToolBox,DataProcessor,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IDataProcessor.cs,AddResolution,The length of the statement  "            var aggregator = new ConsolidatorDataProcessor(secondRoot' data => CreateConsolidator(resolution' tickType' data' sourceIsTick)); " is 129.
Long Statement,QuantConnect.ToolBox,LeanDataWriter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\LeanDataWriter.cs,WriteDailyOrHour,The length of the statement  "            var newRows = new SortedDictionary<DateTime' string>(source.ToDictionary(x => x.Time' x => LeanData.GenerateLine(x' _securityType' _resolution))); " is 146.
Long Statement,QuantConnect.ToolBox,LeanParser,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\LeanParser.cs,Parse,The length of the statement  "            var config = new SubscriptionDataConfig(dataType' pathComponents.Symbol' pathComponents.Resolution' TimeZones.Utc' TimeZones.Utc' false' true' false); " is 150.
Long Statement,QuantConnect.ToolBox.IEX,IEXDataQueueHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IEX\IEXDataQueueHandler.cs,ProcessJsonObject,The length of the statement  "                        Log.Trace("IEXDataQueueHandler.ProcessJsonObject(): Received unexpected symbol '" + symbolString + "' from IEX in IEXDataQueueHandler"); " is 136.
Long Statement,QuantConnect.ToolBox.IEX,IEXDataQueueHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IEX\IEXDataQueueHandler.cs,ProcessHistoryRequests,The length of the statement  "                Log.Error("IEXDataQueueHandler.GetHistory(): History calls with minute resolution for IEX available only for trailing 30 calendar days."); " is 138.
Long Statement,QuantConnect.ToolBox.IEX,IEXDataQueueHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IEX\IEXDataQueueHandler.cs,ProcessHistoryRequests,The length of the statement  "                var response = client.DownloadString("https://cloud.iexapis.com/v1/stock/" + ticker + "/chart/" + suffix + "?token=" + _apiKey); " is 128.
Long Statement,QuantConnect.ToolBox.PsychSignalDataConverter,PsychSignalDataConverterProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\PsychSignalDataConverter\PsychSignalDataConverterProgram.cs,PsychSignalDataConverter,The length of the statement  "            converter.ConvertDate(DateTime.ParseExact(date' "yyyyMMdd"' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal)); " is 125.
Long Statement,QuantConnect.ToolBox.PsychSignalDataConverter,PsychSignalDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\PsychSignalDataConverter\PsychSignalDataConverter.cs,Convert,The length of the statement  "                    if (!DateTime.TryParseExact(csv[2]' @"yyyy-MM-dd\THH:mm:ss\Z"' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal' out timestamp)) " is 142.
Long Statement,QuantConnect.ToolBox.PsychSignalDataConverter,PsychSignalDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\PsychSignalDataConverter\PsychSignalDataConverter.cs,Convert,The length of the statement  "                            Log.Trace($"PsychSignalDataDownloader.Convert(): Skipping line {currentLineCount} - Could not resolve map file for ticker {ticker}"); " is 133.
Long Statement,QuantConnect.ToolBox.PsychSignalDataConverter,PsychSignalDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\PsychSignalDataConverter\PsychSignalDataConverter.cs,ConvertFrom,The length of the statement  "                        if (!DateTime.TryParseExact(x.Name.Substring(0' 11)' "yyyyMMdd_HH"' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal' out fileDate)) " is 146.
Long Statement,QuantConnect.ToolBox.PsychSignalDataConverter,PsychSignalDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\PsychSignalDataConverter\PsychSignalDataConverter.cs,ConvertHistoricalData,The length of the statement  "                Log.Trace($"PsychSignalDataConverter.ConvertBackfill(): Begin converting historical data for file: {archive.FullName}"); " is 120.
Long Statement,QuantConnect.ToolBox.PsychSignalDataConverter,PsychSignalDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\PsychSignalDataConverter\PsychSignalDataConverter.cs,ConvertHistoricalData,The length of the statement  "                Log.Trace($"PsychSignalDataConverter.ConvertBackfill(): Finished converting historical data for file: {archive.FullName}"); " is 123.
Long Statement,QuantConnect.ToolBox.PsychSignalDataConverter,PsychSignalDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\PsychSignalDataConverter\PsychSignalDataConverter.cs,ConvertDirectory,The length of the statement  "                        return DateTime.TryParseExact(x.Name.Substring(0' 11)' "yyyyMMdd_HH"' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal' out fileDate); " is 148.
Long Statement,QuantConnect.ToolBox.PsychSignalDataConverter,PsychSignalDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\PsychSignalDataConverter\PsychSignalDataConverter.cs,CompressData,The length of the statement  "            Log.Trace($"PsychSignalDataConverter.CompressData(): Finished compressing PsychSignal data in {timer.Elapsed.TotalSeconds} seconds"); " is 133.
Long Statement,QuantConnect.ToolBox.PsychSignalDataConverter,TickerData,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\PsychSignalDataConverter\PsychSignalDataConverter.cs,ToCsv,The length of the statement  "                // SOURCE[0]'SYMBOL[1]'TIMESTAMP_UTC[2]'BULLISH_INTENSITY[3]'BEARISH_INTENSITY[4]'BULL_MINUS_BEAR[5]'BULL_SCORED_MESSAGES[6]'BEAR_SCORED_MESSAGES[7]'BULL_BEAR_MSG_RATIO[8]'TOTAL_SCANNED_MESSAGES[9] " is 197.
Long Statement,QuantConnect.ToolBox.PsychSignalDataConverter,PsychSignalDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\PsychSignalDataConverter\PsychSignalDataDownloader.cs,Download,The length of the statement  "                Log.Trace($"PsychSignalDataDownloader.Download(): Adjusting end time from {endDateUtc:yyyy-MM-dd HH:mm:ss} to {nowHour.AddHours(-1):yyyy-MM-dd HH:mm:ss}"); " is 155.
Long Statement,QuantConnect.ToolBox.PsychSignalDataConverter,PsychSignalDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\PsychSignalDataConverter\PsychSignalDataDownloader.cs,Download,The length of the statement  "                            client.DownloadFile($"{_baseUrl}/replay?apikey={_apiKey}&update=1m&sources={_dataSource}&from={startDateUtc:yyyyMMddHH}&format=csv"' rawDataPathTemp); " is 150.
Long Statement,QuantConnect.ToolBox.PsychSignalDataConverter,PsychSignalDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\PsychSignalDataConverter\PsychSignalDataDownloader.cs,Download,The length of the statement  "                            Log.Error($"PsychSignalDataDownloader.Download(): We've reached the maximum number of retries for date {startDateUtc:yyyy-MM-dd HH:00:00}"); " is 140.
Long Statement,QuantConnect.ToolBox.PsychSignalDataConverter,PsychSignalDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\PsychSignalDataConverter\PsychSignalDataDownloader.cs,Download,The length of the statement  "                            Log.Error($"PsychSignalDataDownloader.Download(): Received unknown HTTP status code {(int) response.StatusCode}. Retrying..."); " is 127.
Long Statement,QuantConnect.ToolBox.PsychSignalDataConverter,PsychSignalDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\PsychSignalDataConverter\PsychSignalDataDownloader.cs,Download,The length of the statement  "                Log.Trace($"PsychSignalDataDownloader.Download(): Downloading {complete:P2} complete. ETA is {eta.TotalMinutes:N2} minutes"); " is 125.
Long Statement,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorSettings.cs,FromCommandLineArguments,The length of the statement  "                output.Error.WriteLine($"Required parameter --from-date was incorrectly formatted. Please specify in yyyyMMdd format. Value provided: '{startDateString}'"); " is 156.
Long Statement,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorSettings.cs,FromCommandLineArguments,The length of the statement  "                output.Error.WriteLine($"Required parameter --to-date was incorrectly formatted. Please specify in yyyyMMdd format. Value provided: '{endDateString}'"); " is 152.
Long Statement,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorSettings.cs,FromCommandLineArguments,The length of the statement  "                output.Error.WriteLine($"Required parameter --symbol-count was incorrectly formatted. Please specify a valid integer greater than zero. Value provided: '{symbolCountString}'"); " is 176.
Long Statement,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorSettings.cs,FromCommandLineArguments,The length of the statement  "                output.Error.WriteLine($"Optional parameter --resolution was incorrectly formatted. Default is Minute. Please specify a valid Resolution. Value provided: '{resolutionString}' Valid values: {validValues}"); " is 205.
Long Statement,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorSettings.cs,FromCommandLineArguments,The length of the statement  "                output.Error.WriteLine($"Optional parameter --security-type is invalid. Default is Equity. Please specify a valid SecurityType. Value provided: '{securityTypeString}' Valid values: {validValues}"); " is 197.
Long Statement,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorSettings.cs,FromCommandLineArguments,The length of the statement  "                output.Warn.WriteLine($"Please verify that the specified market value is correct: '{market}'   This value is not known has been added to the market value map. If this is an error' stop the application immediately using Ctrl+C"); " is 228.
Long Statement,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorSettings.cs,FromCommandLineArguments,The length of the statement  "                output.Error.WriteLine($"Optional parameter --include-coarse was incorrectly formated. Please specify a valid boolean. Value provided: '{includeCoarseString}'. Valid values: 'true' or 'false'"); " is 194.
Long Statement,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorSettings.cs,FromCommandLineArguments,The length of the statement  "                output.Warn.WriteLine("Optional parameter --include-coarse will be ignored because it only applies to --security-type=Equity"); " is 127.
Long Statement,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorSettings.cs,FromCommandLineArguments,The length of the statement  "                output.Error.WriteLine($"Optional parameter --data-density was incorrectly formated. Please specify a valid DataDensity. Value provided: '{dataDensityString}'. Valid values: {validValues}"); " is 190.
Long Statement,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorSettings.cs,FromCommandLineArguments,The length of the statement  "                output.Error.WriteLine($"Optional parameter --quote-trade-ratio was incorrectly formatted. Please specify a valid double greater than or equal to zero. Value provided: '{quoteTradeRatioString}'"); " is 196.
Long Statement,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorSettings.cs,FromCommandLineArguments,The length of the statement  "                output.Error.WriteLine($"Optional parameter --ipo-percentage was incorrectly formatted. Please specify a valid double greater than or equal to zero. Value provided: '{hasIpoPercentageString}'"); " is 194.
Long Statement,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorSettings.cs,FromCommandLineArguments,The length of the statement  "                output.Error.WriteLine($"Optional parameter --rename-percentage was incorrectly formatted. Please specify a valid double greater than or equal to zero. Value provided: '{hasRenamePercentageString}'"); " is 200.
Long Statement,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorSettings.cs,FromCommandLineArguments,The length of the statement  "                output.Error.WriteLine($"Optional parameter --splits-percentage was incorrectly formatted. Please specify a valid double greater than or equal to zero. Value provided: '{hasSplitsPercentageString}'"); " is 200.
Long Statement,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorSettings.cs,FromCommandLineArguments,The length of the statement  "                output.Error.WriteLine($"Optional parameter --dividends-percentage was incorrectly formatted. Please specify a valid double greater than or equal to zero. Value provided: '{hasDividendsPercentageString}'"); " is 206.
Long Statement,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorSettings.cs,FromCommandLineArguments,The length of the statement  "                output.Error.WriteLine($"Optional parameter --dividend-ever-quarter-percentage was incorrectly formatted. Please specify a valid double greater than or equal to zero. Value provided: '{dividendEveryQuarterPercentageString}'"); " is 226.
Long Statement,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorProgram.cs,GenerateRandomData,The length of the statement  "            output.Warn.WriteLine($"Begin data generation of {settings.SymbolCount} randomly generated {settings.SecurityType} assets..."); " is 127.
Long Statement,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorProgram.cs,GenerateRandomData,The length of the statement  "                    foreach (var tick in tickHistory.Where(tick => tick.Time >= previousRenameDate && previousRenameDateDay != tickDay(tick))) " is 122.
Long Statement,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorProgram.cs,GenerateRandomData,The length of the statement  "                    output.Warn.WriteLine($"\tSymbol[{count}]: {symbol} Progress: {progress:0.0}% - Symbol data generation and output completed"); " is 126.
Long Statement,QuantConnect.ToolBox.RandomDataGenerator,RandomValueGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomValueGenerator.cs,NextSymbol,The length of the statement  "                throw new ArgumentException("Please use NextOption or NextFuture for SecurityType.Option and SecurityType.Future respectively."); " is 129.
Long Statement,QuantConnect.ToolBox.SECDataDownloader,SECDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataDownloader.cs,Download,The length of the statement  "                    Log.Trace($"SECDataDownloader.Download(): Skipping date {currentDate:yyyy-MM-dd} because it was during the weekend or was a holiday"); " is 134.
Long Statement,QuantConnect.ToolBox.SECDataDownloader,SECDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataDownloader.cs,Download,The length of the statement  "                    Log.Error(e' $"SECDataDownloader.TryGetFileSizeFromIndex(): Failed to find {currentDate:yyyyMMdd}.nc.tar.gz in the index file. Skipping..."); " is 141.
Long Statement,QuantConnect.ToolBox.SECDataDownloader,SECDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataDownloader.cs,Download,The length of the statement  "                                Log.Error($"Temporary file is {tmpFileSizeInKB}KB' but is supposed to be {fileSizeInKB}KB. Deleting temp file and retrying..."); " is 128.
Long Statement,QuantConnect.ToolBox.SECDataDownloader,SECDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataDownloader.cs,Download,The length of the statement  "                            client.DownloadFile($"{BaseUrl}/daily-index/{currentDate.Year}/{quarter}/master.{currentDate:yyyyMMdd}.idx"' dailyIndexTmp.FullName); " is 133.
Long Statement,QuantConnect.ToolBox.SECDataDownloader,SECDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataDownloader.cs,Download,The length of the statement  "                        Log.Trace($"SECDataDownloader.Download(): Skipping index file since we already downloaded it during this session: {cik}.json"); " is 127.
Long Statement,QuantConnect.ToolBox.SECDataDownloader,SECDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataConverter.cs,Process,The length of the statement  "                        if (currentTagName == "CONFIRMING-COPY" || (currentTagName == "ASSIGNED-SIC" && !HasValue(line)) || currentTagName == "FLAWED") " is 127.
Long Statement,QuantConnect.ToolBox.SECDataDownloader,SECDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataConverter.cs,Process,The length of the statement  "                        Log.Trace($"SECDataConverter.Process(): {counter.ToStringInvariant()} nc files read at {(100 / interval.TotalMinutes).ToStringInvariant("N2")} files/min."); " is 156.
Long Statement,QuantConnect.ToolBox.SECDataDownloader,SECDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataConverter.cs,Process,The length of the statement  "                        Log.Error($"SECDataConverter.Process(): {report.Report.FilingDate.ToStringInvariant("yyyy-MM-dd")}:{rawReportFilePath.Key} - Failed to find index file for ticker {tickers.FirstOrDefault()} with CIK: {companyCik}"); " is 214.
Long Statement,QuantConnect.ToolBox.SECDataDownloader,SECDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataConverter.cs,Process,The length of the statement  "                        Log.Error(e' $"SECDataConverter.Process(): {report.Report.FilingDate.ToStringInvariant("yyyy-MM-dd")}:{rawReportFilePath.Key} - Index file loading failed for ticker: {tickers.FirstOrDefault()} with CIK: {companyCik} even though it exists"); " is 240.
Long Statement,QuantConnect.ToolBox.SECDataDownloader,SECDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataConverter.cs,Process,The length of the statement  "                            Log.Trace($"SECDataConverter.Process(): {processingDate.ToStringInvariant()} - Failed to find map file for ticker: {ticker}"); " is 126.
Long Statement,QuantConnect.ToolBox.SECDataDownloader,SECDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataConverter.cs,Process,The length of the statement  "                            Log.Trace($"SECDataConverter.Process(): {processingDate.ToStringInvariant()} - Failed to find mapped symbol for ticker: {ticker}"); " is 131.
Long Statement,QuantConnect.ToolBox.SECDataDownloader,SECDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataConverter.cs,Process,The length of the statement  "            Log.Trace($"SECDataConverter.Process(): {ncFilesRead} nc files read finished in {(DateTime.Now - startingTime).ToStringInvariant("g")}."); " is 138.
Long Statement,QuantConnect.ToolBox.SECDataDownloader,SECDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataConverter.cs,WriteReport,The length of the statement  "            var reportPath = Path.Combine(Destination' "alternative"' "sec"' ticker.ToLowerInvariant()' $"{report.Report.FilingDate.ToStringInvariant("yyyyMMdd")}"); " is 153.
Long Statement,QuantConnect.ToolBox.SECDataDownloader,SECDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataConverter.cs,GetReportPublicationTimes,The length of the statement  "            var index = JsonConvert.DeserializeObject<SECReportIndexFile>(File.ReadAllText(Path.Combine(RawSource' "indexes"' $"{cik}.json"))) " is 130.
Long Statement,QuantConnect.ToolBox.SmartInsider,SmartInsiderConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SmartInsider\SmartInsiderConverter.cs,Convert,The length of the statement  "                var rawTransactionsFile = new FileInfo(Path.Combine(_sourceDirectory.FullName' "transactions"' $"{date:yyyyMMdd}.ttx")); " is 120.
Long Statement,QuantConnect.ToolBox.SmartInsider,SmartInsiderConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SmartInsider\SmartInsiderConverter.cs,Process,The length of the statement  "                            Log.Error($"SmartInsiderConverter.Process(): Market {dataInstance.TickerCountry} is not supported at this time for ticker {ticker} on line {i}"); " is 145.
Long Statement,QuantConnect.ToolBox.SmartInsider,SmartInsiderConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SmartInsider\SmartInsiderConverter.cs,Process,The length of the statement  "                        Log.Error($"SmartInsiderConverter.Process(): Failed to find mapfile for ticker {ticker} on {dataInstance.LastUpdate} on line {i}"); " is 131.
Long Statement,QuantConnect.ToolBox.SmartInsider,SmartInsiderConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SmartInsider\SmartInsiderConverter.cs,WriteToFile,The length of the statement  "                var processedFile = new FileInfo(Path.Combine(_processedFilesDirectory.FullName' destinationDirectory.Name' $"{ticker}.tsv")); " is 126.
Long Statement,QuantConnect.ToolBox.SmartInsider,SmartInsiderConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SmartInsider\SmartInsiderConverter.cs,WriteToFile,The length of the statement  "                    Log.Trace($"SmartInsiderConverter.WriteToFile(): Writing from existing processed contents to file: {finalFile.FullName}"); " is 122.
Long Statement,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,Convert,The length of the statement  "            //Get the list of available raw files' copy from its remote location to a local folder and then for each file open a separate streamer. " is 135.
Long Statement,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,Convert,The length of the statement  "            Log.Trace("AlgoSeekFuturesConverter.Convert(): Loading {0} AlgoSeekFuturesReader for {1} "' files.Count()' _referenceDate); " is 123.
Long Statement,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,Convert,The length of the statement  "                                            { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Trade' x' _destination)).ToList() }' " is 130.
Long Statement,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,Convert,The length of the statement  "                                            { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Quote' x' _destination)).ToList() }' " is 130.
Long Statement,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,Convert,The length of the statement  "                                            { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' x' _destination)).ToList() } " is 136.
Long Statement,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,Convert,The length of the statement  "                                Log.Trace("AlgoSeekFuturesConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%' Processor per symbol {4}"' Math.Round(totalLinesProcessed / 1000000m' 2)' Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)' Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)' 100 * totalFilesProcessed / totalFiles' pro / symbols); " is 395.
Long Statement,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesProgram.cs,AlgoSeekFuturesConverter,The length of the statement  "            var converter = new AlgoSeekFuturesConverter(resolutionList.ToList() ' referenceDate' remoteDirectory' sourceDirectory' dataDirectory); " is 135.
Long Statement,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesProgram.cs,AlgoSeekFuturesConverter,The length of the statement  "            Log.Trace($"AlgoSeekFuturesConverter.Main(): {referenceDate.ToStringInvariant()} Conversion finished in time: {timer.Elapsed.ToStringInvariant(null)}"); " is 152.
Long Statement,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesProgram.cs,AlgoSeekFuturesConverter,The length of the statement  "            Log.Trace($"AlgoSeekFuturesConverter.Main(): {referenceDate.ToStringInvariant()} Compression finished in time: {timer.Elapsed.ToStringInvariant(null)}"); " is 153.
Long Statement,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,Convert,The length of the statement  "            Log.Trace("AlgoSeekOptionsConverter.Convert(): Loading {0} AlgoSeekOptionsReader for {1} "' compressedRawDatafiles.Count' _referenceDate); " is 138.
Long Statement,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,WriteToDisk,The length of the statement  "                        var groups = processors.Values.Select(x => x[(int)tickType]).Where(x => x.Queue.Count > 0).GroupBy(process => process.Symbol.Underlying.Value); " is 143.
Long Statement,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,Clean,The length of the statement  "            Log.Trace("AlgoSeekOptionsConverter.Clean(): cleaning all zip and csv files for {0} before start..."' date.ToShortDateString()); " is 128.
Long Statement,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,DecompressOpraFile,The length of the statement  "                    Log.Error($"AlgoSeekOptionsConverter.DecompressOpraFile({compressedRawDatafile.Name}' {rawDatafile.Name}): SharpzipLib.BZip2.Decompress returned error: " + ex); " is 160.
Long Statement,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsProcessor,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsProcessor.cs,Safe,The length of the statement  "                    symbol = Symbol.CreateOption(SafeName(symbol.Underlying.Value)' Market.USA' OptionStyle.American' symbol.ID.OptionRight' symbol.ID.StrikePrice' symbol.ID.Date); " is 160.
Long Statement,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverterProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverterProgram.cs,AlgoSeekOptionsConverter,The length of the statement  "            var converter = new AlgoSeekOptionsConverter(Resolution.Minute' referenceDate' remoteDirectory' remoteMask' sourceDirectory' dataDirectory); " is 140.
Long Statement,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverterProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverterProgram.cs,AlgoSeekOptionsConverter,The length of the statement  "            Log.Trace($"AlgoSeekOptionConverter.Main(): {referenceDate.ToStringInvariant()} Cleaning finished in time: {timer.Elapsed.ToStringInvariant(null)}"); " is 149.
Long Statement,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverterProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverterProgram.cs,AlgoSeekOptionsConverter,The length of the statement  "            Log.Trace($"AlgoSeekOptionConverter.Main(): {referenceDate.ToStringInvariant()} Conversion finished in time: {timer.Elapsed.ToStringInvariant(null)}"); " is 151.
Long Statement,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverterProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverterProgram.cs,AlgoSeekOptionsConverter,The length of the statement  "            Log.Trace($"AlgoSeekOptionConverter.Main(): {referenceDate.ToStringInvariant()} Compression finished in time: {timer.Elapsed.ToStringInvariant(null)}"); " is 152.
Long Statement,QuantConnect.ToolBox.CoarseUniverseGenerator,CoarseUniverseGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\CoarseUniverseGeneratorProgram.cs,CoarseUniverseGenerator,The length of the statement  "            // Typically these are nothing symbols (NASDAQ test symbols' or symbols listed for a few days who aren't actually ever traded). " is 127.
Long Statement,QuantConnect.ToolBox.CoarseUniverseGenerator,CoarseUniverseGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\CoarseUniverseGeneratorProgram.cs,ProcessEquityDirectories,The length of the statement  "                var files = ProcessDailyFolder(dailyFolder' coarseFolder' MapFileResolver.Create(mapFileFolder)' factorFileProvider' exclusions' ignoreMaplessSymbols); " is 151.
Long Statement,QuantConnect.ToolBox.CoarseUniverseGenerator,CoarseUniverseGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\CoarseUniverseGeneratorProgram.cs,ProcessDailyFolder,The length of the statement  "                        .Select(f => DateTime.ParseExact(Path.GetFileNameWithoutExtension(f)' DateFormat.EightCharacter' CultureInfo.InvariantCulture)) " is 127.
Long Statement,QuantConnect.ToolBox.CoarseUniverseGenerator,CoarseUniverseGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\CoarseUniverseGeneratorProgram.cs,ProcessDailyFolder,The length of the statement  "                                Log.Error($"CoarseGenerator.ProcessDailyFolder(): Unable to resolve map file for {ticker} as of {date.ToStringInvariant("d")}"); " is 128.
Long Statement,QuantConnect.ToolBox.CoarseUniverseGenerator,CoarseUniverseGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\CoarseUniverseGeneratorProgram.cs,ProcessDailyFolder,The length of the statement  "                            // The fine data in the 'fundamental/fine/goog' folder will be for 'GOOG T1AZ164W5VTX' up to the 2014-04-02 and for 'GOOCV VP83T1ZUHROL' afterward. " is 147.
Long Statement,QuantConnect.ToolBox.CoarseUniverseGenerator,CoarseUniverseGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\CoarseUniverseGeneratorProgram.cs,ProcessDailyFolder,The length of the statement  "                            // Therefore' date before checking if the security has fundamental data for a date' we need to filter the fine files the map's first date. " is 138.
Long Statement,QuantConnect.ToolBox.CoarseUniverseGenerator,CoarseUniverseGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\CoarseUniverseGeneratorProgram.cs,ProcessDailyFolder,The length of the statement  "                            var hasFundamentalDataForDate = fineAvailableDates.Where(d => d >= firstDate).Any(d => date.AddMonths(-1) <= d && d <= date); " is 125.
Long Statement,QuantConnect.ToolBox.CoarseUniverseGenerator,CoarseUniverseGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\CoarseUniverseGeneratorProgram.cs,ProcessDailyFolder,The length of the statement  "                            // The dates right after the acquisition' valid fine fundamental data for AABA are still under the former ticker folder. " is 120.
Long Statement,QuantConnect.ToolBox.CoarseUniverseGenerator,CoarseUniverseGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\CoarseUniverseGeneratorProgram.cs,ProcessDailyFolder,The length of the statement  "                            // Therefore if no fine fundamental data is found in the 'fundamental/fine/aaba' folder' it searches into the 'yhoo' folder. " is 124.
Long Statement,QuantConnect.ToolBox.CoarseUniverseGenerator,CoarseUniverseGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\CoarseUniverseGeneratorProgram.cs,ProcessDailyFolder,The length of the statement  "                                            .Select(f => DateTime.ParseExact(Path.GetFileNameWithoutExtension(f)' DateFormat.EightCharacter' CultureInfo.InvariantCulture)) " is 127.
Long Statement,QuantConnect.ToolBox.CoarseUniverseGenerator,CoarseUniverseGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\CoarseUniverseGeneratorProgram.cs,ProcessDailyFolder,The length of the statement  "                                        hasFundamentalDataForDate = previousTickerFineAvailableDates.Where(d => d >= firstDate).Any(d => date.AddMonths(-1) <= d && d <= date); " is 135.
Long Statement,QuantConnect.ToolBox.CoarseUniverseGenerator,CoarseUniverseGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\CoarseUniverseGeneratorProgram.cs,ProcessDailyFolder,The length of the statement  "                            var coarseFileLine = $"{sid}'{ticker}'{close}'{volume}'{Math.Truncate(dollarVolume)}'{hasFundamentalDataForDate}'{priceFactor}'{splitFactor}"; " is 142.
Long Statement,QuantConnect.ToolBox.CoarseUniverseGenerator,CoarseUniverseGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\CoarseUniverseGeneratorProgram.cs,ProcessDailyFolder,The length of the statement  "                        Log.Trace($"CoarseGenerator.ProcessDailyFolder(): Completed processing {symbols} symbols. Current elapsed: {(DateTime.UtcNow - start).TotalSeconds.ToStringInvariant("0.00")} seconds"); " is 184.
Long Statement,QuantConnect.ToolBox.CoarseUniverseGenerator,CoarseUniverseGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\CoarseUniverseGeneratorProgram.cs,ProcessDailyFolder,The length of the statement  "            Log.Trace($"CoarseGenerator.ProcessDailyFolder(): Processed {symbols} symbols into {dates.Count} coarse files in {(stop - start).TotalSeconds.ToStringInvariant("0.00")} seconds"); " is 179.
Long Statement,QuantConnect.ToolBox.CryptoiqDownloader,CryptoiqDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CryptoiqDownloader\CryptoiqDownloader.cs,Get,The length of the statement  "                        var request = $"http://cryptoiq.io/api/marketdata/ticker/{_exchange}/{symbol.Value}/{counter.ToStringInvariant("yyyy-MM-dd")}/{hour}"; " is 134.
Long Statement,QuantConnect.ToolBox.DukascopyDownloader,DukascopySymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopySymbolMapper.cs,GetLeanSymbol,The length of the statement  "            return Symbol.Create(ConvertDukascopySymbolToLeanSymbol(brokerageSymbol)' GetBrokerageSecurityType(brokerageSymbol)' Market.Dukascopy); " is 135.
Long Statement,QuantConnect.ToolBox.DukascopyDownloader,DukascopySymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopySymbolMapper.cs,GetBrokerageSecurityType,The length of the statement  "            return (brokerageSymbol.Length == 6 && KnownCurrencies.Contains(brokerageSymbol.Substring(0' 3)) && KnownCurrencies.Contains(brokerageSymbol.Substring(3' 3))) " is 158.
Long Statement,QuantConnect.ToolBox.DukascopyDownloader,DukascopySymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopySymbolMapper.cs,IsKnownLeanSymbol,The length of the statement  "            return MapDukascopyToLean.ContainsKey(dukascopySymbol) && GetBrokerageSecurityType(dukascopySymbol) == symbol.ID.SecurityType; " is 126.
Long Statement,QuantConnect.ToolBox.FxcmVolumeDownload,FxcmVolumeDownloadProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeDownloadProgram.cs,FxcmVolumeDownload,The length of the statement  "                Log.LogHandler = new CompositeLogHandler(new ConsoleLogHandler()' new FileLogHandler("FxcmFxVolumeDownloader.log"' useTimestampPrefix: false)); " is 143.
Long Statement,QuantConnect.ToolBox.FxcmDownloader,FxcmDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\FxcmDownloader\FxcmDataDownloader.cs,Get,The length of the statement  "            Console.WriteLine($"Downloading {resolution.ToStringInvariant()} data from {startUtc.ToStringInvariant("yyyyMMdd HH:mm:ss")} to {endUtc.ToStringInvariant("yyyyMMdd HH:mm:ss")}..."); " is 181.
Long Statement,QuantConnect.ToolBox.IQFeed,Level1Port,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,OnLevel1FundamentalEvent,The length of the statement  "            if (e.SplitDate1.Date == DateTime.Today && DateTime.Now.TimeOfDay.TotalHours <= 8) // they will always be sent premarket " is 120.
Long Statement,QuantConnect.ToolBox.IQFeed,Level1Port,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,OnLevel1SummaryUpdateEvent,The length of the statement  "            var last = (decimal)(e.TypeOfUpdate == Level1SummaryUpdateEventArgs.UpdateType.ExtendedTrade ? e.ExtendedTradingLast : e.Last); " is 127.
Long Statement,QuantConnect.ToolBox.IQFeed,Level1Port,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,OnLevel1TimerEvent,The length of the statement  "            //If there was a bad tick and the time didn't set right' skip setting it here and just use our millisecond timer to set the time from last time it was set. " is 155.
Long Statement,QuantConnect.ToolBox.IQFeed,HistoryPort,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,ProcessHistoryRequests,The length of the statement  "            Log.Trace($"HistoryPort.ProcessHistoryJob(): Submitting request: {request.Symbol.SecurityType.ToStringInvariant()}-{ticker}: " + " is 128.
Long Statement,QuantConnect.ToolBox.IQFeed,HistoryPort,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,ProcessHistoryRequests,The length of the statement  "                $"{request.Resolution.ToStringInvariant()} {start.ToStringInvariant()}->{(end ?? DateTime.UtcNow.AddMinutes(-1)).ToStringInvariant()}" " is 134.
Long Statement,QuantConnect.ToolBox.IQFeed,HistoryPort,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,GetData,The length of the statement  "                        return new TradeBar(istartTime' requestData.Symbol' (decimal)i.Open' (decimal)i.High' (decimal)i.Low' (decimal)i.Close' i.PeriodVolume); " is 136.
Long Statement,QuantConnect.ToolBox.IQFeed,HistoryPort,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,GetData,The length of the statement  "                        return new TradeBar(dstartTime' requestData.Symbol' (decimal)d.Open' (decimal)d.High' (decimal)d.Low' (decimal)d.Close' d.PeriodVolume' requestData.Resolution.ToTimeSpan()); " is 173.
Long Statement,QuantConnect.ToolBox.IQFeed,IQFeedDataQueueUniverseProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,LookupSymbols,The length of the statement  "                // if we found some data that was loaded on demand' then we have to re-run the query to include that data into method output " is 124.
Long Statement,QuantConnect.ToolBox.IQFeed,IQFeedDataQueueUniverseProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,LoadSymbols,The length of the statement  "            // we try to check if we already downloaded the file and it is in cache. If yes' we use it. Otherwise' download new file. " is 121.
Long Statement,QuantConnect.ToolBox.IQFeed,IQFeedDataQueueUniverseProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,LoadSymbols,The length of the statement  "            var dayOfWeek = DateTimeFormatInfo.CurrentInfo.Calendar.GetWeekOfYear(DateTime.Today' CalendarWeekRule.FirstDay' DayOfWeek.Monday); " is 131.
Long Statement,QuantConnect.ToolBox.IQFeed,IQFeedDataQueueUniverseProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,LoadSymbols,The length of the statement  "                    Log.Trace("Discrepancy found while parsing IQFeed symbol universe file. Expected 8 columns' but arrived {0}. Line: {1}"' columns.Length' line); " is 143.
Long Statement,QuantConnect.ToolBox.IQFeed,IQFeedDataQueueUniverseProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,LoadSymbols,The length of the statement  "                        var market = _futuresExchanges.ContainsKey(columns[columnExchange]) ? _futuresExchanges[columns[columnExchange]] : Market.USA; " is 126.
Long Statement,QuantConnect.ToolBox.IQFeed,IQFeedDataQueueUniverseProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,LoadSymbolOnDemand,The length of the statement  "            var dayOfWeek = DateTimeFormatInfo.CurrentInfo.Calendar.GetWeekOfYear(DateTime.Today' CalendarWeekRule.FirstDay' DayOfWeek.Monday); " is 131.
Long Statement,QuantConnect.ToolBox.IQFeed,IQFeedDataQueueUniverseProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,GetBrokerageContractSymbol,The length of the statement  "            return _symbols.Where(kpv => kpv.Key.SecurityType == SecurityType.Future && kpv.Key.ID.Symbol == subscribeSymbol.ID.Symbol) " is 123.
Long Statement,QuantConnect.ToolBox.IQFeed,IQConnect,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQConnect.cs,getPath,The length of the statement  "                // if it isn't in that location' it is possible the user is running and x64 OS.  Check the windows virtualized registry location " is 128.
Long Statement,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,RequestTickData,The length of the statement  "            var reqString = $"HTX'{symbol}'{dataPoints.ToStringInvariant("0000000")}'{(oldToNew ? "1" : "0")}'{reqNo}'{_histDataPointsPerSend.ToStringInvariant("0000000")}\r\n"; " is 165.
Long Statement,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,RequestTickData,The length of the statement  "            var reqString = $"HTD'{symbol}'{days.ToStringInvariant("0000000")}'{_histMaxDataPoints.ToStringInvariant("0000000")}'{timeStartInDay.IQFeedFormat}'{timeEndInDay.IQFeedFormat}'{(oldToNew ? "1" : "0")}'{reqNo}'{_histDataPointsPerSend.ToStringInvariant("0000000")}\r\n"; " is 267.
Long Statement,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,RequestTickData,The length of the statement  "                Invariant($"{(timeStartInDay == null ? "" : timeStartInDay.IQFeedFormat)}'{(timeEndInDay == null ? "" : timeEndInDay.IQFeedFormat)}'") + " is 136.
Long Statement,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,RequestIntervalData,The length of the statement  "                $"{start.ToStringInvariant("yyyyMMdd HHmmss")}'{(end.HasValue ? end.Value.ToStringInvariant("yyyyMMdd HHmmss") : "")}''" + " is 122.
Long Statement,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,RequestIntervalData,The length of the statement  "                $"{(timeStartInDay == null ? "" : timeStartInDay.IQFeedFormat)}'{(timeEndInDay == null ? "" : timeEndInDay.IQFeedFormat)}'" + " is 125.
Long Statement,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,RequestDailyData,The length of the statement  "            var reqString = $"HDT'{symbol}'{start.ToStringInvariant("yyyyMMdd")}'{(end.HasValue ? end.Value.ToStringInvariant("yyyyMMdd") : "")}'" + " is 136.
Long Statement,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,RequestSymbols,The length of the statement  "            var reqString = $"SBF'{((searchField == SearchField.Symbol) ? "s" : "d")}'{searchText}'{(filterType == FilterType.Market ? "e" : "t")}'" + " is 138.
Long Statement,QuantConnect.ToolBox.IQFeed,Status,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The length of the statement  "                if (!DateTime.TryParseExact(fields[10]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue; " is 136.
Long Statement,QuantConnect.ToolBox.IQFeed,Status,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The length of the statement  "                if (!DateTime.TryParseExact(fields[11]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _marketTime)) _marketTime = DateTime.MinValue; " is 138.
Long Statement,QuantConnect.ToolBox.IQFeed,SocketClient,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\SocketClient.cs,ConnectToSocketAndBeginReceive,The length of the statement  "                throw new Exception("Error in connecting to socket and starting receive: " + ex.Message + " " + _endPoint.Address +":"+ _endPoint.Port + " >>>> " + ex.StackTrace' ex); " is 167.
Long Statement,QuantConnect.ToolBox.KaikoDataConverter,KaikoDataConverterProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\KaikoDataConverter\KaikoDataConverterProgram.cs,KaikoDataConverter,The length of the statement  "                Log.Trace($"KaikoDataConverter(): Starting data conversion from source {filePath.Name} for date {processingDate:yyyy_MM_dd}... "); " is 130.
Long Statement,QuantConnect.ToolBox.KaikoDataConverter,KaikoDataConverterProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\KaikoDataConverter\KaikoDataConverterProgram.cs,KaikoDataConverter,The length of the statement  "                    var targetDayEntries = zip.Entries.Where(e => e.FileName.Contains($"{processingDate.ToStringInvariant("yyyy_MM_dd")}")).ToList(); " is 129.
Long Statement,QuantConnect.ToolBox.KaikoDataConverter,KaikoDataReader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\KaikoDataConverter\KaikoCryptoReader.cs,ParseKaikoQuoteFile,The length of the statement  "                    Log.Error($"KaikoDataConverter.ParseKaikoQuoteFile(): Raw data corrupted. Line {string.Join(" "' lineParts)}' Exception {ex}"); " is 127.
Long Statement,QuantConnect.ToolBox.KaikoDataConverter,KaikoDataReader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\KaikoDataConverter\KaikoCryptoReader.cs,ParseKaikoTradeFile,The length of the statement  "                    Log.Error($"KaikoDataConverter.ParseKaikoTradeFile(): Raw data corrupted. Line {string.Join(" "' lineParts)}' Exception {ex}"); " is 127.
Long Statement,QuantConnect.ToolBox.KrakenDownloader,KrakenDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\KrakenDataDownloader\KrakenDataDownloader.cs,Get,The length of the statement  "            var startUnixTime = Convert.ToInt64(Time.DateTimeToUnixTimeStamp(startUtc) * 1000000000); // Multiply by 10^9 per Kraken API " is 124.
Long Statement,QuantConnect.ToolBox.NseMarketDataConverter,NseMarketDataConverterProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\NseMarketDataConverter\NseMarketDataConverterProgram.cs,NseMarketDataConverter,The length of the statement  "            Console.WriteLine("The NseMarketData converter transforms NseMarketData orders into the LEAN Algorithmic Trading Engine Data Format."); " is 135.
Long Statement,QuantConnect.ToolBox.OandaDownloader,OandaDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\OandaDownloader\OandaDataDownloader.cs,Get,The length of the statement  "                var bars = _brokerage.DownloadQuoteBars(symbol' startDateTime' endUtc.AddDays(1)' Resolution.Second' DateTimeZone.Utc).ToList(); " is 128.
Long Statement,QuantConnect.ToolBox.QuandlBitfinexDownloader,QuandlBitfinexDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\QuandlBitfinexDownloader\QuandlBitfinexDownloader.cs,Get,The length of the statement  "            var url = "https://www.quandl.com/api/v3/datasets/BCHARTS/BITFINEXUSD.csv?order=asc&collapse=" + collapse + "&api_key=" + _apiKey + "&start_date=" " is 146.
Long Statement,QuantConnect.ToolBox.QuantQuoteConverter,QuantQuoteConverterProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\QuantQuoteConverter\QuantQuoteConverterProgram.cs,QuantQuoteConverter,The length of the statement  "            Console.WriteLine("The QuantQuote converter transforms QuantQuote orders into the LEAN Algorithmic Trading Engine Data Format."); " is 129.
Long Statement,QuantConnect.ToolBox.QuantQuoteConverter,QuantQuoteConverterProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\QuantQuoteConverter\QuantQuoteConverterProgram.cs,QuantQuoteConverter,The length of the statement  "                    var data = new Dictionary<string' string> { { Invariant($"{date:yyyyMMdd}_{symbol}_Trade_Second.csv")' fileContents } }; " is 120.
Long Statement,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsEarningsDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsEarningsDownloader.cs,Run,The length of the statement  "                    Log.Trace($"TradingEconomicsEarningsDownloader.Run(): Collecting earnings data from {startUtc:yyyy-MM-dd} to {endUtc:yyyy-MM-dd}"); " is 131.
Long Statement,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsIndicatorDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsIndicatorDownloader.cs,Run,The length of the statement  "                            Log.Trace($"TradingEconomicsIndicatorDownloader.Run(): Skipping data because it already exists for month: {startUtc:MMMM}"); " is 124.
Long Statement,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsIndicatorDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsIndicatorDownloader.cs,Run,The length of the statement  "                        Log.Trace($"TradingEconomicsIndicatorDownloader.Run(): Collecting data for indicator: {indicator} - from {startUtc:yyyy-MM-dd} to {endUtc:yyyy-MM-dd}"); " is 152.
Long Statement,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsIndicatorDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsIndicatorDownloader.cs,Run,The length of the statement  "                Log.Trace($"TradingEconomicsIndicatorDownloader.Run(): {data.Count} {indicator} indicator entries read in {stopwatch.Elapsed}"); " is 128.
Long Statement,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsIndicatorDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsIndicatorDownloader.cs,Run,The length of the statement  "                            var dataFolderZipPath = Path.Combine(Globals.DataFolder' "alternative"' "trading-economics"' "indicator"' kvp.Key' $"{date}.zip"); " is 130.
Long Statement,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsIndicatorDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsIndicatorDownloader.cs,Run,The length of the statement  "                                Log.Trace($"TradingEconomicsIndicatorDownloader.Run(): {date} - Skipping file because it already exists: {finalZipPath}"); " is 122.
Long Statement,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsIndicatorDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsIndicatorDownloader.cs,Run,The length of the statement  "                                Log.Trace($"TradingEconomicsIndicatorDownloader.Run(): {date} - Skipping file because it already exists: {dataFolderZipPath}"); " is 127.
Long Statement,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsIndicatorDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsIndicatorDownloader.cs,Get,The length of the statement  "            var url = $"/historical/country/all/indicator/{_indicator}/{startUtc.ToStringInvariant("yyyy-MM-dd")}/{endUtc.ToStringInvariant("yyyy-MM-dd")}"; " is 144.
Long Statement,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsDataDownloader.cs,HttpRequester,The length of the statement  "                    Log.Trace($"TradingEconomicsDataDownloader.HttpRequester(): HTTP Request failed with message: {e.Message} - (attempt {retries} / 5). Retrying..."); " is 147.
Long Statement,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsCalendarDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsCalendarDownloader.cs,Run,The length of the statement  "                Log.Trace($"TradingEconomicsCalendarDownloader.Run(): Collecting calendar data from {startUtc:yyyy-MM-dd} to {endUtc:yyyy-MM-dd}"); " is 131.
Long Statement,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsCalendarDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsCalendarDownloader.cs,Run,The length of the statement  "                    Log.Trace($"TradingEconomicsCalendarDownloader.Run(): Skipping data because it already exists for month: {startUtc:MMMM}"); " is 123.
Long Statement,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsCalendarDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsCalendarDownloader.cs,Run,The length of the statement  "                    Log.Error(e' $"TradingEconomicsCalendarDownloader.Run(): Error parsing data for date {startUtc.ToStringInvariant("yyyyMMdd")}"); " is 128.
Long Statement,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsCalendarDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsCalendarDownloader.cs,ProcessRawContent,The length of the statement  "                Log.Trace($"TradingEconomicsCalendarDownloader.Run(): Filtering {totalFiltered}/{collection.Count} entries because they contain no 'actual' field"); " is 148.
Long Statement,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsCalendarDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsCalendarDownloader.cs,ProcessData,The length of the statement  "                        var dataFolderZipPath = Path.Combine(Globals.DataFolder' "alternative"' "trading-economics"' "calendar"' kvp.Key' $"{date}.zip"); " is 129.
Long Statement,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsCalendarDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsCalendarDownloader.cs,ProcessData,The length of the statement  "                            Log.Trace($"TradingEconomicsCalendarDownloader.ProcessData(): {date} - Skipping file because it already exists: {finalZipPath}"); " is 129.
Long Statement,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsCalendarDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsCalendarDownloader.cs,ProcessData,The length of the statement  "                            Log.Trace($"TradingEconomicsCalendarDownloader.ProcessData(): {date} - Skipping file because it already exists: {dataFolderZipPath}"); " is 134.
Long Statement,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsCalendarDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsCalendarDownloader.cs,ProcessData,The length of the statement  "                            Log.Trace($"TradingEconomicsCalendarDownloader.ProcessData(): {date} - Moving temp file: {tempZipPath} to {finalZipPath}"); " is 123.
Long Statement,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsCalendarDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsCalendarDownloader.cs,ProcessData,The length of the statement  "                            Log.Error(e' $"TradingEconomicsCalendarDownloader.ProcessData(): {date} - Error creating zip file for ticker: {kvp.Key}"); " is 122.
Long Statement,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsCalendarDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsCalendarDownloader.cs,Get,The length of the statement  "            var url = $"/calendar/country/{country}/{startUtc.ToStringInvariant("yyyy-MM-dd")}/{endUtc.ToStringInvariant("yyyy-MM-dd")}"; " is 125.
Long Statement,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsCalendarDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsCalendarDownloader.cs,ParseDecimal,The length of the statement  "                Log.Error($"TradingEconomicsCalendarDownloader.ParseDecimal(): Failed to parse the figure {value}. Final form before parsing: {newFigure}"); " is 140.
Long Statement,QuantConnect.ToolBox.USTreasuryYieldCurve,USTreasuryYieldCurveConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\USTreasuryYieldCurve\USTreasuryYieldCurveConverter.cs,Convert,The length of the statement  "                    Log.Trace("USTreasuryYieldCurveConverter.Convert(): File already exists in destination. Filtering so that we only add new data"); " is 129.
Long Statement,QuantConnect.ToolBox.USTreasuryYieldCurve,USTreasuryYieldCurveConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\USTreasuryYieldCurve\USTreasuryYieldCurveConverter.cs,Convert,The length of the statement  "                    var csvDataDate = DateTime.ParseExact(csvData.Split(''').First()' DateFormat.EightCharacter' CultureInfo.InvariantCulture); " is 123.
Long Statement,QuantConnect.ToolBox.USTreasuryYieldCurve,USTreasuryYieldCurveConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\USTreasuryYieldCurve\USTreasuryYieldCurveConverter.cs,Convert,The length of the statement  "                    // Date[0]' 1 mo[1]' 2 mo[2]' 3 mo[3]' 6 mo[4]' 1 yr[5]' 2 yr[6] 3 yr[7]' 5 yr[8]' 7 yr [9]' 10 yr[10]' 20 yr[11]' 30 yr[12] " is 124.
Long Statement,QuantConnect.ToolBox.USTreasuryYieldCurve,USTreasuryYieldCurveDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\USTreasuryYieldCurve\USTreasuryYieldCurveDownloader.cs,Download,The length of the statement  "                        Log.Trace($"USTreasuryYieldCurveRateDownloader.Download(): Moving file from: {tempFilePath.FullName} - to: {finalPath.FullName}"); " is 130.
Long Statement,QuantConnect.ToolBox.USTreasuryYieldCurve,USTreasuryYieldCurveDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\USTreasuryYieldCurve\USTreasuryYieldCurveDownloader.cs,Download,The length of the statement  "                    Log.Error(e' $"USTreasuryYieldCurveRateDownloader.Download(): Web client error with status code {(int)response.StatusCode} - Retrying ({retry}/{_retries})"); " is 157.
Long Statement,QuantConnect.ToolBox.YahooDownloader,YahooDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\YahooDownloader\YahooDataDownloader.cs,GetEnumerator,The length of the statement  "                yield return new TradeBar(item.Date' symbol' item.Open' item.High' item.Low' item.Close' (long)item.Volume' TimeSpan.FromDays(1)); " is 130.
Complex Conditional,QuantConnect.ToolBox,LeanDataWriter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\LeanDataWriter.cs,LeanDataWriter,The conditional expression  "_securityType != SecurityType.Equity && _securityType != SecurityType.Forex && _securityType != SecurityType.Cfd && _securityType != SecurityType.Crypto && _securityType != SecurityType.Future && _securityType != SecurityType.Option"  is complex.
Complex Conditional,QuantConnect.ToolBox.IVolatilityEquityConverter,IVolatilityEquityConverterProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IVolatilityEquityConverter\IVolatilityEquityConverterProgram.cs,IVolatilityEquityConverter,The conditional expression  "!(sourceDirectory.IsNullOrEmpty() || sourceMetaDirectory.IsNullOrEmpty()                    || destinationDirectory.IsNullOrEmpty() || resolution.IsNullOrEmpty())"  is complex.
Complex Conditional,QuantConnect.ToolBox.SECDataDownloader,SECDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataConverter.cs,Process,The conditional expression  "currentTagName == "CONFIRMING-COPY" || (currentTagName == "ASSIGNED-SIC" && !HasValue(line)) || currentTagName == "FLAWED""  is complex.
Complex Conditional,QuantConnect.ToolBox.SECDataDownloader,SECDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataConverter.cs,Process,The conditional expression  "currentTagName == "FILING-DATE" || currentTagName == "PERIOD" ||                              currentTagName == "DATE-OF-FILING-CHANGE" || currentTagName == "DATE-CHANGED""  is complex.
Complex Conditional,QuantConnect.ToolBox.IQFeed,Level1Port,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,OnLevel1SummaryUpdateEvent,The conditional expression  "e.TypeOfUpdate != Level1SummaryUpdateEventArgs.UpdateType.ExtendedTrade               && e.TypeOfUpdate != Level1SummaryUpdateEventArgs.UpdateType.Trade               && e.TypeOfUpdate != Level1SummaryUpdateEventArgs.UpdateType.Bid               && e.TypeOfUpdate != Level1SummaryUpdateEventArgs.UpdateType.Ask"  is complex.
Complex Conditional,QuantConnect.ToolBox.IQFeed,HistoryPort,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,ProcessHistoryRequests,The conditional expression  "!CanHandle(request.Symbol) ||                  (request.Symbol.ID.SecurityType == SecurityType.Option && request.Symbol.IsCanonical()) ||                  (request.Symbol.ID.SecurityType == SecurityType.Future && request.Symbol.IsCanonical())"  is complex.
Empty Catch Block,QuantConnect.ToolBox,TemporaryPathProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TemporaryPathProvider.cs,Delete,The method has an empty catch block.
Magic Number,QuantConnect.ToolBox.Benzinga,BenzingaNewsDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\Benzinga\BenzingaNewsDataDownloader.cs,BenzingaNewsDataDownloader,The following statement contains a magic number: _rateGate = new RateGate(1' TimeSpan.FromSeconds(0.5));
Magic Number,QuantConnect.ToolBox.BitfinexDownloader,BitfinexDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\BitfinexDownloader\BitfinexDataDownloader.cs,ProgressBar,The following statement contains a magic number: Console.Write($"\r[{bar}] {(p * 100).ToStringInvariant("N2")}%");
Magic Number,QuantConnect.ToolBox.CoinApiDataConverter,CoinApiDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoinApiDataConverter\CoinApiDataConverter.cs,Run,The following statement contains a magic number: var fileToProcess = _rawDataFolder.EnumerateFiles("*.gz")                  .Where(f => f.Name.Split('_').Length == 4)                  .DistinctBy(                      x =>                      {                          var parts = x.Name.Split('-').Take(2);                          return string.Join("-"' parts);                      }                  );
Magic Number,QuantConnect.ToolBox.CoinApiDataConverter,CoinApiDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoinApiDataConverter\CoinApiDataConverter.cs,Run,The following statement contains a magic number: var fileToProcess = _rawDataFolder.EnumerateFiles("*.gz")                  .Where(f => f.Name.Split('_').Length == 4)                  .DistinctBy(                      x =>                      {                          var parts = x.Name.Split('-').Take(2);                          return string.Join("-"' parts);                      }                  );
Magic Number,QuantConnect.ToolBox.CoinApi,CoinApiSymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoinApi\CoinApiSymbolMapper.cs,GetLeanSymbol,The following statement contains a magic number: parts.Length != 4 || parts[1] != "SPOT"
Magic Number,QuantConnect.ToolBox.CoinApi,CoinApiSymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoinApi\CoinApiSymbolMapper.cs,GetLeanSymbol,The following statement contains a magic number: var baseCurrency = ConvertCoinApiCurrencyToLeanCurrency(parts[2]' symbolMarket);
Magic Number,QuantConnect.ToolBox.CoinApi,CoinApiSymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoinApi\CoinApiSymbolMapper.cs,GetLeanSymbol,The following statement contains a magic number: var quoteCurrency = ConvertCoinApiCurrencyToLeanCurrency(parts[3]' symbolMarket);
Magic Number,QuantConnect.ToolBox.CoinApi,CoinApiSymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoinApi\CoinApiSymbolMapper.cs,LoadSymbolMap,The following statement contains a magic number: _symbolMap = result                  .Where(x => x.SymbolType == "SPOT" && x.SymbolId.Split('_').Length == 4)                  .ToDictionary(                      x =>                      {                          var market = MapExchangeIdsToMarkets[x.ExchangeId];                          return Symbol.Create(                              ConvertCoinApiCurrencyToLeanCurrency(x.AssetIdBase' market) +                              ConvertCoinApiCurrencyToLeanCurrency(x.AssetIdQuote' market)'                              SecurityType.Crypto'                              market);                      }'                      x => x.SymbolId);
Magic Number,QuantConnect.ToolBox.EstimizeDataDownloader,EstimizeEstimateDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\EstimizeDataDownloader\EstimizeEstimateDataDownloader.cs,Run,The following statement contains a magic number: var currentPercent = 0.05;
Magic Number,QuantConnect.ToolBox.EstimizeDataDownloader,EstimizeEstimateDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\EstimizeDataDownloader\EstimizeEstimateDataDownloader.cs,Run,The following statement contains a magic number: var percent = 0.05;
Magic Number,QuantConnect.ToolBox.EstimizeDataDownloader,EstimizeReleaseDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\EstimizeDataDownloader\EstimizeReleaseDataDownloader.cs,Run,The following statement contains a magic number: var currentPercent = 0.05;
Magic Number,QuantConnect.ToolBox.EstimizeDataDownloader,EstimizeReleaseDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\EstimizeDataDownloader\EstimizeReleaseDataDownloader.cs,Run,The following statement contains a magic number: var percent = 0.05;
Magic Number,QuantConnect.ToolBox.EstimizeDataDownloader,EstimizeDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\EstimizeDataDownloader\EstimizeDataDownloader.cs,EstimizeDataDownloader,The following statement contains a magic number: IndexGate = new RateGate(10' TimeSpan.FromSeconds(1.1));
Magic Number,QuantConnect.ToolBox.EstimizeDataDownloader,EstimizeDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\EstimizeDataDownloader\EstimizeDataDownloader.cs,EstimizeDataDownloader,The following statement contains a magic number: IndexGate = new RateGate(10' TimeSpan.FromSeconds(1.1));
Magic Number,QuantConnect.ToolBox.GDAXDownloader,GDAXDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\GDAXDownloader\GDAXDownloader.cs,GetWithRetry,The following statement contains a magic number: Thread.Sleep(1000 / MaxRequestsPerSecond + 1);
Magic Number,QuantConnect.ToolBox.GDAXDownloader,GDAXDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\GDAXDownloader\GDAXDownloader.cs,ParseCandleData,The following statement contains a magic number: var tradeBar = new TradeBar()                      {                          Time = Time.UnixTimeStampToDateTime(epochs)'                          Symbol = symbol'                          Low = Parse.Decimal(datapoint[1])'                          High = Parse.Decimal(datapoint[2])'                          Open = Parse.Decimal(datapoint[3])'                          Close = Parse.Decimal(datapoint[4])'                          Volume = Parse.Decimal(datapoint[5]' System.Globalization.NumberStyles.Float)'                          Value = Parse.Decimal(datapoint[4])'                          DataType = MarketDataType.TradeBar'                          Period = new TimeSpan(0' 0' (int)granularity)'                          EndTime = Time.UnixTimeStampToDateTime(epochs).AddSeconds(granularity)                      };
Magic Number,QuantConnect.ToolBox.GDAXDownloader,GDAXDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\GDAXDownloader\GDAXDownloader.cs,ParseCandleData,The following statement contains a magic number: var tradeBar = new TradeBar()                      {                          Time = Time.UnixTimeStampToDateTime(epochs)'                          Symbol = symbol'                          Low = Parse.Decimal(datapoint[1])'                          High = Parse.Decimal(datapoint[2])'                          Open = Parse.Decimal(datapoint[3])'                          Close = Parse.Decimal(datapoint[4])'                          Volume = Parse.Decimal(datapoint[5]' System.Globalization.NumberStyles.Float)'                          Value = Parse.Decimal(datapoint[4])'                          DataType = MarketDataType.TradeBar'                          Period = new TimeSpan(0' 0' (int)granularity)'                          EndTime = Time.UnixTimeStampToDateTime(epochs).AddSeconds(granularity)                      };
Magic Number,QuantConnect.ToolBox.GDAXDownloader,GDAXDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\GDAXDownloader\GDAXDownloader.cs,ParseCandleData,The following statement contains a magic number: var tradeBar = new TradeBar()                      {                          Time = Time.UnixTimeStampToDateTime(epochs)'                          Symbol = symbol'                          Low = Parse.Decimal(datapoint[1])'                          High = Parse.Decimal(datapoint[2])'                          Open = Parse.Decimal(datapoint[3])'                          Close = Parse.Decimal(datapoint[4])'                          Volume = Parse.Decimal(datapoint[5]' System.Globalization.NumberStyles.Float)'                          Value = Parse.Decimal(datapoint[4])'                          DataType = MarketDataType.TradeBar'                          Period = new TimeSpan(0' 0' (int)granularity)'                          EndTime = Time.UnixTimeStampToDateTime(epochs).AddSeconds(granularity)                      };
Magic Number,QuantConnect.ToolBox.GDAXDownloader,GDAXDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\GDAXDownloader\GDAXDownloader.cs,ParseCandleData,The following statement contains a magic number: var tradeBar = new TradeBar()                      {                          Time = Time.UnixTimeStampToDateTime(epochs)'                          Symbol = symbol'                          Low = Parse.Decimal(datapoint[1])'                          High = Parse.Decimal(datapoint[2])'                          Open = Parse.Decimal(datapoint[3])'                          Close = Parse.Decimal(datapoint[4])'                          Volume = Parse.Decimal(datapoint[5]' System.Globalization.NumberStyles.Float)'                          Value = Parse.Decimal(datapoint[4])'                          DataType = MarketDataType.TradeBar'                          Period = new TimeSpan(0' 0' (int)granularity)'                          EndTime = Time.UnixTimeStampToDateTime(epochs).AddSeconds(granularity)                      };
Magic Number,QuantConnect.ToolBox.GDAXDownloader,GDAXDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\GDAXDownloader\GDAXDownloader.cs,ParseCandleData,The following statement contains a magic number: var tradeBar = new TradeBar()                      {                          Time = Time.UnixTimeStampToDateTime(epochs)'                          Symbol = symbol'                          Low = Parse.Decimal(datapoint[1])'                          High = Parse.Decimal(datapoint[2])'                          Open = Parse.Decimal(datapoint[3])'                          Close = Parse.Decimal(datapoint[4])'                          Volume = Parse.Decimal(datapoint[5]' System.Globalization.NumberStyles.Float)'                          Value = Parse.Decimal(datapoint[4])'                          DataType = MarketDataType.TradeBar'                          Period = new TimeSpan(0' 0' (int)granularity)'                          EndTime = Time.UnixTimeStampToDateTime(epochs).AddSeconds(granularity)                      };
Magic Number,QuantConnect.ToolBox,FactorFileGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\FactorFileGenerator.cs,CalculateNextDividendFactor,The following statement contains a magic number: return new FactorFileRow(                  previousClosingPrice.Time'                  priceFactor.RoundToSignificantDigits(7)'                  previousFactorFileRow.SplitFactor'                  previousClosingPrice.Close              );
Magic Number,QuantConnect.ToolBox,FactorFileGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\FactorFileGenerator.cs,CalculateNextSplitFactor,The following statement contains a magic number: return new FactorFileRow(                      previousClosingPrice.Time'                      previousFactorFileRow.PriceFactor'                      (previousFactorFileRow.SplitFactor / split.Value).RoundToSignificantDigits(6)'                      previousClosingPrice.Close                  );
Magic Number,QuantConnect.ToolBox,FxcmVolumeAuxiliaryMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeAuxiliaryMethods.cs,GetFxcmVolumeFromZip,The following statement contains a magic number: output.Add(new FxcmVolume                  {                      DataType = MarketDataType.Base'                      Time = time'                      Value = Parse.Long(obs[1])'                      Transactions = Parse.Int(obs[2])                  });
Magic Number,QuantConnect.ToolBox,FxcmVolumeAuxiliaryMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeAuxiliaryMethods.cs,GetLastAvailableDateOfData,The following statement contains a magic number: switch (resolution)              {                  case Resolution.Daily:                  case Resolution.Hour:                      var expectedFilePath = Path.Combine(folderPath' $"{symbol.Value.ToLowerInvariant()}_volume.zip"                      );                      if (File.Exists(expectedFilePath))                      {                          var lastStrDate = ReadZipFileData(expectedFilePath).Last()     // last observation                                                                             .First()    // first string (date)                                                                             .Substring(startIndex: 0' length: 8);                          lastAvailableDate = DateTime.ParseExact(lastStrDate' DateFormat.EightCharacter' CultureInfo.InvariantCulture);                      }                      break;                  case Resolution.Minute:                      var lastFileDate = Directory                          .GetFiles(folderPath' "*_volume.zip")                          .OrderBy(f => f)                          .LastOrDefault();                      if (lastFileDate != null)                      {                          lastFileDate = Path.GetFileNameWithoutExtension(lastFileDate)                                             .Substring(startIndex: 0' length: 8);                          lastAvailableDate = DateTime.ParseExact(lastFileDate' DateFormat.EightCharacter' CultureInfo.InvariantCulture);                      }                      break;              }
Magic Number,QuantConnect.ToolBox,FxcmVolumeAuxiliaryMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeAuxiliaryMethods.cs,GetLastAvailableDateOfData,The following statement contains a magic number: switch (resolution)              {                  case Resolution.Daily:                  case Resolution.Hour:                      var expectedFilePath = Path.Combine(folderPath' $"{symbol.Value.ToLowerInvariant()}_volume.zip"                      );                      if (File.Exists(expectedFilePath))                      {                          var lastStrDate = ReadZipFileData(expectedFilePath).Last()     // last observation                                                                             .First()    // first string (date)                                                                             .Substring(startIndex: 0' length: 8);                          lastAvailableDate = DateTime.ParseExact(lastStrDate' DateFormat.EightCharacter' CultureInfo.InvariantCulture);                      }                      break;                  case Resolution.Minute:                      var lastFileDate = Directory                          .GetFiles(folderPath' "*_volume.zip")                          .OrderBy(f => f)                          .LastOrDefault();                      if (lastFileDate != null)                      {                          lastFileDate = Path.GetFileNameWithoutExtension(lastFileDate)                                             .Substring(startIndex: 0' length: 8);                          lastAvailableDate = DateTime.ParseExact(lastFileDate' DateFormat.EightCharacter' CultureInfo.InvariantCulture);                      }                      break;              }
Magic Number,QuantConnect.ToolBox,FxcmVolumeDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeDownloader.cs,Get,The following statement contains a magic number: var stringDate = obs[0].Substring(startIndex: 3);
Magic Number,QuantConnect.ToolBox,FxcmVolumeDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeDownloader.cs,Run,The following statement contains a magic number: requestDayInterval = 6;
Magic Number,QuantConnect.ToolBox,FxcmVolumeDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeDownloader.cs,Run,The following statement contains a magic number: resolution == Resolution.Minute && (endUtc - startUtc).TotalMinutes > 10000
Magic Number,QuantConnect.ToolBox,FxcmVolumeDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeDownloader.cs,Run,The following statement contains a magic number: resolution == Resolution.Minute && counter % 30 == 0
Magic Number,QuantConnect.ToolBox,FxcmVolumeDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeDownloader.cs,RequestData,The following statement contains a magic number: var endDate = endUtc.AddDays(value: 2).ToStringInvariant("yyyyMMdd") + "2100";
Magic Number,QuantConnect.ToolBox,FxcmVolumeDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeDownloader.cs,RequestData,The following statement contains a magic number: return lines.Skip(count: 2).Take(lines.Length - 4).ToArray();
Magic Number,QuantConnect.ToolBox,FxcmVolumeDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeDownloader.cs,RequestData,The following statement contains a magic number: return lines.Skip(count: 2).Take(lines.Length - 4).ToArray();
Magic Number,QuantConnect.ToolBox.IBDownloader,IBDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IBDownloader\IBDataDownloader.cs,ProgressBar,The following statement contains a magic number: Console.Write($"\r[{bar}] {(p * 100).ToStringInvariant("N2")}%");
Magic Number,QuantConnect.ToolBox.IBDownloader,IBDownloaderProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IBDownloader\IBDownloaderProgram.cs,IBDownloader,The following statement contains a magic number: switch (castResolution)                      {                          case Resolution.Daily:                              maxDays = 365;                              break;                          case Resolution.Hour:                              maxDays = 30;                              break;                          case Resolution.Minute:                              maxDays = 10;                              break;                      }
Magic Number,QuantConnect.ToolBox.IBDownloader,IBDownloaderProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IBDownloader\IBDownloaderProgram.cs,IBDownloader,The following statement contains a magic number: switch (castResolution)                      {                          case Resolution.Daily:                              maxDays = 365;                              break;                          case Resolution.Hour:                              maxDays = 30;                              break;                          case Resolution.Minute:                              maxDays = 10;                              break;                      }
Magic Number,QuantConnect.ToolBox.IBDownloader,IBDownloaderProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IBDownloader\IBDownloaderProgram.cs,IBDownloader,The following statement contains a magic number: switch (castResolution)                      {                          case Resolution.Daily:                              maxDays = 365;                              break;                          case Resolution.Hour:                              maxDays = 30;                              break;                          case Resolution.Minute:                              maxDays = 10;                              break;                      }
Magic Number,QuantConnect.ToolBox.IEX,IEXDataQueueHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IEX\IEXDataQueueHandler.cs,Reconnect,The following statement contains a magic number: _socket = IO.Socket(Endpoint'                      new IO.Options()                      {                          // default is 1000' default attempts is int.MaxValue                          ReconnectionDelay = 1000                      });
Magic Number,QuantConnect.ToolBox.IEX,IEXDataQueueHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IEX\IEXDataQueueHandler.cs,SocketSafeAsyncEmit,The following statement contains a magic number: Task.Run(async () =>              {                  await _connected.Task;                  const int retriesLimit = 100;                  var retriesCount = 0;                  while (true)                  {                      try                      {                          if (_manager.ReadyState == Manager.ReadyStateEnum.OPEN)                          {                              // there is an ACK functionality in socket.io' but IEX will be moving to standard WebSockets                              // and this retry logic is just for rare cases of connection interrupts                              _socket.Emit(command' value);                              break;                          }                      }                      catch (Exception err)                      {                          Log.Error("IEXDataQueueHandler.SocketSafeAsyncEmit(): " + err.Message);                      }                      await Task.Delay(100);                      retriesCount++;                      if (retriesCount >= retriesLimit)                      {                          Log.Error("IEXDataQueueHandler.SocketSafeAsyncEmit(): " +                                    (new TimeoutException("Cannot subscribe to symbol :" + value)));                          break;                      }                  }              }' _cts.Token)              .ContinueWith((t) =>              {                  Log.Error("IEXDataQueueHandler.SocketSafeAsyncEmit(): " + t.Exception.Message);                  return t;                }' TaskContinuationOptions.OnlyOnFaulted);
Magic Number,QuantConnect.ToolBox.IEX,IEXDataQueueHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IEX\IEXDataQueueHandler.cs,SocketSafeAsyncEmit,The following statement contains a magic number: Task.Run(async () =>              {                  await _connected.Task;                  const int retriesLimit = 100;                  var retriesCount = 0;                  while (true)                  {                      try                      {                          if (_manager.ReadyState == Manager.ReadyStateEnum.OPEN)                          {                              // there is an ACK functionality in socket.io' but IEX will be moving to standard WebSockets                              // and this retry logic is just for rare cases of connection interrupts                              _socket.Emit(command' value);                              break;                          }                      }                      catch (Exception err)                      {                          Log.Error("IEXDataQueueHandler.SocketSafeAsyncEmit(): " + err.Message);                      }                      await Task.Delay(100);                      retriesCount++;                      if (retriesCount >= retriesLimit)                      {                          Log.Error("IEXDataQueueHandler.SocketSafeAsyncEmit(): " +                                    (new TimeoutException("Cannot subscribe to symbol :" + value)));                          break;                      }                  }              }' _cts.Token)              .ContinueWith((t) =>              {                  Log.Error("IEXDataQueueHandler.SocketSafeAsyncEmit(): " + t.Exception.Message);                  return t;                }' TaskContinuationOptions.OnlyOnFaulted);
Magic Number,QuantConnect.ToolBox.IEX,IEXDataQueueHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IEX\IEXDataQueueHandler.cs,ProcessHistoryRequests,The following statement contains a magic number: request.Resolution == Resolution.Minute && start <= DateTime.Today.AddDays(-30)
Magic Number,QuantConnect.ToolBox.IEX,IEXDataQueueHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IEX\IEXDataQueueHandler.cs,ProcessHistoryRequests,The following statement contains a magic number: start <= DateTime.Today.AddYears(-5)
Magic Number,QuantConnect.ToolBox.IEX,IEXDataQueueHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IEX\IEXDataQueueHandler.cs,ProcessHistoryRequests,The following statement contains a magic number: span.Days < 30 && request.Resolution == Resolution.Minute
Magic Number,QuantConnect.ToolBox.IVolatilityEquityConverter,IVolatilityEquityConverterProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IVolatilityEquityConverter\IVolatilityEquityConverterProgram.cs,IVolatilityEquityConverter,The following statement contains a magic number: linearray.Length <= 2
Magic Number,QuantConnect.ToolBox.IVolatilityEquityConverter,IVolatilityEquityConverterProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IVolatilityEquityConverter\IVolatilityEquityConverterProgram.cs,IVolatilityEquityConverter,The following statement contains a magic number: var quoteBar = new QuoteBar(time' symbol' bidBar' sizeBid' askBar' sizeAsk'                          TimeSpan.FromSeconds(60));
Magic Number,QuantConnect.ToolBox.IVolatilityEquityConverter,IVolatilityEquityConverterProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IVolatilityEquityConverter\IVolatilityEquityConverterProgram.cs,PopulateRegularDividends,The following statement contains a magic number: parsed.Add(new Dividend                  {                      Time = DateTime.ParseExact(line[1].Replace("-"' String.Empty)' DateFormat.EightCharacter'                          CultureInfo.InvariantCulture)'                      Value = Parse.Decimal(line[3])                  });
Magic Number,QuantConnect.ToolBox.IVolatilityEquityConverter,IVolatilityEquityConverterProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IVolatilityEquityConverter\IVolatilityEquityConverterProgram.cs,PopulateSplitsAndSpecialDividends,The following statement contains a magic number: switch (line[2])                  {                      case "0":                          parsed.Add(new Split                          {                              Time = time'                              Value = ParseSplitAmt(line[3])                          });                          break;                      case "1":                      case "2":                          parsed.Add(new Dividend                          {                              Time = time'                              Value = Parse.Decimal(line[4])                          });                          break;                        default:                          throw new Exception("Unsupported split type: " + line[2]);                  }
Magic Number,QuantConnect.ToolBox.IVolatilityEquityConverter,IVolatilityEquityConverterProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IVolatilityEquityConverter\IVolatilityEquityConverterProgram.cs,PopulateSplitsAndSpecialDividends,The following statement contains a magic number: switch (line[2])                  {                      case "0":                          parsed.Add(new Split                          {                              Time = time'                              Value = ParseSplitAmt(line[3])                          });                          break;                      case "1":                      case "2":                          parsed.Add(new Dividend                          {                              Time = time'                              Value = Parse.Decimal(line[4])                          });                          break;                        default:                          throw new Exception("Unsupported split type: " + line[2]);                  }
Magic Number,QuantConnect.ToolBox.IVolatilityEquityConverter,IVolatilityEquityConverterProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IVolatilityEquityConverter\IVolatilityEquityConverterProgram.cs,PopulateSplitsAndSpecialDividends,The following statement contains a magic number: switch (line[2])                  {                      case "0":                          parsed.Add(new Split                          {                              Time = time'                              Value = ParseSplitAmt(line[3])                          });                          break;                      case "1":                      case "2":                          parsed.Add(new Dividend                          {                              Time = time'                              Value = Parse.Decimal(line[4])                          });                          break;                        default:                          throw new Exception("Unsupported split type: " + line[2]);                  }
Magic Number,QuantConnect.ToolBox.IVolatilityEquityConverter,IVolatilityEquityConverterProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IVolatilityEquityConverter\IVolatilityEquityConverterProgram.cs,PopulateSplitsAndSpecialDividends,The following statement contains a magic number: switch (line[2])                  {                      case "0":                          parsed.Add(new Split                          {                              Time = time'                              Value = ParseSplitAmt(line[3])                          });                          break;                      case "1":                      case "2":                          parsed.Add(new Dividend                          {                              Time = time'                              Value = Parse.Decimal(line[4])                          });                          break;                        default:                          throw new Exception("Unsupported split type: " + line[2]);                  }
Magic Number,QuantConnect.ToolBox.PsychSignalDataConverter,PsychSignalDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\PsychSignalDataConverter\PsychSignalDataConverter.cs,Convert,The following statement contains a magic number: !DateTime.TryParseExact(csv[2]' @"yyyy-MM-dd\THH:mm:ss\Z"' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal' out timestamp)
Magic Number,QuantConnect.ToolBox.PsychSignalDataConverter,PsychSignalDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\PsychSignalDataConverter\PsychSignalDataConverter.cs,ConvertFrom,The following statement contains a magic number: var files = _rawSourceDirectory.GetFiles("*.csv"' SearchOption.TopDirectoryOnly)                  .Where(                      x =>                      {                          DateTime fileDate;                          if (!DateTime.TryParseExact(x.Name.Substring(0' 11)' "yyyyMMdd_HH"' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal' out fileDate))                          {                              return false;                          }                            return fileDate >= startDateUtc && fileDate < endDateUtc;                      }                  )                  .OrderBy(x => Parse.DateTimeExact(x.Name.Substring(0' 11)' "yyyyMMdd_HH"' DateTimeStyles.AdjustToUniversal))                  .ToList();
Magic Number,QuantConnect.ToolBox.PsychSignalDataConverter,PsychSignalDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\PsychSignalDataConverter\PsychSignalDataConverter.cs,ConvertFrom,The following statement contains a magic number: var files = _rawSourceDirectory.GetFiles("*.csv"' SearchOption.TopDirectoryOnly)                  .Where(                      x =>                      {                          DateTime fileDate;                          if (!DateTime.TryParseExact(x.Name.Substring(0' 11)' "yyyyMMdd_HH"' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal' out fileDate))                          {                              return false;                          }                            return fileDate >= startDateUtc && fileDate < endDateUtc;                      }                  )                  .OrderBy(x => Parse.DateTimeExact(x.Name.Substring(0' 11)' "yyyyMMdd_HH"' DateTimeStyles.AdjustToUniversal))                  .ToList();
Magic Number,QuantConnect.ToolBox.PsychSignalDataConverter,PsychSignalDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\PsychSignalDataConverter\PsychSignalDataConverter.cs,ConvertDirectory,The following statement contains a magic number: var files = _rawSourceDirectory.GetFiles("*.csv"' SearchOption.TopDirectoryOnly)                  .Where(                      x =>                      {                          DateTime fileDate;                          return DateTime.TryParseExact(x.Name.Substring(0' 11)' "yyyyMMdd_HH"' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal' out fileDate);                      }                  )                  .OrderBy(x => Parse.DateTimeExact(x.Name.Substring(0' 11)' "yyyyMMdd_HH"' DateTimeStyles.AdjustToUniversal))                  .ToList();
Magic Number,QuantConnect.ToolBox.PsychSignalDataConverter,PsychSignalDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\PsychSignalDataConverter\PsychSignalDataConverter.cs,ConvertDirectory,The following statement contains a magic number: var files = _rawSourceDirectory.GetFiles("*.csv"' SearchOption.TopDirectoryOnly)                  .Where(                      x =>                      {                          DateTime fileDate;                          return DateTime.TryParseExact(x.Name.Substring(0' 11)' "yyyyMMdd_HH"' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal' out fileDate);                      }                  )                  .OrderBy(x => Parse.DateTimeExact(x.Name.Substring(0' 11)' "yyyyMMdd_HH"' DateTimeStyles.AdjustToUniversal))                  .ToList();
Magic Number,QuantConnect.ToolBox.PsychSignalDataConverter,PsychSignalDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\PsychSignalDataConverter\PsychSignalDataConverter.cs,Dispose,The following statement contains a magic number: var percentage = 0.05m;
Magic Number,QuantConnect.ToolBox.PsychSignalDataConverter,PsychSignalDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\PsychSignalDataConverter\PsychSignalDataConverter.cs,Dispose,The following statement contains a magic number: Log.Trace($"PsychSignalDataConverter.Dispose(): Flushing {percentage * step * 100}% complete");
Magic Number,QuantConnect.ToolBox.PsychSignalDataConverter,TickerData,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\PsychSignalDataConverter\PsychSignalDataConverter.cs,Append,The following statement contains a magic number: _writer.WriteLine(ToCsv(timestamp' csv.Skip(3)));
Magic Number,QuantConnect.ToolBox.PsychSignalDataConverter,PsychSignalDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\PsychSignalDataConverter\PsychSignalDataDownloader.cs,Download,The following statement contains a magic number: startDateUtc < now.AddDays(-15)
Magic Number,QuantConnect.ToolBox.PsychSignalDataConverter,PsychSignalDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\PsychSignalDataConverter\PsychSignalDataDownloader.cs,Download,The following statement contains a magic number: _apiRateGate.WaitToProceed(10000);
Magic Number,QuantConnect.ToolBox.PsychSignalDataConverter,PsychSignalDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\PsychSignalDataConverter\PsychSignalDataDownloader.cs,Download,The following statement contains a magic number: var eta = TimeSpan.FromSeconds((totalHours - i) * 10);
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,DividendSplitMapGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\DividendSplitMapGenerator.cs,GenerateSplitsDividends,The following statement contains a magic number: previousX += _random.NextDouble() / 10;
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,DividendSplitMapGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\DividendSplitMapGenerator.cs,GenerateSplitsDividends,The following statement contains a magic number: dividendDates.Add(_randomValueGenerator.NextDate(tick.Time' tick.Time.AddMonths(1)' (DayOfWeek)_random.Next(1' 5)));
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,DividendSplitMapGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\DividendSplitMapGenerator.cs,GenerateSplitsDividends,The following statement contains a magic number: dividendEveryQuarter || _randomValueGenerator.NextBool(10.0)
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,DividendSplitMapGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\DividendSplitMapGenerator.cs,GenerateSplitsDividends,The following statement contains a magic number: hasDividends && (tick.Time.Month - 1) % 3 == 0
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,DividendSplitMapGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\DividendSplitMapGenerator.cs,GenerateSplitsDividends,The following statement contains a magic number: splitDates.Add(_randomValueGenerator.NextDate(tick.Time' tick.Time.AddMonths(1)' (DayOfWeek)_random.Next(1' 5)));
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,DividendSplitMapGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\DividendSplitMapGenerator.cs,GenerateSplitsDividends,The following statement contains a magic number: hasSplits && _randomValueGenerator.NextBool(5.0)
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,DividendSplitMapGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\DividendSplitMapGenerator.cs,GenerateSplitsDividends,The following statement contains a magic number: var randomDate = _randomValueGenerator.NextDate(tick.Time' tick.Time.AddMonths(1)' (DayOfWeek)_random.Next(1' 5));
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,DividendSplitMapGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\DividendSplitMapGenerator.cs,GenerateSplitsDividends,The following statement contains a magic number: hasRename && _randomValueGenerator.NextBool(10.0)
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,DividendSplitMapGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\DividendSplitMapGenerator.cs,GenerateSplitsDividends,The following statement contains a magic number: monthsTrading >= 6 && _willBeDelisted && tick.Time > _delistDate
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorSettings.cs,FromCommandLineArguments,The following statement contains a magic number: hasIpoPercentage = 5.0;
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorSettings.cs,FromCommandLineArguments,The following statement contains a magic number: hasRenamePercentage = 30.0;
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorSettings.cs,FromCommandLineArguments,The following statement contains a magic number: hasSplitsPercentage = 15.0;
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorSettings.cs,FromCommandLineArguments,The following statement contains a magic number: hasDividendsPercentage = 60.0;
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorSettings.cs,FromCommandLineArguments,The following statement contains a magic number: dividendEveryQuarterPercentage = 30.0;
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorProgram.cs,GenerateRandomData,The following statement contains a magic number: var delistDate = randomValueGenerator.NextDate(settings.Start.AddMonths(6)' settings.End' null);
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorProgram.cs,GenerateRandomData,The following statement contains a magic number: dividendsSplitsMaps.DividendsSplits.Add(new FactorFileRow(new DateTime(2050' 12' 31)' 1m' 1m));
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorProgram.cs,GenerateRandomData,The following statement contains a magic number: dividendsSplitsMaps.DividendsSplits.Add(new FactorFileRow(new DateTime(2050' 12' 31)' 1m' 1m));
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorProgram.cs,GenerateRandomData,The following statement contains a magic number: dividendsSplitsMaps.DividendsSplits.Add(new FactorFileRow(new DateTime(2050' 12' 31)' 1m' 1m));
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorProgram.cs,GenerateRandomData,The following statement contains a magic number: dividendsSplitsMaps.MapRows.Add(new MapFileRow(new DateTime(2050' 12' 31)' dividendsSplitsMaps.CurrentSymbol.Value));
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorProgram.cs,GenerateRandomData,The following statement contains a magic number: dividendsSplitsMaps.MapRows.Add(new MapFileRow(new DateTime(2050' 12' 31)' dividendsSplitsMaps.CurrentSymbol.Value));
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorProgram.cs,GenerateRandomData,The following statement contains a magic number: dividendsSplitsMaps.MapRows.Add(new MapFileRow(new DateTime(2050' 12' 31)' dividendsSplitsMaps.CurrentSymbol.Value));
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorProgram.cs,GenerateRandomData,The following statement contains a magic number: monthsTrading >= 6 && willBeDelisted && tick.Time > delistDate
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorProgram.cs,GenerateRandomData,The following statement contains a magic number: progress = 100 * (2 * count - 1) / (2.0 * settings.SymbolCount);
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorProgram.cs,GenerateRandomData,The following statement contains a magic number: progress = 100 * (2 * count - 1) / (2.0 * settings.SymbolCount);
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorProgram.cs,GenerateRandomData,The following statement contains a magic number: progress = 100 * (2 * count - 1) / (2.0 * settings.SymbolCount);
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorProgram.cs,GenerateRandomData,The following statement contains a magic number: progress = 100 * (2 * count) / (2.0 * settings.SymbolCount);
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorProgram.cs,GenerateRandomData,The following statement contains a magic number: progress = 100 * (2 * count) / (2.0 * settings.SymbolCount);
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomDataGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomDataGeneratorProgram.cs,GenerateRandomData,The following statement contains a magic number: progress = 100 * (2 * count) / (2.0 * settings.SymbolCount);
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomValueGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomValueGenerator.cs,RandomValueGenerator,The following statement contains a magic number: _symbols = new FixedSizeHashQueue<Symbol>(1000);
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomValueGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomValueGenerator.cs,RandomValueGenerator,The following statement contains a magic number: _symbols = new FixedSizeHashQueue<Symbol>(1000);
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomValueGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomValueGenerator.cs,RandomValueGenerator,The following statement contains a magic number: _symbols = new FixedSizeHashQueue<Symbol>(1000);
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomValueGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomValueGenerator.cs,NextBool,The following statement contains a magic number: return _random.NextDouble() <= percentOddsForTrue/100;
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomValueGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomValueGenerator.cs,NextUpperCaseString,The following statement contains a magic number: var c = (char)_random.Next(65' 90);
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomValueGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomValueGenerator.cs,NextUpperCaseString,The following statement contains a magic number: var c = (char)_random.Next(65' 90);
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomValueGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomValueGenerator.cs,NextPrice,The following statement contains a magic number: maximumPercentDeviation /= 100m;
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomValueGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomValueGenerator.cs,NextPrice,The following statement contains a magic number: var deviation = referencePrice * maximumPercentDeviation * (decimal) (_random.NextDouble() - 0.5);
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomValueGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomValueGenerator.cs,NextDate,The following statement contains a magic number: var nextDayOfWeek = Enumerable.Range(0' 7)                  .Select(i => dateTime.AddDays(i))                  .First(dt => dt.DayOfWeek == dayOfWeek.Value);
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomValueGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomValueGenerator.cs,NextDate,The following statement contains a magic number: var previousDayOfWeek = Enumerable.Range(0' 7)                  .Select(i => dateTime.AddDays(-i))                  .First(dt => dt.DayOfWeek == dayOfWeek.Value);
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomValueGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomValueGenerator.cs,NextTickTime,The following statement contains a magic number: increment = TimeSpan.FromMilliseconds(500);
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomValueGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomValueGenerator.cs,NextTickTime,The following statement contains a magic number: switch (density)              {                  case DataDensity.Dense:                      steps = 0.5 * _random.NextDouble();                      break;                    case DataDensity.Sparse:                      steps = 5 * _random.NextDouble();                      break;                    case DataDensity.VerySparse:                      steps = 50 * _random.NextDouble();                      break;                    default:                      throw new ArgumentOutOfRangeException(nameof(density)' density' null);              }
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomValueGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomValueGenerator.cs,NextTickTime,The following statement contains a magic number: switch (density)              {                  case DataDensity.Dense:                      steps = 0.5 * _random.NextDouble();                      break;                    case DataDensity.Sparse:                      steps = 5 * _random.NextDouble();                      break;                    case DataDensity.VerySparse:                      steps = 50 * _random.NextDouble();                      break;                    default:                      throw new ArgumentOutOfRangeException(nameof(density)' density' null);              }
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomValueGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomValueGenerator.cs,NextTickTime,The following statement contains a magic number: switch (density)              {                  case DataDensity.Dense:                      steps = 0.5 * _random.NextDouble();                      break;                    case DataDensity.Sparse:                      steps = 5 * _random.NextDouble();                      break;                    case DataDensity.VerySparse:                      steps = 50 * _random.NextDouble();                      break;                    default:                      throw new ArgumentOutOfRangeException(nameof(density)' density' null);              }
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomValueGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomValueGenerator.cs,NextTick,The following statement contains a magic number: switch (tickType)              {                  case TickType.Trade:                      tick.Quantity = _random.Next(1' 1500);                      return tick;                    case TickType.Quote:                      var bid = NextPrice(symbol.SecurityType' symbol.ID.Market' tick.Value' maximumPercentDeviation);                      if (bid > tick.Value)                      {                          bid = tick.Value - (bid - tick.Value);                      }                      var ask = NextPrice(symbol.SecurityType' symbol.ID.Market' tick.Value' maximumPercentDeviation);                      if (ask < tick.Value)                      {                          ask = tick.Value + (tick.Value - ask);                      }                        tick.BidPrice = bid;                      tick.BidSize = _random.Next(1' 1500);                      tick.AskPrice = ask;                      tick.AskSize = _random.Next(1' 1500);                      return tick;                    case TickType.OpenInterest:                      tick.Value = (long) tick.Value;                      tick.Quantity = tick.Value;                      return tick;                    default:                      throw new ArgumentOutOfRangeException(nameof(tickType)' tickType' null);              }
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomValueGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomValueGenerator.cs,NextTick,The following statement contains a magic number: switch (tickType)              {                  case TickType.Trade:                      tick.Quantity = _random.Next(1' 1500);                      return tick;                    case TickType.Quote:                      var bid = NextPrice(symbol.SecurityType' symbol.ID.Market' tick.Value' maximumPercentDeviation);                      if (bid > tick.Value)                      {                          bid = tick.Value - (bid - tick.Value);                      }                      var ask = NextPrice(symbol.SecurityType' symbol.ID.Market' tick.Value' maximumPercentDeviation);                      if (ask < tick.Value)                      {                          ask = tick.Value + (tick.Value - ask);                      }                        tick.BidPrice = bid;                      tick.BidSize = _random.Next(1' 1500);                      tick.AskPrice = ask;                      tick.AskSize = _random.Next(1' 1500);                      return tick;                    case TickType.OpenInterest:                      tick.Value = (long) tick.Value;                      tick.Quantity = tick.Value;                      return tick;                    default:                      throw new ArgumentOutOfRangeException(nameof(tickType)' tickType' null);              }
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomValueGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomValueGenerator.cs,NextTick,The following statement contains a magic number: switch (tickType)              {                  case TickType.Trade:                      tick.Quantity = _random.Next(1' 1500);                      return tick;                    case TickType.Quote:                      var bid = NextPrice(symbol.SecurityType' symbol.ID.Market' tick.Value' maximumPercentDeviation);                      if (bid > tick.Value)                      {                          bid = tick.Value - (bid - tick.Value);                      }                      var ask = NextPrice(symbol.SecurityType' symbol.ID.Market' tick.Value' maximumPercentDeviation);                      if (ask < tick.Value)                      {                          ask = tick.Value + (tick.Value - ask);                      }                        tick.BidPrice = bid;                      tick.BidSize = _random.Next(1' 1500);                      tick.AskPrice = ask;                      tick.AskSize = _random.Next(1' 1500);                      return tick;                    case TickType.OpenInterest:                      tick.Value = (long) tick.Value;                      tick.Quantity = tick.Value;                      return tick;                    default:                      throw new ArgumentOutOfRangeException(nameof(tickType)' tickType' null);              }
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomValueGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomValueGenerator.cs,NextSymbol,The following statement contains a magic number: var ticker = NextUpperCaseString(3' 3);
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomValueGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomValueGenerator.cs,NextSymbol,The following statement contains a magic number: var ticker = NextUpperCaseString(3' 3);
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomValueGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomValueGenerator.cs,NextFuture,The following statement contains a magic number: var ticker = NextUpperCaseString(2' 2);
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,RandomValueGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\RandomValueGenerator.cs,NextFuture,The following statement contains a magic number: var ticker = NextUpperCaseString(2' 2);
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,SymbolGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\SymbolGenerator.cs,GenerateRandomSymbols,The following statement contains a magic number: switch (_settings.SecurityType)                  {                      case SecurityType.Option:                          yield return _random.NextOption(_settings.Market' _settings.Start' _settings.End' 100m' 75m);                          break;                        case SecurityType.Future:                          yield return _random.NextFuture(_settings.Market' _settings.Start' _settings.End);                          break;                        default:                          yield return _random.NextSymbol(_settings.SecurityType' _settings.Market);                          break;                  }
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,SymbolGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\SymbolGenerator.cs,GenerateRandomSymbols,The following statement contains a magic number: switch (_settings.SecurityType)                  {                      case SecurityType.Option:                          yield return _random.NextOption(_settings.Market' _settings.Start' _settings.End' 100m' 75m);                          break;                        case SecurityType.Future:                          yield return _random.NextFuture(_settings.Market' _settings.Start' _settings.End);                          break;                        default:                          yield return _random.NextSymbol(_settings.SecurityType' _settings.Market);                          break;                  }
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,TickGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\TickGenerator.cs,GenerateTicks,The following statement contains a magic number: var previousValues = new Dictionary<TickType' decimal>              {                  {TickType.Trade' 100m}'                  {TickType.Quote' 100m}'                  {TickType.OpenInterest' 10000m}              };
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,TickGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\TickGenerator.cs,GenerateTicks,The following statement contains a magic number: var previousValues = new Dictionary<TickType' decimal>              {                  {TickType.Trade' 100m}'                  {TickType.Quote' 100m}'                  {TickType.OpenInterest' 10000m}              };
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,TickGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\TickGenerator.cs,GenerateTicks,The following statement contains a magic number: var previousValues = new Dictionary<TickType' decimal>              {                  {TickType.Trade' 100m}'                  {TickType.Quote' 100m}'                  {TickType.OpenInterest' 10000m}              };
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,TickGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\TickGenerator.cs,GenerateTicks,The following statement contains a magic number: var openInterest = _random.NextTick(symbol' next.Date' TickType.OpenInterest' previous' 5m);
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,TickGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\TickGenerator.cs,GenerateTicks,The following statement contains a magic number: var tradeChancePercent = 100 / (1 + _settings.QuoteTradeRatio);
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,TickGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\TickGenerator.cs,GetMaximumDeviation,The following statement contains a magic number: var incr = ((int) resolution) + 0.15m;
Magic Number,QuantConnect.ToolBox.RandomDataGenerator,TickGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\RandomDataGenerator\TickGenerator.cs,GetMaximumDeviation,The following statement contains a magic number: var deviation = incr * incr * 0.1m;
Magic Number,QuantConnect.ToolBox.SECDataDownloader,SECDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataDownloader.cs,Download,The following statement contains a magic number: var quarter = currentDate < new DateTime(currentDate.Year' 4' 1) ? "QTR1" :                      currentDate < new DateTime(currentDate.Year' 7' 1) ? "QTR2" :                      currentDate < new DateTime(currentDate.Year' 10' 1) ? "QTR3" :                      "QTR4";
Magic Number,QuantConnect.ToolBox.SECDataDownloader,SECDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataDownloader.cs,Download,The following statement contains a magic number: var quarter = currentDate < new DateTime(currentDate.Year' 4' 1) ? "QTR1" :                      currentDate < new DateTime(currentDate.Year' 7' 1) ? "QTR2" :                      currentDate < new DateTime(currentDate.Year' 10' 1) ? "QTR3" :                      "QTR4";
Magic Number,QuantConnect.ToolBox.SECDataDownloader,SECDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataDownloader.cs,Download,The following statement contains a magic number: var quarter = currentDate < new DateTime(currentDate.Year' 4' 1) ? "QTR1" :                      currentDate < new DateTime(currentDate.Year' 7' 1) ? "QTR2" :                      currentDate < new DateTime(currentDate.Year' 10' 1) ? "QTR3" :                      "QTR4";
Magic Number,QuantConnect.ToolBox.SECDataDownloader,SECDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataDownloader.cs,Download,The following statement contains a magic number: var tmpFileSizeInKB = tmpFileStat.Length / 1024;
Magic Number,QuantConnect.ToolBox.SECDataDownloader,SECDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataDownloader.cs,Download,The following statement contains a magic number: tmpFileSizeInKB > fileSizeInKB + (fileSizeInKB * 0.01m) || tmpFileSizeInKB < fileSizeInKB - (fileSizeInKB * 0.01m)
Magic Number,QuantConnect.ToolBox.SECDataDownloader,SECDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataDownloader.cs,Download,The following statement contains a magic number: tmpFileSizeInKB > fileSizeInKB + (fileSizeInKB * 0.01m) || tmpFileSizeInKB < fileSizeInKB - (fileSizeInKB * 0.01m)
Magic Number,QuantConnect.ToolBox.SECDataDownloader,SECDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataDownloader.cs,Download,The following statement contains a magic number: var dailyIndexes = File.ReadAllLines(dailyIndexRaw.FullName).Skip(7);
Magic Number,QuantConnect.ToolBox.SECDataDownloader,SECDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataDownloader.cs,Download,The following statement contains a magic number: ServicePointManager.DefaultConnectionLimit = 1000;
Magic Number,QuantConnect.ToolBox.SECDataDownloader,SECDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataDownloader.cs,Download,The following statement contains a magic number: csv.Length < 5
Magic Number,QuantConnect.ToolBox.SECDataDownloader,SECDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataDownloader.cs,Download,The following statement contains a magic number: var cik = csv[0].PadLeft(10' '0');
Magic Number,QuantConnect.ToolBox.SECDataDownloader,SECDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataDownloader.cs,Download,The following statement contains a magic number: var formType = csv[2];
Magic Number,QuantConnect.ToolBox.SECDataDownloader,SECDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataConverter.cs,Process,The following statement contains a magic number: var cikFormatted = tickerCik[1].PadLeft(10' '0');
Magic Number,QuantConnect.ToolBox.SECDataDownloader,SECDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataConverter.cs,Process,The following statement contains a magic number: var companyCik = tickerInfo[0].PadLeft(10' '0');
Magic Number,QuantConnect.ToolBox.SECDataDownloader,SECDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataConverter.cs,Process,The following statement contains a magic number: Parallel.ForEach(                  Compression.UnTar(localRawData.OpenRead()' isTarGz: true).Where(kvp => kvp.Key.EndsWith(".nc"))'                  new ParallelOptions { MaxDegreeOfParallelism = Environment.ProcessorCount / 2}'                  rawReportFilePath =>                  {                      var factory = new SECReportFactory();                      var xmlText = new StringBuilder();                        // We need to escape any nested XML to ensure our deserialization happens smoothly                      var parsingText = false;                        // SEC data is line separated by UNIX style line endings. No need to worry about a carriage line here.                      foreach (var line in Encoding.UTF8.GetString(rawReportFilePath.Value).Split('\n'))                      {                          var newTextLine = line;                          var currentTagName = GetTagNameFromLine(newTextLine);                            // This tag is present rarely in SEC reports' but is unclosed without value when encountered.                          // Verified by searching with ripgrep for "CONFIRMING-COPY"                          //                          // Sometimes' ASSIGNED-SIC contains no value and causes errors. Check to make sure that when                          // we encounter that tag we check if it has a value.                          //                          // "Appearance of the <FLAWED> tag  in                          //  an EX-27  document header signals unreliable tagging within  the                          //  following  document text stream; however' in  the absence  of a                          //  <FLAWED>  tag' tagging is still not guaranteed to  be complete                          //  because of  allowance in the financial data specifications  for                          //  omitted tags when the submission also includes a financial  data                          //  schedule  of article type CT."                          if (currentTagName == "CONFIRMING-COPY" || (currentTagName == "ASSIGNED-SIC" && !HasValue(line)) || currentTagName == "FLAWED")                          {                              continue;                          }                            // Indicates that the form is a paper submission and that the current file has no contents                          if (currentTagName == "PAPER")                          {                              continue;                          }                            // Don't encode the closing tag                          if (currentTagName == "/TEXT")                          {                              parsingText = false;                          }                            // To ensure that we can serialize/deserialize data with hours' minutes' seconds                          if (currentTagName == "FILING-DATE" || currentTagName == "PERIOD" ||                              currentTagName == "DATE-OF-FILING-CHANGE" || currentTagName == "DATE-CHANGED")                          {                              newTextLine = $"{newTextLine.TrimEnd()} 00:00:00";                          }                            // Encode all contents inside tags to prevent errors in XML parsing.                          // The json deserializer will convert these values back to their original form                          if (!parsingText && HasValue(newTextLine))                          {                              newTextLine =                                  $"<{currentTagName}>{SecurityElement.Escape(GetTagValueFromLine(newTextLine))}</{currentTagName}>";                          }                          // Escape all contents inside TEXT tags                          else if (parsingText)                          {                              newTextLine = SecurityElement.Escape(newTextLine);                          }                            // Don't encode the opening tag                          if (currentTagName == "TEXT")                          {                              parsingText = true;                          }                            xmlText.AppendLine(newTextLine);                      }                        var counter = Interlocked.Increment(ref ncFilesRead);                      if (counter % 100 == 0)                      {                          var interval = DateTime.Now - loopStartingTime;                          Log.Trace($"SECDataConverter.Process(): {counter.ToStringInvariant()} nc files read at {(100 / interval.TotalMinutes).ToStringInvariant("N2")} files/min.");                          loopStartingTime = DateTime.Now;                      }                        ISECReport report;                      try                      {                          report = factory.CreateSECReport(xmlText.ToString());                      }                      // Ignore unsupported form types for now                      catch (DataException)                      {                          return;                      }                      catch (XmlException e)                      {                          Log.Error(e' $"SECDataConverter.Process(): Failed to parse XML from file: {rawReportFilePath.Key}");                          return;                      }                      catch (Exception e)                      {                          Log.Error(e' "SECDataConverter.Process(): Unknown error encountered");                          return;                      }                        // First filer listed in SEC report is usually the company listed on stock exchanges                      var companyCik = report.Report.Filers.First().CompanyData.Cik;                        // Some companies can operate under two tickers' but have the same CIK.                      // Don't bother continuing if we don't find any tickers for the given CIK                      List<string> tickers;                      if (!CikTicker.TryGetValue(companyCik' out tickers))                      {                          return;                      }                        if (!File.Exists(Path.Combine(RawSource' "indexes"' $"{companyCik}.json")))                      {                          Log.Error($"SECDataConverter.Process(): {report.Report.FilingDate.ToStringInvariant("yyyy-MM-dd")}:{rawReportFilePath.Key} - Failed to find index file for ticker {tickers.FirstOrDefault()} with CIK: {companyCik}");                          return;                      }                        try                      {                          // The index file can potentially be corrupted                          GetPublicationDate(report' companyCik);                      }                      catch (Exception e)                      {                          Log.Error(e' $"SECDataConverter.Process(): {report.Report.FilingDate.ToStringInvariant("yyyy-MM-dd")}:{rawReportFilePath.Key} - Index file loading failed for ticker: {tickers.FirstOrDefault()} with CIK: {companyCik} even though it exists");                      }                        // Default to company CIK if no known ticker is found.                      // If the equity is not does not resolve to a map file or                      // it is not found in the map files' we skip writing it.                      foreach (var ticker in tickers)                      {                          var tickerMapFile = _mapFileResolver.ResolveMapFile(ticker' processingDate);                          if (!tickerMapFile.Any())                          {                              Log.Trace($"SECDataConverter.Process(): {processingDate.ToStringInvariant()} - Failed to find map file for ticker: {ticker}");                              continue;                          }                            // Map the current ticker to the ticker it was in the past using the map file system                          var mappedTicker = tickerMapFile.GetMappedSymbol(processingDate);                            // If no suitable date is found for the symbol in the map file' we skip writing the data                          if (string.IsNullOrEmpty(mappedTicker))                          {                              Log.Trace($"SECDataConverter.Process(): {processingDate.ToStringInvariant()} - Failed to find mapped symbol for ticker: {ticker}");                              continue;                          }                            var tickerReports = Reports.GetOrAdd(                              mappedTicker'                              _ => new ConcurrentDictionary<DateTime' List<ISECReport>>()                          );                          var reports = tickerReports.GetOrAdd(                              report.Report.FilingDate.Date'                              _ => new List<ISECReport>()                          );                            reports.Add(report);                      }                  }              );
Magic Number,QuantConnect.ToolBox.SECDataDownloader,SECDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataConverter.cs,Process,The following statement contains a magic number: Parallel.ForEach(                  Compression.UnTar(localRawData.OpenRead()' isTarGz: true).Where(kvp => kvp.Key.EndsWith(".nc"))'                  new ParallelOptions { MaxDegreeOfParallelism = Environment.ProcessorCount / 2}'                  rawReportFilePath =>                  {                      var factory = new SECReportFactory();                      var xmlText = new StringBuilder();                        // We need to escape any nested XML to ensure our deserialization happens smoothly                      var parsingText = false;                        // SEC data is line separated by UNIX style line endings. No need to worry about a carriage line here.                      foreach (var line in Encoding.UTF8.GetString(rawReportFilePath.Value).Split('\n'))                      {                          var newTextLine = line;                          var currentTagName = GetTagNameFromLine(newTextLine);                            // This tag is present rarely in SEC reports' but is unclosed without value when encountered.                          // Verified by searching with ripgrep for "CONFIRMING-COPY"                          //                          // Sometimes' ASSIGNED-SIC contains no value and causes errors. Check to make sure that when                          // we encounter that tag we check if it has a value.                          //                          // "Appearance of the <FLAWED> tag  in                          //  an EX-27  document header signals unreliable tagging within  the                          //  following  document text stream; however' in  the absence  of a                          //  <FLAWED>  tag' tagging is still not guaranteed to  be complete                          //  because of  allowance in the financial data specifications  for                          //  omitted tags when the submission also includes a financial  data                          //  schedule  of article type CT."                          if (currentTagName == "CONFIRMING-COPY" || (currentTagName == "ASSIGNED-SIC" && !HasValue(line)) || currentTagName == "FLAWED")                          {                              continue;                          }                            // Indicates that the form is a paper submission and that the current file has no contents                          if (currentTagName == "PAPER")                          {                              continue;                          }                            // Don't encode the closing tag                          if (currentTagName == "/TEXT")                          {                              parsingText = false;                          }                            // To ensure that we can serialize/deserialize data with hours' minutes' seconds                          if (currentTagName == "FILING-DATE" || currentTagName == "PERIOD" ||                              currentTagName == "DATE-OF-FILING-CHANGE" || currentTagName == "DATE-CHANGED")                          {                              newTextLine = $"{newTextLine.TrimEnd()} 00:00:00";                          }                            // Encode all contents inside tags to prevent errors in XML parsing.                          // The json deserializer will convert these values back to their original form                          if (!parsingText && HasValue(newTextLine))                          {                              newTextLine =                                  $"<{currentTagName}>{SecurityElement.Escape(GetTagValueFromLine(newTextLine))}</{currentTagName}>";                          }                          // Escape all contents inside TEXT tags                          else if (parsingText)                          {                              newTextLine = SecurityElement.Escape(newTextLine);                          }                            // Don't encode the opening tag                          if (currentTagName == "TEXT")                          {                              parsingText = true;                          }                            xmlText.AppendLine(newTextLine);                      }                        var counter = Interlocked.Increment(ref ncFilesRead);                      if (counter % 100 == 0)                      {                          var interval = DateTime.Now - loopStartingTime;                          Log.Trace($"SECDataConverter.Process(): {counter.ToStringInvariant()} nc files read at {(100 / interval.TotalMinutes).ToStringInvariant("N2")} files/min.");                          loopStartingTime = DateTime.Now;                      }                        ISECReport report;                      try                      {                          report = factory.CreateSECReport(xmlText.ToString());                      }                      // Ignore unsupported form types for now                      catch (DataException)                      {                          return;                      }                      catch (XmlException e)                      {                          Log.Error(e' $"SECDataConverter.Process(): Failed to parse XML from file: {rawReportFilePath.Key}");                          return;                      }                      catch (Exception e)                      {                          Log.Error(e' "SECDataConverter.Process(): Unknown error encountered");                          return;                      }                        // First filer listed in SEC report is usually the company listed on stock exchanges                      var companyCik = report.Report.Filers.First().CompanyData.Cik;                        // Some companies can operate under two tickers' but have the same CIK.                      // Don't bother continuing if we don't find any tickers for the given CIK                      List<string> tickers;                      if (!CikTicker.TryGetValue(companyCik' out tickers))                      {                          return;                      }                        if (!File.Exists(Path.Combine(RawSource' "indexes"' $"{companyCik}.json")))                      {                          Log.Error($"SECDataConverter.Process(): {report.Report.FilingDate.ToStringInvariant("yyyy-MM-dd")}:{rawReportFilePath.Key} - Failed to find index file for ticker {tickers.FirstOrDefault()} with CIK: {companyCik}");                          return;                      }                        try                      {                          // The index file can potentially be corrupted                          GetPublicationDate(report' companyCik);                      }                      catch (Exception e)                      {                          Log.Error(e' $"SECDataConverter.Process(): {report.Report.FilingDate.ToStringInvariant("yyyy-MM-dd")}:{rawReportFilePath.Key} - Index file loading failed for ticker: {tickers.FirstOrDefault()} with CIK: {companyCik} even though it exists");                      }                        // Default to company CIK if no known ticker is found.                      // If the equity is not does not resolve to a map file or                      // it is not found in the map files' we skip writing it.                      foreach (var ticker in tickers)                      {                          var tickerMapFile = _mapFileResolver.ResolveMapFile(ticker' processingDate);                          if (!tickerMapFile.Any())                          {                              Log.Trace($"SECDataConverter.Process(): {processingDate.ToStringInvariant()} - Failed to find map file for ticker: {ticker}");                              continue;                          }                            // Map the current ticker to the ticker it was in the past using the map file system                          var mappedTicker = tickerMapFile.GetMappedSymbol(processingDate);                            // If no suitable date is found for the symbol in the map file' we skip writing the data                          if (string.IsNullOrEmpty(mappedTicker))                          {                              Log.Trace($"SECDataConverter.Process(): {processingDate.ToStringInvariant()} - Failed to find mapped symbol for ticker: {ticker}");                              continue;                          }                            var tickerReports = Reports.GetOrAdd(                              mappedTicker'                              _ => new ConcurrentDictionary<DateTime' List<ISECReport>>()                          );                          var reports = tickerReports.GetOrAdd(                              report.Report.FilingDate.Date'                              _ => new List<ISECReport>()                          );                            reports.Add(report);                      }                  }              );
Magic Number,QuantConnect.ToolBox.SECDataDownloader,SECDataConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SECDataDownloader\SECDataConverter.cs,Process,The following statement contains a magic number: Parallel.ForEach(                  Compression.UnTar(localRawData.OpenRead()' isTarGz: true).Where(kvp => kvp.Key.EndsWith(".nc"))'                  new ParallelOptions { MaxDegreeOfParallelism = Environment.ProcessorCount / 2}'                  rawReportFilePath =>                  {                      var factory = new SECReportFactory();                      var xmlText = new StringBuilder();                        // We need to escape any nested XML to ensure our deserialization happens smoothly                      var parsingText = false;                        // SEC data is line separated by UNIX style line endings. No need to worry about a carriage line here.                      foreach (var line in Encoding.UTF8.GetString(rawReportFilePath.Value).Split('\n'))                      {                          var newTextLine = line;                          var currentTagName = GetTagNameFromLine(newTextLine);                            // This tag is present rarely in SEC reports' but is unclosed without value when encountered.                          // Verified by searching with ripgrep for "CONFIRMING-COPY"                          //                          // Sometimes' ASSIGNED-SIC contains no value and causes errors. Check to make sure that when                          // we encounter that tag we check if it has a value.                          //                          // "Appearance of the <FLAWED> tag  in                          //  an EX-27  document header signals unreliable tagging within  the                          //  following  document text stream; however' in  the absence  of a                          //  <FLAWED>  tag' tagging is still not guaranteed to  be complete                          //  because of  allowance in the financial data specifications  for                          //  omitted tags when the submission also includes a financial  data                          //  schedule  of article type CT."                          if (currentTagName == "CONFIRMING-COPY" || (currentTagName == "ASSIGNED-SIC" && !HasValue(line)) || currentTagName == "FLAWED")                          {                              continue;                          }                            // Indicates that the form is a paper submission and that the current file has no contents                          if (currentTagName == "PAPER")                          {                              continue;                          }                            // Don't encode the closing tag                          if (currentTagName == "/TEXT")                          {                              parsingText = false;                          }                            // To ensure that we can serialize/deserialize data with hours' minutes' seconds                          if (currentTagName == "FILING-DATE" || currentTagName == "PERIOD" ||                              currentTagName == "DATE-OF-FILING-CHANGE" || currentTagName == "DATE-CHANGED")                          {                              newTextLine = $"{newTextLine.TrimEnd()} 00:00:00";                          }                            // Encode all contents inside tags to prevent errors in XML parsing.                          // The json deserializer will convert these values back to their original form                          if (!parsingText && HasValue(newTextLine))                          {                              newTextLine =                                  $"<{currentTagName}>{SecurityElement.Escape(GetTagValueFromLine(newTextLine))}</{currentTagName}>";                          }                          // Escape all contents inside TEXT tags                          else if (parsingText)                          {                              newTextLine = SecurityElement.Escape(newTextLine);                          }                            // Don't encode the opening tag                          if (currentTagName == "TEXT")                          {                              parsingText = true;                          }                            xmlText.AppendLine(newTextLine);                      }                        var counter = Interlocked.Increment(ref ncFilesRead);                      if (counter % 100 == 0)                      {                          var interval = DateTime.Now - loopStartingTime;                          Log.Trace($"SECDataConverter.Process(): {counter.ToStringInvariant()} nc files read at {(100 / interval.TotalMinutes).ToStringInvariant("N2")} files/min.");                          loopStartingTime = DateTime.Now;                      }                        ISECReport report;                      try                      {                          report = factory.CreateSECReport(xmlText.ToString());                      }                      // Ignore unsupported form types for now                      catch (DataException)                      {                          return;                      }                      catch (XmlException e)                      {                          Log.Error(e' $"SECDataConverter.Process(): Failed to parse XML from file: {rawReportFilePath.Key}");                          return;                      }                      catch (Exception e)                      {                          Log.Error(e' "SECDataConverter.Process(): Unknown error encountered");                          return;                      }                        // First filer listed in SEC report is usually the company listed on stock exchanges                      var companyCik = report.Report.Filers.First().CompanyData.Cik;                        // Some companies can operate under two tickers' but have the same CIK.                      // Don't bother continuing if we don't find any tickers for the given CIK                      List<string> tickers;                      if (!CikTicker.TryGetValue(companyCik' out tickers))                      {                          return;                      }                        if (!File.Exists(Path.Combine(RawSource' "indexes"' $"{companyCik}.json")))                      {                          Log.Error($"SECDataConverter.Process(): {report.Report.FilingDate.ToStringInvariant("yyyy-MM-dd")}:{rawReportFilePath.Key} - Failed to find index file for ticker {tickers.FirstOrDefault()} with CIK: {companyCik}");                          return;                      }                        try                      {                          // The index file can potentially be corrupted                          GetPublicationDate(report' companyCik);                      }                      catch (Exception e)                      {                          Log.Error(e' $"SECDataConverter.Process(): {report.Report.FilingDate.ToStringInvariant("yyyy-MM-dd")}:{rawReportFilePath.Key} - Index file loading failed for ticker: {tickers.FirstOrDefault()} with CIK: {companyCik} even though it exists");                      }                        // Default to company CIK if no known ticker is found.                      // If the equity is not does not resolve to a map file or                      // it is not found in the map files' we skip writing it.                      foreach (var ticker in tickers)                      {                          var tickerMapFile = _mapFileResolver.ResolveMapFile(ticker' processingDate);                          if (!tickerMapFile.Any())                          {                              Log.Trace($"SECDataConverter.Process(): {processingDate.ToStringInvariant()} - Failed to find map file for ticker: {ticker}");                              continue;                          }                            // Map the current ticker to the ticker it was in the past using the map file system                          var mappedTicker = tickerMapFile.GetMappedSymbol(processingDate);                            // If no suitable date is found for the symbol in the map file' we skip writing the data                          if (string.IsNullOrEmpty(mappedTicker))                          {                              Log.Trace($"SECDataConverter.Process(): {processingDate.ToStringInvariant()} - Failed to find mapped symbol for ticker: {ticker}");                              continue;                          }                            var tickerReports = Reports.GetOrAdd(                              mappedTicker'                              _ => new ConcurrentDictionary<DateTime' List<ISECReport>>()                          );                          var reports = tickerReports.GetOrAdd(                              report.Report.FilingDate.Date'                              _ => new List<ISECReport>()                          );                            reports.Add(report);                      }                  }              );
Magic Number,QuantConnect.ToolBox.SmartInsider,SmartInsiderConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SmartInsider\SmartInsiderConverter.cs,Process,The following statement contains a magic number: var tsv = line.Split('\t')                          .Take(60)                          .Select(x => x.Replace("\""' ""))                          .ToList();
Magic Number,QuantConnect.ToolBox.SmartInsider,SmartInsiderConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SmartInsider\SmartInsiderConverter.cs,Process,The following statement contains a magic number: string.IsNullOrWhiteSpace(tsv[2])
Magic Number,QuantConnect.ToolBox.SmartInsider,SmartInsiderConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SmartInsider\SmartInsiderConverter.cs,Process,The following statement contains a magic number: tsv.RemoveAt(46);
Magic Number,QuantConnect.ToolBox.SmartInsider,SmartInsiderConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SmartInsider\SmartInsiderConverter.cs,Process,The following statement contains a magic number: tsv.RemoveAt(36);
Magic Number,QuantConnect.ToolBox.SmartInsider,SmartInsiderConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SmartInsider\SmartInsiderConverter.cs,Process,The following statement contains a magic number: tsv.RemoveAt(14);
Magic Number,QuantConnect.ToolBox.SmartInsider,SmartInsiderConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\SmartInsider\SmartInsiderConverter.cs,Process,The following statement contains a magic number: tsv.RemoveAt(7);
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(files' file =>              {                  try                  {                      Log.Trace("Remote File :" + file);                        var csvFile = Path.Combine(_source.FullName' Path.GetFileNameWithoutExtension(file.Name));                        Log.Trace("Source File :" + csvFile);                        if (!File.Exists(csvFile))                      {                          // create the directory first or else 7z will fail                          var csvFileInfo = new FileInfo(csvFile);                          Directory.CreateDirectory(csvFileInfo.DirectoryName);                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Extracting " + file);                          var psi = new ProcessStartInfo(zipper' " e " + file.FullName + " -o" + _source.FullName)                          {                              CreateNoWindow = true'                              WindowStyle = ProcessWindowStyle.Hidden'                              UseShellExecute = false'                              RedirectStandardOutput = true                          };                            var process = new Process();                          process.StartInfo = psi;                          process.Start();                            while (!process.StandardOutput.EndOfStream)                          {                              process.StandardOutput.ReadLine();                          }                            if (!process.WaitForExit(ExecTimeout * 1000))                          {                              Log.Error("7Zip timed out: " + file);                          }                          else                          {                              if (process.ExitCode > 0)                              {                                  Log.Error("7Zip Exited Unsuccessfully: " + file);                              }                          }                      }                        // setting up local processors                      var processors = new Processors();                        var reader = new AlgoSeekFuturesReader(csvFile' symbolMultipliers);                      if (start == DateTime.MinValue)                      {                          start = DateTime.Now;                      }                        if (reader.Current != null) // reader contains the data                      {                          do                          {                              var tick = reader.Current as Tick;                                //Add or create the consolidator-flush mechanism for symbol:                              List<List<AlgoSeekFuturesProcessor>> symbolProcessors;                              if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                              {                                  symbolProcessors = new List<List<AlgoSeekFuturesProcessor>>(3)                                          {                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Trade' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Quote' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' x' _destination)).ToList() }                                          };                                    processors[tick.Symbol] = symbolProcessors;                              }                                // Pass current tick into processor: enum 0 = trade; 1 = quote' 2 = oi                              foreach (var processor in symbolProcessors[(int)tick.TickType])                              {                                  processor.Process(tick);                              }                                if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                              {                                  var pro = (double)processors.Values.SelectMany(p => p.SelectMany(x => x)).Count();                                  var symbols = (double)processors.Keys.Count();                                  Log.Trace("AlgoSeekFuturesConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%' Processor per symbol {4}"' Math.Round(totalLinesProcessed / 1000000m' 2)' Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)' Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)' 100 * totalFilesProcessed / totalFiles' pro / symbols);                              }                            }                          while (reader.MoveNext());                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Performing final flush to disk... ");                          Flush(processors' DateTime.MaxValue' true);                      }                        processors = null;                      GC.Collect();                      GC.WaitForPendingFinalizers();                        Log.Trace("AlgoSeekFuturesConverter.Convert(): Finished processing file: " + file);                      Interlocked.Increment(ref totalFilesProcessed);                  }                  catch(Exception err)                  {                      Log.Error("Exception caught! File: {0} Err: {1} Source {2} Stack {3}"' file' err.Message' err.Source' err.StackTrace);                  }              });
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(files' file =>              {                  try                  {                      Log.Trace("Remote File :" + file);                        var csvFile = Path.Combine(_source.FullName' Path.GetFileNameWithoutExtension(file.Name));                        Log.Trace("Source File :" + csvFile);                        if (!File.Exists(csvFile))                      {                          // create the directory first or else 7z will fail                          var csvFileInfo = new FileInfo(csvFile);                          Directory.CreateDirectory(csvFileInfo.DirectoryName);                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Extracting " + file);                          var psi = new ProcessStartInfo(zipper' " e " + file.FullName + " -o" + _source.FullName)                          {                              CreateNoWindow = true'                              WindowStyle = ProcessWindowStyle.Hidden'                              UseShellExecute = false'                              RedirectStandardOutput = true                          };                            var process = new Process();                          process.StartInfo = psi;                          process.Start();                            while (!process.StandardOutput.EndOfStream)                          {                              process.StandardOutput.ReadLine();                          }                            if (!process.WaitForExit(ExecTimeout * 1000))                          {                              Log.Error("7Zip timed out: " + file);                          }                          else                          {                              if (process.ExitCode > 0)                              {                                  Log.Error("7Zip Exited Unsuccessfully: " + file);                              }                          }                      }                        // setting up local processors                      var processors = new Processors();                        var reader = new AlgoSeekFuturesReader(csvFile' symbolMultipliers);                      if (start == DateTime.MinValue)                      {                          start = DateTime.Now;                      }                        if (reader.Current != null) // reader contains the data                      {                          do                          {                              var tick = reader.Current as Tick;                                //Add or create the consolidator-flush mechanism for symbol:                              List<List<AlgoSeekFuturesProcessor>> symbolProcessors;                              if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                              {                                  symbolProcessors = new List<List<AlgoSeekFuturesProcessor>>(3)                                          {                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Trade' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Quote' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' x' _destination)).ToList() }                                          };                                    processors[tick.Symbol] = symbolProcessors;                              }                                // Pass current tick into processor: enum 0 = trade; 1 = quote' 2 = oi                              foreach (var processor in symbolProcessors[(int)tick.TickType])                              {                                  processor.Process(tick);                              }                                if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                              {                                  var pro = (double)processors.Values.SelectMany(p => p.SelectMany(x => x)).Count();                                  var symbols = (double)processors.Keys.Count();                                  Log.Trace("AlgoSeekFuturesConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%' Processor per symbol {4}"' Math.Round(totalLinesProcessed / 1000000m' 2)' Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)' Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)' 100 * totalFilesProcessed / totalFiles' pro / symbols);                              }                            }                          while (reader.MoveNext());                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Performing final flush to disk... ");                          Flush(processors' DateTime.MaxValue' true);                      }                        processors = null;                      GC.Collect();                      GC.WaitForPendingFinalizers();                        Log.Trace("AlgoSeekFuturesConverter.Convert(): Finished processing file: " + file);                      Interlocked.Increment(ref totalFilesProcessed);                  }                  catch(Exception err)                  {                      Log.Error("Exception caught! File: {0} Err: {1} Source {2} Stack {3}"' file' err.Message' err.Source' err.StackTrace);                  }              });
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(files' file =>              {                  try                  {                      Log.Trace("Remote File :" + file);                        var csvFile = Path.Combine(_source.FullName' Path.GetFileNameWithoutExtension(file.Name));                        Log.Trace("Source File :" + csvFile);                        if (!File.Exists(csvFile))                      {                          // create the directory first or else 7z will fail                          var csvFileInfo = new FileInfo(csvFile);                          Directory.CreateDirectory(csvFileInfo.DirectoryName);                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Extracting " + file);                          var psi = new ProcessStartInfo(zipper' " e " + file.FullName + " -o" + _source.FullName)                          {                              CreateNoWindow = true'                              WindowStyle = ProcessWindowStyle.Hidden'                              UseShellExecute = false'                              RedirectStandardOutput = true                          };                            var process = new Process();                          process.StartInfo = psi;                          process.Start();                            while (!process.StandardOutput.EndOfStream)                          {                              process.StandardOutput.ReadLine();                          }                            if (!process.WaitForExit(ExecTimeout * 1000))                          {                              Log.Error("7Zip timed out: " + file);                          }                          else                          {                              if (process.ExitCode > 0)                              {                                  Log.Error("7Zip Exited Unsuccessfully: " + file);                              }                          }                      }                        // setting up local processors                      var processors = new Processors();                        var reader = new AlgoSeekFuturesReader(csvFile' symbolMultipliers);                      if (start == DateTime.MinValue)                      {                          start = DateTime.Now;                      }                        if (reader.Current != null) // reader contains the data                      {                          do                          {                              var tick = reader.Current as Tick;                                //Add or create the consolidator-flush mechanism for symbol:                              List<List<AlgoSeekFuturesProcessor>> symbolProcessors;                              if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                              {                                  symbolProcessors = new List<List<AlgoSeekFuturesProcessor>>(3)                                          {                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Trade' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Quote' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' x' _destination)).ToList() }                                          };                                    processors[tick.Symbol] = symbolProcessors;                              }                                // Pass current tick into processor: enum 0 = trade; 1 = quote' 2 = oi                              foreach (var processor in symbolProcessors[(int)tick.TickType])                              {                                  processor.Process(tick);                              }                                if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                              {                                  var pro = (double)processors.Values.SelectMany(p => p.SelectMany(x => x)).Count();                                  var symbols = (double)processors.Keys.Count();                                  Log.Trace("AlgoSeekFuturesConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%' Processor per symbol {4}"' Math.Round(totalLinesProcessed / 1000000m' 2)' Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)' Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)' 100 * totalFilesProcessed / totalFiles' pro / symbols);                              }                            }                          while (reader.MoveNext());                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Performing final flush to disk... ");                          Flush(processors' DateTime.MaxValue' true);                      }                        processors = null;                      GC.Collect();                      GC.WaitForPendingFinalizers();                        Log.Trace("AlgoSeekFuturesConverter.Convert(): Finished processing file: " + file);                      Interlocked.Increment(ref totalFilesProcessed);                  }                  catch(Exception err)                  {                      Log.Error("Exception caught! File: {0} Err: {1} Source {2} Stack {3}"' file' err.Message' err.Source' err.StackTrace);                  }              });
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(files' file =>              {                  try                  {                      Log.Trace("Remote File :" + file);                        var csvFile = Path.Combine(_source.FullName' Path.GetFileNameWithoutExtension(file.Name));                        Log.Trace("Source File :" + csvFile);                        if (!File.Exists(csvFile))                      {                          // create the directory first or else 7z will fail                          var csvFileInfo = new FileInfo(csvFile);                          Directory.CreateDirectory(csvFileInfo.DirectoryName);                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Extracting " + file);                          var psi = new ProcessStartInfo(zipper' " e " + file.FullName + " -o" + _source.FullName)                          {                              CreateNoWindow = true'                              WindowStyle = ProcessWindowStyle.Hidden'                              UseShellExecute = false'                              RedirectStandardOutput = true                          };                            var process = new Process();                          process.StartInfo = psi;                          process.Start();                            while (!process.StandardOutput.EndOfStream)                          {                              process.StandardOutput.ReadLine();                          }                            if (!process.WaitForExit(ExecTimeout * 1000))                          {                              Log.Error("7Zip timed out: " + file);                          }                          else                          {                              if (process.ExitCode > 0)                              {                                  Log.Error("7Zip Exited Unsuccessfully: " + file);                              }                          }                      }                        // setting up local processors                      var processors = new Processors();                        var reader = new AlgoSeekFuturesReader(csvFile' symbolMultipliers);                      if (start == DateTime.MinValue)                      {                          start = DateTime.Now;                      }                        if (reader.Current != null) // reader contains the data                      {                          do                          {                              var tick = reader.Current as Tick;                                //Add or create the consolidator-flush mechanism for symbol:                              List<List<AlgoSeekFuturesProcessor>> symbolProcessors;                              if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                              {                                  symbolProcessors = new List<List<AlgoSeekFuturesProcessor>>(3)                                          {                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Trade' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Quote' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' x' _destination)).ToList() }                                          };                                    processors[tick.Symbol] = symbolProcessors;                              }                                // Pass current tick into processor: enum 0 = trade; 1 = quote' 2 = oi                              foreach (var processor in symbolProcessors[(int)tick.TickType])                              {                                  processor.Process(tick);                              }                                if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                              {                                  var pro = (double)processors.Values.SelectMany(p => p.SelectMany(x => x)).Count();                                  var symbols = (double)processors.Keys.Count();                                  Log.Trace("AlgoSeekFuturesConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%' Processor per symbol {4}"' Math.Round(totalLinesProcessed / 1000000m' 2)' Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)' Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)' 100 * totalFilesProcessed / totalFiles' pro / symbols);                              }                            }                          while (reader.MoveNext());                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Performing final flush to disk... ");                          Flush(processors' DateTime.MaxValue' true);                      }                        processors = null;                      GC.Collect();                      GC.WaitForPendingFinalizers();                        Log.Trace("AlgoSeekFuturesConverter.Convert(): Finished processing file: " + file);                      Interlocked.Increment(ref totalFilesProcessed);                  }                  catch(Exception err)                  {                      Log.Error("Exception caught! File: {0} Err: {1} Source {2} Stack {3}"' file' err.Message' err.Source' err.StackTrace);                  }              });
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(files' file =>              {                  try                  {                      Log.Trace("Remote File :" + file);                        var csvFile = Path.Combine(_source.FullName' Path.GetFileNameWithoutExtension(file.Name));                        Log.Trace("Source File :" + csvFile);                        if (!File.Exists(csvFile))                      {                          // create the directory first or else 7z will fail                          var csvFileInfo = new FileInfo(csvFile);                          Directory.CreateDirectory(csvFileInfo.DirectoryName);                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Extracting " + file);                          var psi = new ProcessStartInfo(zipper' " e " + file.FullName + " -o" + _source.FullName)                          {                              CreateNoWindow = true'                              WindowStyle = ProcessWindowStyle.Hidden'                              UseShellExecute = false'                              RedirectStandardOutput = true                          };                            var process = new Process();                          process.StartInfo = psi;                          process.Start();                            while (!process.StandardOutput.EndOfStream)                          {                              process.StandardOutput.ReadLine();                          }                            if (!process.WaitForExit(ExecTimeout * 1000))                          {                              Log.Error("7Zip timed out: " + file);                          }                          else                          {                              if (process.ExitCode > 0)                              {                                  Log.Error("7Zip Exited Unsuccessfully: " + file);                              }                          }                      }                        // setting up local processors                      var processors = new Processors();                        var reader = new AlgoSeekFuturesReader(csvFile' symbolMultipliers);                      if (start == DateTime.MinValue)                      {                          start = DateTime.Now;                      }                        if (reader.Current != null) // reader contains the data                      {                          do                          {                              var tick = reader.Current as Tick;                                //Add or create the consolidator-flush mechanism for symbol:                              List<List<AlgoSeekFuturesProcessor>> symbolProcessors;                              if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                              {                                  symbolProcessors = new List<List<AlgoSeekFuturesProcessor>>(3)                                          {                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Trade' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Quote' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' x' _destination)).ToList() }                                          };                                    processors[tick.Symbol] = symbolProcessors;                              }                                // Pass current tick into processor: enum 0 = trade; 1 = quote' 2 = oi                              foreach (var processor in symbolProcessors[(int)tick.TickType])                              {                                  processor.Process(tick);                              }                                if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                              {                                  var pro = (double)processors.Values.SelectMany(p => p.SelectMany(x => x)).Count();                                  var symbols = (double)processors.Keys.Count();                                  Log.Trace("AlgoSeekFuturesConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%' Processor per symbol {4}"' Math.Round(totalLinesProcessed / 1000000m' 2)' Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)' Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)' 100 * totalFilesProcessed / totalFiles' pro / symbols);                              }                            }                          while (reader.MoveNext());                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Performing final flush to disk... ");                          Flush(processors' DateTime.MaxValue' true);                      }                        processors = null;                      GC.Collect();                      GC.WaitForPendingFinalizers();                        Log.Trace("AlgoSeekFuturesConverter.Convert(): Finished processing file: " + file);                      Interlocked.Increment(ref totalFilesProcessed);                  }                  catch(Exception err)                  {                      Log.Error("Exception caught! File: {0} Err: {1} Source {2} Stack {3}"' file' err.Message' err.Source' err.StackTrace);                  }              });
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(files' file =>              {                  try                  {                      Log.Trace("Remote File :" + file);                        var csvFile = Path.Combine(_source.FullName' Path.GetFileNameWithoutExtension(file.Name));                        Log.Trace("Source File :" + csvFile);                        if (!File.Exists(csvFile))                      {                          // create the directory first or else 7z will fail                          var csvFileInfo = new FileInfo(csvFile);                          Directory.CreateDirectory(csvFileInfo.DirectoryName);                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Extracting " + file);                          var psi = new ProcessStartInfo(zipper' " e " + file.FullName + " -o" + _source.FullName)                          {                              CreateNoWindow = true'                              WindowStyle = ProcessWindowStyle.Hidden'                              UseShellExecute = false'                              RedirectStandardOutput = true                          };                            var process = new Process();                          process.StartInfo = psi;                          process.Start();                            while (!process.StandardOutput.EndOfStream)                          {                              process.StandardOutput.ReadLine();                          }                            if (!process.WaitForExit(ExecTimeout * 1000))                          {                              Log.Error("7Zip timed out: " + file);                          }                          else                          {                              if (process.ExitCode > 0)                              {                                  Log.Error("7Zip Exited Unsuccessfully: " + file);                              }                          }                      }                        // setting up local processors                      var processors = new Processors();                        var reader = new AlgoSeekFuturesReader(csvFile' symbolMultipliers);                      if (start == DateTime.MinValue)                      {                          start = DateTime.Now;                      }                        if (reader.Current != null) // reader contains the data                      {                          do                          {                              var tick = reader.Current as Tick;                                //Add or create the consolidator-flush mechanism for symbol:                              List<List<AlgoSeekFuturesProcessor>> symbolProcessors;                              if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                              {                                  symbolProcessors = new List<List<AlgoSeekFuturesProcessor>>(3)                                          {                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Trade' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Quote' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' x' _destination)).ToList() }                                          };                                    processors[tick.Symbol] = symbolProcessors;                              }                                // Pass current tick into processor: enum 0 = trade; 1 = quote' 2 = oi                              foreach (var processor in symbolProcessors[(int)tick.TickType])                              {                                  processor.Process(tick);                              }                                if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                              {                                  var pro = (double)processors.Values.SelectMany(p => p.SelectMany(x => x)).Count();                                  var symbols = (double)processors.Keys.Count();                                  Log.Trace("AlgoSeekFuturesConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%' Processor per symbol {4}"' Math.Round(totalLinesProcessed / 1000000m' 2)' Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)' Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)' 100 * totalFilesProcessed / totalFiles' pro / symbols);                              }                            }                          while (reader.MoveNext());                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Performing final flush to disk... ");                          Flush(processors' DateTime.MaxValue' true);                      }                        processors = null;                      GC.Collect();                      GC.WaitForPendingFinalizers();                        Log.Trace("AlgoSeekFuturesConverter.Convert(): Finished processing file: " + file);                      Interlocked.Increment(ref totalFilesProcessed);                  }                  catch(Exception err)                  {                      Log.Error("Exception caught! File: {0} Err: {1} Source {2} Stack {3}"' file' err.Message' err.Source' err.StackTrace);                  }              });
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(files' file =>              {                  try                  {                      Log.Trace("Remote File :" + file);                        var csvFile = Path.Combine(_source.FullName' Path.GetFileNameWithoutExtension(file.Name));                        Log.Trace("Source File :" + csvFile);                        if (!File.Exists(csvFile))                      {                          // create the directory first or else 7z will fail                          var csvFileInfo = new FileInfo(csvFile);                          Directory.CreateDirectory(csvFileInfo.DirectoryName);                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Extracting " + file);                          var psi = new ProcessStartInfo(zipper' " e " + file.FullName + " -o" + _source.FullName)                          {                              CreateNoWindow = true'                              WindowStyle = ProcessWindowStyle.Hidden'                              UseShellExecute = false'                              RedirectStandardOutput = true                          };                            var process = new Process();                          process.StartInfo = psi;                          process.Start();                            while (!process.StandardOutput.EndOfStream)                          {                              process.StandardOutput.ReadLine();                          }                            if (!process.WaitForExit(ExecTimeout * 1000))                          {                              Log.Error("7Zip timed out: " + file);                          }                          else                          {                              if (process.ExitCode > 0)                              {                                  Log.Error("7Zip Exited Unsuccessfully: " + file);                              }                          }                      }                        // setting up local processors                      var processors = new Processors();                        var reader = new AlgoSeekFuturesReader(csvFile' symbolMultipliers);                      if (start == DateTime.MinValue)                      {                          start = DateTime.Now;                      }                        if (reader.Current != null) // reader contains the data                      {                          do                          {                              var tick = reader.Current as Tick;                                //Add or create the consolidator-flush mechanism for symbol:                              List<List<AlgoSeekFuturesProcessor>> symbolProcessors;                              if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                              {                                  symbolProcessors = new List<List<AlgoSeekFuturesProcessor>>(3)                                          {                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Trade' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Quote' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' x' _destination)).ToList() }                                          };                                    processors[tick.Symbol] = symbolProcessors;                              }                                // Pass current tick into processor: enum 0 = trade; 1 = quote' 2 = oi                              foreach (var processor in symbolProcessors[(int)tick.TickType])                              {                                  processor.Process(tick);                              }                                if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                              {                                  var pro = (double)processors.Values.SelectMany(p => p.SelectMany(x => x)).Count();                                  var symbols = (double)processors.Keys.Count();                                  Log.Trace("AlgoSeekFuturesConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%' Processor per symbol {4}"' Math.Round(totalLinesProcessed / 1000000m' 2)' Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)' Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)' 100 * totalFilesProcessed / totalFiles' pro / symbols);                              }                            }                          while (reader.MoveNext());                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Performing final flush to disk... ");                          Flush(processors' DateTime.MaxValue' true);                      }                        processors = null;                      GC.Collect();                      GC.WaitForPendingFinalizers();                        Log.Trace("AlgoSeekFuturesConverter.Convert(): Finished processing file: " + file);                      Interlocked.Increment(ref totalFilesProcessed);                  }                  catch(Exception err)                  {                      Log.Error("Exception caught! File: {0} Err: {1} Source {2} Stack {3}"' file' err.Message' err.Source' err.StackTrace);                  }              });
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(files' file =>              {                  try                  {                      Log.Trace("Remote File :" + file);                        var csvFile = Path.Combine(_source.FullName' Path.GetFileNameWithoutExtension(file.Name));                        Log.Trace("Source File :" + csvFile);                        if (!File.Exists(csvFile))                      {                          // create the directory first or else 7z will fail                          var csvFileInfo = new FileInfo(csvFile);                          Directory.CreateDirectory(csvFileInfo.DirectoryName);                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Extracting " + file);                          var psi = new ProcessStartInfo(zipper' " e " + file.FullName + " -o" + _source.FullName)                          {                              CreateNoWindow = true'                              WindowStyle = ProcessWindowStyle.Hidden'                              UseShellExecute = false'                              RedirectStandardOutput = true                          };                            var process = new Process();                          process.StartInfo = psi;                          process.Start();                            while (!process.StandardOutput.EndOfStream)                          {                              process.StandardOutput.ReadLine();                          }                            if (!process.WaitForExit(ExecTimeout * 1000))                          {                              Log.Error("7Zip timed out: " + file);                          }                          else                          {                              if (process.ExitCode > 0)                              {                                  Log.Error("7Zip Exited Unsuccessfully: " + file);                              }                          }                      }                        // setting up local processors                      var processors = new Processors();                        var reader = new AlgoSeekFuturesReader(csvFile' symbolMultipliers);                      if (start == DateTime.MinValue)                      {                          start = DateTime.Now;                      }                        if (reader.Current != null) // reader contains the data                      {                          do                          {                              var tick = reader.Current as Tick;                                //Add or create the consolidator-flush mechanism for symbol:                              List<List<AlgoSeekFuturesProcessor>> symbolProcessors;                              if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                              {                                  symbolProcessors = new List<List<AlgoSeekFuturesProcessor>>(3)                                          {                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Trade' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Quote' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' x' _destination)).ToList() }                                          };                                    processors[tick.Symbol] = symbolProcessors;                              }                                // Pass current tick into processor: enum 0 = trade; 1 = quote' 2 = oi                              foreach (var processor in symbolProcessors[(int)tick.TickType])                              {                                  processor.Process(tick);                              }                                if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                              {                                  var pro = (double)processors.Values.SelectMany(p => p.SelectMany(x => x)).Count();                                  var symbols = (double)processors.Keys.Count();                                  Log.Trace("AlgoSeekFuturesConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%' Processor per symbol {4}"' Math.Round(totalLinesProcessed / 1000000m' 2)' Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)' Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)' 100 * totalFilesProcessed / totalFiles' pro / symbols);                              }                            }                          while (reader.MoveNext());                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Performing final flush to disk... ");                          Flush(processors' DateTime.MaxValue' true);                      }                        processors = null;                      GC.Collect();                      GC.WaitForPendingFinalizers();                        Log.Trace("AlgoSeekFuturesConverter.Convert(): Finished processing file: " + file);                      Interlocked.Increment(ref totalFilesProcessed);                  }                  catch(Exception err)                  {                      Log.Error("Exception caught! File: {0} Err: {1} Source {2} Stack {3}"' file' err.Message' err.Source' err.StackTrace);                  }              });
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(files' file =>              {                  try                  {                      Log.Trace("Remote File :" + file);                        var csvFile = Path.Combine(_source.FullName' Path.GetFileNameWithoutExtension(file.Name));                        Log.Trace("Source File :" + csvFile);                        if (!File.Exists(csvFile))                      {                          // create the directory first or else 7z will fail                          var csvFileInfo = new FileInfo(csvFile);                          Directory.CreateDirectory(csvFileInfo.DirectoryName);                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Extracting " + file);                          var psi = new ProcessStartInfo(zipper' " e " + file.FullName + " -o" + _source.FullName)                          {                              CreateNoWindow = true'                              WindowStyle = ProcessWindowStyle.Hidden'                              UseShellExecute = false'                              RedirectStandardOutput = true                          };                            var process = new Process();                          process.StartInfo = psi;                          process.Start();                            while (!process.StandardOutput.EndOfStream)                          {                              process.StandardOutput.ReadLine();                          }                            if (!process.WaitForExit(ExecTimeout * 1000))                          {                              Log.Error("7Zip timed out: " + file);                          }                          else                          {                              if (process.ExitCode > 0)                              {                                  Log.Error("7Zip Exited Unsuccessfully: " + file);                              }                          }                      }                        // setting up local processors                      var processors = new Processors();                        var reader = new AlgoSeekFuturesReader(csvFile' symbolMultipliers);                      if (start == DateTime.MinValue)                      {                          start = DateTime.Now;                      }                        if (reader.Current != null) // reader contains the data                      {                          do                          {                              var tick = reader.Current as Tick;                                //Add or create the consolidator-flush mechanism for symbol:                              List<List<AlgoSeekFuturesProcessor>> symbolProcessors;                              if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                              {                                  symbolProcessors = new List<List<AlgoSeekFuturesProcessor>>(3)                                          {                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Trade' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Quote' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' x' _destination)).ToList() }                                          };                                    processors[tick.Symbol] = symbolProcessors;                              }                                // Pass current tick into processor: enum 0 = trade; 1 = quote' 2 = oi                              foreach (var processor in symbolProcessors[(int)tick.TickType])                              {                                  processor.Process(tick);                              }                                if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                              {                                  var pro = (double)processors.Values.SelectMany(p => p.SelectMany(x => x)).Count();                                  var symbols = (double)processors.Keys.Count();                                  Log.Trace("AlgoSeekFuturesConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%' Processor per symbol {4}"' Math.Round(totalLinesProcessed / 1000000m' 2)' Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)' Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)' 100 * totalFilesProcessed / totalFiles' pro / symbols);                              }                            }                          while (reader.MoveNext());                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Performing final flush to disk... ");                          Flush(processors' DateTime.MaxValue' true);                      }                        processors = null;                      GC.Collect();                      GC.WaitForPendingFinalizers();                        Log.Trace("AlgoSeekFuturesConverter.Convert(): Finished processing file: " + file);                      Interlocked.Increment(ref totalFilesProcessed);                  }                  catch(Exception err)                  {                      Log.Error("Exception caught! File: {0} Err: {1} Source {2} Stack {3}"' file' err.Message' err.Source' err.StackTrace);                  }              });
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,LoadSymbolMultipliers,The following statement contains a magic number: const int columnsCount = 4;
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,LoadSymbolMultipliers,The following statement contains a magic number: const int columnMultipleFactor = 2;
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,LoadSymbolMultipliers,The following statement contains a magic number: const int columnInfo = 3;
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesProcessor,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesProcessor.cs,AlgoSeekFuturesProcessor,The following statement contains a magic number: _curFileCount % 1000 == 0
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesProcessor,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesProcessor.cs,FlushBuffer,The following statement contains a magic number: _curFileCount % 1000 == 0
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesReader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesReader.cs,Parse,The following statement contains a magic number: const int TradeMask = 2;
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesReader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesReader.cs,Parse,The following statement contains a magic number: const int OpenInterestMask = 11;
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesReader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesReader.cs,Parse,The following statement contains a magic number: const int MessageTypeMask = 15;
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesReader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesReader.cs,Parse,The following statement contains a magic number: var scaleFactor = symbol.ID.Symbol == "VX" ? decimal.One : 10000000000m;
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesReader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesReader.cs,GetExpirationYear,The following statement contains a magic number: var baseNum = 2000;
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesReader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesReader.cs,GetExpirationYear,The following statement contains a magic number: baseNum += 10;
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(rawDatafiles' parallelOptionsProcessing' rawDataFile =>              {                  Log.Trace("Source File :" + rawDataFile.Name);                    // setting up local processors and the flush event                  var processors = new Processors();                  var waitForFlush = new ManualResetEvent(true);                    // symbol filters                  // var symbolFilterNames = new string[] { "AAPL"' "TWX"' "NWSA"' "FOXA"' "AIG"' "EGLE"' "EGEC" };                  // var symbolFilter = symbolFilterNames.SelectMany(name => new[] { name' name + "1"' name + ".1" }).ToHashSet();                  // var reader = new AlgoSeekOptionsReader(csvFile' _referenceDate' symbolFilter);                    using (var reader = new AlgoSeekOptionsReader(rawDataFile.FullName' _referenceDate' symbolFilter))                  {                      if (start == DateTime.MinValue)                      {                          start = DateTime.Now;                      }                      var flushStep = TimeSpan.FromMinutes(10);                      if (reader.Current != null) // reader contains the data                      {                          var previousFlush = reader.Current.Time.RoundDown(flushStep);                          do                          {                              var tick = reader.Current as Tick;                              //If the next minute has clocked over; flush the consolidators; serialize and store data to disk.                              if (tick.Time.RoundDown(flushStep) > previousFlush)                              {                                  previousFlush = WriteToDisk(processors' waitForFlush' tick.Time' flushStep);                                  processors = new Processors();                              }                              //Add or create the consolidator-flush mechanism for symbol:                              List<AlgoSeekOptionsProcessor> symbolProcessors;                              if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                              {                                  symbolProcessors = new List<AlgoSeekOptionsProcessor>(3)                                  {                                      new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Trade' _resolution' _destination)'                                      new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Quote' _resolution' _destination)'                                      new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' _resolution' _destination)                                  };                                  processors[tick.Symbol] = symbolProcessors;                              }                              // Pass current tick into processor: enum 0 = trade; 1 = quote' ' 2 = oi                              symbolProcessors[(int)tick.TickType].Process(tick);                              if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                              {                                  Log.Trace(                                      "AlgoSeekOptionsConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%"'                                      Math.Round(totalLinesProcessed / 1000000m' 2)'                                      Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)'                                      Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)'                                      100 * totalFilesProcessed / totalFiles);                              }                          } while (reader.MoveNext());                          Log.Trace("AlgoSeekOptionsConverter.Convert(): Performing final flush to disk... ");                          Flush(processors' DateTime.MaxValue' true);                          WriteToDisk(processors' waitForFlush' DateTime.MaxValue' flushStep' true);                      }                      Log.Trace("AlgoSeekOptionsConverter.Convert(): Cleaning up extracted options file {0}"' rawDataFile.FullName);                  }                  rawDataFile.Delete();                  processors = null;                  Log.Trace("AlgoSeekOptionsConverter.Convert(): Finished processing file: " + rawDataFile);                  Interlocked.Increment(ref totalFilesProcessed);              });
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(rawDatafiles' parallelOptionsProcessing' rawDataFile =>              {                  Log.Trace("Source File :" + rawDataFile.Name);                    // setting up local processors and the flush event                  var processors = new Processors();                  var waitForFlush = new ManualResetEvent(true);                    // symbol filters                  // var symbolFilterNames = new string[] { "AAPL"' "TWX"' "NWSA"' "FOXA"' "AIG"' "EGLE"' "EGEC" };                  // var symbolFilter = symbolFilterNames.SelectMany(name => new[] { name' name + "1"' name + ".1" }).ToHashSet();                  // var reader = new AlgoSeekOptionsReader(csvFile' _referenceDate' symbolFilter);                    using (var reader = new AlgoSeekOptionsReader(rawDataFile.FullName' _referenceDate' symbolFilter))                  {                      if (start == DateTime.MinValue)                      {                          start = DateTime.Now;                      }                      var flushStep = TimeSpan.FromMinutes(10);                      if (reader.Current != null) // reader contains the data                      {                          var previousFlush = reader.Current.Time.RoundDown(flushStep);                          do                          {                              var tick = reader.Current as Tick;                              //If the next minute has clocked over; flush the consolidators; serialize and store data to disk.                              if (tick.Time.RoundDown(flushStep) > previousFlush)                              {                                  previousFlush = WriteToDisk(processors' waitForFlush' tick.Time' flushStep);                                  processors = new Processors();                              }                              //Add or create the consolidator-flush mechanism for symbol:                              List<AlgoSeekOptionsProcessor> symbolProcessors;                              if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                              {                                  symbolProcessors = new List<AlgoSeekOptionsProcessor>(3)                                  {                                      new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Trade' _resolution' _destination)'                                      new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Quote' _resolution' _destination)'                                      new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' _resolution' _destination)                                  };                                  processors[tick.Symbol] = symbolProcessors;                              }                              // Pass current tick into processor: enum 0 = trade; 1 = quote' ' 2 = oi                              symbolProcessors[(int)tick.TickType].Process(tick);                              if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                              {                                  Log.Trace(                                      "AlgoSeekOptionsConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%"'                                      Math.Round(totalLinesProcessed / 1000000m' 2)'                                      Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)'                                      Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)'                                      100 * totalFilesProcessed / totalFiles);                              }                          } while (reader.MoveNext());                          Log.Trace("AlgoSeekOptionsConverter.Convert(): Performing final flush to disk... ");                          Flush(processors' DateTime.MaxValue' true);                          WriteToDisk(processors' waitForFlush' DateTime.MaxValue' flushStep' true);                      }                      Log.Trace("AlgoSeekOptionsConverter.Convert(): Cleaning up extracted options file {0}"' rawDataFile.FullName);                  }                  rawDataFile.Delete();                  processors = null;                  Log.Trace("AlgoSeekOptionsConverter.Convert(): Finished processing file: " + rawDataFile);                  Interlocked.Increment(ref totalFilesProcessed);              });
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(rawDatafiles' parallelOptionsProcessing' rawDataFile =>              {                  Log.Trace("Source File :" + rawDataFile.Name);                    // setting up local processors and the flush event                  var processors = new Processors();                  var waitForFlush = new ManualResetEvent(true);                    // symbol filters                  // var symbolFilterNames = new string[] { "AAPL"' "TWX"' "NWSA"' "FOXA"' "AIG"' "EGLE"' "EGEC" };                  // var symbolFilter = symbolFilterNames.SelectMany(name => new[] { name' name + "1"' name + ".1" }).ToHashSet();                  // var reader = new AlgoSeekOptionsReader(csvFile' _referenceDate' symbolFilter);                    using (var reader = new AlgoSeekOptionsReader(rawDataFile.FullName' _referenceDate' symbolFilter))                  {                      if (start == DateTime.MinValue)                      {                          start = DateTime.Now;                      }                      var flushStep = TimeSpan.FromMinutes(10);                      if (reader.Current != null) // reader contains the data                      {                          var previousFlush = reader.Current.Time.RoundDown(flushStep);                          do                          {                              var tick = reader.Current as Tick;                              //If the next minute has clocked over; flush the consolidators; serialize and store data to disk.                              if (tick.Time.RoundDown(flushStep) > previousFlush)                              {                                  previousFlush = WriteToDisk(processors' waitForFlush' tick.Time' flushStep);                                  processors = new Processors();                              }                              //Add or create the consolidator-flush mechanism for symbol:                              List<AlgoSeekOptionsProcessor> symbolProcessors;                              if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                              {                                  symbolProcessors = new List<AlgoSeekOptionsProcessor>(3)                                  {                                      new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Trade' _resolution' _destination)'                                      new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Quote' _resolution' _destination)'                                      new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' _resolution' _destination)                                  };                                  processors[tick.Symbol] = symbolProcessors;                              }                              // Pass current tick into processor: enum 0 = trade; 1 = quote' ' 2 = oi                              symbolProcessors[(int)tick.TickType].Process(tick);                              if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                              {                                  Log.Trace(                                      "AlgoSeekOptionsConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%"'                                      Math.Round(totalLinesProcessed / 1000000m' 2)'                                      Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)'                                      Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)'                                      100 * totalFilesProcessed / totalFiles);                              }                          } while (reader.MoveNext());                          Log.Trace("AlgoSeekOptionsConverter.Convert(): Performing final flush to disk... ");                          Flush(processors' DateTime.MaxValue' true);                          WriteToDisk(processors' waitForFlush' DateTime.MaxValue' flushStep' true);                      }                      Log.Trace("AlgoSeekOptionsConverter.Convert(): Cleaning up extracted options file {0}"' rawDataFile.FullName);                  }                  rawDataFile.Delete();                  processors = null;                  Log.Trace("AlgoSeekOptionsConverter.Convert(): Finished processing file: " + rawDataFile);                  Interlocked.Increment(ref totalFilesProcessed);              });
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(rawDatafiles' parallelOptionsProcessing' rawDataFile =>              {                  Log.Trace("Source File :" + rawDataFile.Name);                    // setting up local processors and the flush event                  var processors = new Processors();                  var waitForFlush = new ManualResetEvent(true);                    // symbol filters                  // var symbolFilterNames = new string[] { "AAPL"' "TWX"' "NWSA"' "FOXA"' "AIG"' "EGLE"' "EGEC" };                  // var symbolFilter = symbolFilterNames.SelectMany(name => new[] { name' name + "1"' name + ".1" }).ToHashSet();                  // var reader = new AlgoSeekOptionsReader(csvFile' _referenceDate' symbolFilter);                    using (var reader = new AlgoSeekOptionsReader(rawDataFile.FullName' _referenceDate' symbolFilter))                  {                      if (start == DateTime.MinValue)                      {                          start = DateTime.Now;                      }                      var flushStep = TimeSpan.FromMinutes(10);                      if (reader.Current != null) // reader contains the data                      {                          var previousFlush = reader.Current.Time.RoundDown(flushStep);                          do                          {                              var tick = reader.Current as Tick;                              //If the next minute has clocked over; flush the consolidators; serialize and store data to disk.                              if (tick.Time.RoundDown(flushStep) > previousFlush)                              {                                  previousFlush = WriteToDisk(processors' waitForFlush' tick.Time' flushStep);                                  processors = new Processors();                              }                              //Add or create the consolidator-flush mechanism for symbol:                              List<AlgoSeekOptionsProcessor> symbolProcessors;                              if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                              {                                  symbolProcessors = new List<AlgoSeekOptionsProcessor>(3)                                  {                                      new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Trade' _resolution' _destination)'                                      new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Quote' _resolution' _destination)'                                      new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' _resolution' _destination)                                  };                                  processors[tick.Symbol] = symbolProcessors;                              }                              // Pass current tick into processor: enum 0 = trade; 1 = quote' ' 2 = oi                              symbolProcessors[(int)tick.TickType].Process(tick);                              if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                              {                                  Log.Trace(                                      "AlgoSeekOptionsConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%"'                                      Math.Round(totalLinesProcessed / 1000000m' 2)'                                      Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)'                                      Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)'                                      100 * totalFilesProcessed / totalFiles);                              }                          } while (reader.MoveNext());                          Log.Trace("AlgoSeekOptionsConverter.Convert(): Performing final flush to disk... ");                          Flush(processors' DateTime.MaxValue' true);                          WriteToDisk(processors' waitForFlush' DateTime.MaxValue' flushStep' true);                      }                      Log.Trace("AlgoSeekOptionsConverter.Convert(): Cleaning up extracted options file {0}"' rawDataFile.FullName);                  }                  rawDataFile.Delete();                  processors = null;                  Log.Trace("AlgoSeekOptionsConverter.Convert(): Finished processing file: " + rawDataFile);                  Interlocked.Increment(ref totalFilesProcessed);              });
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(rawDatafiles' parallelOptionsProcessing' rawDataFile =>              {                  Log.Trace("Source File :" + rawDataFile.Name);                    // setting up local processors and the flush event                  var processors = new Processors();                  var waitForFlush = new ManualResetEvent(true);                    // symbol filters                  // var symbolFilterNames = new string[] { "AAPL"' "TWX"' "NWSA"' "FOXA"' "AIG"' "EGLE"' "EGEC" };                  // var symbolFilter = symbolFilterNames.SelectMany(name => new[] { name' name + "1"' name + ".1" }).ToHashSet();                  // var reader = new AlgoSeekOptionsReader(csvFile' _referenceDate' symbolFilter);                    using (var reader = new AlgoSeekOptionsReader(rawDataFile.FullName' _referenceDate' symbolFilter))                  {                      if (start == DateTime.MinValue)                      {                          start = DateTime.Now;                      }                      var flushStep = TimeSpan.FromMinutes(10);                      if (reader.Current != null) // reader contains the data                      {                          var previousFlush = reader.Current.Time.RoundDown(flushStep);                          do                          {                              var tick = reader.Current as Tick;                              //If the next minute has clocked over; flush the consolidators; serialize and store data to disk.                              if (tick.Time.RoundDown(flushStep) > previousFlush)                              {                                  previousFlush = WriteToDisk(processors' waitForFlush' tick.Time' flushStep);                                  processors = new Processors();                              }                              //Add or create the consolidator-flush mechanism for symbol:                              List<AlgoSeekOptionsProcessor> symbolProcessors;                              if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                              {                                  symbolProcessors = new List<AlgoSeekOptionsProcessor>(3)                                  {                                      new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Trade' _resolution' _destination)'                                      new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Quote' _resolution' _destination)'                                      new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' _resolution' _destination)                                  };                                  processors[tick.Symbol] = symbolProcessors;                              }                              // Pass current tick into processor: enum 0 = trade; 1 = quote' ' 2 = oi                              symbolProcessors[(int)tick.TickType].Process(tick);                              if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                              {                                  Log.Trace(                                      "AlgoSeekOptionsConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%"'                                      Math.Round(totalLinesProcessed / 1000000m' 2)'                                      Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)'                                      Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)'                                      100 * totalFilesProcessed / totalFiles);                              }                          } while (reader.MoveNext());                          Log.Trace("AlgoSeekOptionsConverter.Convert(): Performing final flush to disk... ");                          Flush(processors' DateTime.MaxValue' true);                          WriteToDisk(processors' waitForFlush' DateTime.MaxValue' flushStep' true);                      }                      Log.Trace("AlgoSeekOptionsConverter.Convert(): Cleaning up extracted options file {0}"' rawDataFile.FullName);                  }                  rawDataFile.Delete();                  processors = null;                  Log.Trace("AlgoSeekOptionsConverter.Convert(): Finished processing file: " + rawDataFile);                  Interlocked.Increment(ref totalFilesProcessed);              });
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(rawDatafiles' parallelOptionsProcessing' rawDataFile =>              {                  Log.Trace("Source File :" + rawDataFile.Name);                    // setting up local processors and the flush event                  var processors = new Processors();                  var waitForFlush = new ManualResetEvent(true);                    // symbol filters                  // var symbolFilterNames = new string[] { "AAPL"' "TWX"' "NWSA"' "FOXA"' "AIG"' "EGLE"' "EGEC" };                  // var symbolFilter = symbolFilterNames.SelectMany(name => new[] { name' name + "1"' name + ".1" }).ToHashSet();                  // var reader = new AlgoSeekOptionsReader(csvFile' _referenceDate' symbolFilter);                    using (var reader = new AlgoSeekOptionsReader(rawDataFile.FullName' _referenceDate' symbolFilter))                  {                      if (start == DateTime.MinValue)                      {                          start = DateTime.Now;                      }                      var flushStep = TimeSpan.FromMinutes(10);                      if (reader.Current != null) // reader contains the data                      {                          var previousFlush = reader.Current.Time.RoundDown(flushStep);                          do                          {                              var tick = reader.Current as Tick;                              //If the next minute has clocked over; flush the consolidators; serialize and store data to disk.                              if (tick.Time.RoundDown(flushStep) > previousFlush)                              {                                  previousFlush = WriteToDisk(processors' waitForFlush' tick.Time' flushStep);                                  processors = new Processors();                              }                              //Add or create the consolidator-flush mechanism for symbol:                              List<AlgoSeekOptionsProcessor> symbolProcessors;                              if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                              {                                  symbolProcessors = new List<AlgoSeekOptionsProcessor>(3)                                  {                                      new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Trade' _resolution' _destination)'                                      new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Quote' _resolution' _destination)'                                      new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' _resolution' _destination)                                  };                                  processors[tick.Symbol] = symbolProcessors;                              }                              // Pass current tick into processor: enum 0 = trade; 1 = quote' ' 2 = oi                              symbolProcessors[(int)tick.TickType].Process(tick);                              if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                              {                                  Log.Trace(                                      "AlgoSeekOptionsConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%"'                                      Math.Round(totalLinesProcessed / 1000000m' 2)'                                      Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)'                                      Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)'                                      100 * totalFilesProcessed / totalFiles);                              }                          } while (reader.MoveNext());                          Log.Trace("AlgoSeekOptionsConverter.Convert(): Performing final flush to disk... ");                          Flush(processors' DateTime.MaxValue' true);                          WriteToDisk(processors' waitForFlush' DateTime.MaxValue' flushStep' true);                      }                      Log.Trace("AlgoSeekOptionsConverter.Convert(): Cleaning up extracted options file {0}"' rawDataFile.FullName);                  }                  rawDataFile.Delete();                  processors = null;                  Log.Trace("AlgoSeekOptionsConverter.Convert(): Finished processing file: " + rawDataFile);                  Interlocked.Increment(ref totalFilesProcessed);              });
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(rawDatafiles' parallelOptionsProcessing' rawDataFile =>              {                  Log.Trace("Source File :" + rawDataFile.Name);                    // setting up local processors and the flush event                  var processors = new Processors();                  var waitForFlush = new ManualResetEvent(true);                    // symbol filters                  // var symbolFilterNames = new string[] { "AAPL"' "TWX"' "NWSA"' "FOXA"' "AIG"' "EGLE"' "EGEC" };                  // var symbolFilter = symbolFilterNames.SelectMany(name => new[] { name' name + "1"' name + ".1" }).ToHashSet();                  // var reader = new AlgoSeekOptionsReader(csvFile' _referenceDate' symbolFilter);                    using (var reader = new AlgoSeekOptionsReader(rawDataFile.FullName' _referenceDate' symbolFilter))                  {                      if (start == DateTime.MinValue)                      {                          start = DateTime.Now;                      }                      var flushStep = TimeSpan.FromMinutes(10);                      if (reader.Current != null) // reader contains the data                      {                          var previousFlush = reader.Current.Time.RoundDown(flushStep);                          do                          {                              var tick = reader.Current as Tick;                              //If the next minute has clocked over; flush the consolidators; serialize and store data to disk.                              if (tick.Time.RoundDown(flushStep) > previousFlush)                              {                                  previousFlush = WriteToDisk(processors' waitForFlush' tick.Time' flushStep);                                  processors = new Processors();                              }                              //Add or create the consolidator-flush mechanism for symbol:                              List<AlgoSeekOptionsProcessor> symbolProcessors;                              if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                              {                                  symbolProcessors = new List<AlgoSeekOptionsProcessor>(3)                                  {                                      new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Trade' _resolution' _destination)'                                      new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Quote' _resolution' _destination)'                                      new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' _resolution' _destination)                                  };                                  processors[tick.Symbol] = symbolProcessors;                              }                              // Pass current tick into processor: enum 0 = trade; 1 = quote' ' 2 = oi                              symbolProcessors[(int)tick.TickType].Process(tick);                              if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                              {                                  Log.Trace(                                      "AlgoSeekOptionsConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%"'                                      Math.Round(totalLinesProcessed / 1000000m' 2)'                                      Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)'                                      Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)'                                      100 * totalFilesProcessed / totalFiles);                              }                          } while (reader.MoveNext());                          Log.Trace("AlgoSeekOptionsConverter.Convert(): Performing final flush to disk... ");                          Flush(processors' DateTime.MaxValue' true);                          WriteToDisk(processors' waitForFlush' DateTime.MaxValue' flushStep' true);                      }                      Log.Trace("AlgoSeekOptionsConverter.Convert(): Cleaning up extracted options file {0}"' rawDataFile.FullName);                  }                  rawDataFile.Delete();                  processors = null;                  Log.Trace("AlgoSeekOptionsConverter.Convert(): Finished processing file: " + rawDataFile);                  Interlocked.Increment(ref totalFilesProcessed);              });
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(rawDatafiles' parallelOptionsProcessing' rawDataFile =>              {                  Log.Trace("Source File :" + rawDataFile.Name);                    // setting up local processors and the flush event                  var processors = new Processors();                  var waitForFlush = new ManualResetEvent(true);                    // symbol filters                  // var symbolFilterNames = new string[] { "AAPL"' "TWX"' "NWSA"' "FOXA"' "AIG"' "EGLE"' "EGEC" };                  // var symbolFilter = symbolFilterNames.SelectMany(name => new[] { name' name + "1"' name + ".1" }).ToHashSet();                  // var reader = new AlgoSeekOptionsReader(csvFile' _referenceDate' symbolFilter);                    using (var reader = new AlgoSeekOptionsReader(rawDataFile.FullName' _referenceDate' symbolFilter))                  {                      if (start == DateTime.MinValue)                      {                          start = DateTime.Now;                      }                      var flushStep = TimeSpan.FromMinutes(10);                      if (reader.Current != null) // reader contains the data                      {                          var previousFlush = reader.Current.Time.RoundDown(flushStep);                          do                          {                              var tick = reader.Current as Tick;                              //If the next minute has clocked over; flush the consolidators; serialize and store data to disk.                              if (tick.Time.RoundDown(flushStep) > previousFlush)                              {                                  previousFlush = WriteToDisk(processors' waitForFlush' tick.Time' flushStep);                                  processors = new Processors();                              }                              //Add or create the consolidator-flush mechanism for symbol:                              List<AlgoSeekOptionsProcessor> symbolProcessors;                              if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                              {                                  symbolProcessors = new List<AlgoSeekOptionsProcessor>(3)                                  {                                      new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Trade' _resolution' _destination)'                                      new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Quote' _resolution' _destination)'                                      new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' _resolution' _destination)                                  };                                  processors[tick.Symbol] = symbolProcessors;                              }                              // Pass current tick into processor: enum 0 = trade; 1 = quote' ' 2 = oi                              symbolProcessors[(int)tick.TickType].Process(tick);                              if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                              {                                  Log.Trace(                                      "AlgoSeekOptionsConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%"'                                      Math.Round(totalLinesProcessed / 1000000m' 2)'                                      Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)'                                      Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)'                                      100 * totalFilesProcessed / totalFiles);                              }                          } while (reader.MoveNext());                          Log.Trace("AlgoSeekOptionsConverter.Convert(): Performing final flush to disk... ");                          Flush(processors' DateTime.MaxValue' true);                          WriteToDisk(processors' waitForFlush' DateTime.MaxValue' flushStep' true);                      }                      Log.Trace("AlgoSeekOptionsConverter.Convert(): Cleaning up extracted options file {0}"' rawDataFile.FullName);                  }                  rawDataFile.Delete();                  processors = null;                  Log.Trace("AlgoSeekOptionsConverter.Convert(): Finished processing file: " + rawDataFile);                  Interlocked.Increment(ref totalFilesProcessed);              });
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(rawDatafiles' parallelOptionsProcessing' rawDataFile =>              {                  Log.Trace("Source File :" + rawDataFile.Name);                    // setting up local processors and the flush event                  var processors = new Processors();                  var waitForFlush = new ManualResetEvent(true);                    // symbol filters                  // var symbolFilterNames = new string[] { "AAPL"' "TWX"' "NWSA"' "FOXA"' "AIG"' "EGLE"' "EGEC" };                  // var symbolFilter = symbolFilterNames.SelectMany(name => new[] { name' name + "1"' name + ".1" }).ToHashSet();                  // var reader = new AlgoSeekOptionsReader(csvFile' _referenceDate' symbolFilter);                    using (var reader = new AlgoSeekOptionsReader(rawDataFile.FullName' _referenceDate' symbolFilter))                  {                      if (start == DateTime.MinValue)                      {                          start = DateTime.Now;                      }                      var flushStep = TimeSpan.FromMinutes(10);                      if (reader.Current != null) // reader contains the data                      {                          var previousFlush = reader.Current.Time.RoundDown(flushStep);                          do                          {                              var tick = reader.Current as Tick;                              //If the next minute has clocked over; flush the consolidators; serialize and store data to disk.                              if (tick.Time.RoundDown(flushStep) > previousFlush)                              {                                  previousFlush = WriteToDisk(processors' waitForFlush' tick.Time' flushStep);                                  processors = new Processors();                              }                              //Add or create the consolidator-flush mechanism for symbol:                              List<AlgoSeekOptionsProcessor> symbolProcessors;                              if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                              {                                  symbolProcessors = new List<AlgoSeekOptionsProcessor>(3)                                  {                                      new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Trade' _resolution' _destination)'                                      new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Quote' _resolution' _destination)'                                      new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' _resolution' _destination)                                  };                                  processors[tick.Symbol] = symbolProcessors;                              }                              // Pass current tick into processor: enum 0 = trade; 1 = quote' ' 2 = oi                              symbolProcessors[(int)tick.TickType].Process(tick);                              if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                              {                                  Log.Trace(                                      "AlgoSeekOptionsConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%"'                                      Math.Round(totalLinesProcessed / 1000000m' 2)'                                      Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)'                                      Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)'                                      100 * totalFilesProcessed / totalFiles);                              }                          } while (reader.MoveNext());                          Log.Trace("AlgoSeekOptionsConverter.Convert(): Performing final flush to disk... ");                          Flush(processors' DateTime.MaxValue' true);                          WriteToDisk(processors' waitForFlush' DateTime.MaxValue' flushStep' true);                      }                      Log.Trace("AlgoSeekOptionsConverter.Convert(): Cleaning up extracted options file {0}"' rawDataFile.FullName);                  }                  rawDataFile.Delete();                  processors = null;                  Log.Trace("AlgoSeekOptionsConverter.Convert(): Finished processing file: " + rawDataFile);                  Interlocked.Increment(ref totalFilesProcessed);              });
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsReader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsReader.cs,Parse,The following statement contains a magic number: var hours = timeString.Substring(0' 2).ToInt32();
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsReader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsReader.cs,Parse,The following statement contains a magic number: var minutes = timeString.Substring(3' 2).ToInt32();
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsReader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsReader.cs,Parse,The following statement contains a magic number: var minutes = timeString.Substring(3' 2).ToInt32();
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsReader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsReader.cs,Parse,The following statement contains a magic number: var seconds = timeString.Substring(6' 2).ToInt32();
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsReader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsReader.cs,Parse,The following statement contains a magic number: var seconds = timeString.Substring(6' 2).ToInt32();
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsReader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsReader.cs,Parse,The following statement contains a magic number: var millis = timeString.Substring(9' 3).ToInt32();
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsReader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsReader.cs,Parse,The following statement contains a magic number: var millis = timeString.Substring(9' 3).ToInt32();
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsReader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsReader.cs,Parse,The following statement contains a magic number: var strike = csv[_columnStrike].ToDecimal() / 10000m;
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsReader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsReader.cs,Parse,The following statement contains a magic number: var price = csv[_columnPremium].ToDecimal() / 10000m;
Magic Number,QuantConnect.ToolBox.CoarseUniverseGenerator,CoarseUniverseGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\CoarseUniverseGeneratorProgram.cs,ProcessDailyFolder,The following statement contains a magic number: const decimal scaleFactor = 10000m;
Magic Number,QuantConnect.ToolBox.CoarseUniverseGenerator,CoarseUniverseGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\CoarseUniverseGeneratorProgram.cs,ProcessDailyFolder,The following statement contains a magic number: var close = Parse.Decimal(csv[4]) / scaleFactor;
Magic Number,QuantConnect.ToolBox.CoarseUniverseGenerator,CoarseUniverseGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\CoarseUniverseGeneratorProgram.cs,ProcessDailyFolder,The following statement contains a magic number: var volume = Parse.Long(csv[5]);
Magic Number,QuantConnect.ToolBox.CoarseUniverseGenerator,CoarseUniverseGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\CoarseUniverseGeneratorProgram.cs,ProcessDailyFolder,The following statement contains a magic number: mapFile != null && mapFile.Count() > 2 && !hasFundamentalDataForDate
Magic Number,QuantConnect.ToolBox.CoarseUniverseGenerator,CoarseUniverseGeneratorProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\CoarseUniverseGeneratorProgram.cs,ProcessDailyFolder,The following statement contains a magic number: symbols % 1000 == 0
Magic Number,QuantConnect.ToolBox.CryptoiqDownloader,CryptoiqDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\CryptoiqDownloader\CryptoiqDownloader.cs,Get,The following statement contains a magic number: hour < 24
Magic Number,QuantConnect.ToolBox.DukascopyDownloader,DukascopyDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopyDataDownloader.cs,DownloadTicks,The following statement contains a magic number: var timeOffset = hour * 3600000;
Magic Number,QuantConnect.ToolBox.DukascopyDownloader,DukascopyDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopyDataDownloader.cs,DownloadTicks,The following statement contains a magic number: hour < 24
Magic Number,QuantConnect.ToolBox.DukascopyDownloader,DukascopyDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopyDataDownloader.cs,ReverseBytes,The following statement contains a magic number: *p = (*p & 0x000000FF) << 24 | (*p & 0x0000FF00) << 8 | (*p & 0x00FF0000) >> 8 | (*p & 0xFF000000) >> 24;
Magic Number,QuantConnect.ToolBox.DukascopyDownloader,DukascopyDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopyDataDownloader.cs,ReverseBytes,The following statement contains a magic number: *p = (*p & 0x000000FF) << 24 | (*p & 0x0000FF00) << 8 | (*p & 0x00FF0000) >> 8 | (*p & 0xFF000000) >> 24;
Magic Number,QuantConnect.ToolBox.DukascopyDownloader,DukascopyDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopyDataDownloader.cs,ReverseBytes,The following statement contains a magic number: *p = (*p & 0x000000FF) << 24 | (*p & 0x0000FF00) << 8 | (*p & 0x00FF0000) >> 8 | (*p & 0xFF000000) >> 24;
Magic Number,QuantConnect.ToolBox.DukascopyDownloader,DukascopyDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopyDataDownloader.cs,ReverseBytes,The following statement contains a magic number: *p = (*p & 0x000000FF) << 24 | (*p & 0x0000FF00) << 8 | (*p & 0x00FF0000) >> 8 | (*p & 0xFF000000) >> 24;
Magic Number,QuantConnect.ToolBox.DukascopyDownloader,DukascopySymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopySymbolMapper.cs,GetBrokerageSecurityType,The following statement contains a magic number: return (brokerageSymbol.Length == 6 && KnownCurrencies.Contains(brokerageSymbol.Substring(0' 3)) && KnownCurrencies.Contains(brokerageSymbol.Substring(3' 3)))                  ? SecurityType.Forex                  : SecurityType.Cfd;
Magic Number,QuantConnect.ToolBox.DukascopyDownloader,DukascopySymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopySymbolMapper.cs,GetBrokerageSecurityType,The following statement contains a magic number: return (brokerageSymbol.Length == 6 && KnownCurrencies.Contains(brokerageSymbol.Substring(0' 3)) && KnownCurrencies.Contains(brokerageSymbol.Substring(3' 3)))                  ? SecurityType.Forex                  : SecurityType.Cfd;
Magic Number,QuantConnect.ToolBox.DukascopyDownloader,DukascopySymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopySymbolMapper.cs,GetBrokerageSecurityType,The following statement contains a magic number: return (brokerageSymbol.Length == 6 && KnownCurrencies.Contains(brokerageSymbol.Substring(0' 3)) && KnownCurrencies.Contains(brokerageSymbol.Substring(3' 3)))                  ? SecurityType.Forex                  : SecurityType.Cfd;
Magic Number,QuantConnect.ToolBox.DukascopyDownloader,DukascopySymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopySymbolMapper.cs,GetBrokerageSecurityType,The following statement contains a magic number: return (brokerageSymbol.Length == 6 && KnownCurrencies.Contains(brokerageSymbol.Substring(0' 3)) && KnownCurrencies.Contains(brokerageSymbol.Substring(3' 3)))                  ? SecurityType.Forex                  : SecurityType.Cfd;
Magic Number,QuantConnect.ToolBox.FxcmDownloader,FxcmDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\FxcmDownloader\FxcmDataDownloader.cs,Get,The following statement contains a magic number: progressBar(Math.Abs((end - endUtc).Ticks)' totalTicks' Console.WindowWidth / 2''█');
Magic Number,QuantConnect.ToolBox.FxcmDownloader,FxcmDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\FxcmDownloader\FxcmDataDownloader.cs,Get,The following statement contains a magic number: !autoResetEvent.WaitOne(1000 * 5)
Magic Number,QuantConnect.ToolBox.FxcmDownloader,FxcmDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\FxcmDownloader\FxcmDataDownloader.cs,Get,The following statement contains a magic number: !autoResetEvent.WaitOne(1000 * 5)
Magic Number,QuantConnect.ToolBox.FxcmDownloader,FxcmDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\FxcmDownloader\FxcmDataDownloader.cs,RequestTradingSessionStatus,The following statement contains a magic number: throw new TimeoutException("FxcmBrokerage.LoadInstruments(): Operation took " +                      $"longer than {((decimal) ResponseTimeout / 1000).ToStringInvariant()} seconds."                  );
Magic Number,QuantConnect.ToolBox.FxcmDownloader,FxcmDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\FxcmDownloader\FxcmDataDownloader.cs,progressBar,The following statement contains a magic number: Console.Write($"\r[{bar}] {(p * 100).ToStringInvariant("N2")}%");
Magic Number,QuantConnect.ToolBox.IQFeed,Level1Port,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,Level1Port,The following statement contains a magic number: _timer = new Timer(1000);
Magic Number,QuantConnect.ToolBox.IQFeed,Level1Port,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,Level1Port,The following statement contains a magic number: _timer.Elapsed += (sender' args) =>              {                  var ticksPerSecond = count / (DateTime.Now - start).TotalSeconds;                  if (ticksPerSecond > 1000 || _dataQueue.Count > 31)                  {                      Log.Trace($"IQFeed.OnSecond(): Ticks/sec: {ticksPerSecond.ToStringInvariant("0000.00")} " +                          $"Engine.Ticks.Count: {_dataQueue.Count} CPU%: {OS.CpuUsage.ToStringInvariant("0.0") + "%"}"                      );                  }                    count = 0;                  start = DateTime.Now;              };
Magic Number,QuantConnect.ToolBox.IQFeed,Level1Port,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,Level1Port,The following statement contains a magic number: _timer.Elapsed += (sender' args) =>              {                  var ticksPerSecond = count / (DateTime.Now - start).TotalSeconds;                  if (ticksPerSecond > 1000 || _dataQueue.Count > 31)                  {                      Log.Trace($"IQFeed.OnSecond(): Ticks/sec: {ticksPerSecond.ToStringInvariant("0000.00")} " +                          $"Engine.Ticks.Count: {_dataQueue.Count} CPU%: {OS.CpuUsage.ToStringInvariant("0.0") + "%"}"                      );                  }                    count = 0;                  start = DateTime.Now;              };
Magic Number,QuantConnect.ToolBox.IQFeed,Level1Port,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,OnLevel1FundamentalEvent,The following statement contains a magic number: e.SplitDate1.Date == DateTime.Today && DateTime.Now.TimeOfDay.TotalHours <= 8
Magic Number,QuantConnect.ToolBox.IQFeed,IQFeedDataQueueUniverseProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,LoadSymbols,The following statement contains a magic number: lineCounter % 100000 == 0
Magic Number,QuantConnect.ToolBox.IQFeed,SymbolData,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (SecurityCurrency != null ? SecurityCurrency.GetHashCode() : 0);
Magic Number,QuantConnect.ToolBox.IQFeed,SymbolData,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (SecurityExchange != null ? SecurityExchange.GetHashCode() : 0);
Magic Number,QuantConnect.ToolBox.IQFeed,SymbolData,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Symbol != null ? Symbol.GetHashCode() : 0);
Magic Number,QuantConnect.ToolBox.IQFeed,SymbolData,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ StartPosition.GetHashCode();
Magic Number,QuantConnect.ToolBox.IQFeed,SymbolData,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ EndPosition.GetHashCode();
Magic Number,QuantConnect.ToolBox.IQFeed,SymbolFundamentalData,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,Request,The following statement contains a magic number: const int timeout = 180;
Magic Number,QuantConnect.ToolBox.IQFeed,SymbolFundamentalData,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,Request,The following statement contains a magic number: !manualResetEvent.WaitOne(timeout * 1000)
Magic Number,QuantConnect.ToolBox.IQFeed,Time,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\DataStructures.cs,Time,The following statement contains a magic number: textTime.Length < 8
Magic Number,QuantConnect.ToolBox.IQFeed,Time,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\DataStructures.cs,Time,The following statement contains a magic number: !int.TryParse(textTime.Substring(0' 2)' out _hour)
Magic Number,QuantConnect.ToolBox.IQFeed,Time,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\DataStructures.cs,Time,The following statement contains a magic number: !int.TryParse(textTime.Substring(3' 2)' out _minute)
Magic Number,QuantConnect.ToolBox.IQFeed,Time,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\DataStructures.cs,Time,The following statement contains a magic number: !int.TryParse(textTime.Substring(3' 2)' out _minute)
Magic Number,QuantConnect.ToolBox.IQFeed,Time,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\DataStructures.cs,Time,The following statement contains a magic number: !int.TryParse(textTime.Substring(6' 2)' out _second)
Magic Number,QuantConnect.ToolBox.IQFeed,Time,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\DataStructures.cs,Time,The following statement contains a magic number: !int.TryParse(textTime.Substring(6' 2)' out _second)
Magic Number,QuantConnect.ToolBox.IQFeed,ClientStatsEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQAdminSocketClient.cs,ClientStatsEventArgs,The following statement contains a magic number: switch (fields[2])                  {                      case "0": _type = PortType.Admin; break;                      case "1": _type = PortType.Level1; break;                      case "2": _type = PortType.Level2; break;                      default: _type = PortType.Lookup; break;                  }
Magic Number,QuantConnect.ToolBox.IQFeed,ClientStatsEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQAdminSocketClient.cs,ClientStatsEventArgs,The following statement contains a magic number: !int.TryParse(fields[3]' out _clientId)
Magic Number,QuantConnect.ToolBox.IQFeed,ClientStatsEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQAdminSocketClient.cs,ClientStatsEventArgs,The following statement contains a magic number: _clientName = fields[4];
Magic Number,QuantConnect.ToolBox.IQFeed,ClientStatsEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQAdminSocketClient.cs,ClientStatsEventArgs,The following statement contains a magic number: !DateTime.TryParseExact(fields[5]' "yyyyMMdd HHmmss"' _enUS' DateTimeStyles.None' out _startTime)
Magic Number,QuantConnect.ToolBox.IQFeed,ClientStatsEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQAdminSocketClient.cs,ClientStatsEventArgs,The following statement contains a magic number: !int.TryParse(fields[6]' out _symbolsWatched)
Magic Number,QuantConnect.ToolBox.IQFeed,ClientStatsEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQAdminSocketClient.cs,ClientStatsEventArgs,The following statement contains a magic number: !int.TryParse(fields[7]' out _regionalSymbolsWatched)
Magic Number,QuantConnect.ToolBox.IQFeed,ClientStatsEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQAdminSocketClient.cs,ClientStatsEventArgs,The following statement contains a magic number: !double.TryParse(fields[8]' out _kbReceived)
Magic Number,QuantConnect.ToolBox.IQFeed,ClientStatsEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQAdminSocketClient.cs,ClientStatsEventArgs,The following statement contains a magic number: !double.TryParse(fields[9]' out _kbSent)
Magic Number,QuantConnect.ToolBox.IQFeed,ClientStatsEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQAdminSocketClient.cs,ClientStatsEventArgs,The following statement contains a magic number: !double.TryParse(fields[10]' out _kbQueued)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[3]' out _last)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[4]' out _change)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[5]' out _change)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !int.TryParse(fields[6]' out _totalVolume)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !int.TryParse(fields[7]' out _incrementalVolume)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[8]' out _high)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[9]' out _low)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[10]' out _bid)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[11]' out _ask)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !int.TryParse(fields[12]' out _bidSize)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !int.TryParse(fields[13]' out _askSize)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !int.TryParse(fields[14]' out _tick)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !int.TryParse(fields[15]' out _bidTick)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[16]' out _range)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !string.IsNullOrEmpty(fields[17])
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !int.TryParse(fields[18]' out _openInterest)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[19]' out _open)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[20]' out _close)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[21]' out _spread)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[23]' out _settle)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !int.TryParse(fields[24]' out _delay)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: fields[26] == "R"
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[27]' out _netAssetValue)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[28]' out _averageMaturity)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[29]' out _7DayYield)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[32]' out _extendedTradingLast)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !int.TryParse(fields[34]' out _regionalVolume)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[35]' out _netAssetValue2)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[36]' out _extendedTradingChange)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[37]' out _extendedTradingDifference)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[38]' out _priceEarningsRatio)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[39]' out _percentOffAverageVolume)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[40]' out _bidChange)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[41]' out _askChange)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[42]' out _changeFromOpen)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: fields[43] == "1"
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[44]' out _volatility)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[45]' out _marketCapitalization)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: _fractionDisplayCode = fields[46];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: _decimalPrecision = fields[47];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: _daysToExpiration = fields[48];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !int.TryParse(fields[49]' out _previousDayVolume)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[51]' out _openRange1)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[52]' out _closeRange1)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[53]' out _openRange2)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[54]' out _closeRange2)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !int.TryParse(fields[55]' out _numberOfTradesToday)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: _bidTime = new Time(fields[56]);
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: _askTime = new Time(fields[57]);
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !double.TryParse(fields[58]' out _vwap)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !int.TryParse(fields[59]' out _tickId)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: _financialStatusIndicator = fields[60];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !int.TryParse(fields[62]' out _tradeMarketCenter)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !int.TryParse(fields[63]' out _bidMarketCenter)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: !int.TryParse(fields[64]' out _askMarketCenter)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: _tradeTime = new Time(fields[65]);
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: _availableRegions = fields[66];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !double.TryParse(fields[3]' out _pe)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !int.TryParse(fields[4]' out _averageVolume)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !double.TryParse(fields[5]' out _high52Week)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !double.TryParse(fields[6]' out _low52Week)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !double.TryParse(fields[7]' out _calendarYearHigh)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !double.TryParse(fields[8]' out _calendarYearLow)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !double.TryParse(fields[9]' out _dividendYield)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !double.TryParse(fields[10]' out _dividendAmount)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !double.TryParse(fields[11]' out _dividendRate)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !DateTime.TryParseExact(fields[12]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _payDate)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !DateTime.TryParseExact(fields[13]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _exDividendDate)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !int.TryParse(fields[17]' out _shortInterest)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !double.TryParse(fields[19]' out _currentYearEarningsPerShare)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !double.TryParse(fields[20]' out _nextYearEarningsPerShare)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !double.TryParse(fields[21]' out _fiveYearGrowthPercentage)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !int.TryParse(fields[22]' out _fiscalYearEnd)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: _companyName = fields[24];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: _rootOptionSymbol = fields[25];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !double.TryParse(fields[26]' out _percentHeldByInstitutions)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !double.TryParse(fields[27]' out _beta)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: _leaps = fields[28];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !double.TryParse(fields[29]' out _currentAssets)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !double.TryParse(fields[30]' out _currentLiabilities)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !DateTime.TryParseExact(fields[31]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _balanceSheetDate)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !double.TryParse(fields[32]' out _longTermDebt)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !double.TryParse(fields[33]' out _commonSharesOutstanding)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: var splits = fields[35].Split(' ');
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: splits = fields[36].Split(' ');
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: _formatCode = fields[39];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !int.TryParse(fields[40]' out _precision)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: _sic = fields[41];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !double.TryParse(fields[42]' out _historicalVolatility)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: _securityType = fields[43];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: _listedMarket = fields[44];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !DateTime.TryParseExact(fields[45]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _date52WeekHigh)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !DateTime.TryParseExact(fields[46]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _date52WeekLow)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !DateTime.TryParseExact(fields[47]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _dateCalendarYearHigh)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !DateTime.TryParseExact(fields[48]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _dateCalendarYearLow)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !double.TryParse(fields[49]' out _yearEndClose)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !DateTime.TryParseExact(fields[50]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _maturityDate)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !double.TryParse(fields[51]' out _couponRate)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !DateTime.TryParseExact(fields[52]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _expirationDate)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: !double.TryParse(fields[53]' out _strikePrice)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: _naics = fields[54];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: _exchangeRoot = fields[55];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1NewsEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1NewsEventArgs,The following statement contains a magic number: _storyId = fields[2];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1NewsEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1NewsEventArgs,The following statement contains a magic number: _symbol = fields[3].Split(':');
Magic Number,QuantConnect.ToolBox.IQFeed,Level1NewsEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1NewsEventArgs,The following statement contains a magic number: !DateTime.TryParseExact(fields[4]' "yyyyMMdd HHmmss"' _enUS' DateTimeStyles.None' out _newsDateTime)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1NewsEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1NewsEventArgs,The following statement contains a magic number: _headline = fields[5];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1RegionalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1RegionalEventArgs,The following statement contains a magic number: !double.TryParse(fields[3]' out _regionalBid)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1RegionalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1RegionalEventArgs,The following statement contains a magic number: !int.TryParse(fields[4]' out _regionalBidSize)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1RegionalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1RegionalEventArgs,The following statement contains a magic number: _regionalBidTime = new Time(fields[5]);
Magic Number,QuantConnect.ToolBox.IQFeed,Level1RegionalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1RegionalEventArgs,The following statement contains a magic number: !double.TryParse(fields[6]' out _regionalAsk)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1RegionalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1RegionalEventArgs,The following statement contains a magic number: !int.TryParse(fields[7]' out _regionalAskSize)
Magic Number,QuantConnect.ToolBox.IQFeed,Level1RegionalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1RegionalEventArgs,The following statement contains a magic number: _regionalAskTime = new Time(fields[8]);
Magic Number,QuantConnect.ToolBox.IQFeed,Level1RegionalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1RegionalEventArgs,The following statement contains a magic number: _fractionDisplayCode = fields[9];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1RegionalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1RegionalEventArgs,The following statement contains a magic number: _decimalPrecision = fields[10];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1RegionalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1RegionalEventArgs,The following statement contains a magic number: _marketCenter = fields[11];
Magic Number,QuantConnect.ToolBox.IQFeed,LookupTickEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupTickEventArgs,The following statement contains a magic number: fields.Length < 11
Magic Number,QuantConnect.ToolBox.IQFeed,LookupTickEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupTickEventArgs,The following statement contains a magic number: !double.TryParse(fields[2]' out _last)
Magic Number,QuantConnect.ToolBox.IQFeed,LookupTickEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupTickEventArgs,The following statement contains a magic number: !int.TryParse(fields[3]' out _lastSize)
Magic Number,QuantConnect.ToolBox.IQFeed,LookupTickEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupTickEventArgs,The following statement contains a magic number: !int.TryParse(fields[4]' out _totalVolume)
Magic Number,QuantConnect.ToolBox.IQFeed,LookupTickEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupTickEventArgs,The following statement contains a magic number: !double.TryParse(fields[5]' out _bid)
Magic Number,QuantConnect.ToolBox.IQFeed,LookupTickEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupTickEventArgs,The following statement contains a magic number: !double.TryParse(fields[6]' out _ask)
Magic Number,QuantConnect.ToolBox.IQFeed,LookupTickEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupTickEventArgs,The following statement contains a magic number: !int.TryParse(fields[7]' out _tickId)
Magic Number,QuantConnect.ToolBox.IQFeed,LookupTickEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupTickEventArgs,The following statement contains a magic number: !char.TryParse(fields[10]' out _basis)
Magic Number,QuantConnect.ToolBox.IQFeed,LookupIntervalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupIntervalEventArgs,The following statement contains a magic number: fields.Length < 8
Magic Number,QuantConnect.ToolBox.IQFeed,LookupIntervalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupIntervalEventArgs,The following statement contains a magic number: !double.TryParse(fields[2]' out _high)
Magic Number,QuantConnect.ToolBox.IQFeed,LookupIntervalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupIntervalEventArgs,The following statement contains a magic number: !double.TryParse(fields[3]' out _low)
Magic Number,QuantConnect.ToolBox.IQFeed,LookupIntervalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupIntervalEventArgs,The following statement contains a magic number: !double.TryParse(fields[4]' out _open)
Magic Number,QuantConnect.ToolBox.IQFeed,LookupIntervalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupIntervalEventArgs,The following statement contains a magic number: !double.TryParse(fields[5]' out _close)
Magic Number,QuantConnect.ToolBox.IQFeed,LookupIntervalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupIntervalEventArgs,The following statement contains a magic number: !int.TryParse(fields[6]' out _totalVolume)
Magic Number,QuantConnect.ToolBox.IQFeed,LookupIntervalEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupIntervalEventArgs,The following statement contains a magic number: !int.TryParse(fields[7]' out _periodVolume)
Magic Number,QuantConnect.ToolBox.IQFeed,LookupDayWeekMonthEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupDayWeekMonthEventArgs,The following statement contains a magic number: fields.Length < 8
Magic Number,QuantConnect.ToolBox.IQFeed,LookupDayWeekMonthEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupDayWeekMonthEventArgs,The following statement contains a magic number: !double.TryParse(fields[2]' out _high)
Magic Number,QuantConnect.ToolBox.IQFeed,LookupDayWeekMonthEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupDayWeekMonthEventArgs,The following statement contains a magic number: !double.TryParse(fields[3]' out _low)
Magic Number,QuantConnect.ToolBox.IQFeed,LookupDayWeekMonthEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupDayWeekMonthEventArgs,The following statement contains a magic number: !double.TryParse(fields[4]' out _open)
Magic Number,QuantConnect.ToolBox.IQFeed,LookupDayWeekMonthEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupDayWeekMonthEventArgs,The following statement contains a magic number: !double.TryParse(fields[5]' out _close)
Magic Number,QuantConnect.ToolBox.IQFeed,LookupDayWeekMonthEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupDayWeekMonthEventArgs,The following statement contains a magic number: !int.TryParse(fields[6]' out _periodVolume)
Magic Number,QuantConnect.ToolBox.IQFeed,LookupDayWeekMonthEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupDayWeekMonthEventArgs,The following statement contains a magic number: !int.TryParse(fields[7]' out _openInterest)
Magic Number,QuantConnect.ToolBox.IQFeed,LookupSymbolEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupSymbolEventArgs,The following statement contains a magic number: fields.Length < 5
Magic Number,QuantConnect.ToolBox.IQFeed,LookupSymbolEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupSymbolEventArgs,The following statement contains a magic number: _marketId = fields[2];
Magic Number,QuantConnect.ToolBox.IQFeed,LookupSymbolEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupSymbolEventArgs,The following statement contains a magic number: _securityId = fields[3];
Magic Number,QuantConnect.ToolBox.IQFeed,LookupSicSymbolEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupSicSymbolEventArgs,The following statement contains a magic number: fields.Length < 6
Magic Number,QuantConnect.ToolBox.IQFeed,LookupSicSymbolEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupSicSymbolEventArgs,The following statement contains a magic number: _symbol = fields[2];
Magic Number,QuantConnect.ToolBox.IQFeed,LookupSicSymbolEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupSicSymbolEventArgs,The following statement contains a magic number: _marketId = fields[3];
Magic Number,QuantConnect.ToolBox.IQFeed,LookupSicSymbolEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupSicSymbolEventArgs,The following statement contains a magic number: _securityId = fields[4];
Magic Number,QuantConnect.ToolBox.IQFeed,LookupNaicSymbolEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupNaicSymbolEventArgs,The following statement contains a magic number: fields.Length < 6
Magic Number,QuantConnect.ToolBox.IQFeed,LookupNaicSymbolEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupNaicSymbolEventArgs,The following statement contains a magic number: _symbol = fields[2];
Magic Number,QuantConnect.ToolBox.IQFeed,LookupNaicSymbolEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupNaicSymbolEventArgs,The following statement contains a magic number: _marketId = fields[3];
Magic Number,QuantConnect.ToolBox.IQFeed,LookupNaicSymbolEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupNaicSymbolEventArgs,The following statement contains a magic number: _securityId = fields[4];
Magic Number,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,IQLookupHistorySymbolClient,The following statement contains a magic number: _histDataPointsPerSend = 500;
Magic Number,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,IQLookupHistorySymbolClient,The following statement contains a magic number: _timeMarketOpen = new Time(09' 30' 00);
Magic Number,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,IQLookupHistorySymbolClient,The following statement contains a magic number: _timeMarketOpen = new Time(09' 30' 00);
Magic Number,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,IQLookupHistorySymbolClient,The following statement contains a magic number: _timeMarketClose = new Time(16' 00' 00);
Magic Number,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,IQLookupHistorySymbolClient,The following statement contains a magic number: _histMaxDataPoints = 5000;
Magic Number,QuantConnect.ToolBox.IQFeed,LookupTableMarketEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupTableClient.cs,LookupTableMarketEventArgs,The following statement contains a magic number: _longName = fields[2];
Magic Number,QuantConnect.ToolBox.IQFeed,LookupTableMarketCenterEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupTableClient.cs,LookupTableMarketCenterEventArgs,The following statement contains a magic number: _marketOptionId = fields[2].Split(' ');
Magic Number,QuantConnect.ToolBox.IQFeed,LookupTableSecurityTypeEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupTableClient.cs,LookupTableSecurityTypeEventArgs,The following statement contains a magic number: _longName = fields[2];
Magic Number,QuantConnect.ToolBox.IQFeed,IQSocket,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,GetPort,The following statement contains a magic number: switch (portType)              {                  case PortType.Level1:                      port = 5009;                      break;                  case PortType.Lookup:                      port = 9100;                      break;                  case PortType.Level2:                      port = 9200;                      break;                  case PortType.Admin:                      port = 9300;                      break;              }
Magic Number,QuantConnect.ToolBox.IQFeed,IQSocket,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,GetPort,The following statement contains a magic number: switch (portType)              {                  case PortType.Level1:                      port = 5009;                      break;                  case PortType.Lookup:                      port = 9100;                      break;                  case PortType.Level2:                      port = 9200;                      break;                  case PortType.Admin:                      port = 9300;                      break;              }
Magic Number,QuantConnect.ToolBox.IQFeed,IQSocket,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,GetPort,The following statement contains a magic number: switch (portType)              {                  case PortType.Level1:                      port = 5009;                      break;                  case PortType.Lookup:                      port = 9100;                      break;                  case PortType.Level2:                      port = 9200;                      break;                  case PortType.Admin:                      port = 9300;                      break;              }
Magic Number,QuantConnect.ToolBox.IQFeed,IQSocket,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,GetPort,The following statement contains a magic number: switch (portType)              {                  case PortType.Level1:                      port = 5009;                      break;                  case PortType.Lookup:                      port = 9100;                      break;                  case PortType.Level2:                      port = 9200;                      break;                  case PortType.Admin:                      port = 9300;                      break;              }
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: _serverIp = fields[2];
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: !int.TryParse(fields[3]' out _serverPort)
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: !int.TryParse(fields[4]' out _maxSymbols)
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: !int.TryParse(fields[5]' out _numberOfSymbols)
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: !int.TryParse(fields[6]' out _clientsConnected)
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: !int.TryParse(fields[7]' out _secondsSinceLastUpdate)
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: !int.TryParse(fields[8]' out _reconnections)
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: !int.TryParse(fields[9]' out _attemptedReconnections)
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: !DateTime.TryParseExact(fields[10]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _startTime)
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: !DateTime.TryParseExact(fields[11]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _marketTime)
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: fields[12] == "Connected"
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: _iqFeedVersion = fields[13];
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: _loginId = fields[14];
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: !double.TryParse(fields[15]' out _totalKbsRecv)
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: !double.TryParse(fields[16]' out _kbsPerSecRecv)
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: !double.TryParse(fields[17]' out _avgKbsPerSecRecv)
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: !double.TryParse(fields[18]' out _totalKbsSent)
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: !double.TryParse(fields[19]' out _kbsPerSecSent)
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: !double.TryParse(fields[20]' out _avgKbsPerSecSent)
Magic Number,QuantConnect.ToolBox.KaikoDataConverter,KaikoDataConverterProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\KaikoDataConverter\KaikoDataConverterProgram.cs,KaikoDataConverter,The following statement contains a magic number: var tickType = nameParts[2] == "trades" ? TickType.Trade : TickType.Quote;
Magic Number,QuantConnect.ToolBox.KrakenDownloader,KrakenDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\KrakenDataDownloader\KrakenDataDownloader.cs,Get,The following statement contains a magic number: var startUnixTime = Convert.ToInt64(Time.DateTimeToUnixTimeStamp(startUtc) * 1000000000);
Magic Number,QuantConnect.ToolBox.KrakenDownloader,KrakenDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\KrakenDataDownloader\KrakenDataDownloader.cs,Get,The following statement contains a magic number: var endUnixTime = Convert.ToInt64(Time.DateTimeToUnixTimeStamp(endUtc) * 1000000000);
Magic Number,QuantConnect.ToolBox.KrakenDownloader,KrakenDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\KrakenDataDownloader\KrakenDataDownloader.cs,Get,The following statement contains a magic number: var rateGate = new RateGate(10' TimeSpan.FromMinutes(1));
Magic Number,QuantConnect.ToolBox.KrakenDownloader,KrakenDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\KrakenDataDownloader\KrakenDataDownloader.cs,Get,The following statement contains a magic number: var time = Time.UnixTimeStampToDateTime(Parse.Double(i[2].Split('.')[0]));
Magic Number,QuantConnect.ToolBox.KrakenDownloader,KrakenDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\KrakenDataDownloader\KrakenDataDownloader.cs,Get,The following statement contains a magic number: result.error.Count != 0 && errorCount < 10
Magic Number,QuantConnect.ToolBox.KrakenDownloader,KrakenDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\KrakenDataDownloader\KrakenDataDownloader.cs,Get,The following statement contains a magic number: result.error.Count != 0 && errorCount >= 10
Magic Number,QuantConnect.ToolBox.KrakenDownloader,KrakenDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\KrakenDataDownloader\KrakenDataDownloader.cs,Get,The following statement contains a magic number: var time = Time.UnixTimeStampToDateTime(Parse.Double(i[2].Split('.')[0]));
Magic Number,QuantConnect.ToolBox.NseMarketDataConverter,NseMarketDataConverterProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\NseMarketDataConverter\NseMarketDataConverterProgram.cs,NseMarketDataConverter,The following statement contains a magic number: var open = Parse.Decimal(linearray[2]);
Magic Number,QuantConnect.ToolBox.NseMarketDataConverter,NseMarketDataConverterProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\NseMarketDataConverter\NseMarketDataConverterProgram.cs,NseMarketDataConverter,The following statement contains a magic number: var high = Parse.Decimal(linearray[3]);
Magic Number,QuantConnect.ToolBox.NseMarketDataConverter,NseMarketDataConverterProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\NseMarketDataConverter\NseMarketDataConverterProgram.cs,NseMarketDataConverter,The following statement contains a magic number: var low = Parse.Decimal(linearray[4]);
Magic Number,QuantConnect.ToolBox.NseMarketDataConverter,NseMarketDataConverterProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\NseMarketDataConverter\NseMarketDataConverterProgram.cs,NseMarketDataConverter,The following statement contains a magic number: var close = Parse.Decimal(linearray[5]);
Magic Number,QuantConnect.ToolBox.NseMarketDataConverter,NseMarketDataConverterProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\NseMarketDataConverter\NseMarketDataConverterProgram.cs,NseMarketDataConverter,The following statement contains a magic number: var volume = linearray[6].LongCount();
Magic Number,QuantConnect.ToolBox.NseMarketDataConverter,NseMarketDataConverterProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\NseMarketDataConverter\NseMarketDataConverterProgram.cs,NseMarketDataConverter,The following statement contains a magic number: linearray.Length > 2
Magic Number,QuantConnect.ToolBox.OandaDownloader,OandaDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\OandaDownloader\OandaDataDownloader.cs,Get,The following statement contains a magic number: startDateTime = bars[bars.Count - 1].Time.AddSeconds(5);
Magic Number,QuantConnect.ToolBox.QuandlBitfinexDownloader,QuandlBitfinexDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\QuandlBitfinexDownloader\QuandlBitfinexDownloader.cs,Get,The following statement contains a magic number: line.Length != 8
Magic Number,QuantConnect.ToolBox.QuandlBitfinexDownloader,QuandlBitfinexDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\QuandlBitfinexDownloader\QuandlBitfinexDownloader.cs,Get,The following statement contains a magic number: var bar = new TradeBar                      {                          Time = Parse.DateTime(line[0])'                          Open = Parse.Decimal(line[1])'                          High = Parse.Decimal(line[2])'                          Low = Parse.Decimal(line[3])'                          Close = Parse.Decimal(line[4])'                          Value = Parse.Decimal(line[7])'                          Volume = (long) Parse.Decimal(line[5])'                          Symbol = symbol'                          DataType = MarketDataType.TradeBar'                          Period = Time.OneDay                      };
Magic Number,QuantConnect.ToolBox.QuandlBitfinexDownloader,QuandlBitfinexDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\QuandlBitfinexDownloader\QuandlBitfinexDownloader.cs,Get,The following statement contains a magic number: var bar = new TradeBar                      {                          Time = Parse.DateTime(line[0])'                          Open = Parse.Decimal(line[1])'                          High = Parse.Decimal(line[2])'                          Low = Parse.Decimal(line[3])'                          Close = Parse.Decimal(line[4])'                          Value = Parse.Decimal(line[7])'                          Volume = (long) Parse.Decimal(line[5])'                          Symbol = symbol'                          DataType = MarketDataType.TradeBar'                          Period = Time.OneDay                      };
Magic Number,QuantConnect.ToolBox.QuandlBitfinexDownloader,QuandlBitfinexDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\QuandlBitfinexDownloader\QuandlBitfinexDownloader.cs,Get,The following statement contains a magic number: var bar = new TradeBar                      {                          Time = Parse.DateTime(line[0])'                          Open = Parse.Decimal(line[1])'                          High = Parse.Decimal(line[2])'                          Low = Parse.Decimal(line[3])'                          Close = Parse.Decimal(line[4])'                          Value = Parse.Decimal(line[7])'                          Volume = (long) Parse.Decimal(line[5])'                          Symbol = symbol'                          DataType = MarketDataType.TradeBar'                          Period = Time.OneDay                      };
Magic Number,QuantConnect.ToolBox.QuandlBitfinexDownloader,QuandlBitfinexDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\QuandlBitfinexDownloader\QuandlBitfinexDownloader.cs,Get,The following statement contains a magic number: var bar = new TradeBar                      {                          Time = Parse.DateTime(line[0])'                          Open = Parse.Decimal(line[1])'                          High = Parse.Decimal(line[2])'                          Low = Parse.Decimal(line[3])'                          Close = Parse.Decimal(line[4])'                          Value = Parse.Decimal(line[7])'                          Volume = (long) Parse.Decimal(line[5])'                          Symbol = symbol'                          DataType = MarketDataType.TradeBar'                          Period = Time.OneDay                      };
Magic Number,QuantConnect.ToolBox.QuandlBitfinexDownloader,QuandlBitfinexDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\QuandlBitfinexDownloader\QuandlBitfinexDownloader.cs,Get,The following statement contains a magic number: var bar = new TradeBar                      {                          Time = Parse.DateTime(line[0])'                          Open = Parse.Decimal(line[1])'                          High = Parse.Decimal(line[2])'                          Low = Parse.Decimal(line[3])'                          Close = Parse.Decimal(line[4])'                          Value = Parse.Decimal(line[7])'                          Volume = (long) Parse.Decimal(line[5])'                          Symbol = symbol'                          DataType = MarketDataType.TradeBar'                          Period = Time.OneDay                      };
Magic Number,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsEarningsDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsEarningsDownloader.cs,TradingEconomicsEarningsDownloader,The following statement contains a magic number: _fromDate = new DateTime(1998' 1' 1);
Magic Number,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsIndicatorDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsIndicatorDownloader.cs,Run,The following statement contains a magic number: var availableFiles = Directory.GetFiles(_destinationFolder' "*.zip"' SearchOption.AllDirectories)                  .Select(                      x =>                      {                          try                          {                              return DateTime.ParseExact(Path.GetFileName(x).Substring(0' 8)' "yyyyMMdd"' CultureInfo.InvariantCulture);                          }                          catch                          {                              return DateTime.MinValue;                          }                      }                  )                  .Where(x => x != DateTime.MinValue)                  .ToHashSet();
Magic Number,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsDataDownloader.cs,HttpRequester,The following statement contains a magic number: retries <= 5
Magic Number,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsCalendarDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsCalendarDownloader.cs,TradingEconomicsCalendarDownloader,The following statement contains a magic number: _fromDate = new DateTime(2000' 10' 1);
Magic Number,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsCalendarDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsCalendarDownloader.cs,TradingEconomicsCalendarDownloader,The following statement contains a magic number: _fromDate = new DateTime(2000' 10' 1);
Magic Number,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsCalendarDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsCalendarDownloader.cs,Run,The following statement contains a magic number: var availableFiles = Directory.GetFiles(_destinationFolder' "*.zip"' SearchOption.AllDirectories)                  .Select(                      x =>                      {                          try                          {                              return Parse.DateTimeExact(Path.GetFileName(x).Substring(0' 8)' "yyyyMMdd");                          }                          catch                          {                              return DateTime.MinValue;                          }                      }                  )                  .Where(x => x != DateTime.MinValue)                  .ToHashSet();
Magic Number,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsCalendarDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsCalendarDownloader.cs,ParseDecimal,The following statement contains a magic number: return finalFigure / 100m;
Magic Number,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsCalendarDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsCalendarDownloader.cs,ParseDecimal,The following statement contains a magic number: return finalFigure * 1000000000000m;
Magic Number,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsCalendarDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsCalendarDownloader.cs,ParseDecimal,The following statement contains a magic number: return finalFigure * 1000000000m;
Magic Number,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsCalendarDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsCalendarDownloader.cs,ParseDecimal,The following statement contains a magic number: return finalFigure * 1000000m;
Magic Number,QuantConnect.ToolBox.TradingEconomicsDataDownloader,TradingEconomicsCalendarDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\TradingEconomicsDataDownloader\TradingEconomicsCalendarDownloader.cs,ParseDecimal,The following statement contains a magic number: return finalFigure * 1000m;
Magic Number,QuantConnect.ToolBox.YahooDownloader,Historical,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\YahooDownloader\Historical.cs,Parse,The following statement contains a magic number: var rows = csvData.Split(Convert.ToChar(10));
Magic Number,QuantConnect.ToolBox.YahooDownloader,Historical,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\YahooDownloader\Historical.cs,Parse,The following statement contains a magic number: var hp = new HistoryPrice                      {                          Date = QuantConnect.Parse.DateTime(cols[0])'                          Open = QuantConnect.Parse.Decimal(cols[1])'                          High = QuantConnect.Parse.Decimal(cols[2])'                          Low = QuantConnect.Parse.Decimal(cols[3])'                          Close = QuantConnect.Parse.Decimal(cols[4])'                          AdjClose = QuantConnect.Parse.Decimal(cols[5])                      };
Magic Number,QuantConnect.ToolBox.YahooDownloader,Historical,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\YahooDownloader\Historical.cs,Parse,The following statement contains a magic number: var hp = new HistoryPrice                      {                          Date = QuantConnect.Parse.DateTime(cols[0])'                          Open = QuantConnect.Parse.Decimal(cols[1])'                          High = QuantConnect.Parse.Decimal(cols[2])'                          Low = QuantConnect.Parse.Decimal(cols[3])'                          Close = QuantConnect.Parse.Decimal(cols[4])'                          AdjClose = QuantConnect.Parse.Decimal(cols[5])                      };
Magic Number,QuantConnect.ToolBox.YahooDownloader,Historical,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\YahooDownloader\Historical.cs,Parse,The following statement contains a magic number: var hp = new HistoryPrice                      {                          Date = QuantConnect.Parse.DateTime(cols[0])'                          Open = QuantConnect.Parse.Decimal(cols[1])'                          High = QuantConnect.Parse.Decimal(cols[2])'                          Low = QuantConnect.Parse.Decimal(cols[3])'                          Close = QuantConnect.Parse.Decimal(cols[4])'                          AdjClose = QuantConnect.Parse.Decimal(cols[5])                      };
Magic Number,QuantConnect.ToolBox.YahooDownloader,Historical,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\YahooDownloader\Historical.cs,Parse,The following statement contains a magic number: var hp = new HistoryPrice                      {                          Date = QuantConnect.Parse.DateTime(cols[0])'                          Open = QuantConnect.Parse.Decimal(cols[1])'                          High = QuantConnect.Parse.Decimal(cols[2])'                          Low = QuantConnect.Parse.Decimal(cols[3])'                          Close = QuantConnect.Parse.Decimal(cols[4])'                          AdjClose = QuantConnect.Parse.Decimal(cols[5])                      };
Magic Number,QuantConnect.ToolBox.YahooDownloader,Historical,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\YahooDownloader\Historical.cs,Parse,The following statement contains a magic number: hp.Volume = QuantConnect.Parse.Decimal(cols[6]);
Magic Number,QuantConnect.ToolBox.YahooDownloader,Historical,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\YahooDownloader\Historical.cs,Parse,The following statement contains a magic number: cols[6] != "null"
Magic Number,QuantConnect.ToolBox.YahooDownloader,Token,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\YahooDownloader\Token.cs,Refresh,The following statement contains a magic number: html.Length < 5000
Duplicate Code,QuantConnect.ToolBox.KrakenDownloader,KrakenDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\KrakenDataDownloader\KrakenDataDownloader.cs,Get,The method contains a code clone-set at the following line numbers (starting from the method definition): ((25' 53)' (73' 101))
Missing Default,QuantConnect.ToolBox,FxcmVolumeAuxiliaryMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeAuxiliaryMethods.cs,GetLastAvailableDateOfData,The following switch statement is missing a default case: switch (resolution)              {                  case Resolution.Daily:                  case Resolution.Hour:                      var expectedFilePath = Path.Combine(folderPath' $"{symbol.Value.ToLowerInvariant()}_volume.zip"                      );                      if (File.Exists(expectedFilePath))                      {                          var lastStrDate = ReadZipFileData(expectedFilePath).Last()     // last observation                                                                             .First()    // first string (date)                                                                             .Substring(startIndex: 0' length: 8);                          lastAvailableDate = DateTime.ParseExact(lastStrDate' DateFormat.EightCharacter' CultureInfo.InvariantCulture);                      }                      break;                  case Resolution.Minute:                      var lastFileDate = Directory                          .GetFiles(folderPath' "*_volume.zip")                          .OrderBy(f => f)                          .LastOrDefault();                      if (lastFileDate != null)                      {                          lastFileDate = Path.GetFileNameWithoutExtension(lastFileDate)                                             .Substring(startIndex: 0' length: 8);                          lastAvailableDate = DateTime.ParseExact(lastFileDate' DateFormat.EightCharacter' CultureInfo.InvariantCulture);                      }                      break;              }
Missing Default,QuantConnect.ToolBox,FxcmVolumeDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeDownloader.cs,RequestData,The following switch statement is missing a default case: switch (resolution)              {                  case Resolution.Minute:                  case Resolution.Hour:                      startDate = startUtc.ToStringInvariant("yyyyMMdd") + "0000";                      break;                    case Resolution.Daily:                      startDate = startUtc.AddDays(value: 1).ToStringInvariant("yyyyMMdd") + "2100";                      break;              }
Missing Default,QuantConnect.ToolBox,DataProcessor,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IDataProcessor.cs,CreateConsolidator,The following switch statement is missing a default case: switch (securityType)              {                  case SecurityType.Base:                  case SecurityType.Equity:                  case SecurityType.Cfd:                  case SecurityType.Forex:                      return new TickConsolidator(resolution.ToTimeSpan());                    case SecurityType.Option:                      if (tickType == TickType.Trade)                      {                          return sourceIsTick                              ? new TickConsolidator(resolution.ToTimeSpan())                              : (IDataConsolidator) new TradeBarConsolidator(resolution.ToTimeSpan());                      }                      if (tickType == TickType.Quote)                      {                          return sourceIsTick                              ? new TickQuoteBarConsolidator(resolution.ToTimeSpan())                              : (IDataConsolidator) new QuoteBarConsolidator(resolution.ToTimeSpan());                      }                      break;              }
Missing Default,QuantConnect.ToolBox,LeanDataWriter,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\LeanDataWriter.cs,Write,The following switch statement is missing a default case: switch (_resolution)              {                  case Resolution.Daily:                  case Resolution.Hour:                      WriteDailyOrHour(source);                      break;                    case Resolution.Minute:                  case Resolution.Second:                  case Resolution.Tick:                      WriteMinuteOrSecondOrTick(source);                      break;              }
Missing Default,QuantConnect.ToolBox,LeanParser,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\LeanParser.cs,GetDataType,The following switch statement is missing a default case: switch (securityType)              {                  case SecurityType.Base:                  case SecurityType.Equity:                      return typeof (TradeBar);                    case SecurityType.Cfd:                  case SecurityType.Forex:                  case SecurityType.Crypto:                      return typeof (QuoteBar);                    case SecurityType.Option:                      if (tickType == TickType.Trade) return typeof (TradeBar);                      if (tickType == TickType.Quote) return typeof (QuoteBar);                      break;              }
Missing Default,QuantConnect.ToolBox.IBDownloader,IBDownloaderProgram,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IBDownloader\IBDownloaderProgram.cs,IBDownloader,The following switch statement is missing a default case: switch (castResolution)                      {                          case Resolution.Daily:                              maxDays = 365;                              break;                          case Resolution.Hour:                              maxDays = 30;                              break;                          case Resolution.Minute:                              maxDays = 10;                              break;                      }
Missing Default,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesProcessor,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesProcessor.cs,AlgoSeekFuturesProcessor,The following switch statement is missing a default case: switch (tickType)                  {                      case TickType.Trade:                          _consolidator = new TickConsolidator(resolution.ToTimeSpan());                          break;                      case TickType.Quote:                          _consolidator = new TickQuoteBarConsolidator(resolution.ToTimeSpan());                          break;                      case TickType.OpenInterest:                          _consolidator = new OpenInterestConsolidator(resolution.ToTimeSpan());                          break;                  }
Missing Default,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesReader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesReader.cs,Parse,The following switch statement is missing a default case: switch (tickType)                  {                      case TickType.Quote:                            var tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = price                          };                            if (isAsk)                          {                              tick.AskPrice = price;                              tick.AskSize = quantity;                          }                          else                          {                              tick.BidPrice = price;                              tick.BidSize = quantity;                          }                          return tick;                        case TickType.Trade:                            tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = price'                              Quantity = quantity                          };                          return tick;                        case TickType.OpenInterest:                            tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = quantity                          };                          return tick;                  }
Missing Default,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsProcessor,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsProcessor.cs,AlgoSeekOptionsProcessor,The following switch statement is missing a default case: switch (tickType)              {                  case TickType.Trade:                      _consolidator = new TickConsolidator(resolution.ToTimeSpan());                      break;                  case TickType.Quote:                      _consolidator = new TickQuoteBarConsolidator(resolution.ToTimeSpan());                      break;                  case TickType.OpenInterest:                      _consolidator = new OpenInterestConsolidator(resolution.ToTimeSpan());                      break;              }
Missing Default,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsReader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsReader.cs,Parse,The following switch statement is missing a default case: switch (tickType)                  {                      case TickType.Quote:                            var tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = price                          };                            if (isAsk)                          {                              tick.AskPrice = price;                              tick.AskSize = quantity;                          }                          else                          {                              tick.BidPrice = price;                              tick.BidSize = quantity;                          }                            return tick;                        case TickType.Trade:                            tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = price'                              Quantity = quantity                          };                            return tick;                        case TickType.OpenInterest:                            tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = quantity                          };                            return tick;                  }
Missing Default,QuantConnect.ToolBox.DukascopyDownloader,DukascopyDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopyDataDownloader.cs,Get,The following switch statement is missing a default case: switch (resolution)                  {                      case Resolution.Tick:                          foreach (var tick in ticks)                          {                              yield return new Tick(tick.Time' symbol' tick.BidPrice' tick.AskPrice);                          }                          break;                        case Resolution.Second:                      case Resolution.Minute:                      case Resolution.Hour:                      case Resolution.Daily:                          foreach (var bar in AggregateTicks(symbol' ticks' resolution.ToTimeSpan()))                          {                              yield return bar;                          }                          break;                  }
Missing Default,QuantConnect.ToolBox.IQFeed,IQLookupTableClient,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupTableClient.cs,OnTextLineEvent,The following switch statement is missing a default case: switch (lute)              {                  case LookupType.REQ_TAB_MKC:                      OnLookupEvent(new LookupTableMarketCenterEventArgs(e.textLine));                      return;                  case LookupType.REQ_TAB_MKT:                      OnLookupEvent(new LookupTableMarketEventArgs(e.textLine));                      return;                  case LookupType.REQ_TAB_NAC:                      OnLookupEvent(new LookupTableNaicEventArgs(e.textLine));                      return;                  case LookupType.REQ_TAB_SEC:                      OnLookupEvent(new LookupTableSecurityTypeEventArgs(e.textLine));                      return;                  case LookupType.REQ_TAB_SIC:                      OnLookupEvent(new LookupTableSicEventArgs(e.textLine));                      return;              }
Missing Default,QuantConnect.ToolBox.IQFeed,IQSocket,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,GetPort,The following switch statement is missing a default case: switch (portType)              {                  case PortType.Level1:                      port = 5009;                      break;                  case PortType.Lookup:                      port = 9100;                      break;                  case PortType.Level2:                      port = 9200;                      break;                  case PortType.Admin:                      port = 9300;                      break;              }
Missing Default,QuantConnect.ToolBox.OandaDownloader,OandaDataDownloader,C:\research\architectureSmells\repos\QuantConnect_Lean\ToolBox\OandaDownloader\OandaDataDownloader.cs,Get,The following switch statement is missing a default case: switch (resolution)              {                  case Resolution.Second:                  case Resolution.Minute:                  case Resolution.Hour:                  case Resolution.Daily:                      foreach (var bar in AggregateBars(symbol' barsTotalInPeriod' resolution.ToTimeSpan()))                      {                          yield return bar;                      }                      break;              }
