Implementation smell,Namespace,Class,File,Method,Description
Long Method,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,Convert,The method has 105 lines of code.
Long Method,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesReader,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesReader.cs,Parse,The method has 131 lines of code.
Long Method,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsReader,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsReader.cs,Parse,The method has 125 lines of code.
Long Method,QuantConnect.ToolBox.CoarseUniverseGenerator,Program,C:\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\Program.cs,ProcessDailyFolder,The method has 132 lines of code.
Long Method,QuantConnect.ToolBox.IQFeed,IQFeedDataQueueUniverseProvider,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,LoadSymbols,The method has 158 lines of code.
Complex Method,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesReader,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesReader.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsReader,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsReader.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.ToolBox.CoarseUniverseGenerator,Program,C:\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\Program.cs,ProcessDailyFolder,Cyclomatic complexity of the method is 11
Complex Method,QuantConnect.ToolBox.FxcmVolumeDownload,Program,C:\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\Program.cs,Main,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.ToolBox.IQFeed,HistoryPort,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,ProcessHistoryRequests,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.ToolBox.IQFeed,IQFeedDataQueueUniverseProvider,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,LoadSymbols,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.ToolBox.IQFeed,IQAdminSocketClient,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQAdminSocketClient.cs,OnTextLineEvent,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,Cyclomatic complexity of the method is 54
Complex Method,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,Cyclomatic complexity of the method is 39
Complex Method,QuantConnect.ToolBox.IQFeed,IQLevel1Client,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,OnTextLineEvent,Cyclomatic complexity of the method is 12
Complex Method,QuantConnect.ToolBox.IQFeed,LookupTickEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupTickEventArgs,Cyclomatic complexity of the method is 10
Complex Method,QuantConnect.ToolBox.IQFeed,LookupIntervalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupIntervalEventArgs,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.ToolBox.IQFeed,LookupDayWeekMonthEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupDayWeekMonthEventArgs,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,OnTextLineEvent,Cyclomatic complexity of the method is 16
Complex Method,QuantConnect.ToolBox.NseMarketDataConverter,Program,C:\repos\QuantConnect_Lean\ToolBox\NseMarketDataConverter\Program.cs,Main,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.ToolBox.OandaDownloader,OandaDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\OandaDownloader\OandaDataDownloader.cs,Get,Cyclomatic complexity of the method is 13
Long Parameter List,QuantConnect.ToolBox,FxcmVolumeDownloader,C:\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeDownloader.cs,Run,The method has 5 parameters. Parameters: symbol' resolution' startUtc' endUtc' update
Long Parameter List,QuantConnect.ToolBox,DataProcessor,C:\repos\QuantConnect_Lean\ToolBox\IDataProcessor.cs,AddResolution,The method has 5 parameters. Parameters: dataDirectory' tickType' root' resolution' sourceIsTick
Long Parameter List,QuantConnect.ToolBox,LeanDataReader,C:\repos\QuantConnect_Lean\ToolBox\LeanDataReader.cs,LeanDataReader,The method has 5 parameters. Parameters: config' symbol' resolution' date' dataFolder
Long Parameter List,QuantConnect.ToolBox,RawFileProcessor,C:\repos\QuantConnect_Lean\ToolBox\RawFileProcessor.cs,Run,The method has 5 parameters. Parameters: name' sources' streamProvider' streamParser' processors
Long Parameter List,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,AlgoSeekFuturesConverter,The method has 6 parameters. Parameters: resolutions' referenceDate' remote' remoteMask' source' destination
Long Parameter List,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesProcessor,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesProcessor.cs,AlgoSeekFuturesProcessor,The method has 5 parameters. Parameters: symbol' date' tickType' resolution' dataDirectory
Long Parameter List,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,AlgoSeekOptionsConverter,The method has 6 parameters. Parameters: resolution' referenceDate' remote' remoteMask' source' destination
Long Parameter List,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,WriteToDisk,The method has 5 parameters. Parameters: processors' waitForFlush' peekTickTime' step' final
Long Parameter List,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsProcessor,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsProcessor.cs,AlgoSeekOptionsProcessor,The method has 5 parameters. Parameters: symbol' date' tickType' resolution' dataDirectory
Long Parameter List,QuantConnect.ToolBox.CoarseUniverseGenerator,Program,C:\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\Program.cs,ProcessDailyFolder,The method has 7 parameters. Parameters: dailyFolder' coarseFolder' mapFileResolver' exclusions' ignoreMapless' startDate' symbolResolver
Long Parameter List,QuantConnect.ToolBox.DukascopyDownloader,DukascopyDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopyDataDownloader.cs,AppendTicksToList,The method has 5 parameters. Parameters: symbol' bytesBi5' date' timeOffset' pointValue
Long Parameter List,QuantConnect.ToolBox.DukascopyDownloader,DukascopySymbolMapper,C:\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopySymbolMapper.cs,GetLeanSymbol,The method has 6 parameters. Parameters: brokerageSymbol' securityType' market' expirationDate' strike' optionRight
Long Parameter List,QuantConnect.ToolBox.IQFeed,IQFeedDataQueueHandler,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,Initialize,The method has 6 parameters. Parameters: job' dataProvider' dataCacheProvider' mapFileProvider' factorFileProvider' statusUpdate
Long Parameter List,QuantConnect.ToolBox.IQFeed,IQFeedDataQueueUniverseProvider,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,GetLeanSymbol,The method has 6 parameters. Parameters: ticker' securityType' market' expirationDate' strike' optionRight
Long Parameter List,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,RequestTickData,The method has 5 parameters. Parameters: symbol' days' oldToNew' timeStartInDay' timeEndInDay
Long Parameter List,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,RequestTickData,The method has 6 parameters. Parameters: symbol' start' end' oldToNew' timeStartInDay' timeEndInDay
Long Parameter List,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,RequestIntervalData,The method has 6 parameters. Parameters: symbol' interval' days' oldToNew' timeStartInDay' timeEndInDay
Long Parameter List,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,RequestIntervalData,The method has 7 parameters. Parameters: symbol' interval' start' end' oldToNew' timeStartInDay' timeEndInDay
Long Statement,QuantConnect.ToolBox.GDAXDownloader,GDAXDownloader,C:\repos\QuantConnect_Lean\ToolBox\GDAXDownloader\GDAXDownloader.cs,Get,The length of the statement  "                var requestURL = string.Format(HistoricCandlesUrl' symbol.Value' windowStartTime.ToString()' windowEndTime.ToString()' granularity); " is 132.
Long Statement,QuantConnect.ToolBox,FactorFileGenerator,C:\repos\QuantConnect_Lean\ToolBox\FactorFileGenerator.cs,CalculateNextDividendFactor,The length of the statement  "            var priceFactor = previousFactorFileRow.PriceFactor - (dividend.Value / ((previousClosingPrice.Close) * previousFactorFileRow.SplitFactor)); " is 140.
Long Statement,QuantConnect.ToolBox,FactorFileGenerator,C:\repos\QuantConnect_Lean\ToolBox\FactorFileGenerator.cs,CalculateNextDividendFactor,The length of the statement  "            return new FactorFileRow(previousClosingPrice.Time' priceFactor.RoundToSignificantDigits(7)' previousFactorFileRow.SplitFactor); " is 128.
Long Statement,QuantConnect.ToolBox,FxcmVolumeWriter,C:\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeWriter.cs,Write,The length of the statement  "            // Seems the data has some duplicate values! This makes the writer throws an error. So' just in case' we clean the data from duplicates. " is 136.
Long Statement,QuantConnect.ToolBox,DataProcessor,C:\repos\QuantConnect_Lean\ToolBox\IDataProcessor.cs,AddResolution,The length of the statement  "            var aggregator = new ConsolidatorDataProcessor(secondRoot' data => CreateConsolidator(resolution' tickType' data' sourceIsTick)); " is 129.
Long Statement,QuantConnect.ToolBox,LeanDataWriter,C:\repos\QuantConnect_Lean\ToolBox\LeanDataWriter.cs,WriteDailyOrHour,The length of the statement  "            var newRows = new SortedDictionary<DateTime' string>(source.ToDictionary(x => x.Time' x => LeanData.GenerateLine(x' _securityType' _resolution))); " is 146.
Long Statement,QuantConnect.ToolBox,LeanDataWriter,C:\repos\QuantConnect_Lean\ToolBox\LeanDataWriter.cs,LoadHourlyOrDailyFile,The length of the statement  "                            var time = DateTime.ParseExact(line.Substring(0' DateFormat.TwelveCharacter.Length)' DateFormat.TwelveCharacter' CultureInfo.InvariantCulture); " is 143.
Long Statement,QuantConnect.ToolBox,LeanDataWriter,C:\repos\QuantConnect_Lean\ToolBox\LeanDataWriter.cs,WriteFile,The length of the statement  "            Compression.Zip(data' tempFilePath' LeanData.GenerateZipEntryName(_symbol.Value' _securityType' date' _resolution' _dataType)); " is 127.
Long Statement,QuantConnect.ToolBox,LeanParser,C:\repos\QuantConnect_Lean\ToolBox\LeanParser.cs,Parse,The length of the statement  "            var config = new SubscriptionDataConfig(dataType' pathComponents.Symbol' pathComponents.Resolution' TimeZones.Utc' TimeZones.Utc' false' true' false); " is 150.
Long Statement,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,Convert,The length of the statement  "            Log.Trace("AlgoSeekFuturesConverter.Convert(): Loading {0} AlgoSeekFuturesReader for {1} "' files.Count()' _referenceDate); " is 123.
Long Statement,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,Convert,The length of the statement  "                                            { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Trade' x' _destination)).ToList() }' " is 130.
Long Statement,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,Convert,The length of the statement  "                                            { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Quote' x' _destination)).ToList() }' " is 130.
Long Statement,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,Convert,The length of the statement  "                                            { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' x' _destination)).ToList() } " is 136.
Long Statement,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,Convert,The length of the statement  "                                Log.Trace("AlgoSeekFuturesConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%' Processor per symbol {4}"' Math.Round(totalLinesProcessed / 1000000m' 2)' Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)' Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)' 100 * totalFilesProcessed / totalFiles' pro / symbols); " is 395.
Long Statement,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesReader,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesReader.cs,Parse,The length of the statement  "                var expirationYearMonth = new DateTime(expirationYear' expirationMonth' DateTime.DaysInMonth(expirationYear' expirationMonth)); " is 127.
Long Statement,QuantConnect.ToolBox.AlgoSeekFuturesConverter,Program,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\Program.cs,Main,The length of the statement  "            var converter = new AlgoSeekFuturesConverter(resolutionList.ToList() ' referenceDate' remoteDirectory' remoteMask' sourceDirectory' dataDirectory); " is 147.
Long Statement,QuantConnect.ToolBox.AlgoSeekFuturesConverter,Program,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\Program.cs,Main,The length of the statement  "            Log.Trace(string.Format("AlgoSeekFuturesConverter.Main(): {0} Conversion finished in time: {1}"' referenceDate' timer.Elapsed)); " is 128.
Long Statement,QuantConnect.ToolBox.AlgoSeekFuturesConverter,Program,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\Program.cs,Main,The length of the statement  "            Log.Trace(string.Format("AlgoSeekFuturesConverter.Main(): {0} Compression finished in time: {1}"' referenceDate' timer.Elapsed)); " is 129.
Long Statement,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,Convert,The length of the statement  "            Log.Trace("AlgoSeekOptionsConverter.Convert(): Loading {0} AlgoSeekOptionsReader for {1} "' files.Count()' _referenceDate); " is 123.
Long Statement,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,Convert,The length of the statement  "                            Log.Trace("AlgoSeekOptionsConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%"' Math.Round(totalLinesProcessed / 1000000m' 2)' Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)' Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)' 100 * totalFilesProcessed / totalFiles); " is 354.
Long Statement,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,WriteToDisk,The length of the statement  "                        var groups = processors.Values.Select(x => x[(int)tickType]).Where(x => x.Queue.Count > 0).GroupBy(process => process.Symbol.Underlying.Value); " is 143.
Long Statement,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,Clean,The length of the statement  "            Log.Trace("AlgoSeekOptionsConverter.Clean(): cleaning all zip and csv files for {0} before start..."' date.ToShortDateString()); " is 128.
Long Statement,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsProcessor,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsProcessor.cs,Safe,The length of the statement  "                    symbol = Symbol.CreateOption(SafeName(symbol.Underlying.Value)' Market.USA' OptionStyle.American' symbol.ID.OptionRight' symbol.ID.StrikePrice' symbol.ID.Date); " is 160.
Long Statement,QuantConnect.ToolBox.AlgoSeekOptionsConverter,Program,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\Program.cs,Main,The length of the statement  "            var converter = new AlgoSeekOptionsConverter(Resolution.Minute' referenceDate' remoteDirectory' remoteMask' sourceDirectory' dataDirectory); " is 140.
Long Statement,QuantConnect.ToolBox.AlgoSeekOptionsConverter,Program,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\Program.cs,Main,The length of the statement  "            Log.Trace(string.Format("AlgoSeekOptionConverter.Main(): {0} Cleaning finished in time: {1}"' referenceDate' timer.Elapsed)); " is 125.
Long Statement,QuantConnect.ToolBox.AlgoSeekOptionsConverter,Program,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\Program.cs,Main,The length of the statement  "            Log.Trace(string.Format("AlgoSeekOptionConverter.Main(): {0} Conversion finished in time: {1}"' referenceDate' timer.Elapsed)); " is 127.
Long Statement,QuantConnect.ToolBox.AlgoSeekOptionsConverter,Program,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\Program.cs,Main,The length of the statement  "            Log.Trace(string.Format("AlgoSeekOptionConverter.Main(): {0} Compression finished in time: {1}"' referenceDate' timer.Elapsed)); " is 128.
Long Statement,QuantConnect.ToolBox.CoarseUniverseGenerator,Program,C:\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\Program.cs,Main,The length of the statement  "            // Typically these are nothing symbols (NASDAQ test symbols' or symbols listed for a few days who aren't actually ever traded). " is 127.
Long Statement,QuantConnect.ToolBox.CoarseUniverseGenerator,Program,C:\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\Program.cs,ProcessEquityDirectories,The length of the statement  "                ProcessDailyFolder(dailyFolder' coarseFolder' MapFileResolver.Create(mapFileFolder)' exclusions' ignoreMaplessSymbols' lastProcessedDate); " is 138.
Long Statement,QuantConnect.ToolBox.CoarseUniverseGenerator,Program,C:\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\Program.cs,ProcessDailyFolder,The length of the statement  "                        var firstFineSymbolFileName = Directory.Exists(fineSymbolFolder) ? Directory.GetFiles(fineSymbolFolder).OrderBy(x => x).FirstOrDefault() : string.Empty; " is 152.
Long Statement,QuantConnect.ToolBox.CoarseUniverseGenerator,Program,C:\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\Program.cs,ProcessDailyFolder,The length of the statement  "                            firstFineSymbolDate = DateTime.ParseExact(Path.GetFileNameWithoutExtension(firstFineSymbolFileName)' "yyyyMMdd"' CultureInfo.InvariantCulture); " is 143.
Long Statement,QuantConnect.ToolBox.CoarseUniverseGenerator,Program,C:\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\Program.cs,ProcessDailyFolder,The length of the statement  "                                Log.Error(string.Format("CoarseGenerator.ProcessDailyFolder(): Unable to resolve map file for {0} as of {1}"' symbol' date.ToShortDateString())); " is 145.
Long Statement,QuantConnect.ToolBox.CoarseUniverseGenerator,Program,C:\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\Program.cs,ProcessDailyFolder,The length of the statement  "                            var coarseFileLine = sid + "'" + symbol + "'" + close + "'" + volume + "'" + Math.Truncate(dollarVolume) + "'" + hasFundamentalDataForDate; " is 139.
Long Statement,QuantConnect.ToolBox.CoarseUniverseGenerator,Program,C:\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\Program.cs,ProcessDailyFolder,The length of the statement  "                        Log.Trace("CoarseGenerator.ProcessDailyFolder(): Completed processing {0} symbols. Current elapsed: {1} seconds"' symbols' (DateTime.UtcNow - start).TotalSeconds.ToString("0.00")); " is 180.
Long Statement,QuantConnect.ToolBox.CoarseUniverseGenerator,Program,C:\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\Program.cs,ProcessDailyFolder,The length of the statement  "            Log.Trace("CoarseGenerator.ProcessDailyFolder(): Processed {0} symbols into {1} coarse files in {2} seconds"' symbols' dates.Count' (stop - start).TotalSeconds.ToString("0.00")); " is 178.
Long Statement,QuantConnect.ToolBox.DukascopyDownloader,DukascopySymbolMapper,C:\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopySymbolMapper.cs,GetLeanSymbol,The length of the statement  "            return Symbol.Create(ConvertDukascopySymbolToLeanSymbol(brokerageSymbol)' GetBrokerageSecurityType(brokerageSymbol)' Market.Dukascopy); " is 135.
Long Statement,QuantConnect.ToolBox.DukascopyDownloader,DukascopySymbolMapper,C:\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopySymbolMapper.cs,GetBrokerageSecurityType,The length of the statement  "            return (brokerageSymbol.Length == 6 && KnownCurrencies.Contains(brokerageSymbol.Substring(0' 3)) && KnownCurrencies.Contains(brokerageSymbol.Substring(3' 3))) " is 158.
Long Statement,QuantConnect.ToolBox.DukascopyDownloader,DukascopySymbolMapper,C:\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopySymbolMapper.cs,IsKnownLeanSymbol,The length of the statement  "            return MapDukascopyToLean.ContainsKey(dukascopySymbol) && GetBrokerageSecurityType(dukascopySymbol) == symbol.ID.SecurityType; " is 126.
Long Statement,QuantConnect.ToolBox.FxcmVolumeDownload,Program,C:\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\Program.cs,Main,The length of the statement  "                Log.LogHandler = new CompositeLogHandler(new ConsoleLogHandler()' new FileLogHandler("FxcmFxVolumeDownloader.log"' useTimestampPrefix: false)); " is 143.
Long Statement,QuantConnect.ToolBox.FxcmDownloader,FxcmDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\FxcmDownloader\FxcmDataDownloader.cs,Get,The length of the statement  "            Console.WriteLine("Downloading {0} data from {1} to {2}..."' resolution' startUtc.ToString("yyyyMMdd HH:mm:ss")' endUtc.ToString("yyyyMMdd HH:mm:ss")); " is 151.
Long Statement,QuantConnect.ToolBox.FxcmDownloader,FxcmDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\FxcmDownloader\FxcmDataDownloader.cs,RequestTradingSessionStatus,The length of the statement  "                throw new TimeoutException(string.Format("FxcmBrokerage.LoadInstruments(): Operation took longer than {0} seconds."' (decimal)ResponseTimeout / 1000)); " is 151.
Long Statement,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetDaily,The length of the statement  "                yield return new TradeBar(time' symbol' (Decimal)ohlc[0]' (Decimal)ohlc[1]' (Decimal)ohlc[2]' (Decimal)ohlc[3]' volume' resolution.ToTimeSpan()); " is 145.
Long Statement,QuantConnect.ToolBox.IEX,IEXDataQueueHandler,C:\repos\QuantConnect_Lean\ToolBox\IEX\IEXDataQueueHandler.cs,ProcessJsonObject,The length of the statement  "                        Log.Trace("IEXDataQueueHandler.ProcessJsonObject(): Received unexpected symbol '" + symbolString + "' from IEX in IEXDataQueueHandler"); " is 136.
Long Statement,QuantConnect.ToolBox.IQFeed,Level1Port,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,OnLevel1FundamentalEvent,The length of the statement  "                if (e.SplitDate1.Date == DateTime.Today && DateTime.Now.TimeOfDay.TotalHours <= 8) // they will always be sent premarket " is 120.
Long Statement,QuantConnect.ToolBox.IQFeed,Level1Port,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,OnLevel1SummaryUpdateEvent,The length of the statement  "                var last = (decimal)(e.TypeOfUpdate == Level1SummaryUpdateEventArgs.UpdateType.ExtendedTrade ? e.ExtendedTradingLast : e.Last); " is 127.
Long Statement,QuantConnect.ToolBox.IQFeed,Level1Port,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,OnLevel1TimerEvent,The length of the statement  "                //If there was a bad tick and the time didn't set right' skip setting it here and just use our millisecond timer to set the time from last time it was set. " is 155.
Long Statement,QuantConnect.ToolBox.IQFeed,HistoryPort,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,ProcessHistoryRequests,The length of the statement  "                Log.Trace(string.Format("HistoryPort.ProcessHistoryJob(): Submitting request: {0}-{1}: {2} {3}->{4}"' request.Symbol.SecurityType' ticker' request.Resolution' start' end ?? DateTime.UtcNow.AddMinutes(-1))); " is 206.
Long Statement,QuantConnect.ToolBox.IQFeed,HistoryPort,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,GetData,The length of the statement  "                            return new TradeBar(istartTime' requestData.Symbol' (decimal)i.Open' (decimal)i.High' (decimal)i.Low' (decimal)i.Close' i.PeriodVolume); " is 136.
Long Statement,QuantConnect.ToolBox.IQFeed,HistoryPort,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,GetData,The length of the statement  "                            return new TradeBar(dstartTime' requestData.Symbol' (decimal)d.Open' (decimal)d.High' (decimal)d.Low' (decimal)d.Close' d.PeriodVolume' requestData.Resolution.ToTimeSpan()); " is 173.
Long Statement,QuantConnect.ToolBox.IQFeed,IQFeedDataQueueUniverseProvider,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,LookupSymbols,The length of the statement  "                // if we found some data that was loaded on demand' then we have to re-run the query to include that data into method output " is 124.
Long Statement,QuantConnect.ToolBox.IQFeed,IQFeedDataQueueUniverseProvider,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,LoadSymbols,The length of the statement  "            // we try to check if we already downloaded the file and it is in cache. If yes' we use it. Otherwise' download new file.  " is 121.
Long Statement,QuantConnect.ToolBox.IQFeed,IQFeedDataQueueUniverseProvider,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,LoadSymbols,The length of the statement  "            var dayOfWeek = DateTimeFormatInfo.CurrentInfo.Calendar.GetWeekOfYear(DateTime.Today' CalendarWeekRule.FirstDay' DayOfWeek.Monday); " is 131.
Long Statement,QuantConnect.ToolBox.IQFeed,IQFeedDataQueueUniverseProvider,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,LoadSymbols,The length of the statement  "                    Log.Trace("Discrepancy found while parsing IQFeed symbol universe file. Expected 8 columns' but arrived {0}. Line: {1}"' columns.Length' line); " is 143.
Long Statement,QuantConnect.ToolBox.IQFeed,IQFeedDataQueueUniverseProvider,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,LoadSymbols,The length of the statement  "                        var market = _futuresExchanges.ContainsKey(columns[columnExchange]) ? _futuresExchanges[columns[columnExchange]] : Market.USA; " is 126.
Long Statement,QuantConnect.ToolBox.IQFeed,IQFeedDataQueueUniverseProvider,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,LoadSymbolOnDemand,The length of the statement  "            var dayOfWeek = DateTimeFormatInfo.CurrentInfo.Calendar.GetWeekOfYear(DateTime.Today' CalendarWeekRule.FirstDay' DayOfWeek.Monday); " is 131.
Long Statement,QuantConnect.ToolBox.IQFeed,IQConnect,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQConnect.cs,getPath,The length of the statement  "                // if it isn't in that location' it is possible the user is running and x64 OS.  Check the windows virtualized registry location " is 128.
Long Statement,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,RequestTickData,The length of the statement  "            var reqString = string.Format("HTX'{0}'{1}'{2}'{3}'{4}\r\n"' symbol' dataPoints.ToString("0000000")' oldToNew ? "1" : "0"' " is 122.
Long Statement,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,RequestTickData,The length of the statement  "            var reqString = string.Format("HTD'{0}'{1}'{2}'{3}'{4}'{5}'{6}'{7}\r\n"' symbol' days.ToString("0000000")' _histMaxDataPoints.ToString("0000000")' " is 146.
Long Statement,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,RequestTickData,The length of the statement  "                timeStartInDay.IQFeedFormat' timeEndInDay.IQFeedFormat' oldToNew ? "1" : "0"' reqNo' _histDataPointsPerSend.ToString("0000000")); " is 129.
Long Statement,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,RequestTickData,The length of the statement  "                timeStartInDay == null ? "" : timeStartInDay.IQFeedFormat' timeEndInDay == null ? "" : timeEndInDay.IQFeedFormat' oldToNew ? "1" : "0"' reqNo' _histDataPointsPerSend.ToString("0000000")); " is 187.
Long Statement,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,RequestIntervalData,The length of the statement  "            var reqString = string.Format("HID'{0}'{1}'{2}'{3}'{4}'{5}'{6}'{7}'{8}\r\n"' symbol' interval.Seconds.ToString("0000000")' " is 122.
Long Statement,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,RequestIntervalData,The length of the statement  "                days.ToString("0000000")' _histMaxDataPoints.ToString("0000000")' timeStartInDay.IQFeedFormat' timeEndInDay.IQFeedFormat' " is 121.
Long Statement,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,RequestIntervalData,The length of the statement  "            var reqString = string.Format("HIT'{0}'{1}'{2}'{3}'{4}'{5}'{6}'{7}'{8}'{9}\r\n"' symbol' interval.Seconds.ToString("0000000")' " is 126.
Long Statement,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,RequestIntervalData,The length of the statement  "                ""' timeStartInDay == null ? "" : timeStartInDay.IQFeedFormat' timeEndInDay == null ? "" : timeEndInDay.IQFeedFormat'  oldToNew ? "1" : "0"' " is 140.
Long Statement,QuantConnect.ToolBox.IQFeed,Status,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The length of the statement  "                if (!DateTime.TryParseExact(fields[10]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue; " is 136.
Long Statement,QuantConnect.ToolBox.IQFeed,Status,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The length of the statement  "                if (!DateTime.TryParseExact(fields[11]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _marketTime)) _marketTime = DateTime.MinValue; " is 138.
Long Statement,QuantConnect.ToolBox.IQFeed,SocketClient,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\SocketClient.cs,ConnectToSocketAndBeginReceive,The length of the statement  "                throw new Exception("Error in connecting to socket and starting receive: " + ex.Message + " " + _endPoint.Address +":"+ _endPoint.Port + " >>>> " + ex.StackTrace' ex); " is 167.
Long Statement,QuantConnect.ToolBox.KaikoDataConverter,Program,C:\repos\QuantConnect_Lean\ToolBox\KaikoDataConverter\Program.cs,Main,The length of the statement  "                throw new ArgumentException("The arguments must be specified as [market] [tickType (quote/trade)] [kaiko raw data directory path]"); " is 132.
Long Statement,QuantConnect.ToolBox.KrakenDownloader,KrakenDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\KrakenDataDownloader\KrakenDataDownloader.cs,Get,The length of the statement  "            var startUnixTime = Convert.ToInt64(Time.DateTimeToUnixTimeStamp(startUtc) * 1000000000); // Multiply by 10^9 per Kraken API " is 124.
Long Statement,QuantConnect.ToolBox.NseMarketDataConverter,Program,C:\repos\QuantConnect_Lean\ToolBox\NseMarketDataConverter\Program.cs,Main,The length of the statement  "            Console.WriteLine("The NseMarketData converter transforms NseMarketData orders into the LEAN Algorithmic Trading Engine Data Format."); " is 135.
Long Statement,QuantConnect.ToolBox.OandaDownloader,OandaDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\OandaDownloader\OandaDataDownloader.cs,Get,The length of the statement  "                var bars = _brokerage.DownloadQuoteBars(symbol' startDateTime' endUtc.AddDays(1)' Resolution.Second' DateTimeZone.Utc).ToList(); " is 128.
Long Statement,QuantConnect.ToolBox.QuandlBitfinexDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\QuandlBitfinexDownloader\Program.cs,Main,The length of the statement  "                var data = downloader.Get(symbol' Resolution.Daily' DateTime.ParseExact(args[0]' "yyyyMMdd"' CultureInfo.CurrentCulture)' DateTime.UtcNow); " is 139.
Long Statement,QuantConnect.ToolBox.QuandlBitfinexDownloader,QuandlBitfinexDownloader,C:\repos\QuantConnect_Lean\ToolBox\QuandlBitfinexDownloader\QuandlBitfinexDownloader.cs,Get,The length of the statement  "            var url = "https://www.quandl.com/api/v3/datasets/BCHARTS/BITFINEXUSD.csv?order=asc&collapse=" + collapse + "&api_key=" + _apiKey + "&start_date=" " is 146.
Long Statement,QuantConnect.ToolBox.QuantQuoteConverter,Program,C:\repos\QuantConnect_Lean\ToolBox\QuantQuoteConverter\Program.cs,Main,The length of the statement  "            Console.WriteLine("The QuantQuote converter transforms QuantQuote orders into the LEAN Algorithmic Trading Engine Data Format."); " is 129.
Long Statement,QuantConnect.ToolBox.QuantQuoteConverter,Program,C:\repos\QuantConnect_Lean\ToolBox\QuantQuoteConverter\Program.cs,Main,The length of the statement  "                    var data = new Dictionary<string' string> { { string.Format("{0}_{1}_Trade_Second.csv"' date.ToString("yyyyMMdd")' symbol)' fileContents } }; " is 141.
Long Statement,QuantConnect.ToolBox.QuantQuoteConverter,Program,C:\repos\QuantConnect_Lean\ToolBox\QuantQuoteConverter\Program.cs,Main,The length of the statement  "                    var fileDestination = string.Format("{0}/equity/{1}/{2}/{3}_trade.zip"'  destinationDirectory' resolution' symbol' date.ToString("yyyyMMdd")); " is 142.
Long Statement,QuantConnect.ToolBox.YahooDownloader,Historical,C:\repos\QuantConnect_Lean\ToolBox\YahooDownloader\Historical.cs,GetRaw,The length of the statement  "                var url = "https://query1.finance.yahoo.com/v7/finance/download/{0}?period1={1}&period2={2}&interval=1d&events={3}&crumb={4}"; " is 126.
Long Statement,QuantConnect.ToolBox.YahooDownloader,Historical,C:\repos\QuantConnect_Lean\ToolBox\YahooDownloader\Historical.cs,GetRaw,The length of the statement  "                url = string.Format(url' symbol' Math.Round(Time.DateTimeToUnixTimeStamp(start)' 0)' Math.Round(Time.DateTimeToUnixTimeStamp(end)' 0)' eventCode' Token.Crumb); " is 159.
Long Statement,QuantConnect.ToolBox.YahooDownloader,YahooDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\YahooDownloader\YahooDataDownloader.cs,GetEnumerator,The length of the statement  "                yield return new TradeBar(item.Date' symbol' item.Open' item.High' item.Low' item.Close' (long)item.Volume' TimeSpan.FromDays(1)); " is 130.
Long Statement,QuantConnect.ToolBox.YahooDownloader,YahooDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\YahooDownloader\YahooDataDownloader.cs,DownloadSplitAndDividendData,The length of the statement  "                            Time = DateTime.ParseExact(values[0].Replace("-"' String.Empty)' DateFormat.EightCharacter' CultureInfo.InvariantCulture)' " is 122.
Long Statement,QuantConnect.ToolBox.YahooDownloader,YahooDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\YahooDownloader\YahooDataDownloader.cs,DownloadSplitAndDividendData,The length of the statement  "                            Time = DateTime.ParseExact(values[0].Replace("-"' String.Empty)' DateFormat.EightCharacter' CultureInfo.InvariantCulture)' " is 122.
Complex Conditional,QuantConnect.ToolBox,LeanDataWriter,C:\repos\QuantConnect_Lean\ToolBox\LeanDataWriter.cs,LeanDataWriter,The conditional expression  "_securityType != SecurityType.Equity && _securityType != SecurityType.Forex && _securityType != SecurityType.Cfd && _securityType != SecurityType.Crypto"  is complex.
Complex Conditional,QuantConnect.ToolBox.IQFeed,Level1Port,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,OnLevel1SummaryUpdateEvent,The conditional expression  "e.TypeOfUpdate != Level1SummaryUpdateEventArgs.UpdateType.ExtendedTrade                   && e.TypeOfUpdate != Level1SummaryUpdateEventArgs.UpdateType.Trade                   && e.TypeOfUpdate != Level1SummaryUpdateEventArgs.UpdateType.Bid                   && e.TypeOfUpdate != Level1SummaryUpdateEventArgs.UpdateType.Ask"  is complex.
Complex Conditional,QuantConnect.ToolBox.IQFeed,HistoryPort,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,ProcessHistoryRequests,The conditional expression  "!CanHandle(request.Symbol) ||                      (request.Symbol.ID.SecurityType == SecurityType.Option && request.Symbol.IsCanonical()) ||                      (request.Symbol.ID.SecurityType == SecurityType.Future && request.Symbol.IsCanonical())"  is complex.
Magic Number,QuantConnect.ToolBox.GDAXDownloader,GDAXDownloader,C:\repos\QuantConnect_Lean\ToolBox\GDAXDownloader\GDAXDownloader.cs,GetWithRetry,The following statement contains a magic number: while (data == string.Empty)              {                  try                  {                      Thread.Sleep(1000 / MaxRequestsPerSecond + 1);                      var response = (HttpWebResponse)request.GetResponse();                      var encoding = Encoding.ASCII;                        using (var reader = new StreamReader(response.GetResponseStream()' encoding))                      {                          data = reader.ReadToEnd();                      }                  }                  catch (WebException ex)                  {                      ++retryCount;                      if (retryCount > 3)                      {                          Log.Error("REQUEST FAILED: " + request.Address);                          throw;                      }                      Log.Trace("WARNING: Web request failed with message " + ex.Message + "Retrying... " + retryCount + " times");                  }              }
Magic Number,QuantConnect.ToolBox.GDAXDownloader,GDAXDownloader,C:\repos\QuantConnect_Lean\ToolBox\GDAXDownloader\GDAXDownloader.cs,GetWithRetry,The following statement contains a magic number: while (data == string.Empty)              {                  try                  {                      Thread.Sleep(1000 / MaxRequestsPerSecond + 1);                      var response = (HttpWebResponse)request.GetResponse();                      var encoding = Encoding.ASCII;                        using (var reader = new StreamReader(response.GetResponseStream()' encoding))                      {                          data = reader.ReadToEnd();                      }                  }                  catch (WebException ex)                  {                      ++retryCount;                      if (retryCount > 3)                      {                          Log.Error("REQUEST FAILED: " + request.Address);                          throw;                      }                      Log.Trace("WARNING: Web request failed with message " + ex.Message + "Retrying... " + retryCount + " times");                  }              }
Magic Number,QuantConnect.ToolBox.GDAXDownloader,GDAXDownloader,C:\repos\QuantConnect_Lean\ToolBox\GDAXDownloader\GDAXDownloader.cs,ParseCandleData,The following statement contains a magic number: if (data.Length > 0)              {                  var parsedData = JsonConvert.DeserializeObject<string[][]>(data);                    foreach (var datapoint in parsedData)                  {                      var epochs = double.Parse(datapoint[0].ToString());                      var tradeBar = new TradeBar()                      {                          Time = Time.UnixTimeStampToDateTime(epochs)'                          Symbol = symbol'                          Low = decimal.Parse(datapoint[1].ToString())'                          High = decimal.Parse(datapoint[2].ToString())'                          Open = decimal.Parse(datapoint[3].ToString())'                          Close = decimal.Parse(datapoint[4].ToString())'                          Volume = decimal.Parse(datapoint[5].ToString())'                          Value = decimal.Parse(datapoint[4].ToString())'                          DataType = MarketDataType.TradeBar'                          Period = new TimeSpan(0' 0' (int)granularity)'                          EndTime = Time.UnixTimeStampToDateTime(epochs).AddSeconds(granularity)                      };                      returnData.Add(tradeBar);                  }              }
Magic Number,QuantConnect.ToolBox.GDAXDownloader,GDAXDownloader,C:\repos\QuantConnect_Lean\ToolBox\GDAXDownloader\GDAXDownloader.cs,ParseCandleData,The following statement contains a magic number: if (data.Length > 0)              {                  var parsedData = JsonConvert.DeserializeObject<string[][]>(data);                    foreach (var datapoint in parsedData)                  {                      var epochs = double.Parse(datapoint[0].ToString());                      var tradeBar = new TradeBar()                      {                          Time = Time.UnixTimeStampToDateTime(epochs)'                          Symbol = symbol'                          Low = decimal.Parse(datapoint[1].ToString())'                          High = decimal.Parse(datapoint[2].ToString())'                          Open = decimal.Parse(datapoint[3].ToString())'                          Close = decimal.Parse(datapoint[4].ToString())'                          Volume = decimal.Parse(datapoint[5].ToString())'                          Value = decimal.Parse(datapoint[4].ToString())'                          DataType = MarketDataType.TradeBar'                          Period = new TimeSpan(0' 0' (int)granularity)'                          EndTime = Time.UnixTimeStampToDateTime(epochs).AddSeconds(granularity)                      };                      returnData.Add(tradeBar);                  }              }
Magic Number,QuantConnect.ToolBox.GDAXDownloader,GDAXDownloader,C:\repos\QuantConnect_Lean\ToolBox\GDAXDownloader\GDAXDownloader.cs,ParseCandleData,The following statement contains a magic number: if (data.Length > 0)              {                  var parsedData = JsonConvert.DeserializeObject<string[][]>(data);                    foreach (var datapoint in parsedData)                  {                      var epochs = double.Parse(datapoint[0].ToString());                      var tradeBar = new TradeBar()                      {                          Time = Time.UnixTimeStampToDateTime(epochs)'                          Symbol = symbol'                          Low = decimal.Parse(datapoint[1].ToString())'                          High = decimal.Parse(datapoint[2].ToString())'                          Open = decimal.Parse(datapoint[3].ToString())'                          Close = decimal.Parse(datapoint[4].ToString())'                          Volume = decimal.Parse(datapoint[5].ToString())'                          Value = decimal.Parse(datapoint[4].ToString())'                          DataType = MarketDataType.TradeBar'                          Period = new TimeSpan(0' 0' (int)granularity)'                          EndTime = Time.UnixTimeStampToDateTime(epochs).AddSeconds(granularity)                      };                      returnData.Add(tradeBar);                  }              }
Magic Number,QuantConnect.ToolBox.GDAXDownloader,GDAXDownloader,C:\repos\QuantConnect_Lean\ToolBox\GDAXDownloader\GDAXDownloader.cs,ParseCandleData,The following statement contains a magic number: if (data.Length > 0)              {                  var parsedData = JsonConvert.DeserializeObject<string[][]>(data);                    foreach (var datapoint in parsedData)                  {                      var epochs = double.Parse(datapoint[0].ToString());                      var tradeBar = new TradeBar()                      {                          Time = Time.UnixTimeStampToDateTime(epochs)'                          Symbol = symbol'                          Low = decimal.Parse(datapoint[1].ToString())'                          High = decimal.Parse(datapoint[2].ToString())'                          Open = decimal.Parse(datapoint[3].ToString())'                          Close = decimal.Parse(datapoint[4].ToString())'                          Volume = decimal.Parse(datapoint[5].ToString())'                          Value = decimal.Parse(datapoint[4].ToString())'                          DataType = MarketDataType.TradeBar'                          Period = new TimeSpan(0' 0' (int)granularity)'                          EndTime = Time.UnixTimeStampToDateTime(epochs).AddSeconds(granularity)                      };                      returnData.Add(tradeBar);                  }              }
Magic Number,QuantConnect.ToolBox.GDAXDownloader,GDAXDownloader,C:\repos\QuantConnect_Lean\ToolBox\GDAXDownloader\GDAXDownloader.cs,ParseCandleData,The following statement contains a magic number: if (data.Length > 0)              {                  var parsedData = JsonConvert.DeserializeObject<string[][]>(data);                    foreach (var datapoint in parsedData)                  {                      var epochs = double.Parse(datapoint[0].ToString());                      var tradeBar = new TradeBar()                      {                          Time = Time.UnixTimeStampToDateTime(epochs)'                          Symbol = symbol'                          Low = decimal.Parse(datapoint[1].ToString())'                          High = decimal.Parse(datapoint[2].ToString())'                          Open = decimal.Parse(datapoint[3].ToString())'                          Close = decimal.Parse(datapoint[4].ToString())'                          Volume = decimal.Parse(datapoint[5].ToString())'                          Value = decimal.Parse(datapoint[4].ToString())'                          DataType = MarketDataType.TradeBar'                          Period = new TimeSpan(0' 0' (int)granularity)'                          EndTime = Time.UnixTimeStampToDateTime(epochs).AddSeconds(granularity)                      };                      returnData.Add(tradeBar);                  }              }
Magic Number,QuantConnect.ToolBox.GDAXDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\GDAXDownloader\Program.cs,Main,The following statement contains a magic number: if (args.Length < 3)              {                  Console.WriteLine("Usage: GDAX Downloader SYMBOL RESOLUTION FROMDATE TODATE");                  Console.WriteLine("SYMBOL   = ETH-USD' ETH-BTC' BTC-USD etc.");                  Console.WriteLine("RESOLUTION   = Second/Minute/Hour/Daily");                  Console.WriteLine("FROMDATE = yyyyMMdd HH:mm:ss");                  Console.WriteLine("TODATE = yyyyMMdd HH:mm:ss");                  Environment.Exit(1);              }
Magic Number,QuantConnect.ToolBox.GDAXDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\GDAXDownloader\Program.cs,Main,The following statement contains a magic number: try              {                  var resolution = (Resolution)Enum.Parse(typeof(Resolution)' args[1]);                  // Load settings from command line                  var startDate = DateTime.ParseExact(args[2]' "yyyyMMdd HH:mm:ss"' CultureInfo.InvariantCulture);                  var endDate = DateTime.UtcNow;                  if (args[3] != null)                  {                      endDate = DateTime.ParseExact(args[3]' "yyyyMMdd HH:mm:ss"' CultureInfo.InvariantCulture);                  }                    // Load settings from config.json                  var dataDirectory = Config.Get("data-directory"' "../../../Data");                  //todo: will download any exchange but always save as gdax                  // Create an instance of the downloader                  const string market = Market.GDAX;                  var downloader = new GDAXDownloader();                    // Download the data                  var symbolObject = Symbol.Create(args[0]' SecurityType.Crypto' market);                  var data = downloader.Get(symbolObject' resolution' startDate' endDate);                    // Save the data                    var writer = new LeanDataWriter(resolution' symbolObject' dataDirectory' TickType.Trade);                  var distinctData = data.GroupBy(i => i.Time' (key' group) => group.First()).ToArray();                    writer.Write(distinctData);                    Log.Trace("Finish data download. Press any key to continue..");                }              catch (Exception err)              {                  Log.Error(err);                  Log.Trace(err.Message);                  Log.Trace(err.StackTrace);              }
Magic Number,QuantConnect.ToolBox.GDAXDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\GDAXDownloader\Program.cs,Main,The following statement contains a magic number: try              {                  var resolution = (Resolution)Enum.Parse(typeof(Resolution)' args[1]);                  // Load settings from command line                  var startDate = DateTime.ParseExact(args[2]' "yyyyMMdd HH:mm:ss"' CultureInfo.InvariantCulture);                  var endDate = DateTime.UtcNow;                  if (args[3] != null)                  {                      endDate = DateTime.ParseExact(args[3]' "yyyyMMdd HH:mm:ss"' CultureInfo.InvariantCulture);                  }                    // Load settings from config.json                  var dataDirectory = Config.Get("data-directory"' "../../../Data");                  //todo: will download any exchange but always save as gdax                  // Create an instance of the downloader                  const string market = Market.GDAX;                  var downloader = new GDAXDownloader();                    // Download the data                  var symbolObject = Symbol.Create(args[0]' SecurityType.Crypto' market);                  var data = downloader.Get(symbolObject' resolution' startDate' endDate);                    // Save the data                    var writer = new LeanDataWriter(resolution' symbolObject' dataDirectory' TickType.Trade);                  var distinctData = data.GroupBy(i => i.Time' (key' group) => group.First()).ToArray();                    writer.Write(distinctData);                    Log.Trace("Finish data download. Press any key to continue..");                }              catch (Exception err)              {                  Log.Error(err);                  Log.Trace(err.Message);                  Log.Trace(err.StackTrace);              }
Magic Number,QuantConnect.ToolBox.GDAXDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\GDAXDownloader\Program.cs,Main,The following statement contains a magic number: try              {                  var resolution = (Resolution)Enum.Parse(typeof(Resolution)' args[1]);                  // Load settings from command line                  var startDate = DateTime.ParseExact(args[2]' "yyyyMMdd HH:mm:ss"' CultureInfo.InvariantCulture);                  var endDate = DateTime.UtcNow;                  if (args[3] != null)                  {                      endDate = DateTime.ParseExact(args[3]' "yyyyMMdd HH:mm:ss"' CultureInfo.InvariantCulture);                  }                    // Load settings from config.json                  var dataDirectory = Config.Get("data-directory"' "../../../Data");                  //todo: will download any exchange but always save as gdax                  // Create an instance of the downloader                  const string market = Market.GDAX;                  var downloader = new GDAXDownloader();                    // Download the data                  var symbolObject = Symbol.Create(args[0]' SecurityType.Crypto' market);                  var data = downloader.Get(symbolObject' resolution' startDate' endDate);                    // Save the data                    var writer = new LeanDataWriter(resolution' symbolObject' dataDirectory' TickType.Trade);                  var distinctData = data.GroupBy(i => i.Time' (key' group) => group.First()).ToArray();                    writer.Write(distinctData);                    Log.Trace("Finish data download. Press any key to continue..");                }              catch (Exception err)              {                  Log.Error(err);                  Log.Trace(err.Message);                  Log.Trace(err.StackTrace);              }
Magic Number,QuantConnect.ToolBox,FactorFileGenerator,C:\repos\QuantConnect_Lean\ToolBox\FactorFileGenerator.cs,CalculateNextDividendFactor,The following statement contains a magic number: return new FactorFileRow(previousClosingPrice.Time' priceFactor.RoundToSignificantDigits(7)' previousFactorFileRow.SplitFactor);
Magic Number,QuantConnect.ToolBox,FactorFileGenerator,C:\repos\QuantConnect_Lean\ToolBox\FactorFileGenerator.cs,CalculateNextSplitFactor,The following statement contains a magic number: return new FactorFileRow(                      previousClosingPrice.Time'                      previousFactorFileRow.PriceFactor'                      (previousFactorFileRow.SplitFactor * split.Value).RoundToSignificantDigits(6)                  );
Magic Number,QuantConnect.ToolBox,FxcmVolumeAuxiliaryMethods,C:\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeAuxiliaryMethods.cs,GetFxcmVolumeFromZip,The following statement contains a magic number: foreach (var obs in data)              {                  var time = DateTime.ParseExact(obs[0]' "yyyyMMdd HH:mm"' CultureInfo.InvariantCulture);                  output.Add(new FxcmVolume                  {                      DataType = MarketDataType.Base'                      Time = time'                      Value = long.Parse(obs[1])'                      Transactions = int.Parse(obs[2])                  });              }
Magic Number,QuantConnect.ToolBox,FxcmVolumeAuxiliaryMethods,C:\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeAuxiliaryMethods.cs,GetLastAvailableDateOfData,The following statement contains a magic number: switch (resolution)              {                  case Resolution.Daily:                  case Resolution.Hour:                      var expectedFilePath = Path.Combine(folderPath'                                                          String.Format("{0}_volume.zip"' symbol.Value.ToLower()));                      if (File.Exists(expectedFilePath))                      {                          var lastStrDate = ReadZipFileData(expectedFilePath).Last()     // last observation                                                                                                    .First()    // first string (date)                                                                             .Substring(startIndex: 0' length: 8);                          lastAvailableDate = DateTime.ParseExact(lastStrDate' DateFormat.EightCharacter' CultureInfo.InvariantCulture);                      }                      break;                  case Resolution.Minute:                      var lastFileDate = Directory                          .GetFiles(folderPath' "*_volume.zip")                          .OrderBy(f => f)                          .LastOrDefault();                      if (lastFileDate != null)                      {                          lastFileDate = Path.GetFileNameWithoutExtension(lastFileDate)                                             .Substring(startIndex: 0' length: 8);                          lastAvailableDate = DateTime.ParseExact(lastFileDate' DateFormat.EightCharacter' CultureInfo.InvariantCulture);                      }                      break;              }
Magic Number,QuantConnect.ToolBox,FxcmVolumeAuxiliaryMethods,C:\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeAuxiliaryMethods.cs,GetLastAvailableDateOfData,The following statement contains a magic number: switch (resolution)              {                  case Resolution.Daily:                  case Resolution.Hour:                      var expectedFilePath = Path.Combine(folderPath'                                                          String.Format("{0}_volume.zip"' symbol.Value.ToLower()));                      if (File.Exists(expectedFilePath))                      {                          var lastStrDate = ReadZipFileData(expectedFilePath).Last()     // last observation                                                                                                    .First()    // first string (date)                                                                             .Substring(startIndex: 0' length: 8);                          lastAvailableDate = DateTime.ParseExact(lastStrDate' DateFormat.EightCharacter' CultureInfo.InvariantCulture);                      }                      break;                  case Resolution.Minute:                      var lastFileDate = Directory                          .GetFiles(folderPath' "*_volume.zip")                          .OrderBy(f => f)                          .LastOrDefault();                      if (lastFileDate != null)                      {                          lastFileDate = Path.GetFileNameWithoutExtension(lastFileDate)                                             .Substring(startIndex: 0' length: 8);                          lastAvailableDate = DateTime.ParseExact(lastFileDate' DateFormat.EightCharacter' CultureInfo.InvariantCulture);                      }                      break;              }
Magic Number,QuantConnect.ToolBox,FxcmVolumeDownloader,C:\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeDownloader.cs,Get,The following statement contains a magic number: do              {                  var line = lines[idx++];                  var obs = line.Split(';');                  var stringDate = obs[0].Substring(startIndex: 3);                  obsTime = DateTime.ParseExact(stringDate' "yyyyMMddHHmm"'                                                DateTimeFormatInfo.InvariantInfo);                  var volume = _volumeIdx.Select(x => long.Parse(obs[x])).Sum();                    var transactions = _transactionsIdx.Select(x => int.Parse(obs[x])).Sum();                  requestedData.Add(new FxcmVolume                  {                      Symbol = symbol'                      Time = obsTime'                      Value = volume'                      Transactions = transactions                  });              } while (obsTime.Date <= endUtc.Date && idx < lines.Length - 1);
Magic Number,QuantConnect.ToolBox,FxcmVolumeDownloader,C:\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeDownloader.cs,Run,The following statement contains a magic number: if (resolution == Resolution.Minute && (endUtc - startUtc).TotalMinutes > 10000)              {                  // Six days are 8640 minute observations' 7 days are 10080.                  requestDayInterval = 6;              }              else if (resolution == Resolution.Hour && (endUtc - startUtc).TotalHours > 10000)              {                  // 410 days x 24 hr = 9840 hr.                  requestDayInterval = 410;              }
Magic Number,QuantConnect.ToolBox,FxcmVolumeDownloader,C:\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeDownloader.cs,Run,The following statement contains a magic number: if (resolution == Resolution.Minute && (endUtc - startUtc).TotalMinutes > 10000)              {                  // Six days are 8640 minute observations' 7 days are 10080.                  requestDayInterval = 6;              }              else if (resolution == Resolution.Hour && (endUtc - startUtc).TotalHours > 10000)              {                  // 410 days x 24 hr = 9840 hr.                  requestDayInterval = 410;              }
Magic Number,QuantConnect.ToolBox,FxcmVolumeDownloader,C:\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeDownloader.cs,Run,The following statement contains a magic number: if (resolution == Resolution.Minute && (endUtc - startUtc).TotalMinutes > 10000)              {                  // Six days are 8640 minute observations' 7 days are 10080.                  requestDayInterval = 6;              }              else if (resolution == Resolution.Hour && (endUtc - startUtc).TotalHours > 10000)              {                  // 410 days x 24 hr = 9840 hr.                  requestDayInterval = 410;              }
Magic Number,QuantConnect.ToolBox,FxcmVolumeDownloader,C:\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeDownloader.cs,Run,The following statement contains a magic number: if (resolution == Resolution.Minute && (endUtc - startUtc).TotalMinutes > 10000)              {                  // Six days are 8640 minute observations' 7 days are 10080.                  requestDayInterval = 6;              }              else if (resolution == Resolution.Hour && (endUtc - startUtc).TotalHours > 10000)              {                  // 410 days x 24 hr = 9840 hr.                  requestDayInterval = 410;              }
Magic Number,QuantConnect.ToolBox,FxcmVolumeDownloader,C:\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeDownloader.cs,Run,The following statement contains a magic number: do              {                  if (requestDayInterval != 0)                  {                      if (counter++ != 0)                      {                          intermediateStartDate = intermediateEndDate.AddDays(value: 1);                      }                      intermediateEndDate = intermediateStartDate.AddDays(requestDayInterval);                      if (intermediateEndDate > endUtc) intermediateEndDate = endUtc;                  }                  data.AddRange(Get(symbol' resolution' intermediateStartDate' intermediateEndDate));                  // For every 300k observations in memory' write it.                  if (resolution == Resolution.Minute && counter % 30 == 0)                  {                      writer.Write(data);                      data.Clear();                  }              } while (intermediateEndDate != endUtc);
Magic Number,QuantConnect.ToolBox,FxcmVolumeDownloader,C:\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeDownloader.cs,RequestData,The following statement contains a magic number: var endDate = endUtc.AddDays(value: 2).ToString("yyyyMMdd") + "2100";
Magic Number,QuantConnect.ToolBox,FxcmVolumeDownloader,C:\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeDownloader.cs,RequestData,The following statement contains a magic number: return lines.Skip(count: 2).Take(lines.Length - 4).ToArray();
Magic Number,QuantConnect.ToolBox,FxcmVolumeDownloader,C:\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeDownloader.cs,RequestData,The following statement contains a magic number: return lines.Skip(count: 2).Take(lines.Length - 4).ToArray();
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(files' file =>              {                  try                  {                      Log.Trace("Remote File :" + file);                        var csvFile = Path.Combine(_source' Path.GetFileName(file).Replace(Path.GetExtension(file)' ""));                        Log.Trace("Source File :" + csvFile);                        if (!File.Exists(csvFile))                      {                          // create the directory first or else 7z will fail                          var csvFileInfo = new FileInfo(csvFile);                          Directory.CreateDirectory(csvFileInfo.DirectoryName);                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Extracting " + file);                          var psi = new ProcessStartInfo(zipper' " e " + file + " -o" + _source)                          {                              CreateNoWindow = true'                              WindowStyle = ProcessWindowStyle.Hidden'                              UseShellExecute = false'                              RedirectStandardOutput = true                          };                            var process = new Process();                          process.StartInfo = psi;                          process.Start();                            while (!process.StandardOutput.EndOfStream)                          {                              process.StandardOutput.ReadLine();                          }                            if (!process.WaitForExit(ExecTimeout * 1000))                          {                              Log.Error("7Zip timed out: " + file);                          }                          else                          {                              if (process.ExitCode > 0)                              {                                  Log.Error("7Zip Exited Unsuccessfully: " + file);                              }                          }                      }                        // setting up local processors                       var processors = new Processors();                        var reader = new AlgoSeekFuturesReader(csvFile' symbolMultipliers);                      if (start == DateTime.MinValue)                      {                          start = DateTime.Now;                      }                        if (reader.Current != null) // reader contains the data                      {                          do                          {                              var tick = reader.Current as Tick;                                //Add or create the consolidator-flush mechanism for symbol:                              List<List<AlgoSeekFuturesProcessor>> symbolProcessors;                              if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                              {                                  symbolProcessors = new List<List<AlgoSeekFuturesProcessor>>(3)                                          {                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Trade' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Quote' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' x' _destination)).ToList() }                                          };                                    processors[tick.Symbol] = symbolProcessors;                              }                                // Pass current tick into processor: enum 0 = trade; 1 = quote' 2 = oi                              foreach (var processor in symbolProcessors[(int)tick.TickType])                              {                                  processor.Process(tick);                              }                                if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                              {                                  var pro = (double)processors.Values.SelectMany(p => p.SelectMany(x => x)).Count();                                  var symbols = (double)processors.Keys.Count();                                  Log.Trace("AlgoSeekFuturesConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%' Processor per symbol {4}"' Math.Round(totalLinesProcessed / 1000000m' 2)' Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)' Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)' 100 * totalFilesProcessed / totalFiles' pro / symbols);                              }                            }                          while (reader.MoveNext());                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Performing final flush to disk... ");                          Flush(processors' DateTime.MaxValue' true);                      }                        processors = null;                      GC.Collect();                      GC.WaitForPendingFinalizers();                        Log.Trace("AlgoSeekFuturesConverter.Convert(): Finished processing file: " + file);                      Interlocked.Increment(ref totalFilesProcessed);                  }                  catch(Exception err)                  {                      Log.Error("Exception caught! File: {0} Err: {1} Source {2} Stack {3}"' file' err.Message' err.Source' err.StackTrace);                  }              });
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(files' file =>              {                  try                  {                      Log.Trace("Remote File :" + file);                        var csvFile = Path.Combine(_source' Path.GetFileName(file).Replace(Path.GetExtension(file)' ""));                        Log.Trace("Source File :" + csvFile);                        if (!File.Exists(csvFile))                      {                          // create the directory first or else 7z will fail                          var csvFileInfo = new FileInfo(csvFile);                          Directory.CreateDirectory(csvFileInfo.DirectoryName);                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Extracting " + file);                          var psi = new ProcessStartInfo(zipper' " e " + file + " -o" + _source)                          {                              CreateNoWindow = true'                              WindowStyle = ProcessWindowStyle.Hidden'                              UseShellExecute = false'                              RedirectStandardOutput = true                          };                            var process = new Process();                          process.StartInfo = psi;                          process.Start();                            while (!process.StandardOutput.EndOfStream)                          {                              process.StandardOutput.ReadLine();                          }                            if (!process.WaitForExit(ExecTimeout * 1000))                          {                              Log.Error("7Zip timed out: " + file);                          }                          else                          {                              if (process.ExitCode > 0)                              {                                  Log.Error("7Zip Exited Unsuccessfully: " + file);                              }                          }                      }                        // setting up local processors                       var processors = new Processors();                        var reader = new AlgoSeekFuturesReader(csvFile' symbolMultipliers);                      if (start == DateTime.MinValue)                      {                          start = DateTime.Now;                      }                        if (reader.Current != null) // reader contains the data                      {                          do                          {                              var tick = reader.Current as Tick;                                //Add or create the consolidator-flush mechanism for symbol:                              List<List<AlgoSeekFuturesProcessor>> symbolProcessors;                              if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                              {                                  symbolProcessors = new List<List<AlgoSeekFuturesProcessor>>(3)                                          {                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Trade' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Quote' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' x' _destination)).ToList() }                                          };                                    processors[tick.Symbol] = symbolProcessors;                              }                                // Pass current tick into processor: enum 0 = trade; 1 = quote' 2 = oi                              foreach (var processor in symbolProcessors[(int)tick.TickType])                              {                                  processor.Process(tick);                              }                                if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                              {                                  var pro = (double)processors.Values.SelectMany(p => p.SelectMany(x => x)).Count();                                  var symbols = (double)processors.Keys.Count();                                  Log.Trace("AlgoSeekFuturesConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%' Processor per symbol {4}"' Math.Round(totalLinesProcessed / 1000000m' 2)' Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)' Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)' 100 * totalFilesProcessed / totalFiles' pro / symbols);                              }                            }                          while (reader.MoveNext());                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Performing final flush to disk... ");                          Flush(processors' DateTime.MaxValue' true);                      }                        processors = null;                      GC.Collect();                      GC.WaitForPendingFinalizers();                        Log.Trace("AlgoSeekFuturesConverter.Convert(): Finished processing file: " + file);                      Interlocked.Increment(ref totalFilesProcessed);                  }                  catch(Exception err)                  {                      Log.Error("Exception caught! File: {0} Err: {1} Source {2} Stack {3}"' file' err.Message' err.Source' err.StackTrace);                  }              });
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(files' file =>              {                  try                  {                      Log.Trace("Remote File :" + file);                        var csvFile = Path.Combine(_source' Path.GetFileName(file).Replace(Path.GetExtension(file)' ""));                        Log.Trace("Source File :" + csvFile);                        if (!File.Exists(csvFile))                      {                          // create the directory first or else 7z will fail                          var csvFileInfo = new FileInfo(csvFile);                          Directory.CreateDirectory(csvFileInfo.DirectoryName);                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Extracting " + file);                          var psi = new ProcessStartInfo(zipper' " e " + file + " -o" + _source)                          {                              CreateNoWindow = true'                              WindowStyle = ProcessWindowStyle.Hidden'                              UseShellExecute = false'                              RedirectStandardOutput = true                          };                            var process = new Process();                          process.StartInfo = psi;                          process.Start();                            while (!process.StandardOutput.EndOfStream)                          {                              process.StandardOutput.ReadLine();                          }                            if (!process.WaitForExit(ExecTimeout * 1000))                          {                              Log.Error("7Zip timed out: " + file);                          }                          else                          {                              if (process.ExitCode > 0)                              {                                  Log.Error("7Zip Exited Unsuccessfully: " + file);                              }                          }                      }                        // setting up local processors                       var processors = new Processors();                        var reader = new AlgoSeekFuturesReader(csvFile' symbolMultipliers);                      if (start == DateTime.MinValue)                      {                          start = DateTime.Now;                      }                        if (reader.Current != null) // reader contains the data                      {                          do                          {                              var tick = reader.Current as Tick;                                //Add or create the consolidator-flush mechanism for symbol:                              List<List<AlgoSeekFuturesProcessor>> symbolProcessors;                              if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                              {                                  symbolProcessors = new List<List<AlgoSeekFuturesProcessor>>(3)                                          {                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Trade' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Quote' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' x' _destination)).ToList() }                                          };                                    processors[tick.Symbol] = symbolProcessors;                              }                                // Pass current tick into processor: enum 0 = trade; 1 = quote' 2 = oi                              foreach (var processor in symbolProcessors[(int)tick.TickType])                              {                                  processor.Process(tick);                              }                                if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                              {                                  var pro = (double)processors.Values.SelectMany(p => p.SelectMany(x => x)).Count();                                  var symbols = (double)processors.Keys.Count();                                  Log.Trace("AlgoSeekFuturesConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%' Processor per symbol {4}"' Math.Round(totalLinesProcessed / 1000000m' 2)' Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)' Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)' 100 * totalFilesProcessed / totalFiles' pro / symbols);                              }                            }                          while (reader.MoveNext());                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Performing final flush to disk... ");                          Flush(processors' DateTime.MaxValue' true);                      }                        processors = null;                      GC.Collect();                      GC.WaitForPendingFinalizers();                        Log.Trace("AlgoSeekFuturesConverter.Convert(): Finished processing file: " + file);                      Interlocked.Increment(ref totalFilesProcessed);                  }                  catch(Exception err)                  {                      Log.Error("Exception caught! File: {0} Err: {1} Source {2} Stack {3}"' file' err.Message' err.Source' err.StackTrace);                  }              });
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(files' file =>              {                  try                  {                      Log.Trace("Remote File :" + file);                        var csvFile = Path.Combine(_source' Path.GetFileName(file).Replace(Path.GetExtension(file)' ""));                        Log.Trace("Source File :" + csvFile);                        if (!File.Exists(csvFile))                      {                          // create the directory first or else 7z will fail                          var csvFileInfo = new FileInfo(csvFile);                          Directory.CreateDirectory(csvFileInfo.DirectoryName);                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Extracting " + file);                          var psi = new ProcessStartInfo(zipper' " e " + file + " -o" + _source)                          {                              CreateNoWindow = true'                              WindowStyle = ProcessWindowStyle.Hidden'                              UseShellExecute = false'                              RedirectStandardOutput = true                          };                            var process = new Process();                          process.StartInfo = psi;                          process.Start();                            while (!process.StandardOutput.EndOfStream)                          {                              process.StandardOutput.ReadLine();                          }                            if (!process.WaitForExit(ExecTimeout * 1000))                          {                              Log.Error("7Zip timed out: " + file);                          }                          else                          {                              if (process.ExitCode > 0)                              {                                  Log.Error("7Zip Exited Unsuccessfully: " + file);                              }                          }                      }                        // setting up local processors                       var processors = new Processors();                        var reader = new AlgoSeekFuturesReader(csvFile' symbolMultipliers);                      if (start == DateTime.MinValue)                      {                          start = DateTime.Now;                      }                        if (reader.Current != null) // reader contains the data                      {                          do                          {                              var tick = reader.Current as Tick;                                //Add or create the consolidator-flush mechanism for symbol:                              List<List<AlgoSeekFuturesProcessor>> symbolProcessors;                              if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                              {                                  symbolProcessors = new List<List<AlgoSeekFuturesProcessor>>(3)                                          {                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Trade' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Quote' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' x' _destination)).ToList() }                                          };                                    processors[tick.Symbol] = symbolProcessors;                              }                                // Pass current tick into processor: enum 0 = trade; 1 = quote' 2 = oi                              foreach (var processor in symbolProcessors[(int)tick.TickType])                              {                                  processor.Process(tick);                              }                                if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                              {                                  var pro = (double)processors.Values.SelectMany(p => p.SelectMany(x => x)).Count();                                  var symbols = (double)processors.Keys.Count();                                  Log.Trace("AlgoSeekFuturesConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%' Processor per symbol {4}"' Math.Round(totalLinesProcessed / 1000000m' 2)' Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)' Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)' 100 * totalFilesProcessed / totalFiles' pro / symbols);                              }                            }                          while (reader.MoveNext());                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Performing final flush to disk... ");                          Flush(processors' DateTime.MaxValue' true);                      }                        processors = null;                      GC.Collect();                      GC.WaitForPendingFinalizers();                        Log.Trace("AlgoSeekFuturesConverter.Convert(): Finished processing file: " + file);                      Interlocked.Increment(ref totalFilesProcessed);                  }                  catch(Exception err)                  {                      Log.Error("Exception caught! File: {0} Err: {1} Source {2} Stack {3}"' file' err.Message' err.Source' err.StackTrace);                  }              });
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(files' file =>              {                  try                  {                      Log.Trace("Remote File :" + file);                        var csvFile = Path.Combine(_source' Path.GetFileName(file).Replace(Path.GetExtension(file)' ""));                        Log.Trace("Source File :" + csvFile);                        if (!File.Exists(csvFile))                      {                          // create the directory first or else 7z will fail                          var csvFileInfo = new FileInfo(csvFile);                          Directory.CreateDirectory(csvFileInfo.DirectoryName);                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Extracting " + file);                          var psi = new ProcessStartInfo(zipper' " e " + file + " -o" + _source)                          {                              CreateNoWindow = true'                              WindowStyle = ProcessWindowStyle.Hidden'                              UseShellExecute = false'                              RedirectStandardOutput = true                          };                            var process = new Process();                          process.StartInfo = psi;                          process.Start();                            while (!process.StandardOutput.EndOfStream)                          {                              process.StandardOutput.ReadLine();                          }                            if (!process.WaitForExit(ExecTimeout * 1000))                          {                              Log.Error("7Zip timed out: " + file);                          }                          else                          {                              if (process.ExitCode > 0)                              {                                  Log.Error("7Zip Exited Unsuccessfully: " + file);                              }                          }                      }                        // setting up local processors                       var processors = new Processors();                        var reader = new AlgoSeekFuturesReader(csvFile' symbolMultipliers);                      if (start == DateTime.MinValue)                      {                          start = DateTime.Now;                      }                        if (reader.Current != null) // reader contains the data                      {                          do                          {                              var tick = reader.Current as Tick;                                //Add or create the consolidator-flush mechanism for symbol:                              List<List<AlgoSeekFuturesProcessor>> symbolProcessors;                              if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                              {                                  symbolProcessors = new List<List<AlgoSeekFuturesProcessor>>(3)                                          {                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Trade' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Quote' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' x' _destination)).ToList() }                                          };                                    processors[tick.Symbol] = symbolProcessors;                              }                                // Pass current tick into processor: enum 0 = trade; 1 = quote' 2 = oi                              foreach (var processor in symbolProcessors[(int)tick.TickType])                              {                                  processor.Process(tick);                              }                                if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                              {                                  var pro = (double)processors.Values.SelectMany(p => p.SelectMany(x => x)).Count();                                  var symbols = (double)processors.Keys.Count();                                  Log.Trace("AlgoSeekFuturesConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%' Processor per symbol {4}"' Math.Round(totalLinesProcessed / 1000000m' 2)' Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)' Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)' 100 * totalFilesProcessed / totalFiles' pro / symbols);                              }                            }                          while (reader.MoveNext());                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Performing final flush to disk... ");                          Flush(processors' DateTime.MaxValue' true);                      }                        processors = null;                      GC.Collect();                      GC.WaitForPendingFinalizers();                        Log.Trace("AlgoSeekFuturesConverter.Convert(): Finished processing file: " + file);                      Interlocked.Increment(ref totalFilesProcessed);                  }                  catch(Exception err)                  {                      Log.Error("Exception caught! File: {0} Err: {1} Source {2} Stack {3}"' file' err.Message' err.Source' err.StackTrace);                  }              });
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(files' file =>              {                  try                  {                      Log.Trace("Remote File :" + file);                        var csvFile = Path.Combine(_source' Path.GetFileName(file).Replace(Path.GetExtension(file)' ""));                        Log.Trace("Source File :" + csvFile);                        if (!File.Exists(csvFile))                      {                          // create the directory first or else 7z will fail                          var csvFileInfo = new FileInfo(csvFile);                          Directory.CreateDirectory(csvFileInfo.DirectoryName);                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Extracting " + file);                          var psi = new ProcessStartInfo(zipper' " e " + file + " -o" + _source)                          {                              CreateNoWindow = true'                              WindowStyle = ProcessWindowStyle.Hidden'                              UseShellExecute = false'                              RedirectStandardOutput = true                          };                            var process = new Process();                          process.StartInfo = psi;                          process.Start();                            while (!process.StandardOutput.EndOfStream)                          {                              process.StandardOutput.ReadLine();                          }                            if (!process.WaitForExit(ExecTimeout * 1000))                          {                              Log.Error("7Zip timed out: " + file);                          }                          else                          {                              if (process.ExitCode > 0)                              {                                  Log.Error("7Zip Exited Unsuccessfully: " + file);                              }                          }                      }                        // setting up local processors                       var processors = new Processors();                        var reader = new AlgoSeekFuturesReader(csvFile' symbolMultipliers);                      if (start == DateTime.MinValue)                      {                          start = DateTime.Now;                      }                        if (reader.Current != null) // reader contains the data                      {                          do                          {                              var tick = reader.Current as Tick;                                //Add or create the consolidator-flush mechanism for symbol:                              List<List<AlgoSeekFuturesProcessor>> symbolProcessors;                              if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                              {                                  symbolProcessors = new List<List<AlgoSeekFuturesProcessor>>(3)                                          {                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Trade' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.Quote' x' _destination)).ToList() }'                                              { _resolutions.Select(x => new AlgoSeekFuturesProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' x' _destination)).ToList() }                                          };                                    processors[tick.Symbol] = symbolProcessors;                              }                                // Pass current tick into processor: enum 0 = trade; 1 = quote' 2 = oi                              foreach (var processor in symbolProcessors[(int)tick.TickType])                              {                                  processor.Process(tick);                              }                                if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                              {                                  var pro = (double)processors.Values.SelectMany(p => p.SelectMany(x => x)).Count();                                  var symbols = (double)processors.Keys.Count();                                  Log.Trace("AlgoSeekFuturesConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%' Processor per symbol {4}"' Math.Round(totalLinesProcessed / 1000000m' 2)' Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)' Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)' 100 * totalFilesProcessed / totalFiles' pro / symbols);                              }                            }                          while (reader.MoveNext());                            Log.Trace("AlgoSeekFuturesConverter.Convert(): Performing final flush to disk... ");                          Flush(processors' DateTime.MaxValue' true);                      }                        processors = null;                      GC.Collect();                      GC.WaitForPendingFinalizers();                        Log.Trace("AlgoSeekFuturesConverter.Convert(): Finished processing file: " + file);                      Interlocked.Increment(ref totalFilesProcessed);                  }                  catch(Exception err)                  {                      Log.Error("Exception caught! File: {0} Err: {1} Source {2} Stack {3}"' file' err.Message' err.Source' err.StackTrace);                  }              });
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,LoadSymbolMultipliers,The following statement contains a magic number: const int columnsCount = 4;
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,LoadSymbolMultipliers,The following statement contains a magic number: const int columnMultipleFactor = 2;
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesConverter.cs,LoadSymbolMultipliers,The following statement contains a magic number: const int columnInfo = 3;
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesProcessor,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesProcessor.cs,AlgoSeekFuturesProcessor,The following statement contains a magic number: if (_curFileCount % 1000 == 0)              {                  Log.Trace("Opened more files: {0}"' _curFileCount);              }
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesProcessor,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesProcessor.cs,FlushBuffer,The following statement contains a magic number: if (finalFlush)              {                  if (_consolidator.WorkingData != null)                  {                      _streamWriter.WriteLine(LeanData.GenerateLine(_consolidator.WorkingData' SecurityType.Future' Resolution));                  }                    _streamWriter.Flush();                  _streamWriter.Close();                  _streamWriter = null;                    Interlocked.Add(ref _curFileCount' -1);                  if (_curFileCount % 1000 == 0)                  {                      Log.Trace("Closed some files: {0}"' _curFileCount);                  }              }
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesReader,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesReader.cs,Parse,The following statement contains a magic number: try              {                  const int TradeMask = 2;                  const int QuoteMask = 1;                  const int OpenInterestMask = 11;                  const int MessageTypeMask = 15;                    // parse csv check column count                  var csv = line.ToCsv();                  if (csv.Count - 1 < _columnsCount)                  {                      return null;                  }                    var ticker = csv[_columnTicker];                    // we filter out options and spreads                  if (ticker.IndexOfAny(new [] { ' '' '-'}) != -1)                  {                      return null;                  }                    // detecting tick type (trade or quote)                  TickType tickType;                  bool isAsk = false;                    var type = Convert.ToInt32(csv[_columnType]);                  if ((type & MessageTypeMask) == TradeMask)                  {                      tickType = TickType.Trade;                  }                  else if ((type & MessageTypeMask) == OpenInterestMask)                  {                      tickType = TickType.OpenInterest;                  }                  else if ((type & MessageTypeMask) == QuoteMask)                  {                      tickType = TickType.Quote;                        switch (csv[_columnSide])                      {                          case "B":                              isAsk = false;                              break;                          case "S":                              isAsk = true;                              break;                          default:                              {                                  return null;                              }                      }                  }                  else                  {                      return null;                  }                    ticker = ticker.Trim(new char[] { '"' });                    if (_symbolFilter != null && !_symbolFilter.Contains(ticker))                  {                      return null;                  }                    if (string.IsNullOrEmpty(ticker))                  {                      return null;                  }                    // ignoring time zones completely -- this is all in the 'data-time-zone'                  var timeString = csv[_columnTimestamp];                  var time = DateTime.ParseExact(timeString' "yyyyMMddHHmmssFFF"' CultureInfo.InvariantCulture);                    var parsed = SymbolRepresentation.ParseFutureTicker(ticker);                    if (parsed == null)                  {                      return null;                  }                    var underlying = parsed.Underlying;                  var expirationYearShort = parsed.ExpirationYearShort;                  var expirationMonth = parsed.ExpirationMonth;                    var expirationYear = GetExpirationYear(time' expirationYearShort);                  var expirationYearMonth = new DateTime(expirationYear' expirationMonth' DateTime.DaysInMonth(expirationYear' expirationMonth));                  var symbol = Symbol.CreateFuture(underlying' Market.USA' expirationYearMonth);                    var price = csv[_columnPrice].ToDecimal() / 10000000000m;                  var quantity = csv[_columnQuantity].ToInt32();                    price *= _symbolMultipliers.ContainsKey(underlying) ? _symbolMultipliers[underlying] : 1.0m;                    switch (tickType)                  {                      case TickType.Quote:                            var tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = price                          };                            if (isAsk)                          {                              tick.AskPrice = price;                              tick.AskSize = quantity;                          }                          else                          {                              tick.BidPrice = price;                              tick.BidSize = quantity;                          }                          return tick;                        case TickType.Trade:                            tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = price'                              Quantity = quantity                          };                          return tick;                        case TickType.OpenInterest:                            tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = quantity                          };                          return tick;                  }                    return null;              }              catch (Exception err)              {                  Log.Error(err);                  Log.Trace("Line: {0}"' line);                  return null;              }
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesReader,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesReader.cs,Parse,The following statement contains a magic number: try              {                  const int TradeMask = 2;                  const int QuoteMask = 1;                  const int OpenInterestMask = 11;                  const int MessageTypeMask = 15;                    // parse csv check column count                  var csv = line.ToCsv();                  if (csv.Count - 1 < _columnsCount)                  {                      return null;                  }                    var ticker = csv[_columnTicker];                    // we filter out options and spreads                  if (ticker.IndexOfAny(new [] { ' '' '-'}) != -1)                  {                      return null;                  }                    // detecting tick type (trade or quote)                  TickType tickType;                  bool isAsk = false;                    var type = Convert.ToInt32(csv[_columnType]);                  if ((type & MessageTypeMask) == TradeMask)                  {                      tickType = TickType.Trade;                  }                  else if ((type & MessageTypeMask) == OpenInterestMask)                  {                      tickType = TickType.OpenInterest;                  }                  else if ((type & MessageTypeMask) == QuoteMask)                  {                      tickType = TickType.Quote;                        switch (csv[_columnSide])                      {                          case "B":                              isAsk = false;                              break;                          case "S":                              isAsk = true;                              break;                          default:                              {                                  return null;                              }                      }                  }                  else                  {                      return null;                  }                    ticker = ticker.Trim(new char[] { '"' });                    if (_symbolFilter != null && !_symbolFilter.Contains(ticker))                  {                      return null;                  }                    if (string.IsNullOrEmpty(ticker))                  {                      return null;                  }                    // ignoring time zones completely -- this is all in the 'data-time-zone'                  var timeString = csv[_columnTimestamp];                  var time = DateTime.ParseExact(timeString' "yyyyMMddHHmmssFFF"' CultureInfo.InvariantCulture);                    var parsed = SymbolRepresentation.ParseFutureTicker(ticker);                    if (parsed == null)                  {                      return null;                  }                    var underlying = parsed.Underlying;                  var expirationYearShort = parsed.ExpirationYearShort;                  var expirationMonth = parsed.ExpirationMonth;                    var expirationYear = GetExpirationYear(time' expirationYearShort);                  var expirationYearMonth = new DateTime(expirationYear' expirationMonth' DateTime.DaysInMonth(expirationYear' expirationMonth));                  var symbol = Symbol.CreateFuture(underlying' Market.USA' expirationYearMonth);                    var price = csv[_columnPrice].ToDecimal() / 10000000000m;                  var quantity = csv[_columnQuantity].ToInt32();                    price *= _symbolMultipliers.ContainsKey(underlying) ? _symbolMultipliers[underlying] : 1.0m;                    switch (tickType)                  {                      case TickType.Quote:                            var tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = price                          };                            if (isAsk)                          {                              tick.AskPrice = price;                              tick.AskSize = quantity;                          }                          else                          {                              tick.BidPrice = price;                              tick.BidSize = quantity;                          }                          return tick;                        case TickType.Trade:                            tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = price'                              Quantity = quantity                          };                          return tick;                        case TickType.OpenInterest:                            tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = quantity                          };                          return tick;                  }                    return null;              }              catch (Exception err)              {                  Log.Error(err);                  Log.Trace("Line: {0}"' line);                  return null;              }
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesReader,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesReader.cs,Parse,The following statement contains a magic number: try              {                  const int TradeMask = 2;                  const int QuoteMask = 1;                  const int OpenInterestMask = 11;                  const int MessageTypeMask = 15;                    // parse csv check column count                  var csv = line.ToCsv();                  if (csv.Count - 1 < _columnsCount)                  {                      return null;                  }                    var ticker = csv[_columnTicker];                    // we filter out options and spreads                  if (ticker.IndexOfAny(new [] { ' '' '-'}) != -1)                  {                      return null;                  }                    // detecting tick type (trade or quote)                  TickType tickType;                  bool isAsk = false;                    var type = Convert.ToInt32(csv[_columnType]);                  if ((type & MessageTypeMask) == TradeMask)                  {                      tickType = TickType.Trade;                  }                  else if ((type & MessageTypeMask) == OpenInterestMask)                  {                      tickType = TickType.OpenInterest;                  }                  else if ((type & MessageTypeMask) == QuoteMask)                  {                      tickType = TickType.Quote;                        switch (csv[_columnSide])                      {                          case "B":                              isAsk = false;                              break;                          case "S":                              isAsk = true;                              break;                          default:                              {                                  return null;                              }                      }                  }                  else                  {                      return null;                  }                    ticker = ticker.Trim(new char[] { '"' });                    if (_symbolFilter != null && !_symbolFilter.Contains(ticker))                  {                      return null;                  }                    if (string.IsNullOrEmpty(ticker))                  {                      return null;                  }                    // ignoring time zones completely -- this is all in the 'data-time-zone'                  var timeString = csv[_columnTimestamp];                  var time = DateTime.ParseExact(timeString' "yyyyMMddHHmmssFFF"' CultureInfo.InvariantCulture);                    var parsed = SymbolRepresentation.ParseFutureTicker(ticker);                    if (parsed == null)                  {                      return null;                  }                    var underlying = parsed.Underlying;                  var expirationYearShort = parsed.ExpirationYearShort;                  var expirationMonth = parsed.ExpirationMonth;                    var expirationYear = GetExpirationYear(time' expirationYearShort);                  var expirationYearMonth = new DateTime(expirationYear' expirationMonth' DateTime.DaysInMonth(expirationYear' expirationMonth));                  var symbol = Symbol.CreateFuture(underlying' Market.USA' expirationYearMonth);                    var price = csv[_columnPrice].ToDecimal() / 10000000000m;                  var quantity = csv[_columnQuantity].ToInt32();                    price *= _symbolMultipliers.ContainsKey(underlying) ? _symbolMultipliers[underlying] : 1.0m;                    switch (tickType)                  {                      case TickType.Quote:                            var tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = price                          };                            if (isAsk)                          {                              tick.AskPrice = price;                              tick.AskSize = quantity;                          }                          else                          {                              tick.BidPrice = price;                              tick.BidSize = quantity;                          }                          return tick;                        case TickType.Trade:                            tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = price'                              Quantity = quantity                          };                          return tick;                        case TickType.OpenInterest:                            tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = quantity                          };                          return tick;                  }                    return null;              }              catch (Exception err)              {                  Log.Error(err);                  Log.Trace("Line: {0}"' line);                  return null;              }
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesReader,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesReader.cs,GetExpirationYear,The following statement contains a magic number: var baseNum = 2000;
Magic Number,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesReader,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesReader.cs,GetExpirationYear,The following statement contains a magic number: while (baseNum + year < currentdate.Year)              {                  baseNum += 10;              }
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(files' parallelOptionsProcessing' file =>              {                  Log.Trace("Remote File :" + file);                    var csvFile = Path.Combine(_source' Path.GetFileName(file).Replace(".bz2"' ""));                    Log.Trace("Source File :" + csvFile);                    if (!File.Exists(csvFile))                  {                      Log.Trace("AlgoSeekOptionsConverter.Convert(): Extracting " + file);                        var cmdArgs = " e " + file + " -o" + _source;                      RunZipper(zipper' cmdArgs);                  }                    // setting up local processors and the flush event                  var processors = new Processors();                  var waitForFlush = new ManualResetEvent(true);                    // symbol filters                   // var symbolFilterNames = new string[] { "AAPL"' "TWX"' "NWSA"' "FOXA"' "AIG"' "EGLE"' "EGEC" };                  // var symbolFilter = symbolFilterNames.SelectMany(name => new[] { name' name + "1"' name + ".1" }).ToHashSet();                  // var reader = new AlgoSeekOptionsReader(csvFile' _referenceDate' symbolFilter);                    var reader = new ToolBox.AlgoSeekOptionsConverter.AlgoSeekOptionsReader(csvFile' _referenceDate);                  if (start == DateTime.MinValue)                  {                      start = DateTime.Now;                  }                    var flushStep = TimeSpan.FromMinutes(15 + random.NextDouble() * 5);                    if (reader.Current != null) // reader contains the data                  {                      var previousFlush = reader.Current.Time.RoundDown(flushStep);                        do                      {                          var tick = reader.Current as Tick;                            //If the next minute has clocked over; flush the consolidators; serialize and store data to disk.                          if (tick.Time.RoundDown(flushStep) > previousFlush)                          {                              previousFlush = WriteToDisk(processors' waitForFlush' tick.Time' flushStep);                              processors = new Processors();                          }                            //Add or create the consolidator-flush mechanism for symbol:                          List<AlgoSeekOptionsProcessor> symbolProcessors;                          if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                          {                              symbolProcessors = new List<AlgoSeekOptionsProcessor>(3)                                              {                                                  new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Trade' _resolution' _destination)'                                                  new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Quote' _resolution' _destination)'                                                  new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' _resolution' _destination)                                              };                                processors[tick.Symbol] = symbolProcessors;                          }                            // Pass current tick into processor: enum 0 = trade; 1 = quote' ' 2 = oi                          symbolProcessors[(int)tick.TickType].Process(tick);                            if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                          {                              Log.Trace("AlgoSeekOptionsConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%"' Math.Round(totalLinesProcessed / 1000000m' 2)' Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)' Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)' 100 * totalFilesProcessed / totalFiles);                          }                        }                      while (reader.MoveNext());                        Log.Trace("AlgoSeekOptionsConverter.Convert(): Performing final flush to disk... ");                      Flush(processors' DateTime.MaxValue' true);                      WriteToDisk(processors' waitForFlush' DateTime.MaxValue' flushStep' true);                        Log.Trace("AlgoSeekOptionsConverter.Convert(): Cleaning up extracted options file {0}"' csvFile);                      File.Delete(csvFile);                  }                    processors = null;                    Log.Trace("AlgoSeekOptionsConverter.Convert(): Finished processing file: " + file);                  Interlocked.Increment(ref totalFilesProcessed);                });
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(files' parallelOptionsProcessing' file =>              {                  Log.Trace("Remote File :" + file);                    var csvFile = Path.Combine(_source' Path.GetFileName(file).Replace(".bz2"' ""));                    Log.Trace("Source File :" + csvFile);                    if (!File.Exists(csvFile))                  {                      Log.Trace("AlgoSeekOptionsConverter.Convert(): Extracting " + file);                        var cmdArgs = " e " + file + " -o" + _source;                      RunZipper(zipper' cmdArgs);                  }                    // setting up local processors and the flush event                  var processors = new Processors();                  var waitForFlush = new ManualResetEvent(true);                    // symbol filters                   // var symbolFilterNames = new string[] { "AAPL"' "TWX"' "NWSA"' "FOXA"' "AIG"' "EGLE"' "EGEC" };                  // var symbolFilter = symbolFilterNames.SelectMany(name => new[] { name' name + "1"' name + ".1" }).ToHashSet();                  // var reader = new AlgoSeekOptionsReader(csvFile' _referenceDate' symbolFilter);                    var reader = new ToolBox.AlgoSeekOptionsConverter.AlgoSeekOptionsReader(csvFile' _referenceDate);                  if (start == DateTime.MinValue)                  {                      start = DateTime.Now;                  }                    var flushStep = TimeSpan.FromMinutes(15 + random.NextDouble() * 5);                    if (reader.Current != null) // reader contains the data                  {                      var previousFlush = reader.Current.Time.RoundDown(flushStep);                        do                      {                          var tick = reader.Current as Tick;                            //If the next minute has clocked over; flush the consolidators; serialize and store data to disk.                          if (tick.Time.RoundDown(flushStep) > previousFlush)                          {                              previousFlush = WriteToDisk(processors' waitForFlush' tick.Time' flushStep);                              processors = new Processors();                          }                            //Add or create the consolidator-flush mechanism for symbol:                          List<AlgoSeekOptionsProcessor> symbolProcessors;                          if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                          {                              symbolProcessors = new List<AlgoSeekOptionsProcessor>(3)                                              {                                                  new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Trade' _resolution' _destination)'                                                  new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Quote' _resolution' _destination)'                                                  new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' _resolution' _destination)                                              };                                processors[tick.Symbol] = symbolProcessors;                          }                            // Pass current tick into processor: enum 0 = trade; 1 = quote' ' 2 = oi                          symbolProcessors[(int)tick.TickType].Process(tick);                            if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                          {                              Log.Trace("AlgoSeekOptionsConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%"' Math.Round(totalLinesProcessed / 1000000m' 2)' Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)' Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)' 100 * totalFilesProcessed / totalFiles);                          }                        }                      while (reader.MoveNext());                        Log.Trace("AlgoSeekOptionsConverter.Convert(): Performing final flush to disk... ");                      Flush(processors' DateTime.MaxValue' true);                      WriteToDisk(processors' waitForFlush' DateTime.MaxValue' flushStep' true);                        Log.Trace("AlgoSeekOptionsConverter.Convert(): Cleaning up extracted options file {0}"' csvFile);                      File.Delete(csvFile);                  }                    processors = null;                    Log.Trace("AlgoSeekOptionsConverter.Convert(): Finished processing file: " + file);                  Interlocked.Increment(ref totalFilesProcessed);                });
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(files' parallelOptionsProcessing' file =>              {                  Log.Trace("Remote File :" + file);                    var csvFile = Path.Combine(_source' Path.GetFileName(file).Replace(".bz2"' ""));                    Log.Trace("Source File :" + csvFile);                    if (!File.Exists(csvFile))                  {                      Log.Trace("AlgoSeekOptionsConverter.Convert(): Extracting " + file);                        var cmdArgs = " e " + file + " -o" + _source;                      RunZipper(zipper' cmdArgs);                  }                    // setting up local processors and the flush event                  var processors = new Processors();                  var waitForFlush = new ManualResetEvent(true);                    // symbol filters                   // var symbolFilterNames = new string[] { "AAPL"' "TWX"' "NWSA"' "FOXA"' "AIG"' "EGLE"' "EGEC" };                  // var symbolFilter = symbolFilterNames.SelectMany(name => new[] { name' name + "1"' name + ".1" }).ToHashSet();                  // var reader = new AlgoSeekOptionsReader(csvFile' _referenceDate' symbolFilter);                    var reader = new ToolBox.AlgoSeekOptionsConverter.AlgoSeekOptionsReader(csvFile' _referenceDate);                  if (start == DateTime.MinValue)                  {                      start = DateTime.Now;                  }                    var flushStep = TimeSpan.FromMinutes(15 + random.NextDouble() * 5);                    if (reader.Current != null) // reader contains the data                  {                      var previousFlush = reader.Current.Time.RoundDown(flushStep);                        do                      {                          var tick = reader.Current as Tick;                            //If the next minute has clocked over; flush the consolidators; serialize and store data to disk.                          if (tick.Time.RoundDown(flushStep) > previousFlush)                          {                              previousFlush = WriteToDisk(processors' waitForFlush' tick.Time' flushStep);                              processors = new Processors();                          }                            //Add or create the consolidator-flush mechanism for symbol:                          List<AlgoSeekOptionsProcessor> symbolProcessors;                          if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                          {                              symbolProcessors = new List<AlgoSeekOptionsProcessor>(3)                                              {                                                  new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Trade' _resolution' _destination)'                                                  new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Quote' _resolution' _destination)'                                                  new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' _resolution' _destination)                                              };                                processors[tick.Symbol] = symbolProcessors;                          }                            // Pass current tick into processor: enum 0 = trade; 1 = quote' ' 2 = oi                          symbolProcessors[(int)tick.TickType].Process(tick);                            if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                          {                              Log.Trace("AlgoSeekOptionsConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%"' Math.Round(totalLinesProcessed / 1000000m' 2)' Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)' Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)' 100 * totalFilesProcessed / totalFiles);                          }                        }                      while (reader.MoveNext());                        Log.Trace("AlgoSeekOptionsConverter.Convert(): Performing final flush to disk... ");                      Flush(processors' DateTime.MaxValue' true);                      WriteToDisk(processors' waitForFlush' DateTime.MaxValue' flushStep' true);                        Log.Trace("AlgoSeekOptionsConverter.Convert(): Cleaning up extracted options file {0}"' csvFile);                      File.Delete(csvFile);                  }                    processors = null;                    Log.Trace("AlgoSeekOptionsConverter.Convert(): Finished processing file: " + file);                  Interlocked.Increment(ref totalFilesProcessed);                });
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(files' parallelOptionsProcessing' file =>              {                  Log.Trace("Remote File :" + file);                    var csvFile = Path.Combine(_source' Path.GetFileName(file).Replace(".bz2"' ""));                    Log.Trace("Source File :" + csvFile);                    if (!File.Exists(csvFile))                  {                      Log.Trace("AlgoSeekOptionsConverter.Convert(): Extracting " + file);                        var cmdArgs = " e " + file + " -o" + _source;                      RunZipper(zipper' cmdArgs);                  }                    // setting up local processors and the flush event                  var processors = new Processors();                  var waitForFlush = new ManualResetEvent(true);                    // symbol filters                   // var symbolFilterNames = new string[] { "AAPL"' "TWX"' "NWSA"' "FOXA"' "AIG"' "EGLE"' "EGEC" };                  // var symbolFilter = symbolFilterNames.SelectMany(name => new[] { name' name + "1"' name + ".1" }).ToHashSet();                  // var reader = new AlgoSeekOptionsReader(csvFile' _referenceDate' symbolFilter);                    var reader = new ToolBox.AlgoSeekOptionsConverter.AlgoSeekOptionsReader(csvFile' _referenceDate);                  if (start == DateTime.MinValue)                  {                      start = DateTime.Now;                  }                    var flushStep = TimeSpan.FromMinutes(15 + random.NextDouble() * 5);                    if (reader.Current != null) // reader contains the data                  {                      var previousFlush = reader.Current.Time.RoundDown(flushStep);                        do                      {                          var tick = reader.Current as Tick;                            //If the next minute has clocked over; flush the consolidators; serialize and store data to disk.                          if (tick.Time.RoundDown(flushStep) > previousFlush)                          {                              previousFlush = WriteToDisk(processors' waitForFlush' tick.Time' flushStep);                              processors = new Processors();                          }                            //Add or create the consolidator-flush mechanism for symbol:                          List<AlgoSeekOptionsProcessor> symbolProcessors;                          if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                          {                              symbolProcessors = new List<AlgoSeekOptionsProcessor>(3)                                              {                                                  new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Trade' _resolution' _destination)'                                                  new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Quote' _resolution' _destination)'                                                  new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' _resolution' _destination)                                              };                                processors[tick.Symbol] = symbolProcessors;                          }                            // Pass current tick into processor: enum 0 = trade; 1 = quote' ' 2 = oi                          symbolProcessors[(int)tick.TickType].Process(tick);                            if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                          {                              Log.Trace("AlgoSeekOptionsConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%"' Math.Round(totalLinesProcessed / 1000000m' 2)' Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)' Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)' 100 * totalFilesProcessed / totalFiles);                          }                        }                      while (reader.MoveNext());                        Log.Trace("AlgoSeekOptionsConverter.Convert(): Performing final flush to disk... ");                      Flush(processors' DateTime.MaxValue' true);                      WriteToDisk(processors' waitForFlush' DateTime.MaxValue' flushStep' true);                        Log.Trace("AlgoSeekOptionsConverter.Convert(): Cleaning up extracted options file {0}"' csvFile);                      File.Delete(csvFile);                  }                    processors = null;                    Log.Trace("AlgoSeekOptionsConverter.Convert(): Finished processing file: " + file);                  Interlocked.Increment(ref totalFilesProcessed);                });
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(files' parallelOptionsProcessing' file =>              {                  Log.Trace("Remote File :" + file);                    var csvFile = Path.Combine(_source' Path.GetFileName(file).Replace(".bz2"' ""));                    Log.Trace("Source File :" + csvFile);                    if (!File.Exists(csvFile))                  {                      Log.Trace("AlgoSeekOptionsConverter.Convert(): Extracting " + file);                        var cmdArgs = " e " + file + " -o" + _source;                      RunZipper(zipper' cmdArgs);                  }                    // setting up local processors and the flush event                  var processors = new Processors();                  var waitForFlush = new ManualResetEvent(true);                    // symbol filters                   // var symbolFilterNames = new string[] { "AAPL"' "TWX"' "NWSA"' "FOXA"' "AIG"' "EGLE"' "EGEC" };                  // var symbolFilter = symbolFilterNames.SelectMany(name => new[] { name' name + "1"' name + ".1" }).ToHashSet();                  // var reader = new AlgoSeekOptionsReader(csvFile' _referenceDate' symbolFilter);                    var reader = new ToolBox.AlgoSeekOptionsConverter.AlgoSeekOptionsReader(csvFile' _referenceDate);                  if (start == DateTime.MinValue)                  {                      start = DateTime.Now;                  }                    var flushStep = TimeSpan.FromMinutes(15 + random.NextDouble() * 5);                    if (reader.Current != null) // reader contains the data                  {                      var previousFlush = reader.Current.Time.RoundDown(flushStep);                        do                      {                          var tick = reader.Current as Tick;                            //If the next minute has clocked over; flush the consolidators; serialize and store data to disk.                          if (tick.Time.RoundDown(flushStep) > previousFlush)                          {                              previousFlush = WriteToDisk(processors' waitForFlush' tick.Time' flushStep);                              processors = new Processors();                          }                            //Add or create the consolidator-flush mechanism for symbol:                          List<AlgoSeekOptionsProcessor> symbolProcessors;                          if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                          {                              symbolProcessors = new List<AlgoSeekOptionsProcessor>(3)                                              {                                                  new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Trade' _resolution' _destination)'                                                  new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Quote' _resolution' _destination)'                                                  new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' _resolution' _destination)                                              };                                processors[tick.Symbol] = symbolProcessors;                          }                            // Pass current tick into processor: enum 0 = trade; 1 = quote' ' 2 = oi                          symbolProcessors[(int)tick.TickType].Process(tick);                            if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                          {                              Log.Trace("AlgoSeekOptionsConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%"' Math.Round(totalLinesProcessed / 1000000m' 2)' Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)' Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)' 100 * totalFilesProcessed / totalFiles);                          }                        }                      while (reader.MoveNext());                        Log.Trace("AlgoSeekOptionsConverter.Convert(): Performing final flush to disk... ");                      Flush(processors' DateTime.MaxValue' true);                      WriteToDisk(processors' waitForFlush' DateTime.MaxValue' flushStep' true);                        Log.Trace("AlgoSeekOptionsConverter.Convert(): Cleaning up extracted options file {0}"' csvFile);                      File.Delete(csvFile);                  }                    processors = null;                    Log.Trace("AlgoSeekOptionsConverter.Convert(): Finished processing file: " + file);                  Interlocked.Increment(ref totalFilesProcessed);                });
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(files' parallelOptionsProcessing' file =>              {                  Log.Trace("Remote File :" + file);                    var csvFile = Path.Combine(_source' Path.GetFileName(file).Replace(".bz2"' ""));                    Log.Trace("Source File :" + csvFile);                    if (!File.Exists(csvFile))                  {                      Log.Trace("AlgoSeekOptionsConverter.Convert(): Extracting " + file);                        var cmdArgs = " e " + file + " -o" + _source;                      RunZipper(zipper' cmdArgs);                  }                    // setting up local processors and the flush event                  var processors = new Processors();                  var waitForFlush = new ManualResetEvent(true);                    // symbol filters                   // var symbolFilterNames = new string[] { "AAPL"' "TWX"' "NWSA"' "FOXA"' "AIG"' "EGLE"' "EGEC" };                  // var symbolFilter = symbolFilterNames.SelectMany(name => new[] { name' name + "1"' name + ".1" }).ToHashSet();                  // var reader = new AlgoSeekOptionsReader(csvFile' _referenceDate' symbolFilter);                    var reader = new ToolBox.AlgoSeekOptionsConverter.AlgoSeekOptionsReader(csvFile' _referenceDate);                  if (start == DateTime.MinValue)                  {                      start = DateTime.Now;                  }                    var flushStep = TimeSpan.FromMinutes(15 + random.NextDouble() * 5);                    if (reader.Current != null) // reader contains the data                  {                      var previousFlush = reader.Current.Time.RoundDown(flushStep);                        do                      {                          var tick = reader.Current as Tick;                            //If the next minute has clocked over; flush the consolidators; serialize and store data to disk.                          if (tick.Time.RoundDown(flushStep) > previousFlush)                          {                              previousFlush = WriteToDisk(processors' waitForFlush' tick.Time' flushStep);                              processors = new Processors();                          }                            //Add or create the consolidator-flush mechanism for symbol:                          List<AlgoSeekOptionsProcessor> symbolProcessors;                          if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                          {                              symbolProcessors = new List<AlgoSeekOptionsProcessor>(3)                                              {                                                  new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Trade' _resolution' _destination)'                                                  new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Quote' _resolution' _destination)'                                                  new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' _resolution' _destination)                                              };                                processors[tick.Symbol] = symbolProcessors;                          }                            // Pass current tick into processor: enum 0 = trade; 1 = quote' ' 2 = oi                          symbolProcessors[(int)tick.TickType].Process(tick);                            if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                          {                              Log.Trace("AlgoSeekOptionsConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%"' Math.Round(totalLinesProcessed / 1000000m' 2)' Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)' Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)' 100 * totalFilesProcessed / totalFiles);                          }                        }                      while (reader.MoveNext());                        Log.Trace("AlgoSeekOptionsConverter.Convert(): Performing final flush to disk... ");                      Flush(processors' DateTime.MaxValue' true);                      WriteToDisk(processors' waitForFlush' DateTime.MaxValue' flushStep' true);                        Log.Trace("AlgoSeekOptionsConverter.Convert(): Cleaning up extracted options file {0}"' csvFile);                      File.Delete(csvFile);                  }                    processors = null;                    Log.Trace("AlgoSeekOptionsConverter.Convert(): Finished processing file: " + file);                  Interlocked.Increment(ref totalFilesProcessed);                });
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,Convert,The following statement contains a magic number: Parallel.ForEach(files' parallelOptionsProcessing' file =>              {                  Log.Trace("Remote File :" + file);                    var csvFile = Path.Combine(_source' Path.GetFileName(file).Replace(".bz2"' ""));                    Log.Trace("Source File :" + csvFile);                    if (!File.Exists(csvFile))                  {                      Log.Trace("AlgoSeekOptionsConverter.Convert(): Extracting " + file);                        var cmdArgs = " e " + file + " -o" + _source;                      RunZipper(zipper' cmdArgs);                  }                    // setting up local processors and the flush event                  var processors = new Processors();                  var waitForFlush = new ManualResetEvent(true);                    // symbol filters                   // var symbolFilterNames = new string[] { "AAPL"' "TWX"' "NWSA"' "FOXA"' "AIG"' "EGLE"' "EGEC" };                  // var symbolFilter = symbolFilterNames.SelectMany(name => new[] { name' name + "1"' name + ".1" }).ToHashSet();                  // var reader = new AlgoSeekOptionsReader(csvFile' _referenceDate' symbolFilter);                    var reader = new ToolBox.AlgoSeekOptionsConverter.AlgoSeekOptionsReader(csvFile' _referenceDate);                  if (start == DateTime.MinValue)                  {                      start = DateTime.Now;                  }                    var flushStep = TimeSpan.FromMinutes(15 + random.NextDouble() * 5);                    if (reader.Current != null) // reader contains the data                  {                      var previousFlush = reader.Current.Time.RoundDown(flushStep);                        do                      {                          var tick = reader.Current as Tick;                            //If the next minute has clocked over; flush the consolidators; serialize and store data to disk.                          if (tick.Time.RoundDown(flushStep) > previousFlush)                          {                              previousFlush = WriteToDisk(processors' waitForFlush' tick.Time' flushStep);                              processors = new Processors();                          }                            //Add or create the consolidator-flush mechanism for symbol:                          List<AlgoSeekOptionsProcessor> symbolProcessors;                          if (!processors.TryGetValue(tick.Symbol' out symbolProcessors))                          {                              symbolProcessors = new List<AlgoSeekOptionsProcessor>(3)                                              {                                                  new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Trade' _resolution' _destination)'                                                  new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.Quote' _resolution' _destination)'                                                  new AlgoSeekOptionsProcessor(tick.Symbol' _referenceDate' TickType.OpenInterest' _resolution' _destination)                                              };                                processors[tick.Symbol] = symbolProcessors;                          }                            // Pass current tick into processor: enum 0 = trade; 1 = quote' ' 2 = oi                          symbolProcessors[(int)tick.TickType].Process(tick);                            if (Interlocked.Increment(ref totalLinesProcessed) % 1000000m == 0)                          {                              Log.Trace("AlgoSeekOptionsConverter.Convert(): Processed {0'3}M ticks( {1}k / sec); Memory in use: {2} MB; Total progress: {3}%"' Math.Round(totalLinesProcessed / 1000000m' 2)' Math.Round(totalLinesProcessed / 1000L / (DateTime.Now - start).TotalSeconds)' Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024)' 100 * totalFilesProcessed / totalFiles);                          }                        }                      while (reader.MoveNext());                        Log.Trace("AlgoSeekOptionsConverter.Convert(): Performing final flush to disk... ");                      Flush(processors' DateTime.MaxValue' true);                      WriteToDisk(processors' waitForFlush' DateTime.MaxValue' flushStep' true);                        Log.Trace("AlgoSeekOptionsConverter.Convert(): Cleaning up extracted options file {0}"' csvFile);                      File.Delete(csvFile);                  }                    processors = null;                    Log.Trace("AlgoSeekOptionsConverter.Convert(): Finished processing file: " + file);                  Interlocked.Increment(ref totalFilesProcessed);                });
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,RunZipper,The following statement contains a magic number: using (var process = new Process())              {                  process.StartInfo.UseShellExecute = false;                  process.StartInfo.CreateNoWindow = true;                  process.StartInfo.RedirectStandardError = true;                  process.StartInfo.RedirectStandardOutput = true;                  process.StartInfo.FileName = zipper;                  process.StartInfo.Arguments = cmdArgs;                    process.Start();                    using (var processWaiter = Task.Factory.StartNew(() => process.WaitForExit(execTimeout * 1000)))                  using (var outputReader = Task.Factory.StartNew(readStream' process.StandardOutput))                  using (var errorReader = Task.Factory.StartNew(readStream' process.StandardError))                  {                      bool waitResult = processWaiter.Result;                        if (!waitResult)                      {                          process.Kill();                          Log.Trace("7Zip Process Killed: " + cmdArgs);                      }                        Task.WaitAll(new Task[] { outputReader' errorReader }' execTimeout * 1000);                        if (!waitResult)                      {                          Log.Error("7Zip timed out: " + cmdArgs);                          throw new Exception("7z timed out");                      }                      else                      {                          if (process.ExitCode > 0)                          {                              Log.Error("7Zip Exited Unsuccessfully: " + cmdArgs);                              Log.Error("7zip message {0}"' process.StandardError.ReadToEnd());                              throw new Exception("7z exited unsuccessfully");                          }                          else                          {                              Log.Trace("7Zip Exited Successfully: " + cmdArgs);                          }                      }                  }              }
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsConverter,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsConverter.cs,RunZipper,The following statement contains a magic number: using (var process = new Process())              {                  process.StartInfo.UseShellExecute = false;                  process.StartInfo.CreateNoWindow = true;                  process.StartInfo.RedirectStandardError = true;                  process.StartInfo.RedirectStandardOutput = true;                  process.StartInfo.FileName = zipper;                  process.StartInfo.Arguments = cmdArgs;                    process.Start();                    using (var processWaiter = Task.Factory.StartNew(() => process.WaitForExit(execTimeout * 1000)))                  using (var outputReader = Task.Factory.StartNew(readStream' process.StandardOutput))                  using (var errorReader = Task.Factory.StartNew(readStream' process.StandardError))                  {                      bool waitResult = processWaiter.Result;                        if (!waitResult)                      {                          process.Kill();                          Log.Trace("7Zip Process Killed: " + cmdArgs);                      }                        Task.WaitAll(new Task[] { outputReader' errorReader }' execTimeout * 1000);                        if (!waitResult)                      {                          Log.Error("7Zip timed out: " + cmdArgs);                          throw new Exception("7z timed out");                      }                      else                      {                          if (process.ExitCode > 0)                          {                              Log.Error("7Zip Exited Unsuccessfully: " + cmdArgs);                              Log.Error("7zip message {0}"' process.StandardError.ReadToEnd());                              throw new Exception("7z exited unsuccessfully");                          }                          else                          {                              Log.Trace("7Zip Exited Successfully: " + cmdArgs);                          }                      }                  }              }
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsReader,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsReader.cs,Parse,The following statement contains a magic number: try              {                  // parse csv check column count                  var csv = line.ToCsv();                  if (csv.Count - 1 < _columnsCount)                  {                      return null;                  }                    TickType tickType;                  bool isAsk = false;                    switch (csv[_columnType])                  {                      case "O":                          tickType = TickType.OpenInterest;                          break;                      case "T":                          tickType = TickType.Trade;                          break;                      case "F":                          switch (csv[_columnSide])                          {                              case "B":                                  tickType = TickType.Quote;                                  isAsk = false;                                  break;                              case "O":                                  tickType = TickType.Quote;                                  isAsk = true;                                  break;                              default:                                  return null;                          }                          break;                      default:                          return null;                  }                    var underlying = csv[_columnTicker];                    if (_symbolFilter != null && !_symbolFilter.Contains(underlying))                      return null;                    if (string.IsNullOrEmpty(underlying))                  {                      return null;                  }                    // ignoring time zones completely -- this is all in the 'data-time-zone'                  var timeString = csv[_columnTimestamp];                  var hours = timeString.Substring(0' 2).ToInt32();                  var minutes = timeString.Substring(3' 2).ToInt32();                  var seconds = timeString.Substring(6' 2).ToInt32();                  var millis = timeString.Substring(9' 3).ToInt32();                  var time = _date.Add(new TimeSpan(0' hours' minutes' seconds' millis));                    var optionRight = csv[_columnPutCall][0] == 'P' ? OptionRight.Put : OptionRight.Call;                    var expiry = DateTime.MinValue;                  if (!DateTime.TryParseExact(csv[_columnExpiration]' "yyyyMMdd"' null' DateTimeStyles.None' out expiry))                  {                      // sometimes we see the corrupted data with yyyyMMdd' where dd is equal to zeros                      DateTime.TryParseExact(csv[_columnExpiration]' "yyyyMM"' null' DateTimeStyles.None' out expiry);                  }                    var strike = csv[_columnStrike].ToDecimal() / 10000m;                  var optionStyle = OptionStyle.American; // couldn't see this specified in the file' maybe need a reference file                    Symbol symbol;                    if (!_underlyingCache.ContainsKey(underlying))                  {                      symbol = Symbol.CreateOption(underlying' Market.USA' optionStyle' optionRight' strike' expiry' null' false);                      _underlyingCache[underlying] = symbol.Underlying;                  }                  else                  {                      symbol = Symbol.CreateOption(_underlyingCache[underlying]' Market.USA' optionStyle' optionRight' strike' expiry);                  }                    var price = csv[_columnPremium].ToDecimal() / 10000m;                  var quantity = csv[_columnQuantity].ToInt32();                    switch (tickType)                  {                      case TickType.Quote:                            var tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = price                          };                            if (isAsk)                          {                              tick.AskPrice = price;                              tick.AskSize = quantity;                          }                          else                          {                              tick.BidPrice = price;                              tick.BidSize = quantity;                          }                            return tick;                        case TickType.Trade:                            tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = price'                              Quantity = quantity                          };                            return tick;                        case TickType.OpenInterest:                            tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = quantity                          };                            return tick;                  }                    return null;              }              catch(Exception err)              {                  Log.Error(err);                  Log.Trace("Line: {0}' File: {1}"' line' _file);                  return null;              }
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsReader,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsReader.cs,Parse,The following statement contains a magic number: try              {                  // parse csv check column count                  var csv = line.ToCsv();                  if (csv.Count - 1 < _columnsCount)                  {                      return null;                  }                    TickType tickType;                  bool isAsk = false;                    switch (csv[_columnType])                  {                      case "O":                          tickType = TickType.OpenInterest;                          break;                      case "T":                          tickType = TickType.Trade;                          break;                      case "F":                          switch (csv[_columnSide])                          {                              case "B":                                  tickType = TickType.Quote;                                  isAsk = false;                                  break;                              case "O":                                  tickType = TickType.Quote;                                  isAsk = true;                                  break;                              default:                                  return null;                          }                          break;                      default:                          return null;                  }                    var underlying = csv[_columnTicker];                    if (_symbolFilter != null && !_symbolFilter.Contains(underlying))                      return null;                    if (string.IsNullOrEmpty(underlying))                  {                      return null;                  }                    // ignoring time zones completely -- this is all in the 'data-time-zone'                  var timeString = csv[_columnTimestamp];                  var hours = timeString.Substring(0' 2).ToInt32();                  var minutes = timeString.Substring(3' 2).ToInt32();                  var seconds = timeString.Substring(6' 2).ToInt32();                  var millis = timeString.Substring(9' 3).ToInt32();                  var time = _date.Add(new TimeSpan(0' hours' minutes' seconds' millis));                    var optionRight = csv[_columnPutCall][0] == 'P' ? OptionRight.Put : OptionRight.Call;                    var expiry = DateTime.MinValue;                  if (!DateTime.TryParseExact(csv[_columnExpiration]' "yyyyMMdd"' null' DateTimeStyles.None' out expiry))                  {                      // sometimes we see the corrupted data with yyyyMMdd' where dd is equal to zeros                      DateTime.TryParseExact(csv[_columnExpiration]' "yyyyMM"' null' DateTimeStyles.None' out expiry);                  }                    var strike = csv[_columnStrike].ToDecimal() / 10000m;                  var optionStyle = OptionStyle.American; // couldn't see this specified in the file' maybe need a reference file                    Symbol symbol;                    if (!_underlyingCache.ContainsKey(underlying))                  {                      symbol = Symbol.CreateOption(underlying' Market.USA' optionStyle' optionRight' strike' expiry' null' false);                      _underlyingCache[underlying] = symbol.Underlying;                  }                  else                  {                      symbol = Symbol.CreateOption(_underlyingCache[underlying]' Market.USA' optionStyle' optionRight' strike' expiry);                  }                    var price = csv[_columnPremium].ToDecimal() / 10000m;                  var quantity = csv[_columnQuantity].ToInt32();                    switch (tickType)                  {                      case TickType.Quote:                            var tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = price                          };                            if (isAsk)                          {                              tick.AskPrice = price;                              tick.AskSize = quantity;                          }                          else                          {                              tick.BidPrice = price;                              tick.BidSize = quantity;                          }                            return tick;                        case TickType.Trade:                            tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = price'                              Quantity = quantity                          };                            return tick;                        case TickType.OpenInterest:                            tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = quantity                          };                            return tick;                  }                    return null;              }              catch(Exception err)              {                  Log.Error(err);                  Log.Trace("Line: {0}' File: {1}"' line' _file);                  return null;              }
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsReader,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsReader.cs,Parse,The following statement contains a magic number: try              {                  // parse csv check column count                  var csv = line.ToCsv();                  if (csv.Count - 1 < _columnsCount)                  {                      return null;                  }                    TickType tickType;                  bool isAsk = false;                    switch (csv[_columnType])                  {                      case "O":                          tickType = TickType.OpenInterest;                          break;                      case "T":                          tickType = TickType.Trade;                          break;                      case "F":                          switch (csv[_columnSide])                          {                              case "B":                                  tickType = TickType.Quote;                                  isAsk = false;                                  break;                              case "O":                                  tickType = TickType.Quote;                                  isAsk = true;                                  break;                              default:                                  return null;                          }                          break;                      default:                          return null;                  }                    var underlying = csv[_columnTicker];                    if (_symbolFilter != null && !_symbolFilter.Contains(underlying))                      return null;                    if (string.IsNullOrEmpty(underlying))                  {                      return null;                  }                    // ignoring time zones completely -- this is all in the 'data-time-zone'                  var timeString = csv[_columnTimestamp];                  var hours = timeString.Substring(0' 2).ToInt32();                  var minutes = timeString.Substring(3' 2).ToInt32();                  var seconds = timeString.Substring(6' 2).ToInt32();                  var millis = timeString.Substring(9' 3).ToInt32();                  var time = _date.Add(new TimeSpan(0' hours' minutes' seconds' millis));                    var optionRight = csv[_columnPutCall][0] == 'P' ? OptionRight.Put : OptionRight.Call;                    var expiry = DateTime.MinValue;                  if (!DateTime.TryParseExact(csv[_columnExpiration]' "yyyyMMdd"' null' DateTimeStyles.None' out expiry))                  {                      // sometimes we see the corrupted data with yyyyMMdd' where dd is equal to zeros                      DateTime.TryParseExact(csv[_columnExpiration]' "yyyyMM"' null' DateTimeStyles.None' out expiry);                  }                    var strike = csv[_columnStrike].ToDecimal() / 10000m;                  var optionStyle = OptionStyle.American; // couldn't see this specified in the file' maybe need a reference file                    Symbol symbol;                    if (!_underlyingCache.ContainsKey(underlying))                  {                      symbol = Symbol.CreateOption(underlying' Market.USA' optionStyle' optionRight' strike' expiry' null' false);                      _underlyingCache[underlying] = symbol.Underlying;                  }                  else                  {                      symbol = Symbol.CreateOption(_underlyingCache[underlying]' Market.USA' optionStyle' optionRight' strike' expiry);                  }                    var price = csv[_columnPremium].ToDecimal() / 10000m;                  var quantity = csv[_columnQuantity].ToInt32();                    switch (tickType)                  {                      case TickType.Quote:                            var tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = price                          };                            if (isAsk)                          {                              tick.AskPrice = price;                              tick.AskSize = quantity;                          }                          else                          {                              tick.BidPrice = price;                              tick.BidSize = quantity;                          }                            return tick;                        case TickType.Trade:                            tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = price'                              Quantity = quantity                          };                            return tick;                        case TickType.OpenInterest:                            tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = quantity                          };                            return tick;                  }                    return null;              }              catch(Exception err)              {                  Log.Error(err);                  Log.Trace("Line: {0}' File: {1}"' line' _file);                  return null;              }
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsReader,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsReader.cs,Parse,The following statement contains a magic number: try              {                  // parse csv check column count                  var csv = line.ToCsv();                  if (csv.Count - 1 < _columnsCount)                  {                      return null;                  }                    TickType tickType;                  bool isAsk = false;                    switch (csv[_columnType])                  {                      case "O":                          tickType = TickType.OpenInterest;                          break;                      case "T":                          tickType = TickType.Trade;                          break;                      case "F":                          switch (csv[_columnSide])                          {                              case "B":                                  tickType = TickType.Quote;                                  isAsk = false;                                  break;                              case "O":                                  tickType = TickType.Quote;                                  isAsk = true;                                  break;                              default:                                  return null;                          }                          break;                      default:                          return null;                  }                    var underlying = csv[_columnTicker];                    if (_symbolFilter != null && !_symbolFilter.Contains(underlying))                      return null;                    if (string.IsNullOrEmpty(underlying))                  {                      return null;                  }                    // ignoring time zones completely -- this is all in the 'data-time-zone'                  var timeString = csv[_columnTimestamp];                  var hours = timeString.Substring(0' 2).ToInt32();                  var minutes = timeString.Substring(3' 2).ToInt32();                  var seconds = timeString.Substring(6' 2).ToInt32();                  var millis = timeString.Substring(9' 3).ToInt32();                  var time = _date.Add(new TimeSpan(0' hours' minutes' seconds' millis));                    var optionRight = csv[_columnPutCall][0] == 'P' ? OptionRight.Put : OptionRight.Call;                    var expiry = DateTime.MinValue;                  if (!DateTime.TryParseExact(csv[_columnExpiration]' "yyyyMMdd"' null' DateTimeStyles.None' out expiry))                  {                      // sometimes we see the corrupted data with yyyyMMdd' where dd is equal to zeros                      DateTime.TryParseExact(csv[_columnExpiration]' "yyyyMM"' null' DateTimeStyles.None' out expiry);                  }                    var strike = csv[_columnStrike].ToDecimal() / 10000m;                  var optionStyle = OptionStyle.American; // couldn't see this specified in the file' maybe need a reference file                    Symbol symbol;                    if (!_underlyingCache.ContainsKey(underlying))                  {                      symbol = Symbol.CreateOption(underlying' Market.USA' optionStyle' optionRight' strike' expiry' null' false);                      _underlyingCache[underlying] = symbol.Underlying;                  }                  else                  {                      symbol = Symbol.CreateOption(_underlyingCache[underlying]' Market.USA' optionStyle' optionRight' strike' expiry);                  }                    var price = csv[_columnPremium].ToDecimal() / 10000m;                  var quantity = csv[_columnQuantity].ToInt32();                    switch (tickType)                  {                      case TickType.Quote:                            var tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = price                          };                            if (isAsk)                          {                              tick.AskPrice = price;                              tick.AskSize = quantity;                          }                          else                          {                              tick.BidPrice = price;                              tick.BidSize = quantity;                          }                            return tick;                        case TickType.Trade:                            tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = price'                              Quantity = quantity                          };                            return tick;                        case TickType.OpenInterest:                            tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = quantity                          };                            return tick;                  }                    return null;              }              catch(Exception err)              {                  Log.Error(err);                  Log.Trace("Line: {0}' File: {1}"' line' _file);                  return null;              }
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsReader,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsReader.cs,Parse,The following statement contains a magic number: try              {                  // parse csv check column count                  var csv = line.ToCsv();                  if (csv.Count - 1 < _columnsCount)                  {                      return null;                  }                    TickType tickType;                  bool isAsk = false;                    switch (csv[_columnType])                  {                      case "O":                          tickType = TickType.OpenInterest;                          break;                      case "T":                          tickType = TickType.Trade;                          break;                      case "F":                          switch (csv[_columnSide])                          {                              case "B":                                  tickType = TickType.Quote;                                  isAsk = false;                                  break;                              case "O":                                  tickType = TickType.Quote;                                  isAsk = true;                                  break;                              default:                                  return null;                          }                          break;                      default:                          return null;                  }                    var underlying = csv[_columnTicker];                    if (_symbolFilter != null && !_symbolFilter.Contains(underlying))                      return null;                    if (string.IsNullOrEmpty(underlying))                  {                      return null;                  }                    // ignoring time zones completely -- this is all in the 'data-time-zone'                  var timeString = csv[_columnTimestamp];                  var hours = timeString.Substring(0' 2).ToInt32();                  var minutes = timeString.Substring(3' 2).ToInt32();                  var seconds = timeString.Substring(6' 2).ToInt32();                  var millis = timeString.Substring(9' 3).ToInt32();                  var time = _date.Add(new TimeSpan(0' hours' minutes' seconds' millis));                    var optionRight = csv[_columnPutCall][0] == 'P' ? OptionRight.Put : OptionRight.Call;                    var expiry = DateTime.MinValue;                  if (!DateTime.TryParseExact(csv[_columnExpiration]' "yyyyMMdd"' null' DateTimeStyles.None' out expiry))                  {                      // sometimes we see the corrupted data with yyyyMMdd' where dd is equal to zeros                      DateTime.TryParseExact(csv[_columnExpiration]' "yyyyMM"' null' DateTimeStyles.None' out expiry);                  }                    var strike = csv[_columnStrike].ToDecimal() / 10000m;                  var optionStyle = OptionStyle.American; // couldn't see this specified in the file' maybe need a reference file                    Symbol symbol;                    if (!_underlyingCache.ContainsKey(underlying))                  {                      symbol = Symbol.CreateOption(underlying' Market.USA' optionStyle' optionRight' strike' expiry' null' false);                      _underlyingCache[underlying] = symbol.Underlying;                  }                  else                  {                      symbol = Symbol.CreateOption(_underlyingCache[underlying]' Market.USA' optionStyle' optionRight' strike' expiry);                  }                    var price = csv[_columnPremium].ToDecimal() / 10000m;                  var quantity = csv[_columnQuantity].ToInt32();                    switch (tickType)                  {                      case TickType.Quote:                            var tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = price                          };                            if (isAsk)                          {                              tick.AskPrice = price;                              tick.AskSize = quantity;                          }                          else                          {                              tick.BidPrice = price;                              tick.BidSize = quantity;                          }                            return tick;                        case TickType.Trade:                            tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = price'                              Quantity = quantity                          };                            return tick;                        case TickType.OpenInterest:                            tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = quantity                          };                            return tick;                  }                    return null;              }              catch(Exception err)              {                  Log.Error(err);                  Log.Trace("Line: {0}' File: {1}"' line' _file);                  return null;              }
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsReader,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsReader.cs,Parse,The following statement contains a magic number: try              {                  // parse csv check column count                  var csv = line.ToCsv();                  if (csv.Count - 1 < _columnsCount)                  {                      return null;                  }                    TickType tickType;                  bool isAsk = false;                    switch (csv[_columnType])                  {                      case "O":                          tickType = TickType.OpenInterest;                          break;                      case "T":                          tickType = TickType.Trade;                          break;                      case "F":                          switch (csv[_columnSide])                          {                              case "B":                                  tickType = TickType.Quote;                                  isAsk = false;                                  break;                              case "O":                                  tickType = TickType.Quote;                                  isAsk = true;                                  break;                              default:                                  return null;                          }                          break;                      default:                          return null;                  }                    var underlying = csv[_columnTicker];                    if (_symbolFilter != null && !_symbolFilter.Contains(underlying))                      return null;                    if (string.IsNullOrEmpty(underlying))                  {                      return null;                  }                    // ignoring time zones completely -- this is all in the 'data-time-zone'                  var timeString = csv[_columnTimestamp];                  var hours = timeString.Substring(0' 2).ToInt32();                  var minutes = timeString.Substring(3' 2).ToInt32();                  var seconds = timeString.Substring(6' 2).ToInt32();                  var millis = timeString.Substring(9' 3).ToInt32();                  var time = _date.Add(new TimeSpan(0' hours' minutes' seconds' millis));                    var optionRight = csv[_columnPutCall][0] == 'P' ? OptionRight.Put : OptionRight.Call;                    var expiry = DateTime.MinValue;                  if (!DateTime.TryParseExact(csv[_columnExpiration]' "yyyyMMdd"' null' DateTimeStyles.None' out expiry))                  {                      // sometimes we see the corrupted data with yyyyMMdd' where dd is equal to zeros                      DateTime.TryParseExact(csv[_columnExpiration]' "yyyyMM"' null' DateTimeStyles.None' out expiry);                  }                    var strike = csv[_columnStrike].ToDecimal() / 10000m;                  var optionStyle = OptionStyle.American; // couldn't see this specified in the file' maybe need a reference file                    Symbol symbol;                    if (!_underlyingCache.ContainsKey(underlying))                  {                      symbol = Symbol.CreateOption(underlying' Market.USA' optionStyle' optionRight' strike' expiry' null' false);                      _underlyingCache[underlying] = symbol.Underlying;                  }                  else                  {                      symbol = Symbol.CreateOption(_underlyingCache[underlying]' Market.USA' optionStyle' optionRight' strike' expiry);                  }                    var price = csv[_columnPremium].ToDecimal() / 10000m;                  var quantity = csv[_columnQuantity].ToInt32();                    switch (tickType)                  {                      case TickType.Quote:                            var tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = price                          };                            if (isAsk)                          {                              tick.AskPrice = price;                              tick.AskSize = quantity;                          }                          else                          {                              tick.BidPrice = price;                              tick.BidSize = quantity;                          }                            return tick;                        case TickType.Trade:                            tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = price'                              Quantity = quantity                          };                            return tick;                        case TickType.OpenInterest:                            tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = quantity                          };                            return tick;                  }                    return null;              }              catch(Exception err)              {                  Log.Error(err);                  Log.Trace("Line: {0}' File: {1}"' line' _file);                  return null;              }
Magic Number,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsReader,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsReader.cs,Parse,The following statement contains a magic number: try              {                  // parse csv check column count                  var csv = line.ToCsv();                  if (csv.Count - 1 < _columnsCount)                  {                      return null;                  }                    TickType tickType;                  bool isAsk = false;                    switch (csv[_columnType])                  {                      case "O":                          tickType = TickType.OpenInterest;                          break;                      case "T":                          tickType = TickType.Trade;                          break;                      case "F":                          switch (csv[_columnSide])                          {                              case "B":                                  tickType = TickType.Quote;                                  isAsk = false;                                  break;                              case "O":                                  tickType = TickType.Quote;                                  isAsk = true;                                  break;                              default:                                  return null;                          }                          break;                      default:                          return null;                  }                    var underlying = csv[_columnTicker];                    if (_symbolFilter != null && !_symbolFilter.Contains(underlying))                      return null;                    if (string.IsNullOrEmpty(underlying))                  {                      return null;                  }                    // ignoring time zones completely -- this is all in the 'data-time-zone'                  var timeString = csv[_columnTimestamp];                  var hours = timeString.Substring(0' 2).ToInt32();                  var minutes = timeString.Substring(3' 2).ToInt32();                  var seconds = timeString.Substring(6' 2).ToInt32();                  var millis = timeString.Substring(9' 3).ToInt32();                  var time = _date.Add(new TimeSpan(0' hours' minutes' seconds' millis));                    var optionRight = csv[_columnPutCall][0] == 'P' ? OptionRight.Put : OptionRight.Call;                    var expiry = DateTime.MinValue;                  if (!DateTime.TryParseExact(csv[_columnExpiration]' "yyyyMMdd"' null' DateTimeStyles.None' out expiry))                  {                      // sometimes we see the corrupted data with yyyyMMdd' where dd is equal to zeros                      DateTime.TryParseExact(csv[_columnExpiration]' "yyyyMM"' null' DateTimeStyles.None' out expiry);                  }                    var strike = csv[_columnStrike].ToDecimal() / 10000m;                  var optionStyle = OptionStyle.American; // couldn't see this specified in the file' maybe need a reference file                    Symbol symbol;                    if (!_underlyingCache.ContainsKey(underlying))                  {                      symbol = Symbol.CreateOption(underlying' Market.USA' optionStyle' optionRight' strike' expiry' null' false);                      _underlyingCache[underlying] = symbol.Underlying;                  }                  else                  {                      symbol = Symbol.CreateOption(_underlyingCache[underlying]' Market.USA' optionStyle' optionRight' strike' expiry);                  }                    var price = csv[_columnPremium].ToDecimal() / 10000m;                  var quantity = csv[_columnQuantity].ToInt32();                    switch (tickType)                  {                      case TickType.Quote:                            var tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = price                          };                            if (isAsk)                          {                              tick.AskPrice = price;                              tick.AskSize = quantity;                          }                          else                          {                              tick.BidPrice = price;                              tick.BidSize = quantity;                          }                            return tick;                        case TickType.Trade:                            tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = price'                              Quantity = quantity                          };                            return tick;                        case TickType.OpenInterest:                            tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = quantity                          };                            return tick;                  }                    return null;              }              catch(Exception err)              {                  Log.Error(err);                  Log.Trace("Line: {0}' File: {1}"' line' _file);                  return null;              }
Magic Number,QuantConnect.ToolBox.CoarseUniverseGenerator,Program,C:\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\Program.cs,ProcessDailyFolder,The following statement contains a magic number: foreach (var file in Directory.EnumerateFiles(dailyFolder))              {                  try                  {                      var symbol = Path.GetFileNameWithoutExtension(file);                      if (symbol == null)                      {                          Log.Trace("CoarseGenerator.ProcessDailyFolder(): Unable to resolve symbol from file: {0}"' file);                          continue;                      }                        if (symbolResolver != null)                      {                          symbol = symbolResolver(symbol);                      }                        symbol = symbol.ToUpper();                        if (exclusions.Contains(symbol))                      {                          Log.Trace("Excluded symbol: {0}"' symbol);                          continue;                      }                        // check if symbol has any fine fundamental data                      var firstFineSymbolDate = DateTime.MaxValue;                      if (Directory.Exists(fineFundamentalFolder))                      {                          var fineSymbolFolder = Path.Combine(fineFundamentalFolder' symbol.ToLower());                            var firstFineSymbolFileName = Directory.Exists(fineSymbolFolder) ? Directory.GetFiles(fineSymbolFolder).OrderBy(x => x).FirstOrDefault() : string.Empty;                          if (firstFineSymbolFileName.Length > 0)                          {                              firstFineSymbolDate = DateTime.ParseExact(Path.GetFileNameWithoutExtension(firstFineSymbolFileName)' "yyyyMMdd"' CultureInfo.InvariantCulture);                          }                      }                        ZipFile zip;                      using (var reader = Compression.Unzip(file' out zip))                      {                          var checkedForMapFile = false;                            symbols++;                          string line;                          while ((line = reader.ReadLine()) != null)                          {                              //20150625.csv                              var csv = line.Split(''');                              var date = DateTime.ParseExact(csv[0]' DateFormat.TwelveCharacter' CultureInfo.InvariantCulture);                                // spin past old data                              if (date < startDate) continue;                                if (ignoreMapless && !checkedForMapFile)                              {                                  checkedForMapFile = true;                                  if (!mapFileResolver.ResolveMapFile(symbol' date).Any())                                  {                                      // if the resolved map file has zero entries then it's a mapless symbol                                      maplessCount++;                                      break;                                  }                              }                                var close = decimal.Parse(csv[4])/scaleFactor;                              var volume = long.Parse(csv[5]);                                var dollarVolume = close * volume;                                var coarseFile = Path.Combine(coarseFolder' date.ToString("yyyyMMdd") + ".csv");                              dates.Add(date);                                // try to resolve a map file and if found' regen the sid                              var sid = SecurityIdentifier.GenerateEquity(SecurityIdentifier.DefaultDate' symbol' market);                              var mapFile = mapFileResolver.ResolveMapFile(symbol' date);                              if (!mapFile.IsNullOrEmpty())                              {                                  // if available' us the permtick in the coarse files' because of this' we need                                  // to update the coarse files each time new map files are added/permticks change                                  sid = SecurityIdentifier.GenerateEquity(mapFile.FirstDate' mapFile.OrderBy(x => x.Date).First().MappedSymbol' market);                              }                              if (mapFile == null && ignoreMapless)                              {                                  // if we're ignoring mapless files then we should always be able to resolve this                                  Log.Error(string.Format("CoarseGenerator.ProcessDailyFolder(): Unable to resolve map file for {0} as of {1}"' symbol' date.ToShortDateString()));                                  continue;                              }                                // check if symbol has fine fundamental data for the current date                              var hasFundamentalDataForDate = date >= firstFineSymbolDate;                                // sid'symbol'close'volume'dollar volume'has fundamental data                              var coarseFileLine = sid + "'" + symbol + "'" + close + "'" + volume + "'" + Math.Truncate(dollarVolume) + "'" + hasFundamentalDataForDate;                                StreamWriter writer;                              if (!writers.TryGetValue(coarseFile' out writer))                              {                                  writer = new StreamWriter(new FileStream(coarseFile' FileMode.Create' FileAccess.Write' FileShare.Write));                                  writers[coarseFile] = writer;                              }                              writer.WriteLine(coarseFileLine);                          }                      }                        if (symbols%1000 == 0)                      {                          Log.Trace("CoarseGenerator.ProcessDailyFolder(): Completed processing {0} symbols. Current elapsed: {1} seconds"' symbols' (DateTime.UtcNow - start).TotalSeconds.ToString("0.00"));                      }                  }                  catch (Exception err)                  {                      // log the error and continue with the process                      Log.Error(err.ToString());                  }              }
Magic Number,QuantConnect.ToolBox.CoarseUniverseGenerator,Program,C:\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\Program.cs,ProcessDailyFolder,The following statement contains a magic number: foreach (var file in Directory.EnumerateFiles(dailyFolder))              {                  try                  {                      var symbol = Path.GetFileNameWithoutExtension(file);                      if (symbol == null)                      {                          Log.Trace("CoarseGenerator.ProcessDailyFolder(): Unable to resolve symbol from file: {0}"' file);                          continue;                      }                        if (symbolResolver != null)                      {                          symbol = symbolResolver(symbol);                      }                        symbol = symbol.ToUpper();                        if (exclusions.Contains(symbol))                      {                          Log.Trace("Excluded symbol: {0}"' symbol);                          continue;                      }                        // check if symbol has any fine fundamental data                      var firstFineSymbolDate = DateTime.MaxValue;                      if (Directory.Exists(fineFundamentalFolder))                      {                          var fineSymbolFolder = Path.Combine(fineFundamentalFolder' symbol.ToLower());                            var firstFineSymbolFileName = Directory.Exists(fineSymbolFolder) ? Directory.GetFiles(fineSymbolFolder).OrderBy(x => x).FirstOrDefault() : string.Empty;                          if (firstFineSymbolFileName.Length > 0)                          {                              firstFineSymbolDate = DateTime.ParseExact(Path.GetFileNameWithoutExtension(firstFineSymbolFileName)' "yyyyMMdd"' CultureInfo.InvariantCulture);                          }                      }                        ZipFile zip;                      using (var reader = Compression.Unzip(file' out zip))                      {                          var checkedForMapFile = false;                            symbols++;                          string line;                          while ((line = reader.ReadLine()) != null)                          {                              //20150625.csv                              var csv = line.Split(''');                              var date = DateTime.ParseExact(csv[0]' DateFormat.TwelveCharacter' CultureInfo.InvariantCulture);                                // spin past old data                              if (date < startDate) continue;                                if (ignoreMapless && !checkedForMapFile)                              {                                  checkedForMapFile = true;                                  if (!mapFileResolver.ResolveMapFile(symbol' date).Any())                                  {                                      // if the resolved map file has zero entries then it's a mapless symbol                                      maplessCount++;                                      break;                                  }                              }                                var close = decimal.Parse(csv[4])/scaleFactor;                              var volume = long.Parse(csv[5]);                                var dollarVolume = close * volume;                                var coarseFile = Path.Combine(coarseFolder' date.ToString("yyyyMMdd") + ".csv");                              dates.Add(date);                                // try to resolve a map file and if found' regen the sid                              var sid = SecurityIdentifier.GenerateEquity(SecurityIdentifier.DefaultDate' symbol' market);                              var mapFile = mapFileResolver.ResolveMapFile(symbol' date);                              if (!mapFile.IsNullOrEmpty())                              {                                  // if available' us the permtick in the coarse files' because of this' we need                                  // to update the coarse files each time new map files are added/permticks change                                  sid = SecurityIdentifier.GenerateEquity(mapFile.FirstDate' mapFile.OrderBy(x => x.Date).First().MappedSymbol' market);                              }                              if (mapFile == null && ignoreMapless)                              {                                  // if we're ignoring mapless files then we should always be able to resolve this                                  Log.Error(string.Format("CoarseGenerator.ProcessDailyFolder(): Unable to resolve map file for {0} as of {1}"' symbol' date.ToShortDateString()));                                  continue;                              }                                // check if symbol has fine fundamental data for the current date                              var hasFundamentalDataForDate = date >= firstFineSymbolDate;                                // sid'symbol'close'volume'dollar volume'has fundamental data                              var coarseFileLine = sid + "'" + symbol + "'" + close + "'" + volume + "'" + Math.Truncate(dollarVolume) + "'" + hasFundamentalDataForDate;                                StreamWriter writer;                              if (!writers.TryGetValue(coarseFile' out writer))                              {                                  writer = new StreamWriter(new FileStream(coarseFile' FileMode.Create' FileAccess.Write' FileShare.Write));                                  writers[coarseFile] = writer;                              }                              writer.WriteLine(coarseFileLine);                          }                      }                        if (symbols%1000 == 0)                      {                          Log.Trace("CoarseGenerator.ProcessDailyFolder(): Completed processing {0} symbols. Current elapsed: {1} seconds"' symbols' (DateTime.UtcNow - start).TotalSeconds.ToString("0.00"));                      }                  }                  catch (Exception err)                  {                      // log the error and continue with the process                      Log.Error(err.ToString());                  }              }
Magic Number,QuantConnect.ToolBox.CoarseUniverseGenerator,Program,C:\repos\QuantConnect_Lean\ToolBox\CoarseUniverseGenerator\Program.cs,ProcessDailyFolder,The following statement contains a magic number: foreach (var file in Directory.EnumerateFiles(dailyFolder))              {                  try                  {                      var symbol = Path.GetFileNameWithoutExtension(file);                      if (symbol == null)                      {                          Log.Trace("CoarseGenerator.ProcessDailyFolder(): Unable to resolve symbol from file: {0}"' file);                          continue;                      }                        if (symbolResolver != null)                      {                          symbol = symbolResolver(symbol);                      }                        symbol = symbol.ToUpper();                        if (exclusions.Contains(symbol))                      {                          Log.Trace("Excluded symbol: {0}"' symbol);                          continue;                      }                        // check if symbol has any fine fundamental data                      var firstFineSymbolDate = DateTime.MaxValue;                      if (Directory.Exists(fineFundamentalFolder))                      {                          var fineSymbolFolder = Path.Combine(fineFundamentalFolder' symbol.ToLower());                            var firstFineSymbolFileName = Directory.Exists(fineSymbolFolder) ? Directory.GetFiles(fineSymbolFolder).OrderBy(x => x).FirstOrDefault() : string.Empty;                          if (firstFineSymbolFileName.Length > 0)                          {                              firstFineSymbolDate = DateTime.ParseExact(Path.GetFileNameWithoutExtension(firstFineSymbolFileName)' "yyyyMMdd"' CultureInfo.InvariantCulture);                          }                      }                        ZipFile zip;                      using (var reader = Compression.Unzip(file' out zip))                      {                          var checkedForMapFile = false;                            symbols++;                          string line;                          while ((line = reader.ReadLine()) != null)                          {                              //20150625.csv                              var csv = line.Split(''');                              var date = DateTime.ParseExact(csv[0]' DateFormat.TwelveCharacter' CultureInfo.InvariantCulture);                                // spin past old data                              if (date < startDate) continue;                                if (ignoreMapless && !checkedForMapFile)                              {                                  checkedForMapFile = true;                                  if (!mapFileResolver.ResolveMapFile(symbol' date).Any())                                  {                                      // if the resolved map file has zero entries then it's a mapless symbol                                      maplessCount++;                                      break;                                  }                              }                                var close = decimal.Parse(csv[4])/scaleFactor;                              var volume = long.Parse(csv[5]);                                var dollarVolume = close * volume;                                var coarseFile = Path.Combine(coarseFolder' date.ToString("yyyyMMdd") + ".csv");                              dates.Add(date);                                // try to resolve a map file and if found' regen the sid                              var sid = SecurityIdentifier.GenerateEquity(SecurityIdentifier.DefaultDate' symbol' market);                              var mapFile = mapFileResolver.ResolveMapFile(symbol' date);                              if (!mapFile.IsNullOrEmpty())                              {                                  // if available' us the permtick in the coarse files' because of this' we need                                  // to update the coarse files each time new map files are added/permticks change                                  sid = SecurityIdentifier.GenerateEquity(mapFile.FirstDate' mapFile.OrderBy(x => x.Date).First().MappedSymbol' market);                              }                              if (mapFile == null && ignoreMapless)                              {                                  // if we're ignoring mapless files then we should always be able to resolve this                                  Log.Error(string.Format("CoarseGenerator.ProcessDailyFolder(): Unable to resolve map file for {0} as of {1}"' symbol' date.ToShortDateString()));                                  continue;                              }                                // check if symbol has fine fundamental data for the current date                              var hasFundamentalDataForDate = date >= firstFineSymbolDate;                                // sid'symbol'close'volume'dollar volume'has fundamental data                              var coarseFileLine = sid + "'" + symbol + "'" + close + "'" + volume + "'" + Math.Truncate(dollarVolume) + "'" + hasFundamentalDataForDate;                                StreamWriter writer;                              if (!writers.TryGetValue(coarseFile' out writer))                              {                                  writer = new StreamWriter(new FileStream(coarseFile' FileMode.Create' FileAccess.Write' FileShare.Write));                                  writers[coarseFile] = writer;                              }                              writer.WriteLine(coarseFileLine);                          }                      }                        if (symbols%1000 == 0)                      {                          Log.Trace("CoarseGenerator.ProcessDailyFolder(): Completed processing {0} symbols. Current elapsed: {1} seconds"' symbols' (DateTime.UtcNow - start).TotalSeconds.ToString("0.00"));                      }                  }                  catch (Exception err)                  {                      // log the error and continue with the process                      Log.Error(err.ToString());                  }              }
Magic Number,QuantConnect.ToolBox.CryptoiqDownloader,CryptoiqDownloader,C:\repos\QuantConnect_Lean\ToolBox\CryptoiqDownloader\CryptoiqDownloader.cs,Get,The following statement contains a magic number: while (counter <= endUtc)              {                  while (hour < 24)                  {                      using (var cl = new WebClient())                      {                          var request = string.Format(url' counter.ToString("yyyy-MM-dd")' hour' symbol.Value' _exchange);                          var data = cl.DownloadString(request);                            var mbtc = JsonConvert.DeserializeObject<List<CryptoiqBitcoin>>(data);                          foreach (var item in mbtc.OrderBy(x => x.Time))                          {                              yield return new Tick                              {                                  Time = item.Time'                                  Symbol = symbol'                                  Value = item.Last'                                  AskPrice = item.Ask'                                  BidPrice = item.Bid'                                  TickType = TickType.Quote                              };                          }                          hour++;                      }                  }                  counter = counter.AddDays(1);                  hour = 0;              }
Magic Number,QuantConnect.ToolBox.CryptoiqDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\CryptoiqDownloader\Program.cs,Main,The following statement contains a magic number: if (args.Length == 3)              {                  args = new [] { args[0]' DateTime.UtcNow.ToString("yyyyMMdd")' args[1]' args[2] };              }              else if (args.Length < 4)              {                  Console.WriteLine("Usage: CryptoiqDownloader FROMDATE TODATE EXCHANGE SYMBOL");                  Console.WriteLine("FROMDATE = yyyymmdd");                  Console.WriteLine("TODATE = yyyymmdd");                  Environment.Exit(1);              }
Magic Number,QuantConnect.ToolBox.CryptoiqDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\CryptoiqDownloader\Program.cs,Main,The following statement contains a magic number: if (args.Length == 3)              {                  args = new [] { args[0]' DateTime.UtcNow.ToString("yyyyMMdd")' args[1]' args[2] };              }              else if (args.Length < 4)              {                  Console.WriteLine("Usage: CryptoiqDownloader FROMDATE TODATE EXCHANGE SYMBOL");                  Console.WriteLine("FROMDATE = yyyymmdd");                  Console.WriteLine("TODATE = yyyymmdd");                  Environment.Exit(1);              }
Magic Number,QuantConnect.ToolBox.CryptoiqDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\CryptoiqDownloader\Program.cs,Main,The following statement contains a magic number: if (args.Length == 3)              {                  args = new [] { args[0]' DateTime.UtcNow.ToString("yyyyMMdd")' args[1]' args[2] };              }              else if (args.Length < 4)              {                  Console.WriteLine("Usage: CryptoiqDownloader FROMDATE TODATE EXCHANGE SYMBOL");                  Console.WriteLine("FROMDATE = yyyymmdd");                  Console.WriteLine("TODATE = yyyymmdd");                  Environment.Exit(1);              }
Magic Number,QuantConnect.ToolBox.CryptoiqDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\CryptoiqDownloader\Program.cs,Main,The following statement contains a magic number: try              {                  // Load settings from command line                  var startDate = DateTime.ParseExact(args[0]' "yyyyMMdd"' CultureInfo.InvariantCulture);                  var endDate = DateTime.ParseExact(args[1]' "yyyyMMdd"' CultureInfo.InvariantCulture);                    // Load settings from config.json                  var dataDirectory = Config.Get("data-directory"' "../../../Data");                  //todo: will download any exchange but always save as gdax                  // Create an instance of the downloader                  const string market = Market.GDAX;                  var downloader = new CryptoiqDownloader(args[2]);                    // Download the data                  var symbolObject = Symbol.Create(args[3]' SecurityType.Crypto' market);                  var data = downloader.Get(symbolObject' Resolution.Tick' startDate' endDate);                    // Save the data                  var writer = new LeanDataWriter(Resolution.Tick' symbolObject' dataDirectory' TickType.Quote);                  writer.Write(data);              }              catch (Exception err)              {                  Log.Error(err);              }
Magic Number,QuantConnect.ToolBox.CryptoiqDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\CryptoiqDownloader\Program.cs,Main,The following statement contains a magic number: try              {                  // Load settings from command line                  var startDate = DateTime.ParseExact(args[0]' "yyyyMMdd"' CultureInfo.InvariantCulture);                  var endDate = DateTime.ParseExact(args[1]' "yyyyMMdd"' CultureInfo.InvariantCulture);                    // Load settings from config.json                  var dataDirectory = Config.Get("data-directory"' "../../../Data");                  //todo: will download any exchange but always save as gdax                  // Create an instance of the downloader                  const string market = Market.GDAX;                  var downloader = new CryptoiqDownloader(args[2]);                    // Download the data                  var symbolObject = Symbol.Create(args[3]' SecurityType.Crypto' market);                  var data = downloader.Get(symbolObject' Resolution.Tick' startDate' endDate);                    // Save the data                  var writer = new LeanDataWriter(Resolution.Tick' symbolObject' dataDirectory' TickType.Quote);                  writer.Write(data);              }              catch (Exception err)              {                  Log.Error(err);              }
Magic Number,QuantConnect.ToolBox.DukascopyDownloader,DukascopyDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopyDataDownloader.cs,DownloadTicks,The following statement contains a magic number: for (var hour = 0; hour < 24; hour++)              {                  var timeOffset = hour * 3600000;                    var url = string.Format(@"http://www.dukascopy.com/datafeed/{0}/{1:D4}/{2:D2}/{3:D2}/{4:D2}h_ticks.bi5"'                      dukascopySymbol' date.Year' date.Month - 1' date.Day' hour);                    using (var client = new WebClient())                  {                      byte[] bytes;                      try                      {                          bytes = client.DownloadData(url);                      }                      catch (Exception exception)                      {                          Log.Error(exception);                          yield break;                      }                      if (bytes != null && bytes.Length > 0)                      {                          var ticks = AppendTicksToList(symbol' bytes' date' timeOffset' pointValue);                          foreach (var tick in ticks)                          {                              yield return tick;                          }                      }                  }              }
Magic Number,QuantConnect.ToolBox.DukascopyDownloader,DukascopyDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopyDataDownloader.cs,DownloadTicks,The following statement contains a magic number: for (var hour = 0; hour < 24; hour++)              {                  var timeOffset = hour * 3600000;                    var url = string.Format(@"http://www.dukascopy.com/datafeed/{0}/{1:D4}/{2:D2}/{3:D2}/{4:D2}h_ticks.bi5"'                      dukascopySymbol' date.Year' date.Month - 1' date.Day' hour);                    using (var client = new WebClient())                  {                      byte[] bytes;                      try                      {                          bytes = client.DownloadData(url);                      }                      catch (Exception exception)                      {                          Log.Error(exception);                          yield break;                      }                      if (bytes != null && bytes.Length > 0)                      {                          var ticks = AppendTicksToList(symbol' bytes' date' timeOffset' pointValue);                          foreach (var tick in ticks)                          {                              yield return tick;                          }                      }                  }              }
Magic Number,QuantConnect.ToolBox.DukascopyDownloader,DukascopyDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopyDataDownloader.cs,ReverseBytes,The following statement contains a magic number: *p = (*p & 0x000000FF) << 24 | (*p & 0x0000FF00) << 8 | (*p & 0x00FF0000) >> 8 | (*p & 0xFF000000) >> 24;
Magic Number,QuantConnect.ToolBox.DukascopyDownloader,DukascopyDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopyDataDownloader.cs,ReverseBytes,The following statement contains a magic number: *p = (*p & 0x000000FF) << 24 | (*p & 0x0000FF00) << 8 | (*p & 0x00FF0000) >> 8 | (*p & 0xFF000000) >> 24;
Magic Number,QuantConnect.ToolBox.DukascopyDownloader,DukascopyDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopyDataDownloader.cs,ReverseBytes,The following statement contains a magic number: *p = (*p & 0x000000FF) << 24 | (*p & 0x0000FF00) << 8 | (*p & 0x00FF0000) >> 8 | (*p & 0xFF000000) >> 24;
Magic Number,QuantConnect.ToolBox.DukascopyDownloader,DukascopyDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopyDataDownloader.cs,ReverseBytes,The following statement contains a magic number: *p = (*p & 0x000000FF) << 24 | (*p & 0x0000FF00) << 8 | (*p & 0x00FF0000) >> 8 | (*p & 0xFF000000) >> 24;
Magic Number,QuantConnect.ToolBox.DukascopyDownloader,DukascopySymbolMapper,C:\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopySymbolMapper.cs,GetBrokerageSecurityType,The following statement contains a magic number: return (brokerageSymbol.Length == 6 && KnownCurrencies.Contains(brokerageSymbol.Substring(0' 3)) && KnownCurrencies.Contains(brokerageSymbol.Substring(3' 3)))                  ? SecurityType.Forex                  : SecurityType.Cfd;
Magic Number,QuantConnect.ToolBox.DukascopyDownloader,DukascopySymbolMapper,C:\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopySymbolMapper.cs,GetBrokerageSecurityType,The following statement contains a magic number: return (brokerageSymbol.Length == 6 && KnownCurrencies.Contains(brokerageSymbol.Substring(0' 3)) && KnownCurrencies.Contains(brokerageSymbol.Substring(3' 3)))                  ? SecurityType.Forex                  : SecurityType.Cfd;
Magic Number,QuantConnect.ToolBox.DukascopyDownloader,DukascopySymbolMapper,C:\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopySymbolMapper.cs,GetBrokerageSecurityType,The following statement contains a magic number: return (brokerageSymbol.Length == 6 && KnownCurrencies.Contains(brokerageSymbol.Substring(0' 3)) && KnownCurrencies.Contains(brokerageSymbol.Substring(3' 3)))                  ? SecurityType.Forex                  : SecurityType.Cfd;
Magic Number,QuantConnect.ToolBox.DukascopyDownloader,DukascopySymbolMapper,C:\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopySymbolMapper.cs,GetBrokerageSecurityType,The following statement contains a magic number: return (brokerageSymbol.Length == 6 && KnownCurrencies.Contains(brokerageSymbol.Substring(0' 3)) && KnownCurrencies.Contains(brokerageSymbol.Substring(3' 3)))                  ? SecurityType.Forex                  : SecurityType.Cfd;
Magic Number,QuantConnect.ToolBox.DukascopyDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\Program.cs,Main,The following statement contains a magic number: if (args.Length != 4)              {                  Console.WriteLine("Usage: DukascopyDownloader SYMBOLS RESOLUTION FROMDATE TODATE");                  Console.WriteLine("SYMBOLS = eg EURUSD'USDJPY");                  Console.WriteLine("RESOLUTION = Tick/Second/Minute/Hour/Daily/All");                  Console.WriteLine("FROMDATE = yyyymmdd");                  Console.WriteLine("TODATE = yyyymmdd");                  Environment.Exit(1);              }
Magic Number,QuantConnect.ToolBox.DukascopyDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\Program.cs,Main,The following statement contains a magic number: try              {                  // Load settings from command line                  var symbols = args[0].Split(''');                  var allResolutions = args[1].ToLower() == "all";                  var resolution = allResolutions ? Resolution.Tick : (Resolution)Enum.Parse(typeof(Resolution)' args[1]);                  var startDate = DateTime.ParseExact(args[2]' "yyyyMMdd"' CultureInfo.InvariantCulture);                  var endDate = DateTime.ParseExact(args[3]' "yyyyMMdd"' CultureInfo.InvariantCulture);                    // Load settings from config.json                  var dataDirectory = Config.Get("data-directory"' "../../../Data");                    // Download the data                  const string market = Market.Dukascopy;                  var downloader = new DukascopyDataDownloader();                    foreach (var symbol in symbols)                  {                      if (!downloader.HasSymbol(symbol))                          throw new ArgumentException("The symbol " + symbol + " is not available.");                  }                    foreach (var symbol in symbols)                  {                      var securityType = downloader.GetSecurityType(symbol);                      var symbolObject = Symbol.Create(symbol' securityType' Market.Dukascopy);                      var data = downloader.Get(symbolObject' resolution' startDate' endDate);                        if (allResolutions)                      {                          var ticks = data.Cast<Tick>().ToList();                            // Save the data (tick resolution)                          var writer = new LeanDataWriter(resolution' symbolObject' dataDirectory);                          writer.Write(ticks);                            // Save the data (other resolutions)                          foreach (var res in new[] { Resolution.Second' Resolution.Minute' Resolution.Hour' Resolution.Daily })                          {                              var resData = DukascopyDataDownloader.AggregateTicks(symbolObject' ticks' res.ToTimeSpan());                                writer = new LeanDataWriter(res' symbolObject' dataDirectory);                              writer.Write(resData);                          }                      }                      else                      {                          // Save the data (single resolution)                          var writer = new LeanDataWriter(resolution' symbolObject' dataDirectory);                          writer.Write(data);                      }                  }              }              catch (Exception err)              {                  Log.Error(err);              }
Magic Number,QuantConnect.ToolBox.DukascopyDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\Program.cs,Main,The following statement contains a magic number: try              {                  // Load settings from command line                  var symbols = args[0].Split(''');                  var allResolutions = args[1].ToLower() == "all";                  var resolution = allResolutions ? Resolution.Tick : (Resolution)Enum.Parse(typeof(Resolution)' args[1]);                  var startDate = DateTime.ParseExact(args[2]' "yyyyMMdd"' CultureInfo.InvariantCulture);                  var endDate = DateTime.ParseExact(args[3]' "yyyyMMdd"' CultureInfo.InvariantCulture);                    // Load settings from config.json                  var dataDirectory = Config.Get("data-directory"' "../../../Data");                    // Download the data                  const string market = Market.Dukascopy;                  var downloader = new DukascopyDataDownloader();                    foreach (var symbol in symbols)                  {                      if (!downloader.HasSymbol(symbol))                          throw new ArgumentException("The symbol " + symbol + " is not available.");                  }                    foreach (var symbol in symbols)                  {                      var securityType = downloader.GetSecurityType(symbol);                      var symbolObject = Symbol.Create(symbol' securityType' Market.Dukascopy);                      var data = downloader.Get(symbolObject' resolution' startDate' endDate);                        if (allResolutions)                      {                          var ticks = data.Cast<Tick>().ToList();                            // Save the data (tick resolution)                          var writer = new LeanDataWriter(resolution' symbolObject' dataDirectory);                          writer.Write(ticks);                            // Save the data (other resolutions)                          foreach (var res in new[] { Resolution.Second' Resolution.Minute' Resolution.Hour' Resolution.Daily })                          {                              var resData = DukascopyDataDownloader.AggregateTicks(symbolObject' ticks' res.ToTimeSpan());                                writer = new LeanDataWriter(res' symbolObject' dataDirectory);                              writer.Write(resData);                          }                      }                      else                      {                          // Save the data (single resolution)                          var writer = new LeanDataWriter(resolution' symbolObject' dataDirectory);                          writer.Write(data);                      }                  }              }              catch (Exception err)              {                  Log.Error(err);              }
Magic Number,QuantConnect.ToolBox.FxcmVolumeDownload,Program,C:\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\Program.cs,Main,The following statement contains a magic number: if (args.Length != 4)              {                  Console.WriteLine("Usage:\n\t" +                                    "FxcmVolumeDownloader all\t will download data for all available pair for the three resolutions.\n\t" +                                    "FxcmVolumeDownloader update\t will download just last day data for all pair and resolutions already downloaded.");                  Console.WriteLine("Usage: FxcmVolumeDownloader SYMBOLS RESOLUTION FROMDATE TODATE");                  Console.WriteLine("SYMBOLS = eg EURUSD'USDJPY\n" +                                    "\tAvailable pairs:\n" +                                    "\tEURUSD' USDJPY' GBPUSD' USDCHF' EURCHF' AUDUSD' USDCAD'\n" +                                    "\tNZDUSD' EURGBP' EURJPY' GBPJPY' EURAUD' EURCAD' AUDJPY");                  Console.WriteLine("RESOLUTION = Minute/Hour/Daily/All");                  Console.WriteLine("FROMDATE = yyyymmdd");                  Console.WriteLine("TODATE = yyyymmdd");                  Environment.Exit(exitCode: 1);              }
Magic Number,QuantConnect.ToolBox.FxcmVolumeDownload,Program,C:\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\Program.cs,Main,The following statement contains a magic number: try              {                  Log.DebuggingEnabled = true;                  Log.LogHandler = new CompositeLogHandler(new ConsoleLogHandler()' new FileLogHandler("FxcmFxVolumeDownloader.log"' useTimestampPrefix: false));                    // Load settings from command line                  var tickers = args[0].Split(''');                  var resolutions = new[] { Resolution.Daily };                    if (args[1].ToLower() == "all")                  {                      resolutions = new[] { Resolution.Daily' Resolution.Hour' Resolution.Minute };                  }                  else                  {                      resolutions[0] = (Resolution)Enum.Parse(typeof(Resolution)' args[1]);                  }                    var startDate = DateTime.ParseExact(args[2]' "yyyyMMdd"' CultureInfo.InvariantCulture);                  var endDate = DateTime.ParseExact(args[3]' "yyyyMMdd"' CultureInfo.InvariantCulture);                    // Load settings from config.json                  var dataDirectory = Config.Get("data-directory"' "../../../Data");                    var downloader = new FxcmVolumeDownloader(dataDirectory);                  foreach (var ticker in tickers)                  {                      var symbol = Symbol.Create(ticker' SecurityType.Base' Market.FXCM);                      foreach (var resolution in resolutions)                      {                          downloader.Run(symbol' resolution' startDate' endDate' isUpdate);                      }                  }              }              catch (Exception err)              {                  Log.Error(err);              }
Magic Number,QuantConnect.ToolBox.FxcmVolumeDownload,Program,C:\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\Program.cs,Main,The following statement contains a magic number: try              {                  Log.DebuggingEnabled = true;                  Log.LogHandler = new CompositeLogHandler(new ConsoleLogHandler()' new FileLogHandler("FxcmFxVolumeDownloader.log"' useTimestampPrefix: false));                    // Load settings from command line                  var tickers = args[0].Split(''');                  var resolutions = new[] { Resolution.Daily };                    if (args[1].ToLower() == "all")                  {                      resolutions = new[] { Resolution.Daily' Resolution.Hour' Resolution.Minute };                  }                  else                  {                      resolutions[0] = (Resolution)Enum.Parse(typeof(Resolution)' args[1]);                  }                    var startDate = DateTime.ParseExact(args[2]' "yyyyMMdd"' CultureInfo.InvariantCulture);                  var endDate = DateTime.ParseExact(args[3]' "yyyyMMdd"' CultureInfo.InvariantCulture);                    // Load settings from config.json                  var dataDirectory = Config.Get("data-directory"' "../../../Data");                    var downloader = new FxcmVolumeDownloader(dataDirectory);                  foreach (var ticker in tickers)                  {                      var symbol = Symbol.Create(ticker' SecurityType.Base' Market.FXCM);                      foreach (var resolution in resolutions)                      {                          downloader.Run(symbol' resolution' startDate' endDate' isUpdate);                      }                  }              }              catch (Exception err)              {                  Log.Error(err);              }
Magic Number,QuantConnect.ToolBox.FxcmDownloader,FxcmDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\FxcmDownloader\FxcmDataDownloader.cs,Get,The following statement contains a magic number: do //               {                  //show progress                  progressBar(Math.Abs((end - endUtc).Ticks)' totalTicks' Console.WindowWidth / 2''█');                  _currentBaseData.Clear();                    var mdr = new MarketDataRequest();                  mdr.setSubscriptionRequestType(SubscriptionRequestTypeFactory.SNAPSHOT);                  mdr.setResponseFormat(IFixMsgTypeDefs.__Fields.MSGTYPE_FXCMRESPONSE);                  mdr.setFXCMTimingInterval(interval);                  mdr.setMDEntryTypeSet(MarketDataRequest.MDENTRYTYPESET_ALL);                    mdr.setFXCMStartDate(new UTCDate(FxcmBrokerage.ToJavaDateUtc(startUtc)));                  mdr.setFXCMStartTime(new UTCTimeOnly(FxcmBrokerage.ToJavaDateUtc(startUtc)));                  mdr.setFXCMEndDate(new UTCDate(FxcmBrokerage.ToJavaDateUtc(end)));                  mdr.setFXCMEndTime(new UTCTimeOnly(FxcmBrokerage.ToJavaDateUtc(end)));                  mdr.addRelatedSymbol(_fxcmInstruments[_symbolMapper.GetBrokerageSymbol(symbol)]);                      AutoResetEvent autoResetEvent;                  lock (_locker)                  {                      _currentRequest = _gateway.sendMessage(mdr);                      autoResetEvent = new AutoResetEvent(false);                      _mapRequestsToAutoResetEvents[_currentRequest] = autoResetEvent;                  }                  if (!autoResetEvent.WaitOne(1000 * 5))                  {                      // no response' exit                      break;                  }                    // Add data                  totalBaseData.InsertRange(0' _currentBaseData.Where(x => x.Time.Date >= startUtc.Date));                                    if (end != _currentBaseData[0].Time)                  {                      // new end date = first datapoint date.                      end = _currentBaseData[0].Time;                  }                  else                  {                      break;                  }                                                 } while (end > startUtc);
Magic Number,QuantConnect.ToolBox.FxcmDownloader,FxcmDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\FxcmDownloader\FxcmDataDownloader.cs,Get,The following statement contains a magic number: do //               {                  //show progress                  progressBar(Math.Abs((end - endUtc).Ticks)' totalTicks' Console.WindowWidth / 2''█');                  _currentBaseData.Clear();                    var mdr = new MarketDataRequest();                  mdr.setSubscriptionRequestType(SubscriptionRequestTypeFactory.SNAPSHOT);                  mdr.setResponseFormat(IFixMsgTypeDefs.__Fields.MSGTYPE_FXCMRESPONSE);                  mdr.setFXCMTimingInterval(interval);                  mdr.setMDEntryTypeSet(MarketDataRequest.MDENTRYTYPESET_ALL);                    mdr.setFXCMStartDate(new UTCDate(FxcmBrokerage.ToJavaDateUtc(startUtc)));                  mdr.setFXCMStartTime(new UTCTimeOnly(FxcmBrokerage.ToJavaDateUtc(startUtc)));                  mdr.setFXCMEndDate(new UTCDate(FxcmBrokerage.ToJavaDateUtc(end)));                  mdr.setFXCMEndTime(new UTCTimeOnly(FxcmBrokerage.ToJavaDateUtc(end)));                  mdr.addRelatedSymbol(_fxcmInstruments[_symbolMapper.GetBrokerageSymbol(symbol)]);                      AutoResetEvent autoResetEvent;                  lock (_locker)                  {                      _currentRequest = _gateway.sendMessage(mdr);                      autoResetEvent = new AutoResetEvent(false);                      _mapRequestsToAutoResetEvents[_currentRequest] = autoResetEvent;                  }                  if (!autoResetEvent.WaitOne(1000 * 5))                  {                      // no response' exit                      break;                  }                    // Add data                  totalBaseData.InsertRange(0' _currentBaseData.Where(x => x.Time.Date >= startUtc.Date));                                    if (end != _currentBaseData[0].Time)                  {                      // new end date = first datapoint date.                      end = _currentBaseData[0].Time;                  }                  else                  {                      break;                  }                                                 } while (end > startUtc);
Magic Number,QuantConnect.ToolBox.FxcmDownloader,FxcmDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\FxcmDownloader\FxcmDataDownloader.cs,Get,The following statement contains a magic number: do //               {                  //show progress                  progressBar(Math.Abs((end - endUtc).Ticks)' totalTicks' Console.WindowWidth / 2''█');                  _currentBaseData.Clear();                    var mdr = new MarketDataRequest();                  mdr.setSubscriptionRequestType(SubscriptionRequestTypeFactory.SNAPSHOT);                  mdr.setResponseFormat(IFixMsgTypeDefs.__Fields.MSGTYPE_FXCMRESPONSE);                  mdr.setFXCMTimingInterval(interval);                  mdr.setMDEntryTypeSet(MarketDataRequest.MDENTRYTYPESET_ALL);                    mdr.setFXCMStartDate(new UTCDate(FxcmBrokerage.ToJavaDateUtc(startUtc)));                  mdr.setFXCMStartTime(new UTCTimeOnly(FxcmBrokerage.ToJavaDateUtc(startUtc)));                  mdr.setFXCMEndDate(new UTCDate(FxcmBrokerage.ToJavaDateUtc(end)));                  mdr.setFXCMEndTime(new UTCTimeOnly(FxcmBrokerage.ToJavaDateUtc(end)));                  mdr.addRelatedSymbol(_fxcmInstruments[_symbolMapper.GetBrokerageSymbol(symbol)]);                      AutoResetEvent autoResetEvent;                  lock (_locker)                  {                      _currentRequest = _gateway.sendMessage(mdr);                      autoResetEvent = new AutoResetEvent(false);                      _mapRequestsToAutoResetEvents[_currentRequest] = autoResetEvent;                  }                  if (!autoResetEvent.WaitOne(1000 * 5))                  {                      // no response' exit                      break;                  }                    // Add data                  totalBaseData.InsertRange(0' _currentBaseData.Where(x => x.Time.Date >= startUtc.Date));                                    if (end != _currentBaseData[0].Time)                  {                      // new end date = first datapoint date.                      end = _currentBaseData[0].Time;                  }                  else                  {                      break;                  }                                                 } while (end > startUtc);
Magic Number,QuantConnect.ToolBox.FxcmDownloader,FxcmDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\FxcmDownloader\FxcmDataDownloader.cs,RequestTradingSessionStatus,The following statement contains a magic number: if (!autoResetEvent.WaitOne(ResponseTimeout))                  throw new TimeoutException(string.Format("FxcmBrokerage.LoadInstruments(): Operation took longer than {0} seconds."' (decimal)ResponseTimeout / 1000));
Magic Number,QuantConnect.ToolBox.FxcmDownloader,FxcmDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\FxcmDownloader\FxcmDataDownloader.cs,OnMarketDataSnapshot,The following statement contains a magic number: if (message.getRequestID() == _currentRequest)              {                  var securityType = _symbolMapper.GetBrokerageSecurityType(message.getInstrument().getSymbol());                  var symbol = _symbolMapper.GetLeanSymbol(message.getInstrument().getSymbol()' securityType' Market.FXCM);                  var time = FromJavaDateUtc(message.getDate().toDate());                      if (message.getFXCMTimingInterval() == FXCMTimingIntervalFactory.TICK)                  {                      var bid = Convert.ToDecimal(message.getBidClose());                      var ask = Convert.ToDecimal(message.getAskClose());                        var tick = new Tick(time' symbol' bid' ask);                        //Add tick                      _currentBaseData.Add(tick);                    }                  else // it bars                  {                      var open = Convert.ToDecimal((message.getBidOpen() + message.getAskOpen()) / 2);                      var high = Convert.ToDecimal((message.getBidHigh() + message.getAskHigh()) / 2);                      var low = Convert.ToDecimal((message.getBidLow() + message.getAskLow()) / 2);                      var close = Convert.ToDecimal((message.getBidClose() + message.getAskClose()) / 2);                        var bar = new TradeBar(time' symbol' open' high' low' close' 0);                        // add bar to list                      _currentBaseData.Add(bar);                  }                    if (message.getFXCMContinuousFlag() == IFixValueDefs.__Fields.FXCMCONTINUOUS_END)                  {                      _mapRequestsToAutoResetEvents[_currentRequest].Set();                      _mapRequestsToAutoResetEvents.Remove(_currentRequest);                  }              }
Magic Number,QuantConnect.ToolBox.FxcmDownloader,FxcmDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\FxcmDownloader\FxcmDataDownloader.cs,OnMarketDataSnapshot,The following statement contains a magic number: if (message.getRequestID() == _currentRequest)              {                  var securityType = _symbolMapper.GetBrokerageSecurityType(message.getInstrument().getSymbol());                  var symbol = _symbolMapper.GetLeanSymbol(message.getInstrument().getSymbol()' securityType' Market.FXCM);                  var time = FromJavaDateUtc(message.getDate().toDate());                      if (message.getFXCMTimingInterval() == FXCMTimingIntervalFactory.TICK)                  {                      var bid = Convert.ToDecimal(message.getBidClose());                      var ask = Convert.ToDecimal(message.getAskClose());                        var tick = new Tick(time' symbol' bid' ask);                        //Add tick                      _currentBaseData.Add(tick);                    }                  else // it bars                  {                      var open = Convert.ToDecimal((message.getBidOpen() + message.getAskOpen()) / 2);                      var high = Convert.ToDecimal((message.getBidHigh() + message.getAskHigh()) / 2);                      var low = Convert.ToDecimal((message.getBidLow() + message.getAskLow()) / 2);                      var close = Convert.ToDecimal((message.getBidClose() + message.getAskClose()) / 2);                        var bar = new TradeBar(time' symbol' open' high' low' close' 0);                        // add bar to list                      _currentBaseData.Add(bar);                  }                    if (message.getFXCMContinuousFlag() == IFixValueDefs.__Fields.FXCMCONTINUOUS_END)                  {                      _mapRequestsToAutoResetEvents[_currentRequest].Set();                      _mapRequestsToAutoResetEvents.Remove(_currentRequest);                  }              }
Magic Number,QuantConnect.ToolBox.FxcmDownloader,FxcmDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\FxcmDownloader\FxcmDataDownloader.cs,OnMarketDataSnapshot,The following statement contains a magic number: if (message.getRequestID() == _currentRequest)              {                  var securityType = _symbolMapper.GetBrokerageSecurityType(message.getInstrument().getSymbol());                  var symbol = _symbolMapper.GetLeanSymbol(message.getInstrument().getSymbol()' securityType' Market.FXCM);                  var time = FromJavaDateUtc(message.getDate().toDate());                      if (message.getFXCMTimingInterval() == FXCMTimingIntervalFactory.TICK)                  {                      var bid = Convert.ToDecimal(message.getBidClose());                      var ask = Convert.ToDecimal(message.getAskClose());                        var tick = new Tick(time' symbol' bid' ask);                        //Add tick                      _currentBaseData.Add(tick);                    }                  else // it bars                  {                      var open = Convert.ToDecimal((message.getBidOpen() + message.getAskOpen()) / 2);                      var high = Convert.ToDecimal((message.getBidHigh() + message.getAskHigh()) / 2);                      var low = Convert.ToDecimal((message.getBidLow() + message.getAskLow()) / 2);                      var close = Convert.ToDecimal((message.getBidClose() + message.getAskClose()) / 2);                        var bar = new TradeBar(time' symbol' open' high' low' close' 0);                        // add bar to list                      _currentBaseData.Add(bar);                  }                    if (message.getFXCMContinuousFlag() == IFixValueDefs.__Fields.FXCMCONTINUOUS_END)                  {                      _mapRequestsToAutoResetEvents[_currentRequest].Set();                      _mapRequestsToAutoResetEvents.Remove(_currentRequest);                  }              }
Magic Number,QuantConnect.ToolBox.FxcmDownloader,FxcmDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\FxcmDownloader\FxcmDataDownloader.cs,OnMarketDataSnapshot,The following statement contains a magic number: if (message.getRequestID() == _currentRequest)              {                  var securityType = _symbolMapper.GetBrokerageSecurityType(message.getInstrument().getSymbol());                  var symbol = _symbolMapper.GetLeanSymbol(message.getInstrument().getSymbol()' securityType' Market.FXCM);                  var time = FromJavaDateUtc(message.getDate().toDate());                      if (message.getFXCMTimingInterval() == FXCMTimingIntervalFactory.TICK)                  {                      var bid = Convert.ToDecimal(message.getBidClose());                      var ask = Convert.ToDecimal(message.getAskClose());                        var tick = new Tick(time' symbol' bid' ask);                        //Add tick                      _currentBaseData.Add(tick);                    }                  else // it bars                  {                      var open = Convert.ToDecimal((message.getBidOpen() + message.getAskOpen()) / 2);                      var high = Convert.ToDecimal((message.getBidHigh() + message.getAskHigh()) / 2);                      var low = Convert.ToDecimal((message.getBidLow() + message.getAskLow()) / 2);                      var close = Convert.ToDecimal((message.getBidClose() + message.getAskClose()) / 2);                        var bar = new TradeBar(time' symbol' open' high' low' close' 0);                        // add bar to list                      _currentBaseData.Add(bar);                  }                    if (message.getFXCMContinuousFlag() == IFixValueDefs.__Fields.FXCMCONTINUOUS_END)                  {                      _mapRequestsToAutoResetEvents[_currentRequest].Set();                      _mapRequestsToAutoResetEvents.Remove(_currentRequest);                  }              }
Magic Number,QuantConnect.ToolBox.FxcmDownloader,FxcmDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\FxcmDownloader\FxcmDataDownloader.cs,progressBar,The following statement contains a magic number: Console.Write(string.Format("\r[{0}] {1}%"' bar' (p * 100).ToString("N2")));
Magic Number,QuantConnect.ToolBox.FxcmDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\FxcmDownloader\Program.cs,Main,The following statement contains a magic number: if (args.Length != 4)              {                  Console.WriteLine("Usage: FxcmDownloader SYMBOLS RESOLUTION FROMDATE TODATE");                  Console.WriteLine("SYMBOLS      = eg EURUSD'USDJPY");                  Console.WriteLine("RESOLUTION   = Second/Minute/Hour/Daily/All");                  Console.WriteLine("FROMDATE     = yyyymmdd");                  Console.WriteLine("TODATE       = yyyymmdd");                  Environment.Exit(1);              }
Magic Number,QuantConnect.ToolBox.FxcmDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\FxcmDownloader\Program.cs,Main,The following statement contains a magic number: try              {                  Logger.getRootLogger().setLevel(Level.ERROR);                  BasicConfigurator.configure(new FileAppender(new SimpleLayout()' "FxcmDownloader.log"' append: false));                    // Load settings from command line                  var tickers = args[0].Split(''');                  var allResolutions = args[1].ToLower() == "all";                  var resolution = allResolutions ? Resolution.Tick : (Resolution)Enum.Parse(typeof(Resolution)' args[1]);                    var startDate = DateTime.ParseExact(args[2]' "yyyyMMdd"' CultureInfo.InvariantCulture);                  var endDate = DateTime.ParseExact(args[3]' "yyyyMMdd"' CultureInfo.InvariantCulture);                  endDate = endDate.AddDays(1).AddMilliseconds(-1);                      // Load settings from config.json                  var dataDirectory = Config.Get("data-directory"' "../../../Data");                  var server = Config.Get("fxcm-server"' "http://www.fxcorporate.com/Hosts.jsp");                  var terminal = Config.Get("fxcm-terminal"' "Demo");                  var userName = Config.Get("fxcm-user-name"' "username");                  var password = Config.Get("fxcm-password"' "password");                    // Download the data                  const string market = Market.FXCM;                  var downloader = new FxcmDataDownloader(server' terminal' userName' password);                    foreach (var ticker in tickers)                  {                      if (!downloader.HasSymbol(ticker))                          throw new ArgumentException("The symbol " + ticker + " is not available.");                  }                    foreach (var ticker in tickers)                  {                      var securityType = downloader.GetSecurityType(ticker);                      var symbol = Symbol.Create(ticker' securityType' market);                        var data = downloader.Get(symbol' resolution' startDate' endDate);                        if (allResolutions)                      {                          var ticks = data.Cast<Tick>().ToList();                            // Save the data (second resolution)                          var writer = new LeanDataWriter(resolution' symbol' dataDirectory);                          writer.Write(ticks);                            // Save the data (other resolutions)                          foreach (var res in new[] { Resolution.Second' Resolution.Minute' Resolution.Hour' Resolution.Daily })                          {                              var resData = FxcmDataDownloader.AggregateTicks(symbol' ticks' res.ToTimeSpan());                                writer = new LeanDataWriter(res' symbol' dataDirectory);                              writer.Write(resData);                          }                        }                      else                      {                          // Save the data (single resolution)                          var writer = new LeanDataWriter(resolution' symbol' dataDirectory);                          writer.Write(data);                      }                  }              }              catch (Exception err)              {                  Log.Error(err);              }
Magic Number,QuantConnect.ToolBox.FxcmDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\FxcmDownloader\Program.cs,Main,The following statement contains a magic number: try              {                  Logger.getRootLogger().setLevel(Level.ERROR);                  BasicConfigurator.configure(new FileAppender(new SimpleLayout()' "FxcmDownloader.log"' append: false));                    // Load settings from command line                  var tickers = args[0].Split(''');                  var allResolutions = args[1].ToLower() == "all";                  var resolution = allResolutions ? Resolution.Tick : (Resolution)Enum.Parse(typeof(Resolution)' args[1]);                    var startDate = DateTime.ParseExact(args[2]' "yyyyMMdd"' CultureInfo.InvariantCulture);                  var endDate = DateTime.ParseExact(args[3]' "yyyyMMdd"' CultureInfo.InvariantCulture);                  endDate = endDate.AddDays(1).AddMilliseconds(-1);                      // Load settings from config.json                  var dataDirectory = Config.Get("data-directory"' "../../../Data");                  var server = Config.Get("fxcm-server"' "http://www.fxcorporate.com/Hosts.jsp");                  var terminal = Config.Get("fxcm-terminal"' "Demo");                  var userName = Config.Get("fxcm-user-name"' "username");                  var password = Config.Get("fxcm-password"' "password");                    // Download the data                  const string market = Market.FXCM;                  var downloader = new FxcmDataDownloader(server' terminal' userName' password);                    foreach (var ticker in tickers)                  {                      if (!downloader.HasSymbol(ticker))                          throw new ArgumentException("The symbol " + ticker + " is not available.");                  }                    foreach (var ticker in tickers)                  {                      var securityType = downloader.GetSecurityType(ticker);                      var symbol = Symbol.Create(ticker' securityType' market);                        var data = downloader.Get(symbol' resolution' startDate' endDate);                        if (allResolutions)                      {                          var ticks = data.Cast<Tick>().ToList();                            // Save the data (second resolution)                          var writer = new LeanDataWriter(resolution' symbol' dataDirectory);                          writer.Write(ticks);                            // Save the data (other resolutions)                          foreach (var res in new[] { Resolution.Second' Resolution.Minute' Resolution.Hour' Resolution.Daily })                          {                              var resData = FxcmDataDownloader.AggregateTicks(symbol' ticks' res.ToTimeSpan());                                writer = new LeanDataWriter(res' symbol' dataDirectory);                              writer.Write(resData);                          }                        }                      else                      {                          // Save the data (single resolution)                          var writer = new LeanDataWriter(resolution' symbol' dataDirectory);                          writer.Write(data);                      }                  }              }              catch (Exception err)              {                  Log.Error(err);              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetDaily,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  // Format: Date'Open'High'Low'Close'Volume                  var columns = lines[currentLine].Split(''');                    // date format: DD-Mon-YY' e.g. 27-Sep-16                  var DMY = columns[0].Split('-');                    // date = 20160927                  var day = DMY[0].ToInt32();                  var month = (int)Enum.Parse(typeof(ConvertMonths)' DMY[1]);                  var year = (DMY[2].ToInt32() > 70) ? 1900 + DMY[2].ToInt32() : 2000 + DMY[2].ToInt32();                  var time = new DateTime(year' month' day' 0' 0' 0);                    // occasionally' the columns will have a '-' instead of a proper value                  List<Decimal?> ohlc = new List<Decimal?>()                  {                      columns[1] != "-" ? (Decimal?)columns[1].ToDecimal() : null'                      columns[2] != "-" ? (Decimal?)columns[2].ToDecimal() : null'                      columns[3] != "-" ? (Decimal?)columns[3].ToDecimal() : null'                      columns[4] != "-" ? (Decimal?)columns[4].ToDecimal() : null                  };                    if (ohlc.Where(val => val == null).Count() > 0)                  {                      // let's try hard to fix any issues as good as we can                      // this code assumes that there is at least 1 good value                      if (ohlc[1] == null) ohlc[1] = ohlc.Where(val => val != null).Max();                      if (ohlc[2] == null) ohlc[2] = ohlc.Where(val => val != null).Min();                      if (ohlc[0] == null) ohlc[0] = ohlc.Where(val => val != null).Average();                      if (ohlc[3] == null) ohlc[3] = ohlc.Where(val => val != null).Average();                        Log.Error(string.Format("Corrupt bar on {0}: {1}'{2}'{3}'{4}. Saved as {5}'{6}'{7}'{8}."'                          columns[0]' columns[1]' columns[2]' columns[3]' columns[4]'                          ohlc[0]' ohlc[1]' ohlc[2]' ohlc[3]));                  }                    long volume = columns[5].ToInt64();                    yield return new TradeBar(time' symbol' (Decimal)ohlc[0]' (Decimal)ohlc[1]' (Decimal)ohlc[2]' (Decimal)ohlc[3]' volume' resolution.ToTimeSpan());                    currentLine++;              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetDaily,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  // Format: Date'Open'High'Low'Close'Volume                  var columns = lines[currentLine].Split(''');                    // date format: DD-Mon-YY' e.g. 27-Sep-16                  var DMY = columns[0].Split('-');                    // date = 20160927                  var day = DMY[0].ToInt32();                  var month = (int)Enum.Parse(typeof(ConvertMonths)' DMY[1]);                  var year = (DMY[2].ToInt32() > 70) ? 1900 + DMY[2].ToInt32() : 2000 + DMY[2].ToInt32();                  var time = new DateTime(year' month' day' 0' 0' 0);                    // occasionally' the columns will have a '-' instead of a proper value                  List<Decimal?> ohlc = new List<Decimal?>()                  {                      columns[1] != "-" ? (Decimal?)columns[1].ToDecimal() : null'                      columns[2] != "-" ? (Decimal?)columns[2].ToDecimal() : null'                      columns[3] != "-" ? (Decimal?)columns[3].ToDecimal() : null'                      columns[4] != "-" ? (Decimal?)columns[4].ToDecimal() : null                  };                    if (ohlc.Where(val => val == null).Count() > 0)                  {                      // let's try hard to fix any issues as good as we can                      // this code assumes that there is at least 1 good value                      if (ohlc[1] == null) ohlc[1] = ohlc.Where(val => val != null).Max();                      if (ohlc[2] == null) ohlc[2] = ohlc.Where(val => val != null).Min();                      if (ohlc[0] == null) ohlc[0] = ohlc.Where(val => val != null).Average();                      if (ohlc[3] == null) ohlc[3] = ohlc.Where(val => val != null).Average();                        Log.Error(string.Format("Corrupt bar on {0}: {1}'{2}'{3}'{4}. Saved as {5}'{6}'{7}'{8}."'                          columns[0]' columns[1]' columns[2]' columns[3]' columns[4]'                          ohlc[0]' ohlc[1]' ohlc[2]' ohlc[3]));                  }                    long volume = columns[5].ToInt64();                    yield return new TradeBar(time' symbol' (Decimal)ohlc[0]' (Decimal)ohlc[1]' (Decimal)ohlc[2]' (Decimal)ohlc[3]' volume' resolution.ToTimeSpan());                    currentLine++;              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetDaily,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  // Format: Date'Open'High'Low'Close'Volume                  var columns = lines[currentLine].Split(''');                    // date format: DD-Mon-YY' e.g. 27-Sep-16                  var DMY = columns[0].Split('-');                    // date = 20160927                  var day = DMY[0].ToInt32();                  var month = (int)Enum.Parse(typeof(ConvertMonths)' DMY[1]);                  var year = (DMY[2].ToInt32() > 70) ? 1900 + DMY[2].ToInt32() : 2000 + DMY[2].ToInt32();                  var time = new DateTime(year' month' day' 0' 0' 0);                    // occasionally' the columns will have a '-' instead of a proper value                  List<Decimal?> ohlc = new List<Decimal?>()                  {                      columns[1] != "-" ? (Decimal?)columns[1].ToDecimal() : null'                      columns[2] != "-" ? (Decimal?)columns[2].ToDecimal() : null'                      columns[3] != "-" ? (Decimal?)columns[3].ToDecimal() : null'                      columns[4] != "-" ? (Decimal?)columns[4].ToDecimal() : null                  };                    if (ohlc.Where(val => val == null).Count() > 0)                  {                      // let's try hard to fix any issues as good as we can                      // this code assumes that there is at least 1 good value                      if (ohlc[1] == null) ohlc[1] = ohlc.Where(val => val != null).Max();                      if (ohlc[2] == null) ohlc[2] = ohlc.Where(val => val != null).Min();                      if (ohlc[0] == null) ohlc[0] = ohlc.Where(val => val != null).Average();                      if (ohlc[3] == null) ohlc[3] = ohlc.Where(val => val != null).Average();                        Log.Error(string.Format("Corrupt bar on {0}: {1}'{2}'{3}'{4}. Saved as {5}'{6}'{7}'{8}."'                          columns[0]' columns[1]' columns[2]' columns[3]' columns[4]'                          ohlc[0]' ohlc[1]' ohlc[2]' ohlc[3]));                  }                    long volume = columns[5].ToInt64();                    yield return new TradeBar(time' symbol' (Decimal)ohlc[0]' (Decimal)ohlc[1]' (Decimal)ohlc[2]' (Decimal)ohlc[3]' volume' resolution.ToTimeSpan());                    currentLine++;              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetDaily,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  // Format: Date'Open'High'Low'Close'Volume                  var columns = lines[currentLine].Split(''');                    // date format: DD-Mon-YY' e.g. 27-Sep-16                  var DMY = columns[0].Split('-');                    // date = 20160927                  var day = DMY[0].ToInt32();                  var month = (int)Enum.Parse(typeof(ConvertMonths)' DMY[1]);                  var year = (DMY[2].ToInt32() > 70) ? 1900 + DMY[2].ToInt32() : 2000 + DMY[2].ToInt32();                  var time = new DateTime(year' month' day' 0' 0' 0);                    // occasionally' the columns will have a '-' instead of a proper value                  List<Decimal?> ohlc = new List<Decimal?>()                  {                      columns[1] != "-" ? (Decimal?)columns[1].ToDecimal() : null'                      columns[2] != "-" ? (Decimal?)columns[2].ToDecimal() : null'                      columns[3] != "-" ? (Decimal?)columns[3].ToDecimal() : null'                      columns[4] != "-" ? (Decimal?)columns[4].ToDecimal() : null                  };                    if (ohlc.Where(val => val == null).Count() > 0)                  {                      // let's try hard to fix any issues as good as we can                      // this code assumes that there is at least 1 good value                      if (ohlc[1] == null) ohlc[1] = ohlc.Where(val => val != null).Max();                      if (ohlc[2] == null) ohlc[2] = ohlc.Where(val => val != null).Min();                      if (ohlc[0] == null) ohlc[0] = ohlc.Where(val => val != null).Average();                      if (ohlc[3] == null) ohlc[3] = ohlc.Where(val => val != null).Average();                        Log.Error(string.Format("Corrupt bar on {0}: {1}'{2}'{3}'{4}. Saved as {5}'{6}'{7}'{8}."'                          columns[0]' columns[1]' columns[2]' columns[3]' columns[4]'                          ohlc[0]' ohlc[1]' ohlc[2]' ohlc[3]));                  }                    long volume = columns[5].ToInt64();                    yield return new TradeBar(time' symbol' (Decimal)ohlc[0]' (Decimal)ohlc[1]' (Decimal)ohlc[2]' (Decimal)ohlc[3]' volume' resolution.ToTimeSpan());                    currentLine++;              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetDaily,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  // Format: Date'Open'High'Low'Close'Volume                  var columns = lines[currentLine].Split(''');                    // date format: DD-Mon-YY' e.g. 27-Sep-16                  var DMY = columns[0].Split('-');                    // date = 20160927                  var day = DMY[0].ToInt32();                  var month = (int)Enum.Parse(typeof(ConvertMonths)' DMY[1]);                  var year = (DMY[2].ToInt32() > 70) ? 1900 + DMY[2].ToInt32() : 2000 + DMY[2].ToInt32();                  var time = new DateTime(year' month' day' 0' 0' 0);                    // occasionally' the columns will have a '-' instead of a proper value                  List<Decimal?> ohlc = new List<Decimal?>()                  {                      columns[1] != "-" ? (Decimal?)columns[1].ToDecimal() : null'                      columns[2] != "-" ? (Decimal?)columns[2].ToDecimal() : null'                      columns[3] != "-" ? (Decimal?)columns[3].ToDecimal() : null'                      columns[4] != "-" ? (Decimal?)columns[4].ToDecimal() : null                  };                    if (ohlc.Where(val => val == null).Count() > 0)                  {                      // let's try hard to fix any issues as good as we can                      // this code assumes that there is at least 1 good value                      if (ohlc[1] == null) ohlc[1] = ohlc.Where(val => val != null).Max();                      if (ohlc[2] == null) ohlc[2] = ohlc.Where(val => val != null).Min();                      if (ohlc[0] == null) ohlc[0] = ohlc.Where(val => val != null).Average();                      if (ohlc[3] == null) ohlc[3] = ohlc.Where(val => val != null).Average();                        Log.Error(string.Format("Corrupt bar on {0}: {1}'{2}'{3}'{4}. Saved as {5}'{6}'{7}'{8}."'                          columns[0]' columns[1]' columns[2]' columns[3]' columns[4]'                          ohlc[0]' ohlc[1]' ohlc[2]' ohlc[3]));                  }                    long volume = columns[5].ToInt64();                    yield return new TradeBar(time' symbol' (Decimal)ohlc[0]' (Decimal)ohlc[1]' (Decimal)ohlc[2]' (Decimal)ohlc[3]' volume' resolution.ToTimeSpan());                    currentLine++;              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetDaily,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  // Format: Date'Open'High'Low'Close'Volume                  var columns = lines[currentLine].Split(''');                    // date format: DD-Mon-YY' e.g. 27-Sep-16                  var DMY = columns[0].Split('-');                    // date = 20160927                  var day = DMY[0].ToInt32();                  var month = (int)Enum.Parse(typeof(ConvertMonths)' DMY[1]);                  var year = (DMY[2].ToInt32() > 70) ? 1900 + DMY[2].ToInt32() : 2000 + DMY[2].ToInt32();                  var time = new DateTime(year' month' day' 0' 0' 0);                    // occasionally' the columns will have a '-' instead of a proper value                  List<Decimal?> ohlc = new List<Decimal?>()                  {                      columns[1] != "-" ? (Decimal?)columns[1].ToDecimal() : null'                      columns[2] != "-" ? (Decimal?)columns[2].ToDecimal() : null'                      columns[3] != "-" ? (Decimal?)columns[3].ToDecimal() : null'                      columns[4] != "-" ? (Decimal?)columns[4].ToDecimal() : null                  };                    if (ohlc.Where(val => val == null).Count() > 0)                  {                      // let's try hard to fix any issues as good as we can                      // this code assumes that there is at least 1 good value                      if (ohlc[1] == null) ohlc[1] = ohlc.Where(val => val != null).Max();                      if (ohlc[2] == null) ohlc[2] = ohlc.Where(val => val != null).Min();                      if (ohlc[0] == null) ohlc[0] = ohlc.Where(val => val != null).Average();                      if (ohlc[3] == null) ohlc[3] = ohlc.Where(val => val != null).Average();                        Log.Error(string.Format("Corrupt bar on {0}: {1}'{2}'{3}'{4}. Saved as {5}'{6}'{7}'{8}."'                          columns[0]' columns[1]' columns[2]' columns[3]' columns[4]'                          ohlc[0]' ohlc[1]' ohlc[2]' ohlc[3]));                  }                    long volume = columns[5].ToInt64();                    yield return new TradeBar(time' symbol' (Decimal)ohlc[0]' (Decimal)ohlc[1]' (Decimal)ohlc[2]' (Decimal)ohlc[3]' volume' resolution.ToTimeSpan());                    currentLine++;              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetDaily,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  // Format: Date'Open'High'Low'Close'Volume                  var columns = lines[currentLine].Split(''');                    // date format: DD-Mon-YY' e.g. 27-Sep-16                  var DMY = columns[0].Split('-');                    // date = 20160927                  var day = DMY[0].ToInt32();                  var month = (int)Enum.Parse(typeof(ConvertMonths)' DMY[1]);                  var year = (DMY[2].ToInt32() > 70) ? 1900 + DMY[2].ToInt32() : 2000 + DMY[2].ToInt32();                  var time = new DateTime(year' month' day' 0' 0' 0);                    // occasionally' the columns will have a '-' instead of a proper value                  List<Decimal?> ohlc = new List<Decimal?>()                  {                      columns[1] != "-" ? (Decimal?)columns[1].ToDecimal() : null'                      columns[2] != "-" ? (Decimal?)columns[2].ToDecimal() : null'                      columns[3] != "-" ? (Decimal?)columns[3].ToDecimal() : null'                      columns[4] != "-" ? (Decimal?)columns[4].ToDecimal() : null                  };                    if (ohlc.Where(val => val == null).Count() > 0)                  {                      // let's try hard to fix any issues as good as we can                      // this code assumes that there is at least 1 good value                      if (ohlc[1] == null) ohlc[1] = ohlc.Where(val => val != null).Max();                      if (ohlc[2] == null) ohlc[2] = ohlc.Where(val => val != null).Min();                      if (ohlc[0] == null) ohlc[0] = ohlc.Where(val => val != null).Average();                      if (ohlc[3] == null) ohlc[3] = ohlc.Where(val => val != null).Average();                        Log.Error(string.Format("Corrupt bar on {0}: {1}'{2}'{3}'{4}. Saved as {5}'{6}'{7}'{8}."'                          columns[0]' columns[1]' columns[2]' columns[3]' columns[4]'                          ohlc[0]' ohlc[1]' ohlc[2]' ohlc[3]));                  }                    long volume = columns[5].ToInt64();                    yield return new TradeBar(time' symbol' (Decimal)ohlc[0]' (Decimal)ohlc[1]' (Decimal)ohlc[2]' (Decimal)ohlc[3]' volume' resolution.ToTimeSpan());                    currentLine++;              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetDaily,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  // Format: Date'Open'High'Low'Close'Volume                  var columns = lines[currentLine].Split(''');                    // date format: DD-Mon-YY' e.g. 27-Sep-16                  var DMY = columns[0].Split('-');                    // date = 20160927                  var day = DMY[0].ToInt32();                  var month = (int)Enum.Parse(typeof(ConvertMonths)' DMY[1]);                  var year = (DMY[2].ToInt32() > 70) ? 1900 + DMY[2].ToInt32() : 2000 + DMY[2].ToInt32();                  var time = new DateTime(year' month' day' 0' 0' 0);                    // occasionally' the columns will have a '-' instead of a proper value                  List<Decimal?> ohlc = new List<Decimal?>()                  {                      columns[1] != "-" ? (Decimal?)columns[1].ToDecimal() : null'                      columns[2] != "-" ? (Decimal?)columns[2].ToDecimal() : null'                      columns[3] != "-" ? (Decimal?)columns[3].ToDecimal() : null'                      columns[4] != "-" ? (Decimal?)columns[4].ToDecimal() : null                  };                    if (ohlc.Where(val => val == null).Count() > 0)                  {                      // let's try hard to fix any issues as good as we can                      // this code assumes that there is at least 1 good value                      if (ohlc[1] == null) ohlc[1] = ohlc.Where(val => val != null).Max();                      if (ohlc[2] == null) ohlc[2] = ohlc.Where(val => val != null).Min();                      if (ohlc[0] == null) ohlc[0] = ohlc.Where(val => val != null).Average();                      if (ohlc[3] == null) ohlc[3] = ohlc.Where(val => val != null).Average();                        Log.Error(string.Format("Corrupt bar on {0}: {1}'{2}'{3}'{4}. Saved as {5}'{6}'{7}'{8}."'                          columns[0]' columns[1]' columns[2]' columns[3]' columns[4]'                          ohlc[0]' ohlc[1]' ohlc[2]' ohlc[3]));                  }                    long volume = columns[5].ToInt64();                    yield return new TradeBar(time' symbol' (Decimal)ohlc[0]' (Decimal)ohlc[1]' (Decimal)ohlc[2]' (Decimal)ohlc[3]' volume' resolution.ToTimeSpan());                    currentLine++;              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetDaily,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  // Format: Date'Open'High'Low'Close'Volume                  var columns = lines[currentLine].Split(''');                    // date format: DD-Mon-YY' e.g. 27-Sep-16                  var DMY = columns[0].Split('-');                    // date = 20160927                  var day = DMY[0].ToInt32();                  var month = (int)Enum.Parse(typeof(ConvertMonths)' DMY[1]);                  var year = (DMY[2].ToInt32() > 70) ? 1900 + DMY[2].ToInt32() : 2000 + DMY[2].ToInt32();                  var time = new DateTime(year' month' day' 0' 0' 0);                    // occasionally' the columns will have a '-' instead of a proper value                  List<Decimal?> ohlc = new List<Decimal?>()                  {                      columns[1] != "-" ? (Decimal?)columns[1].ToDecimal() : null'                      columns[2] != "-" ? (Decimal?)columns[2].ToDecimal() : null'                      columns[3] != "-" ? (Decimal?)columns[3].ToDecimal() : null'                      columns[4] != "-" ? (Decimal?)columns[4].ToDecimal() : null                  };                    if (ohlc.Where(val => val == null).Count() > 0)                  {                      // let's try hard to fix any issues as good as we can                      // this code assumes that there is at least 1 good value                      if (ohlc[1] == null) ohlc[1] = ohlc.Where(val => val != null).Max();                      if (ohlc[2] == null) ohlc[2] = ohlc.Where(val => val != null).Min();                      if (ohlc[0] == null) ohlc[0] = ohlc.Where(val => val != null).Average();                      if (ohlc[3] == null) ohlc[3] = ohlc.Where(val => val != null).Average();                        Log.Error(string.Format("Corrupt bar on {0}: {1}'{2}'{3}'{4}. Saved as {5}'{6}'{7}'{8}."'                          columns[0]' columns[1]' columns[2]' columns[3]' columns[4]'                          ohlc[0]' ohlc[1]' ohlc[2]' ohlc[3]));                  }                    long volume = columns[5].ToInt64();                    yield return new TradeBar(time' symbol' (Decimal)ohlc[0]' (Decimal)ohlc[1]' (Decimal)ohlc[2]' (Decimal)ohlc[3]' volume' resolution.ToTimeSpan());                    currentLine++;              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetDaily,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  // Format: Date'Open'High'Low'Close'Volume                  var columns = lines[currentLine].Split(''');                    // date format: DD-Mon-YY' e.g. 27-Sep-16                  var DMY = columns[0].Split('-');                    // date = 20160927                  var day = DMY[0].ToInt32();                  var month = (int)Enum.Parse(typeof(ConvertMonths)' DMY[1]);                  var year = (DMY[2].ToInt32() > 70) ? 1900 + DMY[2].ToInt32() : 2000 + DMY[2].ToInt32();                  var time = new DateTime(year' month' day' 0' 0' 0);                    // occasionally' the columns will have a '-' instead of a proper value                  List<Decimal?> ohlc = new List<Decimal?>()                  {                      columns[1] != "-" ? (Decimal?)columns[1].ToDecimal() : null'                      columns[2] != "-" ? (Decimal?)columns[2].ToDecimal() : null'                      columns[3] != "-" ? (Decimal?)columns[3].ToDecimal() : null'                      columns[4] != "-" ? (Decimal?)columns[4].ToDecimal() : null                  };                    if (ohlc.Where(val => val == null).Count() > 0)                  {                      // let's try hard to fix any issues as good as we can                      // this code assumes that there is at least 1 good value                      if (ohlc[1] == null) ohlc[1] = ohlc.Where(val => val != null).Max();                      if (ohlc[2] == null) ohlc[2] = ohlc.Where(val => val != null).Min();                      if (ohlc[0] == null) ohlc[0] = ohlc.Where(val => val != null).Average();                      if (ohlc[3] == null) ohlc[3] = ohlc.Where(val => val != null).Average();                        Log.Error(string.Format("Corrupt bar on {0}: {1}'{2}'{3}'{4}. Saved as {5}'{6}'{7}'{8}."'                          columns[0]' columns[1]' columns[2]' columns[3]' columns[4]'                          ohlc[0]' ohlc[1]' ohlc[2]' ohlc[3]));                  }                    long volume = columns[5].ToInt64();                    yield return new TradeBar(time' symbol' (Decimal)ohlc[0]' (Decimal)ohlc[1]' (Decimal)ohlc[2]' (Decimal)ohlc[3]' volume' resolution.ToTimeSpan());                    currentLine++;              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetDaily,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  // Format: Date'Open'High'Low'Close'Volume                  var columns = lines[currentLine].Split(''');                    // date format: DD-Mon-YY' e.g. 27-Sep-16                  var DMY = columns[0].Split('-');                    // date = 20160927                  var day = DMY[0].ToInt32();                  var month = (int)Enum.Parse(typeof(ConvertMonths)' DMY[1]);                  var year = (DMY[2].ToInt32() > 70) ? 1900 + DMY[2].ToInt32() : 2000 + DMY[2].ToInt32();                  var time = new DateTime(year' month' day' 0' 0' 0);                    // occasionally' the columns will have a '-' instead of a proper value                  List<Decimal?> ohlc = new List<Decimal?>()                  {                      columns[1] != "-" ? (Decimal?)columns[1].ToDecimal() : null'                      columns[2] != "-" ? (Decimal?)columns[2].ToDecimal() : null'                      columns[3] != "-" ? (Decimal?)columns[3].ToDecimal() : null'                      columns[4] != "-" ? (Decimal?)columns[4].ToDecimal() : null                  };                    if (ohlc.Where(val => val == null).Count() > 0)                  {                      // let's try hard to fix any issues as good as we can                      // this code assumes that there is at least 1 good value                      if (ohlc[1] == null) ohlc[1] = ohlc.Where(val => val != null).Max();                      if (ohlc[2] == null) ohlc[2] = ohlc.Where(val => val != null).Min();                      if (ohlc[0] == null) ohlc[0] = ohlc.Where(val => val != null).Average();                      if (ohlc[3] == null) ohlc[3] = ohlc.Where(val => val != null).Average();                        Log.Error(string.Format("Corrupt bar on {0}: {1}'{2}'{3}'{4}. Saved as {5}'{6}'{7}'{8}."'                          columns[0]' columns[1]' columns[2]' columns[3]' columns[4]'                          ohlc[0]' ohlc[1]' ohlc[2]' ohlc[3]));                  }                    long volume = columns[5].ToInt64();                    yield return new TradeBar(time' symbol' (Decimal)ohlc[0]' (Decimal)ohlc[1]' (Decimal)ohlc[2]' (Decimal)ohlc[3]' volume' resolution.ToTimeSpan());                    currentLine++;              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetDaily,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  // Format: Date'Open'High'Low'Close'Volume                  var columns = lines[currentLine].Split(''');                    // date format: DD-Mon-YY' e.g. 27-Sep-16                  var DMY = columns[0].Split('-');                    // date = 20160927                  var day = DMY[0].ToInt32();                  var month = (int)Enum.Parse(typeof(ConvertMonths)' DMY[1]);                  var year = (DMY[2].ToInt32() > 70) ? 1900 + DMY[2].ToInt32() : 2000 + DMY[2].ToInt32();                  var time = new DateTime(year' month' day' 0' 0' 0);                    // occasionally' the columns will have a '-' instead of a proper value                  List<Decimal?> ohlc = new List<Decimal?>()                  {                      columns[1] != "-" ? (Decimal?)columns[1].ToDecimal() : null'                      columns[2] != "-" ? (Decimal?)columns[2].ToDecimal() : null'                      columns[3] != "-" ? (Decimal?)columns[3].ToDecimal() : null'                      columns[4] != "-" ? (Decimal?)columns[4].ToDecimal() : null                  };                    if (ohlc.Where(val => val == null).Count() > 0)                  {                      // let's try hard to fix any issues as good as we can                      // this code assumes that there is at least 1 good value                      if (ohlc[1] == null) ohlc[1] = ohlc.Where(val => val != null).Max();                      if (ohlc[2] == null) ohlc[2] = ohlc.Where(val => val != null).Min();                      if (ohlc[0] == null) ohlc[0] = ohlc.Where(val => val != null).Average();                      if (ohlc[3] == null) ohlc[3] = ohlc.Where(val => val != null).Average();                        Log.Error(string.Format("Corrupt bar on {0}: {1}'{2}'{3}'{4}. Saved as {5}'{6}'{7}'{8}."'                          columns[0]' columns[1]' columns[2]' columns[3]' columns[4]'                          ohlc[0]' ohlc[1]' ohlc[2]' ohlc[3]));                  }                    long volume = columns[5].ToInt64();                    yield return new TradeBar(time' symbol' (Decimal)ohlc[0]' (Decimal)ohlc[1]' (Decimal)ohlc[2]' (Decimal)ohlc[3]' volume' resolution.ToTimeSpan());                    currentLine++;              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetDaily,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  // Format: Date'Open'High'Low'Close'Volume                  var columns = lines[currentLine].Split(''');                    // date format: DD-Mon-YY' e.g. 27-Sep-16                  var DMY = columns[0].Split('-');                    // date = 20160927                  var day = DMY[0].ToInt32();                  var month = (int)Enum.Parse(typeof(ConvertMonths)' DMY[1]);                  var year = (DMY[2].ToInt32() > 70) ? 1900 + DMY[2].ToInt32() : 2000 + DMY[2].ToInt32();                  var time = new DateTime(year' month' day' 0' 0' 0);                    // occasionally' the columns will have a '-' instead of a proper value                  List<Decimal?> ohlc = new List<Decimal?>()                  {                      columns[1] != "-" ? (Decimal?)columns[1].ToDecimal() : null'                      columns[2] != "-" ? (Decimal?)columns[2].ToDecimal() : null'                      columns[3] != "-" ? (Decimal?)columns[3].ToDecimal() : null'                      columns[4] != "-" ? (Decimal?)columns[4].ToDecimal() : null                  };                    if (ohlc.Where(val => val == null).Count() > 0)                  {                      // let's try hard to fix any issues as good as we can                      // this code assumes that there is at least 1 good value                      if (ohlc[1] == null) ohlc[1] = ohlc.Where(val => val != null).Max();                      if (ohlc[2] == null) ohlc[2] = ohlc.Where(val => val != null).Min();                      if (ohlc[0] == null) ohlc[0] = ohlc.Where(val => val != null).Average();                      if (ohlc[3] == null) ohlc[3] = ohlc.Where(val => val != null).Average();                        Log.Error(string.Format("Corrupt bar on {0}: {1}'{2}'{3}'{4}. Saved as {5}'{6}'{7}'{8}."'                          columns[0]' columns[1]' columns[2]' columns[3]' columns[4]'                          ohlc[0]' ohlc[1]' ohlc[2]' ohlc[3]));                  }                    long volume = columns[5].ToInt64();                    yield return new TradeBar(time' symbol' (Decimal)ohlc[0]' (Decimal)ohlc[1]' (Decimal)ohlc[2]' (Decimal)ohlc[3]' volume' resolution.ToTimeSpan());                    currentLine++;              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetDaily,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  // Format: Date'Open'High'Low'Close'Volume                  var columns = lines[currentLine].Split(''');                    // date format: DD-Mon-YY' e.g. 27-Sep-16                  var DMY = columns[0].Split('-');                    // date = 20160927                  var day = DMY[0].ToInt32();                  var month = (int)Enum.Parse(typeof(ConvertMonths)' DMY[1]);                  var year = (DMY[2].ToInt32() > 70) ? 1900 + DMY[2].ToInt32() : 2000 + DMY[2].ToInt32();                  var time = new DateTime(year' month' day' 0' 0' 0);                    // occasionally' the columns will have a '-' instead of a proper value                  List<Decimal?> ohlc = new List<Decimal?>()                  {                      columns[1] != "-" ? (Decimal?)columns[1].ToDecimal() : null'                      columns[2] != "-" ? (Decimal?)columns[2].ToDecimal() : null'                      columns[3] != "-" ? (Decimal?)columns[3].ToDecimal() : null'                      columns[4] != "-" ? (Decimal?)columns[4].ToDecimal() : null                  };                    if (ohlc.Where(val => val == null).Count() > 0)                  {                      // let's try hard to fix any issues as good as we can                      // this code assumes that there is at least 1 good value                      if (ohlc[1] == null) ohlc[1] = ohlc.Where(val => val != null).Max();                      if (ohlc[2] == null) ohlc[2] = ohlc.Where(val => val != null).Min();                      if (ohlc[0] == null) ohlc[0] = ohlc.Where(val => val != null).Average();                      if (ohlc[3] == null) ohlc[3] = ohlc.Where(val => val != null).Average();                        Log.Error(string.Format("Corrupt bar on {0}: {1}'{2}'{3}'{4}. Saved as {5}'{6}'{7}'{8}."'                          columns[0]' columns[1]' columns[2]' columns[3]' columns[4]'                          ohlc[0]' ohlc[1]' ohlc[2]' ohlc[3]));                  }                    long volume = columns[5].ToInt64();                    yield return new TradeBar(time' symbol' (Decimal)ohlc[0]' (Decimal)ohlc[1]' (Decimal)ohlc[2]' (Decimal)ohlc[3]' volume' resolution.ToTimeSpan());                    currentLine++;              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetDaily,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  // Format: Date'Open'High'Low'Close'Volume                  var columns = lines[currentLine].Split(''');                    // date format: DD-Mon-YY' e.g. 27-Sep-16                  var DMY = columns[0].Split('-');                    // date = 20160927                  var day = DMY[0].ToInt32();                  var month = (int)Enum.Parse(typeof(ConvertMonths)' DMY[1]);                  var year = (DMY[2].ToInt32() > 70) ? 1900 + DMY[2].ToInt32() : 2000 + DMY[2].ToInt32();                  var time = new DateTime(year' month' day' 0' 0' 0);                    // occasionally' the columns will have a '-' instead of a proper value                  List<Decimal?> ohlc = new List<Decimal?>()                  {                      columns[1] != "-" ? (Decimal?)columns[1].ToDecimal() : null'                      columns[2] != "-" ? (Decimal?)columns[2].ToDecimal() : null'                      columns[3] != "-" ? (Decimal?)columns[3].ToDecimal() : null'                      columns[4] != "-" ? (Decimal?)columns[4].ToDecimal() : null                  };                    if (ohlc.Where(val => val == null).Count() > 0)                  {                      // let's try hard to fix any issues as good as we can                      // this code assumes that there is at least 1 good value                      if (ohlc[1] == null) ohlc[1] = ohlc.Where(val => val != null).Max();                      if (ohlc[2] == null) ohlc[2] = ohlc.Where(val => val != null).Min();                      if (ohlc[0] == null) ohlc[0] = ohlc.Where(val => val != null).Average();                      if (ohlc[3] == null) ohlc[3] = ohlc.Where(val => val != null).Average();                        Log.Error(string.Format("Corrupt bar on {0}: {1}'{2}'{3}'{4}. Saved as {5}'{6}'{7}'{8}."'                          columns[0]' columns[1]' columns[2]' columns[3]' columns[4]'                          ohlc[0]' ohlc[1]' ohlc[2]' ohlc[3]));                  }                    long volume = columns[5].ToInt64();                    yield return new TradeBar(time' symbol' (Decimal)ohlc[0]' (Decimal)ohlc[1]' (Decimal)ohlc[2]' (Decimal)ohlc[3]' volume' resolution.ToTimeSpan());                    currentLine++;              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetDaily,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  // Format: Date'Open'High'Low'Close'Volume                  var columns = lines[currentLine].Split(''');                    // date format: DD-Mon-YY' e.g. 27-Sep-16                  var DMY = columns[0].Split('-');                    // date = 20160927                  var day = DMY[0].ToInt32();                  var month = (int)Enum.Parse(typeof(ConvertMonths)' DMY[1]);                  var year = (DMY[2].ToInt32() > 70) ? 1900 + DMY[2].ToInt32() : 2000 + DMY[2].ToInt32();                  var time = new DateTime(year' month' day' 0' 0' 0);                    // occasionally' the columns will have a '-' instead of a proper value                  List<Decimal?> ohlc = new List<Decimal?>()                  {                      columns[1] != "-" ? (Decimal?)columns[1].ToDecimal() : null'                      columns[2] != "-" ? (Decimal?)columns[2].ToDecimal() : null'                      columns[3] != "-" ? (Decimal?)columns[3].ToDecimal() : null'                      columns[4] != "-" ? (Decimal?)columns[4].ToDecimal() : null                  };                    if (ohlc.Where(val => val == null).Count() > 0)                  {                      // let's try hard to fix any issues as good as we can                      // this code assumes that there is at least 1 good value                      if (ohlc[1] == null) ohlc[1] = ohlc.Where(val => val != null).Max();                      if (ohlc[2] == null) ohlc[2] = ohlc.Where(val => val != null).Min();                      if (ohlc[0] == null) ohlc[0] = ohlc.Where(val => val != null).Average();                      if (ohlc[3] == null) ohlc[3] = ohlc.Where(val => val != null).Average();                        Log.Error(string.Format("Corrupt bar on {0}: {1}'{2}'{3}'{4}. Saved as {5}'{6}'{7}'{8}."'                          columns[0]' columns[1]' columns[2]' columns[3]' columns[4]'                          ohlc[0]' ohlc[1]' ohlc[2]' ohlc[3]));                  }                    long volume = columns[5].ToInt64();                    yield return new TradeBar(time' symbol' (Decimal)ohlc[0]' (Decimal)ohlc[1]' (Decimal)ohlc[2]' (Decimal)ohlc[3]' volume' resolution.ToTimeSpan());                    currentLine++;              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetDaily,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  // Format: Date'Open'High'Low'Close'Volume                  var columns = lines[currentLine].Split(''');                    // date format: DD-Mon-YY' e.g. 27-Sep-16                  var DMY = columns[0].Split('-');                    // date = 20160927                  var day = DMY[0].ToInt32();                  var month = (int)Enum.Parse(typeof(ConvertMonths)' DMY[1]);                  var year = (DMY[2].ToInt32() > 70) ? 1900 + DMY[2].ToInt32() : 2000 + DMY[2].ToInt32();                  var time = new DateTime(year' month' day' 0' 0' 0);                    // occasionally' the columns will have a '-' instead of a proper value                  List<Decimal?> ohlc = new List<Decimal?>()                  {                      columns[1] != "-" ? (Decimal?)columns[1].ToDecimal() : null'                      columns[2] != "-" ? (Decimal?)columns[2].ToDecimal() : null'                      columns[3] != "-" ? (Decimal?)columns[3].ToDecimal() : null'                      columns[4] != "-" ? (Decimal?)columns[4].ToDecimal() : null                  };                    if (ohlc.Where(val => val == null).Count() > 0)                  {                      // let's try hard to fix any issues as good as we can                      // this code assumes that there is at least 1 good value                      if (ohlc[1] == null) ohlc[1] = ohlc.Where(val => val != null).Max();                      if (ohlc[2] == null) ohlc[2] = ohlc.Where(val => val != null).Min();                      if (ohlc[0] == null) ohlc[0] = ohlc.Where(val => val != null).Average();                      if (ohlc[3] == null) ohlc[3] = ohlc.Where(val => val != null).Average();                        Log.Error(string.Format("Corrupt bar on {0}: {1}'{2}'{3}'{4}. Saved as {5}'{6}'{7}'{8}."'                          columns[0]' columns[1]' columns[2]' columns[3]' columns[4]'                          ohlc[0]' ohlc[1]' ohlc[2]' ohlc[3]));                  }                    long volume = columns[5].ToInt64();                    yield return new TradeBar(time' symbol' (Decimal)ohlc[0]' (Decimal)ohlc[1]' (Decimal)ohlc[2]' (Decimal)ohlc[3]' volume' resolution.ToTimeSpan());                    currentLine++;              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetDaily,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  // Format: Date'Open'High'Low'Close'Volume                  var columns = lines[currentLine].Split(''');                    // date format: DD-Mon-YY' e.g. 27-Sep-16                  var DMY = columns[0].Split('-');                    // date = 20160927                  var day = DMY[0].ToInt32();                  var month = (int)Enum.Parse(typeof(ConvertMonths)' DMY[1]);                  var year = (DMY[2].ToInt32() > 70) ? 1900 + DMY[2].ToInt32() : 2000 + DMY[2].ToInt32();                  var time = new DateTime(year' month' day' 0' 0' 0);                    // occasionally' the columns will have a '-' instead of a proper value                  List<Decimal?> ohlc = new List<Decimal?>()                  {                      columns[1] != "-" ? (Decimal?)columns[1].ToDecimal() : null'                      columns[2] != "-" ? (Decimal?)columns[2].ToDecimal() : null'                      columns[3] != "-" ? (Decimal?)columns[3].ToDecimal() : null'                      columns[4] != "-" ? (Decimal?)columns[4].ToDecimal() : null                  };                    if (ohlc.Where(val => val == null).Count() > 0)                  {                      // let's try hard to fix any issues as good as we can                      // this code assumes that there is at least 1 good value                      if (ohlc[1] == null) ohlc[1] = ohlc.Where(val => val != null).Max();                      if (ohlc[2] == null) ohlc[2] = ohlc.Where(val => val != null).Min();                      if (ohlc[0] == null) ohlc[0] = ohlc.Where(val => val != null).Average();                      if (ohlc[3] == null) ohlc[3] = ohlc.Where(val => val != null).Average();                        Log.Error(string.Format("Corrupt bar on {0}: {1}'{2}'{3}'{4}. Saved as {5}'{6}'{7}'{8}."'                          columns[0]' columns[1]' columns[2]' columns[3]' columns[4]'                          ohlc[0]' ohlc[1]' ohlc[2]' ohlc[3]));                  }                    long volume = columns[5].ToInt64();                    yield return new TradeBar(time' symbol' (Decimal)ohlc[0]' (Decimal)ohlc[1]' (Decimal)ohlc[2]' (Decimal)ohlc[3]' volume' resolution.ToTimeSpan());                    currentLine++;              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetDaily,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  // Format: Date'Open'High'Low'Close'Volume                  var columns = lines[currentLine].Split(''');                    // date format: DD-Mon-YY' e.g. 27-Sep-16                  var DMY = columns[0].Split('-');                    // date = 20160927                  var day = DMY[0].ToInt32();                  var month = (int)Enum.Parse(typeof(ConvertMonths)' DMY[1]);                  var year = (DMY[2].ToInt32() > 70) ? 1900 + DMY[2].ToInt32() : 2000 + DMY[2].ToInt32();                  var time = new DateTime(year' month' day' 0' 0' 0);                    // occasionally' the columns will have a '-' instead of a proper value                  List<Decimal?> ohlc = new List<Decimal?>()                  {                      columns[1] != "-" ? (Decimal?)columns[1].ToDecimal() : null'                      columns[2] != "-" ? (Decimal?)columns[2].ToDecimal() : null'                      columns[3] != "-" ? (Decimal?)columns[3].ToDecimal() : null'                      columns[4] != "-" ? (Decimal?)columns[4].ToDecimal() : null                  };                    if (ohlc.Where(val => val == null).Count() > 0)                  {                      // let's try hard to fix any issues as good as we can                      // this code assumes that there is at least 1 good value                      if (ohlc[1] == null) ohlc[1] = ohlc.Where(val => val != null).Max();                      if (ohlc[2] == null) ohlc[2] = ohlc.Where(val => val != null).Min();                      if (ohlc[0] == null) ohlc[0] = ohlc.Where(val => val != null).Average();                      if (ohlc[3] == null) ohlc[3] = ohlc.Where(val => val != null).Average();                        Log.Error(string.Format("Corrupt bar on {0}: {1}'{2}'{3}'{4}. Saved as {5}'{6}'{7}'{8}."'                          columns[0]' columns[1]' columns[2]' columns[3]' columns[4]'                          ohlc[0]' ohlc[1]' ohlc[2]' ohlc[3]));                  }                    long volume = columns[5].ToInt64();                    yield return new TradeBar(time' symbol' (Decimal)ohlc[0]' (Decimal)ohlc[1]' (Decimal)ohlc[2]' (Decimal)ohlc[3]' volume' resolution.ToTimeSpan());                    currentLine++;              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetDaily,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  // Format: Date'Open'High'Low'Close'Volume                  var columns = lines[currentLine].Split(''');                    // date format: DD-Mon-YY' e.g. 27-Sep-16                  var DMY = columns[0].Split('-');                    // date = 20160927                  var day = DMY[0].ToInt32();                  var month = (int)Enum.Parse(typeof(ConvertMonths)' DMY[1]);                  var year = (DMY[2].ToInt32() > 70) ? 1900 + DMY[2].ToInt32() : 2000 + DMY[2].ToInt32();                  var time = new DateTime(year' month' day' 0' 0' 0);                    // occasionally' the columns will have a '-' instead of a proper value                  List<Decimal?> ohlc = new List<Decimal?>()                  {                      columns[1] != "-" ? (Decimal?)columns[1].ToDecimal() : null'                      columns[2] != "-" ? (Decimal?)columns[2].ToDecimal() : null'                      columns[3] != "-" ? (Decimal?)columns[3].ToDecimal() : null'                      columns[4] != "-" ? (Decimal?)columns[4].ToDecimal() : null                  };                    if (ohlc.Where(val => val == null).Count() > 0)                  {                      // let's try hard to fix any issues as good as we can                      // this code assumes that there is at least 1 good value                      if (ohlc[1] == null) ohlc[1] = ohlc.Where(val => val != null).Max();                      if (ohlc[2] == null) ohlc[2] = ohlc.Where(val => val != null).Min();                      if (ohlc[0] == null) ohlc[0] = ohlc.Where(val => val != null).Average();                      if (ohlc[3] == null) ohlc[3] = ohlc.Where(val => val != null).Average();                        Log.Error(string.Format("Corrupt bar on {0}: {1}'{2}'{3}'{4}. Saved as {5}'{6}'{7}'{8}."'                          columns[0]' columns[1]' columns[2]' columns[3]' columns[4]'                          ohlc[0]' ohlc[1]' ohlc[2]' ohlc[3]));                  }                    long volume = columns[5].ToInt64();                    yield return new TradeBar(time' symbol' (Decimal)ohlc[0]' (Decimal)ohlc[1]' (Decimal)ohlc[2]' (Decimal)ohlc[3]' volume' resolution.ToTimeSpan());                    currentLine++;              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetDaily,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  // Format: Date'Open'High'Low'Close'Volume                  var columns = lines[currentLine].Split(''');                    // date format: DD-Mon-YY' e.g. 27-Sep-16                  var DMY = columns[0].Split('-');                    // date = 20160927                  var day = DMY[0].ToInt32();                  var month = (int)Enum.Parse(typeof(ConvertMonths)' DMY[1]);                  var year = (DMY[2].ToInt32() > 70) ? 1900 + DMY[2].ToInt32() : 2000 + DMY[2].ToInt32();                  var time = new DateTime(year' month' day' 0' 0' 0);                    // occasionally' the columns will have a '-' instead of a proper value                  List<Decimal?> ohlc = new List<Decimal?>()                  {                      columns[1] != "-" ? (Decimal?)columns[1].ToDecimal() : null'                      columns[2] != "-" ? (Decimal?)columns[2].ToDecimal() : null'                      columns[3] != "-" ? (Decimal?)columns[3].ToDecimal() : null'                      columns[4] != "-" ? (Decimal?)columns[4].ToDecimal() : null                  };                    if (ohlc.Where(val => val == null).Count() > 0)                  {                      // let's try hard to fix any issues as good as we can                      // this code assumes that there is at least 1 good value                      if (ohlc[1] == null) ohlc[1] = ohlc.Where(val => val != null).Max();                      if (ohlc[2] == null) ohlc[2] = ohlc.Where(val => val != null).Min();                      if (ohlc[0] == null) ohlc[0] = ohlc.Where(val => val != null).Average();                      if (ohlc[3] == null) ohlc[3] = ohlc.Where(val => val != null).Average();                        Log.Error(string.Format("Corrupt bar on {0}: {1}'{2}'{3}'{4}. Saved as {5}'{6}'{7}'{8}."'                          columns[0]' columns[1]' columns[2]' columns[3]' columns[4]'                          ohlc[0]' ohlc[1]' ohlc[2]' ohlc[3]));                  }                    long volume = columns[5].ToInt64();                    yield return new TradeBar(time' symbol' (Decimal)ohlc[0]' (Decimal)ohlc[1]' (Decimal)ohlc[2]' (Decimal)ohlc[3]' volume' resolution.ToTimeSpan());                    currentLine++;              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetDaily,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  // Format: Date'Open'High'Low'Close'Volume                  var columns = lines[currentLine].Split(''');                    // date format: DD-Mon-YY' e.g. 27-Sep-16                  var DMY = columns[0].Split('-');                    // date = 20160927                  var day = DMY[0].ToInt32();                  var month = (int)Enum.Parse(typeof(ConvertMonths)' DMY[1]);                  var year = (DMY[2].ToInt32() > 70) ? 1900 + DMY[2].ToInt32() : 2000 + DMY[2].ToInt32();                  var time = new DateTime(year' month' day' 0' 0' 0);                    // occasionally' the columns will have a '-' instead of a proper value                  List<Decimal?> ohlc = new List<Decimal?>()                  {                      columns[1] != "-" ? (Decimal?)columns[1].ToDecimal() : null'                      columns[2] != "-" ? (Decimal?)columns[2].ToDecimal() : null'                      columns[3] != "-" ? (Decimal?)columns[3].ToDecimal() : null'                      columns[4] != "-" ? (Decimal?)columns[4].ToDecimal() : null                  };                    if (ohlc.Where(val => val == null).Count() > 0)                  {                      // let's try hard to fix any issues as good as we can                      // this code assumes that there is at least 1 good value                      if (ohlc[1] == null) ohlc[1] = ohlc.Where(val => val != null).Max();                      if (ohlc[2] == null) ohlc[2] = ohlc.Where(val => val != null).Min();                      if (ohlc[0] == null) ohlc[0] = ohlc.Where(val => val != null).Average();                      if (ohlc[3] == null) ohlc[3] = ohlc.Where(val => val != null).Average();                        Log.Error(string.Format("Corrupt bar on {0}: {1}'{2}'{3}'{4}. Saved as {5}'{6}'{7}'{8}."'                          columns[0]' columns[1]' columns[2]' columns[3]' columns[4]'                          ohlc[0]' ohlc[1]' ohlc[2]' ohlc[3]));                  }                    long volume = columns[5].ToInt64();                    yield return new TradeBar(time' symbol' (Decimal)ohlc[0]' (Decimal)ohlc[1]' (Decimal)ohlc[2]' (Decimal)ohlc[3]' volume' resolution.ToTimeSpan());                    currentLine++;              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetDaily,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  // Format: Date'Open'High'Low'Close'Volume                  var columns = lines[currentLine].Split(''');                    // date format: DD-Mon-YY' e.g. 27-Sep-16                  var DMY = columns[0].Split('-');                    // date = 20160927                  var day = DMY[0].ToInt32();                  var month = (int)Enum.Parse(typeof(ConvertMonths)' DMY[1]);                  var year = (DMY[2].ToInt32() > 70) ? 1900 + DMY[2].ToInt32() : 2000 + DMY[2].ToInt32();                  var time = new DateTime(year' month' day' 0' 0' 0);                    // occasionally' the columns will have a '-' instead of a proper value                  List<Decimal?> ohlc = new List<Decimal?>()                  {                      columns[1] != "-" ? (Decimal?)columns[1].ToDecimal() : null'                      columns[2] != "-" ? (Decimal?)columns[2].ToDecimal() : null'                      columns[3] != "-" ? (Decimal?)columns[3].ToDecimal() : null'                      columns[4] != "-" ? (Decimal?)columns[4].ToDecimal() : null                  };                    if (ohlc.Where(val => val == null).Count() > 0)                  {                      // let's try hard to fix any issues as good as we can                      // this code assumes that there is at least 1 good value                      if (ohlc[1] == null) ohlc[1] = ohlc.Where(val => val != null).Max();                      if (ohlc[2] == null) ohlc[2] = ohlc.Where(val => val != null).Min();                      if (ohlc[0] == null) ohlc[0] = ohlc.Where(val => val != null).Average();                      if (ohlc[3] == null) ohlc[3] = ohlc.Where(val => val != null).Average();                        Log.Error(string.Format("Corrupt bar on {0}: {1}'{2}'{3}'{4}. Saved as {5}'{6}'{7}'{8}."'                          columns[0]' columns[1]' columns[2]' columns[3]' columns[4]'                          ohlc[0]' ohlc[1]' ohlc[2]' ohlc[3]));                  }                    long volume = columns[5].ToInt64();                    yield return new TradeBar(time' symbol' (Decimal)ohlc[0]' (Decimal)ohlc[1]' (Decimal)ohlc[2]' (Decimal)ohlc[3]' volume' resolution.ToTimeSpan());                    currentLine++;              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetDaily,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  // Format: Date'Open'High'Low'Close'Volume                  var columns = lines[currentLine].Split(''');                    // date format: DD-Mon-YY' e.g. 27-Sep-16                  var DMY = columns[0].Split('-');                    // date = 20160927                  var day = DMY[0].ToInt32();                  var month = (int)Enum.Parse(typeof(ConvertMonths)' DMY[1]);                  var year = (DMY[2].ToInt32() > 70) ? 1900 + DMY[2].ToInt32() : 2000 + DMY[2].ToInt32();                  var time = new DateTime(year' month' day' 0' 0' 0);                    // occasionally' the columns will have a '-' instead of a proper value                  List<Decimal?> ohlc = new List<Decimal?>()                  {                      columns[1] != "-" ? (Decimal?)columns[1].ToDecimal() : null'                      columns[2] != "-" ? (Decimal?)columns[2].ToDecimal() : null'                      columns[3] != "-" ? (Decimal?)columns[3].ToDecimal() : null'                      columns[4] != "-" ? (Decimal?)columns[4].ToDecimal() : null                  };                    if (ohlc.Where(val => val == null).Count() > 0)                  {                      // let's try hard to fix any issues as good as we can                      // this code assumes that there is at least 1 good value                      if (ohlc[1] == null) ohlc[1] = ohlc.Where(val => val != null).Max();                      if (ohlc[2] == null) ohlc[2] = ohlc.Where(val => val != null).Min();                      if (ohlc[0] == null) ohlc[0] = ohlc.Where(val => val != null).Average();                      if (ohlc[3] == null) ohlc[3] = ohlc.Where(val => val != null).Average();                        Log.Error(string.Format("Corrupt bar on {0}: {1}'{2}'{3}'{4}. Saved as {5}'{6}'{7}'{8}."'                          columns[0]' columns[1]' columns[2]' columns[3]' columns[4]'                          ohlc[0]' ohlc[1]' ohlc[2]' ohlc[3]));                  }                    long volume = columns[5].ToInt64();                    yield return new TradeBar(time' symbol' (Decimal)ohlc[0]' (Decimal)ohlc[1]' (Decimal)ohlc[2]' (Decimal)ohlc[3]' volume' resolution.ToTimeSpan());                    currentLine++;              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetMinuteOrHour,The following statement contains a magic number: var currentLine = 7;
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetMinuteOrHour,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  var firstPass = true;                    // Each day google starts date time at 930am and then                   // has 390 minutes over the day. Look for the starter rows "a".                  var columns = lines[currentLine].Split(''');                  var startTime = FromUnixTime(columns[0].Remove(0' 1).ToInt64());                    while (currentLine < lines.Length - 1)                  {                      var str = lines[currentLine].Split(''');                      if (str.Length < 6)                          throw new InvalidDataException("Short record: " + str);                        // If its the start of a new day' break out of this sub-loop.                      var titleRow = str[0][0] == 'a';                      if (titleRow && !firstPass)                           break;                        firstPass = false;                        // Build the current datetime' from the row offset                      var time = startTime.AddSeconds(resolutionSeconds * (titleRow ? 0 : str[0].ToInt64()));                        // Bar: d0' c1' h2' l3' o4' v5                      var open = str[4].ToDecimal();                      var high = str[2].ToDecimal();                      var low = str[3].ToDecimal();                      var close = str[1].ToDecimal();                      var volume = str[5].ToInt64();                        currentLine++;                        yield return new TradeBar(time' symbol' open' high' low' close' volume' resolution.ToTimeSpan());                  }              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetMinuteOrHour,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  var firstPass = true;                    // Each day google starts date time at 930am and then                   // has 390 minutes over the day. Look for the starter rows "a".                  var columns = lines[currentLine].Split(''');                  var startTime = FromUnixTime(columns[0].Remove(0' 1).ToInt64());                    while (currentLine < lines.Length - 1)                  {                      var str = lines[currentLine].Split(''');                      if (str.Length < 6)                          throw new InvalidDataException("Short record: " + str);                        // If its the start of a new day' break out of this sub-loop.                      var titleRow = str[0][0] == 'a';                      if (titleRow && !firstPass)                           break;                        firstPass = false;                        // Build the current datetime' from the row offset                      var time = startTime.AddSeconds(resolutionSeconds * (titleRow ? 0 : str[0].ToInt64()));                        // Bar: d0' c1' h2' l3' o4' v5                      var open = str[4].ToDecimal();                      var high = str[2].ToDecimal();                      var low = str[3].ToDecimal();                      var close = str[1].ToDecimal();                      var volume = str[5].ToInt64();                        currentLine++;                        yield return new TradeBar(time' symbol' open' high' low' close' volume' resolution.ToTimeSpan());                  }              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetMinuteOrHour,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  var firstPass = true;                    // Each day google starts date time at 930am and then                   // has 390 minutes over the day. Look for the starter rows "a".                  var columns = lines[currentLine].Split(''');                  var startTime = FromUnixTime(columns[0].Remove(0' 1).ToInt64());                    while (currentLine < lines.Length - 1)                  {                      var str = lines[currentLine].Split(''');                      if (str.Length < 6)                          throw new InvalidDataException("Short record: " + str);                        // If its the start of a new day' break out of this sub-loop.                      var titleRow = str[0][0] == 'a';                      if (titleRow && !firstPass)                           break;                        firstPass = false;                        // Build the current datetime' from the row offset                      var time = startTime.AddSeconds(resolutionSeconds * (titleRow ? 0 : str[0].ToInt64()));                        // Bar: d0' c1' h2' l3' o4' v5                      var open = str[4].ToDecimal();                      var high = str[2].ToDecimal();                      var low = str[3].ToDecimal();                      var close = str[1].ToDecimal();                      var volume = str[5].ToInt64();                        currentLine++;                        yield return new TradeBar(time' symbol' open' high' low' close' volume' resolution.ToTimeSpan());                  }              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetMinuteOrHour,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  var firstPass = true;                    // Each day google starts date time at 930am and then                   // has 390 minutes over the day. Look for the starter rows "a".                  var columns = lines[currentLine].Split(''');                  var startTime = FromUnixTime(columns[0].Remove(0' 1).ToInt64());                    while (currentLine < lines.Length - 1)                  {                      var str = lines[currentLine].Split(''');                      if (str.Length < 6)                          throw new InvalidDataException("Short record: " + str);                        // If its the start of a new day' break out of this sub-loop.                      var titleRow = str[0][0] == 'a';                      if (titleRow && !firstPass)                           break;                        firstPass = false;                        // Build the current datetime' from the row offset                      var time = startTime.AddSeconds(resolutionSeconds * (titleRow ? 0 : str[0].ToInt64()));                        // Bar: d0' c1' h2' l3' o4' v5                      var open = str[4].ToDecimal();                      var high = str[2].ToDecimal();                      var low = str[3].ToDecimal();                      var close = str[1].ToDecimal();                      var volume = str[5].ToInt64();                        currentLine++;                        yield return new TradeBar(time' symbol' open' high' low' close' volume' resolution.ToTimeSpan());                  }              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,GetMinuteOrHour,The following statement contains a magic number: while (currentLine < lines.Length - 1)              {                  var firstPass = true;                    // Each day google starts date time at 930am and then                   // has 390 minutes over the day. Look for the starter rows "a".                  var columns = lines[currentLine].Split(''');                  var startTime = FromUnixTime(columns[0].Remove(0' 1).ToInt64());                    while (currentLine < lines.Length - 1)                  {                      var str = lines[currentLine].Split(''');                      if (str.Length < 6)                          throw new InvalidDataException("Short record: " + str);                        // If its the start of a new day' break out of this sub-loop.                      var titleRow = str[0][0] == 'a';                      if (titleRow && !firstPass)                           break;                        firstPass = false;                        // Build the current datetime' from the row offset                      var time = startTime.AddSeconds(resolutionSeconds * (titleRow ? 0 : str[0].ToInt64()));                        // Bar: d0' c1' h2' l3' o4' v5                      var open = str[4].ToDecimal();                      var high = str[2].ToDecimal();                      var low = str[3].ToDecimal();                      var close = str[1].ToDecimal();                      var volume = str[5].ToInt64();                        currentLine++;                        yield return new TradeBar(time' symbol' open' high' low' close' volume' resolution.ToTimeSpan());                  }              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,ToUnixTime,The following statement contains a magic number: var epoch = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,QuantConnect.ToolBox.GoogleDownloader,GoogleDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\GoogleDataDownloader.cs,FromUnixTime,The following statement contains a magic number: var epoch = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,QuantConnect.ToolBox.GoogleDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\Program.cs,Main,The following statement contains a magic number: if (args.Length != 4)              {                  Console.WriteLine("Usage: GoogleDownloader SYMBOLS RESOLUTION FROMDATE TODATE");                  Console.WriteLine("SYMBOLS = eg SPY'AAPL");                  Console.WriteLine("RESOLUTION = Minute/Hour/Daily");                  Console.WriteLine("FROMDATE = yyyymmdd");                  Console.WriteLine("TODATE = yyyymmdd");                  Environment.Exit(1);              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\Program.cs,Main,The following statement contains a magic number: try              {                  // Load settings from command line                  var symbols = args[0].Split(''');                  var resolution = (Resolution)Enum.Parse(typeof(Resolution)' args[1]);                  var startDate = DateTime.ParseExact(args[2]' "yyyyMMdd"' CultureInfo.InvariantCulture);                  var endDate = DateTime.ParseExact(args[3]' "yyyyMMdd"' CultureInfo.InvariantCulture);                    // Load settings from config.json                  var dataDirectory = Config.Get("data-directory"' "../../../Data");                    // Create an instance of the downloader                  const string market = Market.USA;                  var downloader = new GoogleDataDownloader();                    foreach (var symbol in symbols)                  {                      // Download the data                      var symbolObject = Symbol.Create(symbol' SecurityType.Equity' market);                      var data = downloader.Get(symbolObject' resolution' startDate' endDate);                        // Save the data                      var writer = new LeanDataWriter(resolution' symbolObject' dataDirectory);                      writer.Write(data);                  }              }              catch (Exception err)              {                  Log.Error(err);              }
Magic Number,QuantConnect.ToolBox.GoogleDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\GoogleDownloader\Program.cs,Main,The following statement contains a magic number: try              {                  // Load settings from command line                  var symbols = args[0].Split(''');                  var resolution = (Resolution)Enum.Parse(typeof(Resolution)' args[1]);                  var startDate = DateTime.ParseExact(args[2]' "yyyyMMdd"' CultureInfo.InvariantCulture);                  var endDate = DateTime.ParseExact(args[3]' "yyyyMMdd"' CultureInfo.InvariantCulture);                    // Load settings from config.json                  var dataDirectory = Config.Get("data-directory"' "../../../Data");                    // Create an instance of the downloader                  const string market = Market.USA;                  var downloader = new GoogleDataDownloader();                    foreach (var symbol in symbols)                  {                      // Download the data                      var symbolObject = Symbol.Create(symbol' SecurityType.Equity' market);                      var data = downloader.Get(symbolObject' resolution' startDate' endDate);                        // Save the data                      var writer = new LeanDataWriter(resolution' symbolObject' dataDirectory);                      writer.Write(data);                  }              }              catch (Exception err)              {                  Log.Error(err);              }
Magic Number,QuantConnect.ToolBox.IEX,IEXDataQueueHandler,C:\repos\QuantConnect_Lean\ToolBox\IEX\IEXDataQueueHandler.cs,Reconnect,The following statement contains a magic number: try              {                  _socket = IO.Socket(Endpoint'                      new IO.Options()                      {                          // default is 1000' default attempts is int.MaxValue                          ReconnectionDelay = 250                      });                  _socket.On(Socket.EVENT_CONNECT' () =>                  {                      _connected.TrySetResult(true);                      Log.Trace("IEXDataQueueHandler.Reconnect(): Connected to IEX live data");                      Log.Trace("IEXDataQueueHandler.Reconnect(): IEX Real-Time Price");                  });                    _socket.On("message"' message => ProcessJsonObject((JObject)message));                  _manager = _socket.Io();              }              catch (Exception err)              {                  Log.Error("IEXDataQueueHandler.Reconnect(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IEX,IEXDataQueueHandler,C:\repos\QuantConnect_Lean\ToolBox\IEX\IEXDataQueueHandler.cs,SocketSafeAsyncEmit,The following statement contains a magic number: Task.Run(async () =>              {                  await _connected.Task;                  const int retriesLimit = 100;                  var retriesCount = 0;                  while (true)                  {                      try                      {                          if (_manager.ReadyState == Manager.ReadyStateEnum.OPEN)                          {                              // there is an ACK functionality in socket.io' but IEX will be moving to standard WebSockets                              // and this retry logic is just for rare cases of connection interrupts                              _socket.Emit(command' value);                              break;                          }                      }                      catch (Exception err)                      {                          Log.Error("IEXDataQueueHandler.SocketSafeAsyncEmit(): " + err.Message);                      }                      await Task.Delay(100);                      retriesCount++;                      if (retriesCount >= retriesLimit)                      {                          Log.Error("IEXDataQueueHandler.SocketSafeAsyncEmit(): " +                                    (new TimeoutException("Cannot subscribe to symbol :" + value)));                          break;                      }                  }              }' _cts.Token)              .ContinueWith((t) =>              {                  Log.Error("IEXDataQueueHandler.SocketSafeAsyncEmit(): " + t.Exception.Message);                  return t;                }' TaskContinuationOptions.OnlyOnFaulted);
Magic Number,QuantConnect.ToolBox.IEX,IEXDataQueueHandler,C:\repos\QuantConnect_Lean\ToolBox\IEX\IEXDataQueueHandler.cs,SocketSafeAsyncEmit,The following statement contains a magic number: Task.Run(async () =>              {                  await _connected.Task;                  const int retriesLimit = 100;                  var retriesCount = 0;                  while (true)                  {                      try                      {                          if (_manager.ReadyState == Manager.ReadyStateEnum.OPEN)                          {                              // there is an ACK functionality in socket.io' but IEX will be moving to standard WebSockets                              // and this retry logic is just for rare cases of connection interrupts                              _socket.Emit(command' value);                              break;                          }                      }                      catch (Exception err)                      {                          Log.Error("IEXDataQueueHandler.SocketSafeAsyncEmit(): " + err.Message);                      }                      await Task.Delay(100);                      retriesCount++;                      if (retriesCount >= retriesLimit)                      {                          Log.Error("IEXDataQueueHandler.SocketSafeAsyncEmit(): " +                                    (new TimeoutException("Cannot subscribe to symbol :" + value)));                          break;                      }                  }              }' _cts.Token)              .ContinueWith((t) =>              {                  Log.Error("IEXDataQueueHandler.SocketSafeAsyncEmit(): " + t.Exception.Message);                  return t;                }' TaskContinuationOptions.OnlyOnFaulted);
Magic Number,QuantConnect.ToolBox.IQFeed,Level1Port,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,Level1Port,The following statement contains a magic number: _timer = new Timer(1000);
Magic Number,QuantConnect.ToolBox.IQFeed,Level1Port,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,Level1Port,The following statement contains a magic number: _timer.Elapsed += (sender' args) =>                  {                      var ticksPerSecond = count / (DateTime.Now - start).TotalSeconds;                      if (ticksPerSecond > 1000 || _dataQueue.Count > 31)                      {                          Log.Trace(string.Format("IQFeed.OnSecond(): Ticks/sec: {0} Engine.Ticks.Count: {1} CPU%: {2}"'                              ticksPerSecond.ToString("0000.00")'                              _dataQueue.Count'                              OS.CpuUsage.NextValue().ToString("0.0") + "%"                              ));                      }                        count = 0;                      start = DateTime.Now;                  };
Magic Number,QuantConnect.ToolBox.IQFeed,Level1Port,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,Level1Port,The following statement contains a magic number: _timer.Elapsed += (sender' args) =>                  {                      var ticksPerSecond = count / (DateTime.Now - start).TotalSeconds;                      if (ticksPerSecond > 1000 || _dataQueue.Count > 31)                      {                          Log.Trace(string.Format("IQFeed.OnSecond(): Ticks/sec: {0} Engine.Ticks.Count: {1} CPU%: {2}"'                              ticksPerSecond.ToString("0000.00")'                              _dataQueue.Count'                              OS.CpuUsage.NextValue().ToString("0.0") + "%"                              ));                      }                        count = 0;                      start = DateTime.Now;                  };
Magic Number,QuantConnect.ToolBox.IQFeed,Level1Port,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueHandler.cs,OnLevel1FundamentalEvent,The following statement contains a magic number: if (e.SplitDate1.Date == DateTime.Today && DateTime.Now.TimeOfDay.TotalHours <= 8) // they will always be sent premarket                  {                      // get the last price' if it doesn't exist then we'll just issue the split claiming the price was zero                      // this should (ideally) never happen' but sending this without the price is much better then not sending                      // it at all                      double referencePrice;                      _prices.TryGetValue(e.Symbol' out referencePrice);                        var symbol = GetLeanSymbol(e.Symbol);                      var split = new Split(symbol' FeedTime' (decimal)referencePrice' (decimal)e.SplitFactor1);                      _dataQueue.Add(split);                  }
Magic Number,QuantConnect.ToolBox.IQFeed,SymbolData,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      var hashCode = (Ticker != null ? Ticker.GetHashCode() : 0);                      hashCode = (hashCode * 397) ^ (SecurityCurrency != null ? SecurityCurrency.GetHashCode() : 0);                      hashCode = (hashCode * 397) ^ (SecurityExchange != null ? SecurityExchange.GetHashCode() : 0);                      hashCode = (hashCode * 397) ^ (Symbol != null ? Symbol.GetHashCode() : 0);                      hashCode = (hashCode * 397) ^ StartPosition.GetHashCode();                      hashCode = (hashCode * 397) ^ EndPosition.GetHashCode();                      return hashCode;                  }
Magic Number,QuantConnect.ToolBox.IQFeed,SymbolData,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      var hashCode = (Ticker != null ? Ticker.GetHashCode() : 0);                      hashCode = (hashCode * 397) ^ (SecurityCurrency != null ? SecurityCurrency.GetHashCode() : 0);                      hashCode = (hashCode * 397) ^ (SecurityExchange != null ? SecurityExchange.GetHashCode() : 0);                      hashCode = (hashCode * 397) ^ (Symbol != null ? Symbol.GetHashCode() : 0);                      hashCode = (hashCode * 397) ^ StartPosition.GetHashCode();                      hashCode = (hashCode * 397) ^ EndPosition.GetHashCode();                      return hashCode;                  }
Magic Number,QuantConnect.ToolBox.IQFeed,SymbolData,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      var hashCode = (Ticker != null ? Ticker.GetHashCode() : 0);                      hashCode = (hashCode * 397) ^ (SecurityCurrency != null ? SecurityCurrency.GetHashCode() : 0);                      hashCode = (hashCode * 397) ^ (SecurityExchange != null ? SecurityExchange.GetHashCode() : 0);                      hashCode = (hashCode * 397) ^ (Symbol != null ? Symbol.GetHashCode() : 0);                      hashCode = (hashCode * 397) ^ StartPosition.GetHashCode();                      hashCode = (hashCode * 397) ^ EndPosition.GetHashCode();                      return hashCode;                  }
Magic Number,QuantConnect.ToolBox.IQFeed,SymbolData,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      var hashCode = (Ticker != null ? Ticker.GetHashCode() : 0);                      hashCode = (hashCode * 397) ^ (SecurityCurrency != null ? SecurityCurrency.GetHashCode() : 0);                      hashCode = (hashCode * 397) ^ (SecurityExchange != null ? SecurityExchange.GetHashCode() : 0);                      hashCode = (hashCode * 397) ^ (Symbol != null ? Symbol.GetHashCode() : 0);                      hashCode = (hashCode * 397) ^ StartPosition.GetHashCode();                      hashCode = (hashCode * 397) ^ EndPosition.GetHashCode();                      return hashCode;                  }
Magic Number,QuantConnect.ToolBox.IQFeed,SymbolData,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      var hashCode = (Ticker != null ? Ticker.GetHashCode() : 0);                      hashCode = (hashCode * 397) ^ (SecurityCurrency != null ? SecurityCurrency.GetHashCode() : 0);                      hashCode = (hashCode * 397) ^ (SecurityExchange != null ? SecurityExchange.GetHashCode() : 0);                      hashCode = (hashCode * 397) ^ (Symbol != null ? Symbol.GetHashCode() : 0);                      hashCode = (hashCode * 397) ^ StartPosition.GetHashCode();                      hashCode = (hashCode * 397) ^ EndPosition.GetHashCode();                      return hashCode;                  }
Magic Number,QuantConnect.ToolBox.IQFeed,SymbolFundamentalData,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,Request,The following statement contains a magic number: const int timeout = 180;
Magic Number,QuantConnect.ToolBox.IQFeed,SymbolFundamentalData,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQFeedDataQueueUniverseProvider.cs,Request,The following statement contains a magic number: if (!manualResetEvent.WaitOne(timeout * 1000))                  {                      Log.Error("SymbolFundamentalData.Request() failed to receive response from IQFeed within {0} seconds"' timeout);                  }
Magic Number,QuantConnect.ToolBox.IQFeed,Time,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\DataStructures.cs,Time,The following statement contains a magic number: if (textTime.Length < 8) { _hour = 0; _minute = 0; _second = 0; return; }
Magic Number,QuantConnect.ToolBox.IQFeed,Time,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\DataStructures.cs,Time,The following statement contains a magic number: if (!int.TryParse(textTime.Substring(0' 2)' out _hour)) _hour = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Time,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\DataStructures.cs,Time,The following statement contains a magic number: if (!int.TryParse(textTime.Substring(3' 2)' out _minute)) _minute = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Time,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\DataStructures.cs,Time,The following statement contains a magic number: if (!int.TryParse(textTime.Substring(3' 2)' out _minute)) _minute = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Time,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\DataStructures.cs,Time,The following statement contains a magic number: if (!int.TryParse(textTime.Substring(6' 2)' out _second)) _second = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Time,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\DataStructures.cs,Time,The following statement contains a magic number: if (!int.TryParse(textTime.Substring(6' 2)' out _second)) _second = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,ClientStatsEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQAdminSocketClient.cs,ClientStatsEventArgs,The following statement contains a magic number: lock (this)              {                  switch (fields[2])                  {                      case "0": _type = PortType.Admin; break;                      case "1": _type = PortType.Level1; break;                      case "2": _type = PortType.Level2; break;                      default: _type = PortType.Lookup; break;                  }                  if (!int.TryParse(fields[3]' out _clientId)) _clientId = 0;                  _clientName = fields[4];                  if (!DateTime.TryParseExact(fields[5]' "yyyyMMdd HHmmss"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue;                  if (!int.TryParse(fields[6]' out _symbolsWatched)) _symbolsWatched = 0;                  if (!int.TryParse(fields[7]' out _regionalSymbolsWatched)) _regionalSymbolsWatched = 0;                  if (!double.TryParse(fields[8]' out _kbReceived)) _kbReceived = 0;                  if (!double.TryParse(fields[9]' out _kbSent)) _kbSent = 0;                  if (!double.TryParse(fields[10]' out _kbQueued)) _kbQueued = 0;              }
Magic Number,QuantConnect.ToolBox.IQFeed,ClientStatsEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQAdminSocketClient.cs,ClientStatsEventArgs,The following statement contains a magic number: lock (this)              {                  switch (fields[2])                  {                      case "0": _type = PortType.Admin; break;                      case "1": _type = PortType.Level1; break;                      case "2": _type = PortType.Level2; break;                      default: _type = PortType.Lookup; break;                  }                  if (!int.TryParse(fields[3]' out _clientId)) _clientId = 0;                  _clientName = fields[4];                  if (!DateTime.TryParseExact(fields[5]' "yyyyMMdd HHmmss"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue;                  if (!int.TryParse(fields[6]' out _symbolsWatched)) _symbolsWatched = 0;                  if (!int.TryParse(fields[7]' out _regionalSymbolsWatched)) _regionalSymbolsWatched = 0;                  if (!double.TryParse(fields[8]' out _kbReceived)) _kbReceived = 0;                  if (!double.TryParse(fields[9]' out _kbSent)) _kbSent = 0;                  if (!double.TryParse(fields[10]' out _kbQueued)) _kbQueued = 0;              }
Magic Number,QuantConnect.ToolBox.IQFeed,ClientStatsEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQAdminSocketClient.cs,ClientStatsEventArgs,The following statement contains a magic number: lock (this)              {                  switch (fields[2])                  {                      case "0": _type = PortType.Admin; break;                      case "1": _type = PortType.Level1; break;                      case "2": _type = PortType.Level2; break;                      default: _type = PortType.Lookup; break;                  }                  if (!int.TryParse(fields[3]' out _clientId)) _clientId = 0;                  _clientName = fields[4];                  if (!DateTime.TryParseExact(fields[5]' "yyyyMMdd HHmmss"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue;                  if (!int.TryParse(fields[6]' out _symbolsWatched)) _symbolsWatched = 0;                  if (!int.TryParse(fields[7]' out _regionalSymbolsWatched)) _regionalSymbolsWatched = 0;                  if (!double.TryParse(fields[8]' out _kbReceived)) _kbReceived = 0;                  if (!double.TryParse(fields[9]' out _kbSent)) _kbSent = 0;                  if (!double.TryParse(fields[10]' out _kbQueued)) _kbQueued = 0;              }
Magic Number,QuantConnect.ToolBox.IQFeed,ClientStatsEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQAdminSocketClient.cs,ClientStatsEventArgs,The following statement contains a magic number: lock (this)              {                  switch (fields[2])                  {                      case "0": _type = PortType.Admin; break;                      case "1": _type = PortType.Level1; break;                      case "2": _type = PortType.Level2; break;                      default: _type = PortType.Lookup; break;                  }                  if (!int.TryParse(fields[3]' out _clientId)) _clientId = 0;                  _clientName = fields[4];                  if (!DateTime.TryParseExact(fields[5]' "yyyyMMdd HHmmss"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue;                  if (!int.TryParse(fields[6]' out _symbolsWatched)) _symbolsWatched = 0;                  if (!int.TryParse(fields[7]' out _regionalSymbolsWatched)) _regionalSymbolsWatched = 0;                  if (!double.TryParse(fields[8]' out _kbReceived)) _kbReceived = 0;                  if (!double.TryParse(fields[9]' out _kbSent)) _kbSent = 0;                  if (!double.TryParse(fields[10]' out _kbQueued)) _kbQueued = 0;              }
Magic Number,QuantConnect.ToolBox.IQFeed,ClientStatsEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQAdminSocketClient.cs,ClientStatsEventArgs,The following statement contains a magic number: lock (this)              {                  switch (fields[2])                  {                      case "0": _type = PortType.Admin; break;                      case "1": _type = PortType.Level1; break;                      case "2": _type = PortType.Level2; break;                      default: _type = PortType.Lookup; break;                  }                  if (!int.TryParse(fields[3]' out _clientId)) _clientId = 0;                  _clientName = fields[4];                  if (!DateTime.TryParseExact(fields[5]' "yyyyMMdd HHmmss"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue;                  if (!int.TryParse(fields[6]' out _symbolsWatched)) _symbolsWatched = 0;                  if (!int.TryParse(fields[7]' out _regionalSymbolsWatched)) _regionalSymbolsWatched = 0;                  if (!double.TryParse(fields[8]' out _kbReceived)) _kbReceived = 0;                  if (!double.TryParse(fields[9]' out _kbSent)) _kbSent = 0;                  if (!double.TryParse(fields[10]' out _kbQueued)) _kbQueued = 0;              }
Magic Number,QuantConnect.ToolBox.IQFeed,ClientStatsEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQAdminSocketClient.cs,ClientStatsEventArgs,The following statement contains a magic number: lock (this)              {                  switch (fields[2])                  {                      case "0": _type = PortType.Admin; break;                      case "1": _type = PortType.Level1; break;                      case "2": _type = PortType.Level2; break;                      default: _type = PortType.Lookup; break;                  }                  if (!int.TryParse(fields[3]' out _clientId)) _clientId = 0;                  _clientName = fields[4];                  if (!DateTime.TryParseExact(fields[5]' "yyyyMMdd HHmmss"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue;                  if (!int.TryParse(fields[6]' out _symbolsWatched)) _symbolsWatched = 0;                  if (!int.TryParse(fields[7]' out _regionalSymbolsWatched)) _regionalSymbolsWatched = 0;                  if (!double.TryParse(fields[8]' out _kbReceived)) _kbReceived = 0;                  if (!double.TryParse(fields[9]' out _kbSent)) _kbSent = 0;                  if (!double.TryParse(fields[10]' out _kbQueued)) _kbQueued = 0;              }
Magic Number,QuantConnect.ToolBox.IQFeed,ClientStatsEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQAdminSocketClient.cs,ClientStatsEventArgs,The following statement contains a magic number: lock (this)              {                  switch (fields[2])                  {                      case "0": _type = PortType.Admin; break;                      case "1": _type = PortType.Level1; break;                      case "2": _type = PortType.Level2; break;                      default: _type = PortType.Lookup; break;                  }                  if (!int.TryParse(fields[3]' out _clientId)) _clientId = 0;                  _clientName = fields[4];                  if (!DateTime.TryParseExact(fields[5]' "yyyyMMdd HHmmss"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue;                  if (!int.TryParse(fields[6]' out _symbolsWatched)) _symbolsWatched = 0;                  if (!int.TryParse(fields[7]' out _regionalSymbolsWatched)) _regionalSymbolsWatched = 0;                  if (!double.TryParse(fields[8]' out _kbReceived)) _kbReceived = 0;                  if (!double.TryParse(fields[9]' out _kbSent)) _kbSent = 0;                  if (!double.TryParse(fields[10]' out _kbQueued)) _kbQueued = 0;              }
Magic Number,QuantConnect.ToolBox.IQFeed,ClientStatsEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQAdminSocketClient.cs,ClientStatsEventArgs,The following statement contains a magic number: lock (this)              {                  switch (fields[2])                  {                      case "0": _type = PortType.Admin; break;                      case "1": _type = PortType.Level1; break;                      case "2": _type = PortType.Level2; break;                      default: _type = PortType.Lookup; break;                  }                  if (!int.TryParse(fields[3]' out _clientId)) _clientId = 0;                  _clientName = fields[4];                  if (!DateTime.TryParseExact(fields[5]' "yyyyMMdd HHmmss"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue;                  if (!int.TryParse(fields[6]' out _symbolsWatched)) _symbolsWatched = 0;                  if (!int.TryParse(fields[7]' out _regionalSymbolsWatched)) _regionalSymbolsWatched = 0;                  if (!double.TryParse(fields[8]' out _kbReceived)) _kbReceived = 0;                  if (!double.TryParse(fields[9]' out _kbSent)) _kbSent = 0;                  if (!double.TryParse(fields[10]' out _kbQueued)) _kbQueued = 0;              }
Magic Number,QuantConnect.ToolBox.IQFeed,ClientStatsEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQAdminSocketClient.cs,ClientStatsEventArgs,The following statement contains a magic number: lock (this)              {                  switch (fields[2])                  {                      case "0": _type = PortType.Admin; break;                      case "1": _type = PortType.Level1; break;                      case "2": _type = PortType.Level2; break;                      default: _type = PortType.Lookup; break;                  }                  if (!int.TryParse(fields[3]' out _clientId)) _clientId = 0;                  _clientName = fields[4];                  if (!DateTime.TryParseExact(fields[5]' "yyyyMMdd HHmmss"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue;                  if (!int.TryParse(fields[6]' out _symbolsWatched)) _symbolsWatched = 0;                  if (!int.TryParse(fields[7]' out _regionalSymbolsWatched)) _regionalSymbolsWatched = 0;                  if (!double.TryParse(fields[8]' out _kbReceived)) _kbReceived = 0;                  if (!double.TryParse(fields[9]' out _kbSent)) _kbSent = 0;                  if (!double.TryParse(fields[10]' out _kbQueued)) _kbQueued = 0;              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1SummaryUpdateEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1SummaryUpdateEventArgs,The following statement contains a magic number: try              {                                  var fields = line.Split(''');                  _summary = fields[0] == "P";                  _symbol = fields[1];                  _notFound = line.Contains("Not Found");                    if (_notFound) return;                  if (!double.TryParse(fields[3]' out _last)) _last = 0;                  if (!double.TryParse(fields[4]' out _change)) _change = 0;                  if (!double.TryParse(fields[5]' out _change)) _percentChange = 0;                  if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;                  if (!int.TryParse(fields[7]' out _incrementalVolume)) _incrementalVolume = 0;                  if (!double.TryParse(fields[8]' out _high)) _high = 0;                  if (!double.TryParse(fields[9]' out _low)) _low = 0;                  if (!double.TryParse(fields[10]' out _bid)) _bid = 0;                  if (!double.TryParse(fields[11]' out _ask)) _ask = 0;                  if (!int.TryParse(fields[12]' out _bidSize)) _bidSize = 0;                  if (!int.TryParse(fields[13]' out _askSize)) _askSize = 0;                  if (!int.TryParse(fields[14]' out _tick)) _tick = 0;                  if (!int.TryParse(fields[15]' out _bidTick)) _bidTick = 0;                  if (!double.TryParse(fields[16]' out _range)) _range = 0;                  if (!string.IsNullOrEmpty(fields[17]))                  {                      switch (fields[17].Substring(fields[17].Length - 1' 1))                      {                          case "t":                              _updateType = UpdateType.Trade;                              break;                          case "T":                              _updateType = UpdateType.ExtendedTrade;                              break;                          case "b":                              _updateType = UpdateType.Bid;                              break;                          case "a":                              _updateType = UpdateType.Ask;                              break;                          default:                              _updateType = UpdateType.Other;                              break;                      }                  }                  else                  {                      return;                  }                  if (!int.TryParse(fields[18]' out _openInterest)) _openInterest = 0;                  if (!double.TryParse(fields[19]' out _open)) _open = 0;                  if (!double.TryParse(fields[20]' out _close)) _close = 0;                  if (!double.TryParse(fields[21]' out _spread)) _spread = 0;                  if (!double.TryParse(fields[23]' out _settle)) _settle = 0;                  if (!int.TryParse(fields[24]' out _delay)) _delay = 0;                  _shortRestricted = false;                  if (fields[26] == "R") _shortRestricted = true;                  if (!double.TryParse(fields[27]' out _netAssetValue)) _netAssetValue = 0;                  if (!double.TryParse(fields[28]' out _averageMaturity)) _averageMaturity = 0;                  if (!double.TryParse(fields[29]' out _7DayYield)) _7DayYield = 0;                  if (!DateTime.TryParseExact(fields[30]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _lastTradeDate)) _lastTradeDate = DateTime.MinValue;                  if (!double.TryParse(fields[32]' out _extendedTradingLast)) _extendedTradingLast = 0;                  if (!int.TryParse(fields[34]' out _regionalVolume)) _regionalVolume = 0;                  if (!double.TryParse(fields[35]' out _netAssetValue2)) _netAssetValue2 = 0;                  if (!double.TryParse(fields[36]' out _extendedTradingChange)) _extendedTradingChange = 0;                  if (!double.TryParse(fields[37]' out _extendedTradingDifference)) _extendedTradingDifference = 0;                  if (!double.TryParse(fields[38]' out _priceEarningsRatio)) _priceEarningsRatio = 0;                  if (!double.TryParse(fields[39]' out _percentOffAverageVolume)) _percentOffAverageVolume = 0;                  if (!double.TryParse(fields[40]' out _bidChange)) _bidChange = 0;                  if (!double.TryParse(fields[41]' out _askChange)) _askChange = 0;                  if (!double.TryParse(fields[42]' out _changeFromOpen)) _changeFromOpen = 0;                  _marketOpen = false;                  if (fields[43] == "1") _marketOpen = true;                  if (!double.TryParse(fields[44]' out _volatility)) _volatility = 0;                  if (!double.TryParse(fields[45]' out _marketCapitalization)) _marketCapitalization = 0;                  _fractionDisplayCode = fields[46];                  _decimalPrecision = fields[47];                  _daysToExpiration = fields[48];                  if (!int.TryParse(fields[49]' out _previousDayVolume)) _previousDayVolume = 0;                  if (!double.TryParse(fields[51]' out _openRange1)) _openRange1 = 0;                  if (!double.TryParse(fields[52]' out _closeRange1)) _closeRange1 = 0;                  if (!double.TryParse(fields[53]' out _openRange2)) _openRange2 = 0;                  if (!double.TryParse(fields[54]' out _closeRange2)) _closeRange2 = 0;                  if (!int.TryParse(fields[55]' out _numberOfTradesToday)) _numberOfTradesToday = 0;                  _bidTime = new Time(fields[56]);                  _askTime = new Time(fields[57]);                  if (!double.TryParse(fields[58]' out _vwap)) _vwap = 0;                  if (!int.TryParse(fields[59]' out _tickId)) _tickId = 0;                  _financialStatusIndicator = fields[60];                  if (!DateTime.TryParseExact(fields[61]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _settlementDate)) _settlementDate = DateTime.MinValue;                  if (!int.TryParse(fields[62]' out _tradeMarketCenter)) _tradeMarketCenter = 0;                  if (!int.TryParse(fields[63]' out _bidMarketCenter)) _bidMarketCenter = 0;                  if (!int.TryParse(fields[64]' out _askMarketCenter)) _askMarketCenter = 0;                  _tradeTime = new Time(fields[65]);                  _availableRegions = fields[66];              }              catch (Exception err)              {                  Logging.Log.Debug("IQLevel1Client.Init(): " + err.Message);              }
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[3]' out _pe)) _pe = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!int.TryParse(fields[4]' out _averageVolume)) _averageVolume = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[5]' out _high52Week)) _high52Week = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[6]' out _low52Week)) _low52Week = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[7]' out _calendarYearHigh)) _calendarYearHigh = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[8]' out _calendarYearLow)) _calendarYearLow = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[9]' out _dividendYield)) _dividendYield = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[10]' out _dividendAmount)) _dividendAmount = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[11]' out _dividendRate)) _dividendRate = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!DateTime.TryParseExact(fields[12]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _payDate)) _payDate = DateTime.MinValue;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!DateTime.TryParseExact(fields[13]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _exDividendDate)) _exDividendDate = DateTime.MinValue;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!int.TryParse(fields[17]' out _shortInterest)) _shortInterest = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[19]' out _currentYearEarningsPerShare)) _currentYearEarningsPerShare = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[20]' out _nextYearEarningsPerShare)) _nextYearEarningsPerShare = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[21]' out _fiveYearGrowthPercentage)) _fiveYearGrowthPercentage = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!int.TryParse(fields[22]' out _fiscalYearEnd)) _fiscalYearEnd = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: _companyName = fields[24];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: _rootOptionSymbol = fields[25];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[26]' out _percentHeldByInstitutions)) _percentHeldByInstitutions = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[27]' out _beta)) _beta = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: _leaps = fields[28];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[29]' out _currentAssets)) _currentAssets = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[30]' out _currentLiabilities)) _currentLiabilities = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!DateTime.TryParseExact(fields[31]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _balanceSheetDate)) _balanceSheetDate = DateTime.MinValue;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[32]' out _longTermDebt)) _longTermDebt = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[33]' out _commonSharesOutstanding)) _commonSharesOutstanding = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: var splits = fields[35].Split(' ');
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: splits = fields[36].Split(' ');
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: _formatCode = fields[39];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!int.TryParse(fields[40]' out _precision)) _precision = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: _sic = fields[41];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[42]' out _historicalVolatility)) _historicalVolatility = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: _securityType = fields[43];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: _listedMarket = fields[44];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!DateTime.TryParseExact(fields[45]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _date52WeekHigh)) _date52WeekHigh = DateTime.MinValue;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!DateTime.TryParseExact(fields[46]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _date52WeekLow)) _date52WeekLow = DateTime.MinValue;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!DateTime.TryParseExact(fields[47]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _dateCalendarYearHigh)) _dateCalendarYearHigh = DateTime.MinValue;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!DateTime.TryParseExact(fields[48]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _dateCalendarYearLow)) _dateCalendarYearLow = DateTime.MinValue;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[49]' out _yearEndClose)) _yearEndClose = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!DateTime.TryParseExact(fields[50]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _maturityDate)) _maturityDate = DateTime.MinValue;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[51]' out _couponRate)) _couponRate = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!DateTime.TryParseExact(fields[52]' "MM/dd/yyyy"' _enUS' DateTimeStyles.None' out _expirationDate)) _expirationDate = DateTime.MinValue;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[53]' out _strikePrice)) _strikePrice = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: _naics = fields[54];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1FundamentalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1FundamentalEventArgs,The following statement contains a magic number: _exchangeRoot = fields[55];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1NewsEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1NewsEventArgs,The following statement contains a magic number: _storyId = fields[2];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1NewsEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1NewsEventArgs,The following statement contains a magic number: _symbol = fields[3].Split(':');
Magic Number,QuantConnect.ToolBox.IQFeed,Level1NewsEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1NewsEventArgs,The following statement contains a magic number: if (!DateTime.TryParseExact(fields[4]' "yyyyMMdd HHmmss"' _enUS' DateTimeStyles.None' out _newsDateTime)) _newsDateTime = DateTime.MinValue;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1NewsEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1NewsEventArgs,The following statement contains a magic number: _headline = fields[5];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1RegionalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1RegionalEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[3]' out _regionalBid)) _regionalBid = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1RegionalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1RegionalEventArgs,The following statement contains a magic number: if (!int.TryParse(fields[4]' out _regionalBidSize)) _regionalBidSize = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1RegionalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1RegionalEventArgs,The following statement contains a magic number: _regionalBidTime = new Time(fields[5]);
Magic Number,QuantConnect.ToolBox.IQFeed,Level1RegionalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1RegionalEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[6]' out _regionalAsk)) _regionalAsk = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1RegionalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1RegionalEventArgs,The following statement contains a magic number: if (!int.TryParse(fields[7]' out _regionalAskSize)) _regionalAskSize = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,Level1RegionalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1RegionalEventArgs,The following statement contains a magic number: _regionalAskTime = new Time(fields[8]);
Magic Number,QuantConnect.ToolBox.IQFeed,Level1RegionalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1RegionalEventArgs,The following statement contains a magic number: _fractionDisplayCode = fields[9];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1RegionalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1RegionalEventArgs,The following statement contains a magic number: _decimalPrecision = fields[10];
Magic Number,QuantConnect.ToolBox.IQFeed,Level1RegionalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLevel1Client.cs,Level1RegionalEventArgs,The following statement contains a magic number: _marketCenter = fields[11];
Magic Number,QuantConnect.ToolBox.IQFeed,LookupTickEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupTickEventArgs,The following statement contains a magic number: if (fields.Length < 11)              {                  Log.Error("LookupIntervalEventArgs.ctor(): " + line);                  return;              }
Magic Number,QuantConnect.ToolBox.IQFeed,LookupTickEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupTickEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[2]' out _last)) _last = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,LookupTickEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupTickEventArgs,The following statement contains a magic number: if (!int.TryParse(fields[3]' out _lastSize)) _lastSize = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,LookupTickEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupTickEventArgs,The following statement contains a magic number: if (!int.TryParse(fields[4]' out _totalVolume)) _totalVolume = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,LookupTickEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupTickEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[5]' out _bid)) _bid = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,LookupTickEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupTickEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[6]' out _ask)) _ask = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,LookupTickEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupTickEventArgs,The following statement contains a magic number: if (!int.TryParse(fields[7]' out _tickId)) _tickId = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,LookupTickEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupTickEventArgs,The following statement contains a magic number: if (!char.TryParse(fields[10]' out _basis)) _basis = ' ';
Magic Number,QuantConnect.ToolBox.IQFeed,LookupIntervalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupIntervalEventArgs,The following statement contains a magic number: if (fields.Length < 8)              {                  Log.Error("LookupIntervalEventArgs.ctor(): " + line);                  return;              }
Magic Number,QuantConnect.ToolBox.IQFeed,LookupIntervalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupIntervalEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[2]' out _high)) _high = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,LookupIntervalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupIntervalEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[3]' out _low)) _low = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,LookupIntervalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupIntervalEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[4]' out _open)) _open = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,LookupIntervalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupIntervalEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[5]' out _close)) _close = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,LookupIntervalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupIntervalEventArgs,The following statement contains a magic number: if (!int.TryParse(fields[6]' out _totalVolume)) _totalVolume = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,LookupIntervalEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupIntervalEventArgs,The following statement contains a magic number: if (!int.TryParse(fields[7]' out _periodVolume)) _periodVolume = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,LookupDayWeekMonthEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupDayWeekMonthEventArgs,The following statement contains a magic number: if (fields.Length < 8)              {                  Log.Error("LookupIntervalEventArgs.ctor(): " + line);                  return;              }
Magic Number,QuantConnect.ToolBox.IQFeed,LookupDayWeekMonthEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupDayWeekMonthEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[2]' out _high)) _high = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,LookupDayWeekMonthEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupDayWeekMonthEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[3]' out _low)) _low = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,LookupDayWeekMonthEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupDayWeekMonthEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[4]' out _open)) _open = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,LookupDayWeekMonthEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupDayWeekMonthEventArgs,The following statement contains a magic number: if (!double.TryParse(fields[5]' out _close)) _close = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,LookupDayWeekMonthEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupDayWeekMonthEventArgs,The following statement contains a magic number: if (!int.TryParse(fields[6]' out _periodVolume)) _periodVolume = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,LookupDayWeekMonthEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupDayWeekMonthEventArgs,The following statement contains a magic number: if (!int.TryParse(fields[7]' out _openInterest)) _openInterest = 0;
Magic Number,QuantConnect.ToolBox.IQFeed,LookupSymbolEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupSymbolEventArgs,The following statement contains a magic number: if (fields.Length < 5) throw new Exception("Error in Symbol parameter provided");
Magic Number,QuantConnect.ToolBox.IQFeed,LookupSymbolEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupSymbolEventArgs,The following statement contains a magic number: _marketId = fields[2];
Magic Number,QuantConnect.ToolBox.IQFeed,LookupSymbolEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupSymbolEventArgs,The following statement contains a magic number: _securityId = fields[3];
Magic Number,QuantConnect.ToolBox.IQFeed,LookupSymbolEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupSymbolEventArgs,The following statement contains a magic number: for (var i = 4; i < fields.Length; i++) _description += fields[i];
Magic Number,QuantConnect.ToolBox.IQFeed,LookupSicSymbolEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupSicSymbolEventArgs,The following statement contains a magic number: if (fields.Length < 6) throw new Exception("Error in SIC parameter provided");
Magic Number,QuantConnect.ToolBox.IQFeed,LookupSicSymbolEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupSicSymbolEventArgs,The following statement contains a magic number: _symbol = fields[2];
Magic Number,QuantConnect.ToolBox.IQFeed,LookupSicSymbolEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupSicSymbolEventArgs,The following statement contains a magic number: _marketId = fields[3];
Magic Number,QuantConnect.ToolBox.IQFeed,LookupSicSymbolEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupSicSymbolEventArgs,The following statement contains a magic number: _securityId = fields[4];
Magic Number,QuantConnect.ToolBox.IQFeed,LookupSicSymbolEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupSicSymbolEventArgs,The following statement contains a magic number: for (var i = 5; i < fields.Length; i++) _description += fields[i];
Magic Number,QuantConnect.ToolBox.IQFeed,LookupNaicSymbolEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupNaicSymbolEventArgs,The following statement contains a magic number: if (fields.Length < 6) throw new Exception("Error in NAIC parameter provided");
Magic Number,QuantConnect.ToolBox.IQFeed,LookupNaicSymbolEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupNaicSymbolEventArgs,The following statement contains a magic number: _symbol = fields[2];
Magic Number,QuantConnect.ToolBox.IQFeed,LookupNaicSymbolEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupNaicSymbolEventArgs,The following statement contains a magic number: _marketId = fields[3];
Magic Number,QuantConnect.ToolBox.IQFeed,LookupNaicSymbolEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupNaicSymbolEventArgs,The following statement contains a magic number: _securityId = fields[4];
Magic Number,QuantConnect.ToolBox.IQFeed,LookupNaicSymbolEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,LookupNaicSymbolEventArgs,The following statement contains a magic number: for (var i = 5; i < fields.Length; i++) _description += fields[i];
Magic Number,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,IQLookupHistorySymbolClient,The following statement contains a magic number: _histDataPointsPerSend = 500;
Magic Number,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,IQLookupHistorySymbolClient,The following statement contains a magic number: _timeMarketOpen = new Time(09' 30' 00);
Magic Number,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,IQLookupHistorySymbolClient,The following statement contains a magic number: _timeMarketOpen = new Time(09' 30' 00);
Magic Number,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,IQLookupHistorySymbolClient,The following statement contains a magic number: _timeMarketClose = new Time(16' 00' 00);
Magic Number,QuantConnect.ToolBox.IQFeed,IQLookupHistorySymbolClient,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupHistorySymbolClient.cs,IQLookupHistorySymbolClient,The following statement contains a magic number: _histMaxDataPoints = 5000;
Magic Number,QuantConnect.ToolBox.IQFeed,LookupTableMarketEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupTableClient.cs,LookupTableMarketEventArgs,The following statement contains a magic number: _longName = fields[2];
Magic Number,QuantConnect.ToolBox.IQFeed,LookupTableMarketCenterEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupTableClient.cs,LookupTableMarketCenterEventArgs,The following statement contains a magic number: _marketOptionId = fields[2].Split(' ');
Magic Number,QuantConnect.ToolBox.IQFeed,LookupTableSecurityTypeEventArgs,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupTableClient.cs,LookupTableSecurityTypeEventArgs,The following statement contains a magic number: _longName = fields[2];
Magic Number,QuantConnect.ToolBox.IQFeed,IQSocket,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,GetPort,The following statement contains a magic number: switch (portType)              {                  case PortType.Level1:                      port = 5009;                      break;                  case PortType.Lookup:                      port = 9100;                      break;                  case PortType.Level2:                      port = 9200;                      break;                  case PortType.Admin:                      port = 9300;                      break;              }
Magic Number,QuantConnect.ToolBox.IQFeed,IQSocket,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,GetPort,The following statement contains a magic number: switch (portType)              {                  case PortType.Level1:                      port = 5009;                      break;                  case PortType.Lookup:                      port = 9100;                      break;                  case PortType.Level2:                      port = 9200;                      break;                  case PortType.Admin:                      port = 9300;                      break;              }
Magic Number,QuantConnect.ToolBox.IQFeed,IQSocket,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,GetPort,The following statement contains a magic number: switch (portType)              {                  case PortType.Level1:                      port = 5009;                      break;                  case PortType.Lookup:                      port = 9100;                      break;                  case PortType.Level2:                      port = 9200;                      break;                  case PortType.Admin:                      port = 9300;                      break;              }
Magic Number,QuantConnect.ToolBox.IQFeed,IQSocket,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,GetPort,The following statement contains a magic number: switch (portType)              {                  case PortType.Level1:                      port = 5009;                      break;                  case PortType.Lookup:                      port = 9100;                      break;                  case PortType.Level2:                      port = 9200;                      break;                  case PortType.Admin:                      port = 9300;                      break;              }
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: lock (this)              {                  _serverIp = fields[2];                  if (!int.TryParse(fields[3]' out _serverPort)) _serverPort = 0;                  if (!int.TryParse(fields[4]' out _maxSymbols)) _maxSymbols = 0;                  if (!int.TryParse(fields[5]' out _numberOfSymbols)) _numberOfSymbols = 0;                  if (!int.TryParse(fields[6]' out _clientsConnected)) _clientsConnected = 0;                  if (!int.TryParse(fields[7]' out _secondsSinceLastUpdate)) _secondsSinceLastUpdate = 0;                  if (!int.TryParse(fields[8]' out _reconnections)) _reconnections = 0;                  if (!int.TryParse(fields[9]' out _attemptedReconnections)) _attemptedReconnections = 0;                  if (!DateTime.TryParseExact(fields[10]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue;                  if (!DateTime.TryParseExact(fields[11]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _marketTime)) _marketTime = DateTime.MinValue;                  _connected = false;                  if (fields[12] == "Connected") { _connected = true; }                  _iqFeedVersion = fields[13];                  _loginId = fields[14];                  if (!double.TryParse(fields[15]' out _totalKbsRecv)) _totalKbsRecv = 0;                  if (!double.TryParse(fields[16]' out _kbsPerSecRecv)) _kbsPerSecRecv = 0;                  if (!double.TryParse(fields[17]' out _avgKbsPerSecRecv)) _avgKbsPerSecRecv = 0;                  if (!double.TryParse(fields[18]' out _totalKbsSent)) _totalKbsSent = 0;                  if (!double.TryParse(fields[19]' out _kbsPerSecSent)) _kbsPerSecSent = 0;                  if (!double.TryParse(fields[20]' out _avgKbsPerSecSent)) _avgKbsPerSecSent = 0;              }
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: lock (this)              {                  _serverIp = fields[2];                  if (!int.TryParse(fields[3]' out _serverPort)) _serverPort = 0;                  if (!int.TryParse(fields[4]' out _maxSymbols)) _maxSymbols = 0;                  if (!int.TryParse(fields[5]' out _numberOfSymbols)) _numberOfSymbols = 0;                  if (!int.TryParse(fields[6]' out _clientsConnected)) _clientsConnected = 0;                  if (!int.TryParse(fields[7]' out _secondsSinceLastUpdate)) _secondsSinceLastUpdate = 0;                  if (!int.TryParse(fields[8]' out _reconnections)) _reconnections = 0;                  if (!int.TryParse(fields[9]' out _attemptedReconnections)) _attemptedReconnections = 0;                  if (!DateTime.TryParseExact(fields[10]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue;                  if (!DateTime.TryParseExact(fields[11]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _marketTime)) _marketTime = DateTime.MinValue;                  _connected = false;                  if (fields[12] == "Connected") { _connected = true; }                  _iqFeedVersion = fields[13];                  _loginId = fields[14];                  if (!double.TryParse(fields[15]' out _totalKbsRecv)) _totalKbsRecv = 0;                  if (!double.TryParse(fields[16]' out _kbsPerSecRecv)) _kbsPerSecRecv = 0;                  if (!double.TryParse(fields[17]' out _avgKbsPerSecRecv)) _avgKbsPerSecRecv = 0;                  if (!double.TryParse(fields[18]' out _totalKbsSent)) _totalKbsSent = 0;                  if (!double.TryParse(fields[19]' out _kbsPerSecSent)) _kbsPerSecSent = 0;                  if (!double.TryParse(fields[20]' out _avgKbsPerSecSent)) _avgKbsPerSecSent = 0;              }
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: lock (this)              {                  _serverIp = fields[2];                  if (!int.TryParse(fields[3]' out _serverPort)) _serverPort = 0;                  if (!int.TryParse(fields[4]' out _maxSymbols)) _maxSymbols = 0;                  if (!int.TryParse(fields[5]' out _numberOfSymbols)) _numberOfSymbols = 0;                  if (!int.TryParse(fields[6]' out _clientsConnected)) _clientsConnected = 0;                  if (!int.TryParse(fields[7]' out _secondsSinceLastUpdate)) _secondsSinceLastUpdate = 0;                  if (!int.TryParse(fields[8]' out _reconnections)) _reconnections = 0;                  if (!int.TryParse(fields[9]' out _attemptedReconnections)) _attemptedReconnections = 0;                  if (!DateTime.TryParseExact(fields[10]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue;                  if (!DateTime.TryParseExact(fields[11]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _marketTime)) _marketTime = DateTime.MinValue;                  _connected = false;                  if (fields[12] == "Connected") { _connected = true; }                  _iqFeedVersion = fields[13];                  _loginId = fields[14];                  if (!double.TryParse(fields[15]' out _totalKbsRecv)) _totalKbsRecv = 0;                  if (!double.TryParse(fields[16]' out _kbsPerSecRecv)) _kbsPerSecRecv = 0;                  if (!double.TryParse(fields[17]' out _avgKbsPerSecRecv)) _avgKbsPerSecRecv = 0;                  if (!double.TryParse(fields[18]' out _totalKbsSent)) _totalKbsSent = 0;                  if (!double.TryParse(fields[19]' out _kbsPerSecSent)) _kbsPerSecSent = 0;                  if (!double.TryParse(fields[20]' out _avgKbsPerSecSent)) _avgKbsPerSecSent = 0;              }
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: lock (this)              {                  _serverIp = fields[2];                  if (!int.TryParse(fields[3]' out _serverPort)) _serverPort = 0;                  if (!int.TryParse(fields[4]' out _maxSymbols)) _maxSymbols = 0;                  if (!int.TryParse(fields[5]' out _numberOfSymbols)) _numberOfSymbols = 0;                  if (!int.TryParse(fields[6]' out _clientsConnected)) _clientsConnected = 0;                  if (!int.TryParse(fields[7]' out _secondsSinceLastUpdate)) _secondsSinceLastUpdate = 0;                  if (!int.TryParse(fields[8]' out _reconnections)) _reconnections = 0;                  if (!int.TryParse(fields[9]' out _attemptedReconnections)) _attemptedReconnections = 0;                  if (!DateTime.TryParseExact(fields[10]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue;                  if (!DateTime.TryParseExact(fields[11]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _marketTime)) _marketTime = DateTime.MinValue;                  _connected = false;                  if (fields[12] == "Connected") { _connected = true; }                  _iqFeedVersion = fields[13];                  _loginId = fields[14];                  if (!double.TryParse(fields[15]' out _totalKbsRecv)) _totalKbsRecv = 0;                  if (!double.TryParse(fields[16]' out _kbsPerSecRecv)) _kbsPerSecRecv = 0;                  if (!double.TryParse(fields[17]' out _avgKbsPerSecRecv)) _avgKbsPerSecRecv = 0;                  if (!double.TryParse(fields[18]' out _totalKbsSent)) _totalKbsSent = 0;                  if (!double.TryParse(fields[19]' out _kbsPerSecSent)) _kbsPerSecSent = 0;                  if (!double.TryParse(fields[20]' out _avgKbsPerSecSent)) _avgKbsPerSecSent = 0;              }
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: lock (this)              {                  _serverIp = fields[2];                  if (!int.TryParse(fields[3]' out _serverPort)) _serverPort = 0;                  if (!int.TryParse(fields[4]' out _maxSymbols)) _maxSymbols = 0;                  if (!int.TryParse(fields[5]' out _numberOfSymbols)) _numberOfSymbols = 0;                  if (!int.TryParse(fields[6]' out _clientsConnected)) _clientsConnected = 0;                  if (!int.TryParse(fields[7]' out _secondsSinceLastUpdate)) _secondsSinceLastUpdate = 0;                  if (!int.TryParse(fields[8]' out _reconnections)) _reconnections = 0;                  if (!int.TryParse(fields[9]' out _attemptedReconnections)) _attemptedReconnections = 0;                  if (!DateTime.TryParseExact(fields[10]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue;                  if (!DateTime.TryParseExact(fields[11]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _marketTime)) _marketTime = DateTime.MinValue;                  _connected = false;                  if (fields[12] == "Connected") { _connected = true; }                  _iqFeedVersion = fields[13];                  _loginId = fields[14];                  if (!double.TryParse(fields[15]' out _totalKbsRecv)) _totalKbsRecv = 0;                  if (!double.TryParse(fields[16]' out _kbsPerSecRecv)) _kbsPerSecRecv = 0;                  if (!double.TryParse(fields[17]' out _avgKbsPerSecRecv)) _avgKbsPerSecRecv = 0;                  if (!double.TryParse(fields[18]' out _totalKbsSent)) _totalKbsSent = 0;                  if (!double.TryParse(fields[19]' out _kbsPerSecSent)) _kbsPerSecSent = 0;                  if (!double.TryParse(fields[20]' out _avgKbsPerSecSent)) _avgKbsPerSecSent = 0;              }
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: lock (this)              {                  _serverIp = fields[2];                  if (!int.TryParse(fields[3]' out _serverPort)) _serverPort = 0;                  if (!int.TryParse(fields[4]' out _maxSymbols)) _maxSymbols = 0;                  if (!int.TryParse(fields[5]' out _numberOfSymbols)) _numberOfSymbols = 0;                  if (!int.TryParse(fields[6]' out _clientsConnected)) _clientsConnected = 0;                  if (!int.TryParse(fields[7]' out _secondsSinceLastUpdate)) _secondsSinceLastUpdate = 0;                  if (!int.TryParse(fields[8]' out _reconnections)) _reconnections = 0;                  if (!int.TryParse(fields[9]' out _attemptedReconnections)) _attemptedReconnections = 0;                  if (!DateTime.TryParseExact(fields[10]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue;                  if (!DateTime.TryParseExact(fields[11]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _marketTime)) _marketTime = DateTime.MinValue;                  _connected = false;                  if (fields[12] == "Connected") { _connected = true; }                  _iqFeedVersion = fields[13];                  _loginId = fields[14];                  if (!double.TryParse(fields[15]' out _totalKbsRecv)) _totalKbsRecv = 0;                  if (!double.TryParse(fields[16]' out _kbsPerSecRecv)) _kbsPerSecRecv = 0;                  if (!double.TryParse(fields[17]' out _avgKbsPerSecRecv)) _avgKbsPerSecRecv = 0;                  if (!double.TryParse(fields[18]' out _totalKbsSent)) _totalKbsSent = 0;                  if (!double.TryParse(fields[19]' out _kbsPerSecSent)) _kbsPerSecSent = 0;                  if (!double.TryParse(fields[20]' out _avgKbsPerSecSent)) _avgKbsPerSecSent = 0;              }
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: lock (this)              {                  _serverIp = fields[2];                  if (!int.TryParse(fields[3]' out _serverPort)) _serverPort = 0;                  if (!int.TryParse(fields[4]' out _maxSymbols)) _maxSymbols = 0;                  if (!int.TryParse(fields[5]' out _numberOfSymbols)) _numberOfSymbols = 0;                  if (!int.TryParse(fields[6]' out _clientsConnected)) _clientsConnected = 0;                  if (!int.TryParse(fields[7]' out _secondsSinceLastUpdate)) _secondsSinceLastUpdate = 0;                  if (!int.TryParse(fields[8]' out _reconnections)) _reconnections = 0;                  if (!int.TryParse(fields[9]' out _attemptedReconnections)) _attemptedReconnections = 0;                  if (!DateTime.TryParseExact(fields[10]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue;                  if (!DateTime.TryParseExact(fields[11]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _marketTime)) _marketTime = DateTime.MinValue;                  _connected = false;                  if (fields[12] == "Connected") { _connected = true; }                  _iqFeedVersion = fields[13];                  _loginId = fields[14];                  if (!double.TryParse(fields[15]' out _totalKbsRecv)) _totalKbsRecv = 0;                  if (!double.TryParse(fields[16]' out _kbsPerSecRecv)) _kbsPerSecRecv = 0;                  if (!double.TryParse(fields[17]' out _avgKbsPerSecRecv)) _avgKbsPerSecRecv = 0;                  if (!double.TryParse(fields[18]' out _totalKbsSent)) _totalKbsSent = 0;                  if (!double.TryParse(fields[19]' out _kbsPerSecSent)) _kbsPerSecSent = 0;                  if (!double.TryParse(fields[20]' out _avgKbsPerSecSent)) _avgKbsPerSecSent = 0;              }
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: lock (this)              {                  _serverIp = fields[2];                  if (!int.TryParse(fields[3]' out _serverPort)) _serverPort = 0;                  if (!int.TryParse(fields[4]' out _maxSymbols)) _maxSymbols = 0;                  if (!int.TryParse(fields[5]' out _numberOfSymbols)) _numberOfSymbols = 0;                  if (!int.TryParse(fields[6]' out _clientsConnected)) _clientsConnected = 0;                  if (!int.TryParse(fields[7]' out _secondsSinceLastUpdate)) _secondsSinceLastUpdate = 0;                  if (!int.TryParse(fields[8]' out _reconnections)) _reconnections = 0;                  if (!int.TryParse(fields[9]' out _attemptedReconnections)) _attemptedReconnections = 0;                  if (!DateTime.TryParseExact(fields[10]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue;                  if (!DateTime.TryParseExact(fields[11]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _marketTime)) _marketTime = DateTime.MinValue;                  _connected = false;                  if (fields[12] == "Connected") { _connected = true; }                  _iqFeedVersion = fields[13];                  _loginId = fields[14];                  if (!double.TryParse(fields[15]' out _totalKbsRecv)) _totalKbsRecv = 0;                  if (!double.TryParse(fields[16]' out _kbsPerSecRecv)) _kbsPerSecRecv = 0;                  if (!double.TryParse(fields[17]' out _avgKbsPerSecRecv)) _avgKbsPerSecRecv = 0;                  if (!double.TryParse(fields[18]' out _totalKbsSent)) _totalKbsSent = 0;                  if (!double.TryParse(fields[19]' out _kbsPerSecSent)) _kbsPerSecSent = 0;                  if (!double.TryParse(fields[20]' out _avgKbsPerSecSent)) _avgKbsPerSecSent = 0;              }
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: lock (this)              {                  _serverIp = fields[2];                  if (!int.TryParse(fields[3]' out _serverPort)) _serverPort = 0;                  if (!int.TryParse(fields[4]' out _maxSymbols)) _maxSymbols = 0;                  if (!int.TryParse(fields[5]' out _numberOfSymbols)) _numberOfSymbols = 0;                  if (!int.TryParse(fields[6]' out _clientsConnected)) _clientsConnected = 0;                  if (!int.TryParse(fields[7]' out _secondsSinceLastUpdate)) _secondsSinceLastUpdate = 0;                  if (!int.TryParse(fields[8]' out _reconnections)) _reconnections = 0;                  if (!int.TryParse(fields[9]' out _attemptedReconnections)) _attemptedReconnections = 0;                  if (!DateTime.TryParseExact(fields[10]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue;                  if (!DateTime.TryParseExact(fields[11]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _marketTime)) _marketTime = DateTime.MinValue;                  _connected = false;                  if (fields[12] == "Connected") { _connected = true; }                  _iqFeedVersion = fields[13];                  _loginId = fields[14];                  if (!double.TryParse(fields[15]' out _totalKbsRecv)) _totalKbsRecv = 0;                  if (!double.TryParse(fields[16]' out _kbsPerSecRecv)) _kbsPerSecRecv = 0;                  if (!double.TryParse(fields[17]' out _avgKbsPerSecRecv)) _avgKbsPerSecRecv = 0;                  if (!double.TryParse(fields[18]' out _totalKbsSent)) _totalKbsSent = 0;                  if (!double.TryParse(fields[19]' out _kbsPerSecSent)) _kbsPerSecSent = 0;                  if (!double.TryParse(fields[20]' out _avgKbsPerSecSent)) _avgKbsPerSecSent = 0;              }
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: lock (this)              {                  _serverIp = fields[2];                  if (!int.TryParse(fields[3]' out _serverPort)) _serverPort = 0;                  if (!int.TryParse(fields[4]' out _maxSymbols)) _maxSymbols = 0;                  if (!int.TryParse(fields[5]' out _numberOfSymbols)) _numberOfSymbols = 0;                  if (!int.TryParse(fields[6]' out _clientsConnected)) _clientsConnected = 0;                  if (!int.TryParse(fields[7]' out _secondsSinceLastUpdate)) _secondsSinceLastUpdate = 0;                  if (!int.TryParse(fields[8]' out _reconnections)) _reconnections = 0;                  if (!int.TryParse(fields[9]' out _attemptedReconnections)) _attemptedReconnections = 0;                  if (!DateTime.TryParseExact(fields[10]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue;                  if (!DateTime.TryParseExact(fields[11]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _marketTime)) _marketTime = DateTime.MinValue;                  _connected = false;                  if (fields[12] == "Connected") { _connected = true; }                  _iqFeedVersion = fields[13];                  _loginId = fields[14];                  if (!double.TryParse(fields[15]' out _totalKbsRecv)) _totalKbsRecv = 0;                  if (!double.TryParse(fields[16]' out _kbsPerSecRecv)) _kbsPerSecRecv = 0;                  if (!double.TryParse(fields[17]' out _avgKbsPerSecRecv)) _avgKbsPerSecRecv = 0;                  if (!double.TryParse(fields[18]' out _totalKbsSent)) _totalKbsSent = 0;                  if (!double.TryParse(fields[19]' out _kbsPerSecSent)) _kbsPerSecSent = 0;                  if (!double.TryParse(fields[20]' out _avgKbsPerSecSent)) _avgKbsPerSecSent = 0;              }
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: lock (this)              {                  _serverIp = fields[2];                  if (!int.TryParse(fields[3]' out _serverPort)) _serverPort = 0;                  if (!int.TryParse(fields[4]' out _maxSymbols)) _maxSymbols = 0;                  if (!int.TryParse(fields[5]' out _numberOfSymbols)) _numberOfSymbols = 0;                  if (!int.TryParse(fields[6]' out _clientsConnected)) _clientsConnected = 0;                  if (!int.TryParse(fields[7]' out _secondsSinceLastUpdate)) _secondsSinceLastUpdate = 0;                  if (!int.TryParse(fields[8]' out _reconnections)) _reconnections = 0;                  if (!int.TryParse(fields[9]' out _attemptedReconnections)) _attemptedReconnections = 0;                  if (!DateTime.TryParseExact(fields[10]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue;                  if (!DateTime.TryParseExact(fields[11]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _marketTime)) _marketTime = DateTime.MinValue;                  _connected = false;                  if (fields[12] == "Connected") { _connected = true; }                  _iqFeedVersion = fields[13];                  _loginId = fields[14];                  if (!double.TryParse(fields[15]' out _totalKbsRecv)) _totalKbsRecv = 0;                  if (!double.TryParse(fields[16]' out _kbsPerSecRecv)) _kbsPerSecRecv = 0;                  if (!double.TryParse(fields[17]' out _avgKbsPerSecRecv)) _avgKbsPerSecRecv = 0;                  if (!double.TryParse(fields[18]' out _totalKbsSent)) _totalKbsSent = 0;                  if (!double.TryParse(fields[19]' out _kbsPerSecSent)) _kbsPerSecSent = 0;                  if (!double.TryParse(fields[20]' out _avgKbsPerSecSent)) _avgKbsPerSecSent = 0;              }
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: lock (this)              {                  _serverIp = fields[2];                  if (!int.TryParse(fields[3]' out _serverPort)) _serverPort = 0;                  if (!int.TryParse(fields[4]' out _maxSymbols)) _maxSymbols = 0;                  if (!int.TryParse(fields[5]' out _numberOfSymbols)) _numberOfSymbols = 0;                  if (!int.TryParse(fields[6]' out _clientsConnected)) _clientsConnected = 0;                  if (!int.TryParse(fields[7]' out _secondsSinceLastUpdate)) _secondsSinceLastUpdate = 0;                  if (!int.TryParse(fields[8]' out _reconnections)) _reconnections = 0;                  if (!int.TryParse(fields[9]' out _attemptedReconnections)) _attemptedReconnections = 0;                  if (!DateTime.TryParseExact(fields[10]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue;                  if (!DateTime.TryParseExact(fields[11]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _marketTime)) _marketTime = DateTime.MinValue;                  _connected = false;                  if (fields[12] == "Connected") { _connected = true; }                  _iqFeedVersion = fields[13];                  _loginId = fields[14];                  if (!double.TryParse(fields[15]' out _totalKbsRecv)) _totalKbsRecv = 0;                  if (!double.TryParse(fields[16]' out _kbsPerSecRecv)) _kbsPerSecRecv = 0;                  if (!double.TryParse(fields[17]' out _avgKbsPerSecRecv)) _avgKbsPerSecRecv = 0;                  if (!double.TryParse(fields[18]' out _totalKbsSent)) _totalKbsSent = 0;                  if (!double.TryParse(fields[19]' out _kbsPerSecSent)) _kbsPerSecSent = 0;                  if (!double.TryParse(fields[20]' out _avgKbsPerSecSent)) _avgKbsPerSecSent = 0;              }
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: lock (this)              {                  _serverIp = fields[2];                  if (!int.TryParse(fields[3]' out _serverPort)) _serverPort = 0;                  if (!int.TryParse(fields[4]' out _maxSymbols)) _maxSymbols = 0;                  if (!int.TryParse(fields[5]' out _numberOfSymbols)) _numberOfSymbols = 0;                  if (!int.TryParse(fields[6]' out _clientsConnected)) _clientsConnected = 0;                  if (!int.TryParse(fields[7]' out _secondsSinceLastUpdate)) _secondsSinceLastUpdate = 0;                  if (!int.TryParse(fields[8]' out _reconnections)) _reconnections = 0;                  if (!int.TryParse(fields[9]' out _attemptedReconnections)) _attemptedReconnections = 0;                  if (!DateTime.TryParseExact(fields[10]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue;                  if (!DateTime.TryParseExact(fields[11]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _marketTime)) _marketTime = DateTime.MinValue;                  _connected = false;                  if (fields[12] == "Connected") { _connected = true; }                  _iqFeedVersion = fields[13];                  _loginId = fields[14];                  if (!double.TryParse(fields[15]' out _totalKbsRecv)) _totalKbsRecv = 0;                  if (!double.TryParse(fields[16]' out _kbsPerSecRecv)) _kbsPerSecRecv = 0;                  if (!double.TryParse(fields[17]' out _avgKbsPerSecRecv)) _avgKbsPerSecRecv = 0;                  if (!double.TryParse(fields[18]' out _totalKbsSent)) _totalKbsSent = 0;                  if (!double.TryParse(fields[19]' out _kbsPerSecSent)) _kbsPerSecSent = 0;                  if (!double.TryParse(fields[20]' out _avgKbsPerSecSent)) _avgKbsPerSecSent = 0;              }
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: lock (this)              {                  _serverIp = fields[2];                  if (!int.TryParse(fields[3]' out _serverPort)) _serverPort = 0;                  if (!int.TryParse(fields[4]' out _maxSymbols)) _maxSymbols = 0;                  if (!int.TryParse(fields[5]' out _numberOfSymbols)) _numberOfSymbols = 0;                  if (!int.TryParse(fields[6]' out _clientsConnected)) _clientsConnected = 0;                  if (!int.TryParse(fields[7]' out _secondsSinceLastUpdate)) _secondsSinceLastUpdate = 0;                  if (!int.TryParse(fields[8]' out _reconnections)) _reconnections = 0;                  if (!int.TryParse(fields[9]' out _attemptedReconnections)) _attemptedReconnections = 0;                  if (!DateTime.TryParseExact(fields[10]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue;                  if (!DateTime.TryParseExact(fields[11]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _marketTime)) _marketTime = DateTime.MinValue;                  _connected = false;                  if (fields[12] == "Connected") { _connected = true; }                  _iqFeedVersion = fields[13];                  _loginId = fields[14];                  if (!double.TryParse(fields[15]' out _totalKbsRecv)) _totalKbsRecv = 0;                  if (!double.TryParse(fields[16]' out _kbsPerSecRecv)) _kbsPerSecRecv = 0;                  if (!double.TryParse(fields[17]' out _avgKbsPerSecRecv)) _avgKbsPerSecRecv = 0;                  if (!double.TryParse(fields[18]' out _totalKbsSent)) _totalKbsSent = 0;                  if (!double.TryParse(fields[19]' out _kbsPerSecSent)) _kbsPerSecSent = 0;                  if (!double.TryParse(fields[20]' out _avgKbsPerSecSent)) _avgKbsPerSecSent = 0;              }
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: lock (this)              {                  _serverIp = fields[2];                  if (!int.TryParse(fields[3]' out _serverPort)) _serverPort = 0;                  if (!int.TryParse(fields[4]' out _maxSymbols)) _maxSymbols = 0;                  if (!int.TryParse(fields[5]' out _numberOfSymbols)) _numberOfSymbols = 0;                  if (!int.TryParse(fields[6]' out _clientsConnected)) _clientsConnected = 0;                  if (!int.TryParse(fields[7]' out _secondsSinceLastUpdate)) _secondsSinceLastUpdate = 0;                  if (!int.TryParse(fields[8]' out _reconnections)) _reconnections = 0;                  if (!int.TryParse(fields[9]' out _attemptedReconnections)) _attemptedReconnections = 0;                  if (!DateTime.TryParseExact(fields[10]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue;                  if (!DateTime.TryParseExact(fields[11]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _marketTime)) _marketTime = DateTime.MinValue;                  _connected = false;                  if (fields[12] == "Connected") { _connected = true; }                  _iqFeedVersion = fields[13];                  _loginId = fields[14];                  if (!double.TryParse(fields[15]' out _totalKbsRecv)) _totalKbsRecv = 0;                  if (!double.TryParse(fields[16]' out _kbsPerSecRecv)) _kbsPerSecRecv = 0;                  if (!double.TryParse(fields[17]' out _avgKbsPerSecRecv)) _avgKbsPerSecRecv = 0;                  if (!double.TryParse(fields[18]' out _totalKbsSent)) _totalKbsSent = 0;                  if (!double.TryParse(fields[19]' out _kbsPerSecSent)) _kbsPerSecSent = 0;                  if (!double.TryParse(fields[20]' out _avgKbsPerSecSent)) _avgKbsPerSecSent = 0;              }
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: lock (this)              {                  _serverIp = fields[2];                  if (!int.TryParse(fields[3]' out _serverPort)) _serverPort = 0;                  if (!int.TryParse(fields[4]' out _maxSymbols)) _maxSymbols = 0;                  if (!int.TryParse(fields[5]' out _numberOfSymbols)) _numberOfSymbols = 0;                  if (!int.TryParse(fields[6]' out _clientsConnected)) _clientsConnected = 0;                  if (!int.TryParse(fields[7]' out _secondsSinceLastUpdate)) _secondsSinceLastUpdate = 0;                  if (!int.TryParse(fields[8]' out _reconnections)) _reconnections = 0;                  if (!int.TryParse(fields[9]' out _attemptedReconnections)) _attemptedReconnections = 0;                  if (!DateTime.TryParseExact(fields[10]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue;                  if (!DateTime.TryParseExact(fields[11]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _marketTime)) _marketTime = DateTime.MinValue;                  _connected = false;                  if (fields[12] == "Connected") { _connected = true; }                  _iqFeedVersion = fields[13];                  _loginId = fields[14];                  if (!double.TryParse(fields[15]' out _totalKbsRecv)) _totalKbsRecv = 0;                  if (!double.TryParse(fields[16]' out _kbsPerSecRecv)) _kbsPerSecRecv = 0;                  if (!double.TryParse(fields[17]' out _avgKbsPerSecRecv)) _avgKbsPerSecRecv = 0;                  if (!double.TryParse(fields[18]' out _totalKbsSent)) _totalKbsSent = 0;                  if (!double.TryParse(fields[19]' out _kbsPerSecSent)) _kbsPerSecSent = 0;                  if (!double.TryParse(fields[20]' out _avgKbsPerSecSent)) _avgKbsPerSecSent = 0;              }
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: lock (this)              {                  _serverIp = fields[2];                  if (!int.TryParse(fields[3]' out _serverPort)) _serverPort = 0;                  if (!int.TryParse(fields[4]' out _maxSymbols)) _maxSymbols = 0;                  if (!int.TryParse(fields[5]' out _numberOfSymbols)) _numberOfSymbols = 0;                  if (!int.TryParse(fields[6]' out _clientsConnected)) _clientsConnected = 0;                  if (!int.TryParse(fields[7]' out _secondsSinceLastUpdate)) _secondsSinceLastUpdate = 0;                  if (!int.TryParse(fields[8]' out _reconnections)) _reconnections = 0;                  if (!int.TryParse(fields[9]' out _attemptedReconnections)) _attemptedReconnections = 0;                  if (!DateTime.TryParseExact(fields[10]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue;                  if (!DateTime.TryParseExact(fields[11]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _marketTime)) _marketTime = DateTime.MinValue;                  _connected = false;                  if (fields[12] == "Connected") { _connected = true; }                  _iqFeedVersion = fields[13];                  _loginId = fields[14];                  if (!double.TryParse(fields[15]' out _totalKbsRecv)) _totalKbsRecv = 0;                  if (!double.TryParse(fields[16]' out _kbsPerSecRecv)) _kbsPerSecRecv = 0;                  if (!double.TryParse(fields[17]' out _avgKbsPerSecRecv)) _avgKbsPerSecRecv = 0;                  if (!double.TryParse(fields[18]' out _totalKbsSent)) _totalKbsSent = 0;                  if (!double.TryParse(fields[19]' out _kbsPerSecSent)) _kbsPerSecSent = 0;                  if (!double.TryParse(fields[20]' out _avgKbsPerSecSent)) _avgKbsPerSecSent = 0;              }
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: lock (this)              {                  _serverIp = fields[2];                  if (!int.TryParse(fields[3]' out _serverPort)) _serverPort = 0;                  if (!int.TryParse(fields[4]' out _maxSymbols)) _maxSymbols = 0;                  if (!int.TryParse(fields[5]' out _numberOfSymbols)) _numberOfSymbols = 0;                  if (!int.TryParse(fields[6]' out _clientsConnected)) _clientsConnected = 0;                  if (!int.TryParse(fields[7]' out _secondsSinceLastUpdate)) _secondsSinceLastUpdate = 0;                  if (!int.TryParse(fields[8]' out _reconnections)) _reconnections = 0;                  if (!int.TryParse(fields[9]' out _attemptedReconnections)) _attemptedReconnections = 0;                  if (!DateTime.TryParseExact(fields[10]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue;                  if (!DateTime.TryParseExact(fields[11]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _marketTime)) _marketTime = DateTime.MinValue;                  _connected = false;                  if (fields[12] == "Connected") { _connected = true; }                  _iqFeedVersion = fields[13];                  _loginId = fields[14];                  if (!double.TryParse(fields[15]' out _totalKbsRecv)) _totalKbsRecv = 0;                  if (!double.TryParse(fields[16]' out _kbsPerSecRecv)) _kbsPerSecRecv = 0;                  if (!double.TryParse(fields[17]' out _avgKbsPerSecRecv)) _avgKbsPerSecRecv = 0;                  if (!double.TryParse(fields[18]' out _totalKbsSent)) _totalKbsSent = 0;                  if (!double.TryParse(fields[19]' out _kbsPerSecSent)) _kbsPerSecSent = 0;                  if (!double.TryParse(fields[20]' out _avgKbsPerSecSent)) _avgKbsPerSecSent = 0;              }
Magic Number,QuantConnect.ToolBox.IQFeed,Status,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,Update,The following statement contains a magic number: lock (this)              {                  _serverIp = fields[2];                  if (!int.TryParse(fields[3]' out _serverPort)) _serverPort = 0;                  if (!int.TryParse(fields[4]' out _maxSymbols)) _maxSymbols = 0;                  if (!int.TryParse(fields[5]' out _numberOfSymbols)) _numberOfSymbols = 0;                  if (!int.TryParse(fields[6]' out _clientsConnected)) _clientsConnected = 0;                  if (!int.TryParse(fields[7]' out _secondsSinceLastUpdate)) _secondsSinceLastUpdate = 0;                  if (!int.TryParse(fields[8]' out _reconnections)) _reconnections = 0;                  if (!int.TryParse(fields[9]' out _attemptedReconnections)) _attemptedReconnections = 0;                  if (!DateTime.TryParseExact(fields[10]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _startTime)) _startTime = DateTime.MinValue;                  if (!DateTime.TryParseExact(fields[11]' "MMM dd hh':'mmtt"' _enUS' DateTimeStyles.None' out _marketTime)) _marketTime = DateTime.MinValue;                  _connected = false;                  if (fields[12] == "Connected") { _connected = true; }                  _iqFeedVersion = fields[13];                  _loginId = fields[14];                  if (!double.TryParse(fields[15]' out _totalKbsRecv)) _totalKbsRecv = 0;                  if (!double.TryParse(fields[16]' out _kbsPerSecRecv)) _kbsPerSecRecv = 0;                  if (!double.TryParse(fields[17]' out _avgKbsPerSecRecv)) _avgKbsPerSecRecv = 0;                  if (!double.TryParse(fields[18]' out _totalKbsSent)) _totalKbsSent = 0;                  if (!double.TryParse(fields[19]' out _kbsPerSecSent)) _kbsPerSecSent = 0;                  if (!double.TryParse(fields[20]' out _avgKbsPerSecSent)) _avgKbsPerSecSent = 0;              }
Magic Number,QuantConnect.ToolBox.KaikoDataConverter,Program,C:\repos\QuantConnect_Lean\ToolBox\KaikoDataConverter\Program.cs,Main,The following statement contains a magic number: if (args.Length != 3)              {                  throw new ArgumentException("The arguments must be specified as [market] [tickType (quote/trade)] [kaiko raw data directory path]");              }
Magic Number,QuantConnect.ToolBox.KaikoDataConverter,Program,C:\repos\QuantConnect_Lean\ToolBox\KaikoDataConverter\Program.cs,Main,The following statement contains a magic number: var fileLocation = args[2];
Magic Number,QuantConnect.ToolBox.KrakenDownloader,KrakenDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\KrakenDataDownloader\KrakenDataDownloader.cs,Get,The following statement contains a magic number: var startUnixTime = Convert.ToInt64(Time.DateTimeToUnixTimeStamp(startUtc) * 1000000000);
Magic Number,QuantConnect.ToolBox.KrakenDownloader,KrakenDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\KrakenDataDownloader\KrakenDataDownloader.cs,Get,The following statement contains a magic number: var endUnixTime = Convert.ToInt64(Time.DateTimeToUnixTimeStamp(endUtc) * 1000000000);
Magic Number,QuantConnect.ToolBox.KrakenDownloader,KrakenDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\KrakenDataDownloader\KrakenDataDownloader.cs,Get,The following statement contains a magic number: using (var client = new WebClient())              {                  var rateGate = new RateGate(10' TimeSpan.FromMinutes(1)); // 10 calls per minute for Kraken API                    rateGate.WaitToProceed();                  var response = client.DownloadString(url);                  dynamic result = JsonConvert.DeserializeObject<dynamic>(response);                  if (result.error.Count != 0)                  {                      throw new Exception("Error in Kraken API: " + result.error[0]);                  }                    data = result.result[symbol.Value].ToObject<List<List<string>>>();                    foreach (var i in data)                  {                      var time = Time.UnixTimeStampToDateTime(Convert.ToDouble(i[2].Split('.')[0]));                      if (time > endUtc)                      {                          break;                      }                        var value = Decimal.Parse(i[0]);                      var volume = Decimal.Parse(i[1]);                        yield return new Tick                      {                          Value = value'                          Time = time'                          DataType = MarketDataType.Tick'                          Symbol = symbol'                          TickType = TickType.Trade'                          Quantity = volume'                          Exchange = "kraken"                      };                  }                    var last = Convert.ToInt64(result.result.last);                  while (last < endUnixTime)                  {                      url = string.Format(UrlPrototype' symbol.Value' last);                        rateGate.WaitToProceed();                      response = client.DownloadString(url);                      result = JsonConvert.DeserializeObject<dynamic>(response);                        var errorCount = 0;                      while (result.error.Count != 0 && errorCount < 10)                      {                          errorCount++;                          rateGate.WaitToProceed();                          response = client.DownloadString(url);                          result = JsonConvert.DeserializeObject<dynamic>(response);                      }                        if (result.error.Count != 0 && errorCount >= 10)                      {                          throw new Exception("Error in Kraken API: " + result.error[0]);                      }                        data = result.result[symbol.Value].ToObject<List<List<string>>>();                        foreach (var i in data)                      {                          var time = Time.UnixTimeStampToDateTime(Convert.ToDouble(i[2].Split('.')[0]));                          if (time > endUtc)                          {                              break;                          }                            var value = Decimal.Parse(i[0]);                          var volume = Decimal.Parse(i[1]);                            yield return new Tick                          {                              Value = value'                              Time = time'                              DataType = MarketDataType.Tick'                              Symbol = symbol'                              TickType = TickType.Trade'                              Quantity = volume'                              Exchange = "kraken"                          };                      }                        last = Convert.ToInt64(result.result.last);                  }              }
Magic Number,QuantConnect.ToolBox.KrakenDownloader,KrakenDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\KrakenDataDownloader\KrakenDataDownloader.cs,Get,The following statement contains a magic number: using (var client = new WebClient())              {                  var rateGate = new RateGate(10' TimeSpan.FromMinutes(1)); // 10 calls per minute for Kraken API                    rateGate.WaitToProceed();                  var response = client.DownloadString(url);                  dynamic result = JsonConvert.DeserializeObject<dynamic>(response);                  if (result.error.Count != 0)                  {                      throw new Exception("Error in Kraken API: " + result.error[0]);                  }                    data = result.result[symbol.Value].ToObject<List<List<string>>>();                    foreach (var i in data)                  {                      var time = Time.UnixTimeStampToDateTime(Convert.ToDouble(i[2].Split('.')[0]));                      if (time > endUtc)                      {                          break;                      }                        var value = Decimal.Parse(i[0]);                      var volume = Decimal.Parse(i[1]);                        yield return new Tick                      {                          Value = value'                          Time = time'                          DataType = MarketDataType.Tick'                          Symbol = symbol'                          TickType = TickType.Trade'                          Quantity = volume'                          Exchange = "kraken"                      };                  }                    var last = Convert.ToInt64(result.result.last);                  while (last < endUnixTime)                  {                      url = string.Format(UrlPrototype' symbol.Value' last);                        rateGate.WaitToProceed();                      response = client.DownloadString(url);                      result = JsonConvert.DeserializeObject<dynamic>(response);                        var errorCount = 0;                      while (result.error.Count != 0 && errorCount < 10)                      {                          errorCount++;                          rateGate.WaitToProceed();                          response = client.DownloadString(url);                          result = JsonConvert.DeserializeObject<dynamic>(response);                      }                        if (result.error.Count != 0 && errorCount >= 10)                      {                          throw new Exception("Error in Kraken API: " + result.error[0]);                      }                        data = result.result[symbol.Value].ToObject<List<List<string>>>();                        foreach (var i in data)                      {                          var time = Time.UnixTimeStampToDateTime(Convert.ToDouble(i[2].Split('.')[0]));                          if (time > endUtc)                          {                              break;                          }                            var value = Decimal.Parse(i[0]);                          var volume = Decimal.Parse(i[1]);                            yield return new Tick                          {                              Value = value'                              Time = time'                              DataType = MarketDataType.Tick'                              Symbol = symbol'                              TickType = TickType.Trade'                              Quantity = volume'                              Exchange = "kraken"                          };                      }                        last = Convert.ToInt64(result.result.last);                  }              }
Magic Number,QuantConnect.ToolBox.KrakenDownloader,KrakenDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\KrakenDataDownloader\KrakenDataDownloader.cs,Get,The following statement contains a magic number: using (var client = new WebClient())              {                  var rateGate = new RateGate(10' TimeSpan.FromMinutes(1)); // 10 calls per minute for Kraken API                    rateGate.WaitToProceed();                  var response = client.DownloadString(url);                  dynamic result = JsonConvert.DeserializeObject<dynamic>(response);                  if (result.error.Count != 0)                  {                      throw new Exception("Error in Kraken API: " + result.error[0]);                  }                    data = result.result[symbol.Value].ToObject<List<List<string>>>();                    foreach (var i in data)                  {                      var time = Time.UnixTimeStampToDateTime(Convert.ToDouble(i[2].Split('.')[0]));                      if (time > endUtc)                      {                          break;                      }                        var value = Decimal.Parse(i[0]);                      var volume = Decimal.Parse(i[1]);                        yield return new Tick                      {                          Value = value'                          Time = time'                          DataType = MarketDataType.Tick'                          Symbol = symbol'                          TickType = TickType.Trade'                          Quantity = volume'                          Exchange = "kraken"                      };                  }                    var last = Convert.ToInt64(result.result.last);                  while (last < endUnixTime)                  {                      url = string.Format(UrlPrototype' symbol.Value' last);                        rateGate.WaitToProceed();                      response = client.DownloadString(url);                      result = JsonConvert.DeserializeObject<dynamic>(response);                        var errorCount = 0;                      while (result.error.Count != 0 && errorCount < 10)                      {                          errorCount++;                          rateGate.WaitToProceed();                          response = client.DownloadString(url);                          result = JsonConvert.DeserializeObject<dynamic>(response);                      }                        if (result.error.Count != 0 && errorCount >= 10)                      {                          throw new Exception("Error in Kraken API: " + result.error[0]);                      }                        data = result.result[symbol.Value].ToObject<List<List<string>>>();                        foreach (var i in data)                      {                          var time = Time.UnixTimeStampToDateTime(Convert.ToDouble(i[2].Split('.')[0]));                          if (time > endUtc)                          {                              break;                          }                            var value = Decimal.Parse(i[0]);                          var volume = Decimal.Parse(i[1]);                            yield return new Tick                          {                              Value = value'                              Time = time'                              DataType = MarketDataType.Tick'                              Symbol = symbol'                              TickType = TickType.Trade'                              Quantity = volume'                              Exchange = "kraken"                          };                      }                        last = Convert.ToInt64(result.result.last);                  }              }
Magic Number,QuantConnect.ToolBox.KrakenDownloader,KrakenDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\KrakenDataDownloader\KrakenDataDownloader.cs,Get,The following statement contains a magic number: using (var client = new WebClient())              {                  var rateGate = new RateGate(10' TimeSpan.FromMinutes(1)); // 10 calls per minute for Kraken API                    rateGate.WaitToProceed();                  var response = client.DownloadString(url);                  dynamic result = JsonConvert.DeserializeObject<dynamic>(response);                  if (result.error.Count != 0)                  {                      throw new Exception("Error in Kraken API: " + result.error[0]);                  }                    data = result.result[symbol.Value].ToObject<List<List<string>>>();                    foreach (var i in data)                  {                      var time = Time.UnixTimeStampToDateTime(Convert.ToDouble(i[2].Split('.')[0]));                      if (time > endUtc)                      {                          break;                      }                        var value = Decimal.Parse(i[0]);                      var volume = Decimal.Parse(i[1]);                        yield return new Tick                      {                          Value = value'                          Time = time'                          DataType = MarketDataType.Tick'                          Symbol = symbol'                          TickType = TickType.Trade'                          Quantity = volume'                          Exchange = "kraken"                      };                  }                    var last = Convert.ToInt64(result.result.last);                  while (last < endUnixTime)                  {                      url = string.Format(UrlPrototype' symbol.Value' last);                        rateGate.WaitToProceed();                      response = client.DownloadString(url);                      result = JsonConvert.DeserializeObject<dynamic>(response);                        var errorCount = 0;                      while (result.error.Count != 0 && errorCount < 10)                      {                          errorCount++;                          rateGate.WaitToProceed();                          response = client.DownloadString(url);                          result = JsonConvert.DeserializeObject<dynamic>(response);                      }                        if (result.error.Count != 0 && errorCount >= 10)                      {                          throw new Exception("Error in Kraken API: " + result.error[0]);                      }                        data = result.result[symbol.Value].ToObject<List<List<string>>>();                        foreach (var i in data)                      {                          var time = Time.UnixTimeStampToDateTime(Convert.ToDouble(i[2].Split('.')[0]));                          if (time > endUtc)                          {                              break;                          }                            var value = Decimal.Parse(i[0]);                          var volume = Decimal.Parse(i[1]);                            yield return new Tick                          {                              Value = value'                              Time = time'                              DataType = MarketDataType.Tick'                              Symbol = symbol'                              TickType = TickType.Trade'                              Quantity = volume'                              Exchange = "kraken"                          };                      }                        last = Convert.ToInt64(result.result.last);                  }              }
Magic Number,QuantConnect.ToolBox.KrakenDownloader,KrakenDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\KrakenDataDownloader\KrakenDataDownloader.cs,Get,The following statement contains a magic number: using (var client = new WebClient())              {                  var rateGate = new RateGate(10' TimeSpan.FromMinutes(1)); // 10 calls per minute for Kraken API                    rateGate.WaitToProceed();                  var response = client.DownloadString(url);                  dynamic result = JsonConvert.DeserializeObject<dynamic>(response);                  if (result.error.Count != 0)                  {                      throw new Exception("Error in Kraken API: " + result.error[0]);                  }                    data = result.result[symbol.Value].ToObject<List<List<string>>>();                    foreach (var i in data)                  {                      var time = Time.UnixTimeStampToDateTime(Convert.ToDouble(i[2].Split('.')[0]));                      if (time > endUtc)                      {                          break;                      }                        var value = Decimal.Parse(i[0]);                      var volume = Decimal.Parse(i[1]);                        yield return new Tick                      {                          Value = value'                          Time = time'                          DataType = MarketDataType.Tick'                          Symbol = symbol'                          TickType = TickType.Trade'                          Quantity = volume'                          Exchange = "kraken"                      };                  }                    var last = Convert.ToInt64(result.result.last);                  while (last < endUnixTime)                  {                      url = string.Format(UrlPrototype' symbol.Value' last);                        rateGate.WaitToProceed();                      response = client.DownloadString(url);                      result = JsonConvert.DeserializeObject<dynamic>(response);                        var errorCount = 0;                      while (result.error.Count != 0 && errorCount < 10)                      {                          errorCount++;                          rateGate.WaitToProceed();                          response = client.DownloadString(url);                          result = JsonConvert.DeserializeObject<dynamic>(response);                      }                        if (result.error.Count != 0 && errorCount >= 10)                      {                          throw new Exception("Error in Kraken API: " + result.error[0]);                      }                        data = result.result[symbol.Value].ToObject<List<List<string>>>();                        foreach (var i in data)                      {                          var time = Time.UnixTimeStampToDateTime(Convert.ToDouble(i[2].Split('.')[0]));                          if (time > endUtc)                          {                              break;                          }                            var value = Decimal.Parse(i[0]);                          var volume = Decimal.Parse(i[1]);                            yield return new Tick                          {                              Value = value'                              Time = time'                              DataType = MarketDataType.Tick'                              Symbol = symbol'                              TickType = TickType.Trade'                              Quantity = volume'                              Exchange = "kraken"                          };                      }                        last = Convert.ToInt64(result.result.last);                  }              }
Magic Number,QuantConnect.ToolBox.KrakenDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\KrakenDataDownloader\Program.cs,Main,The following statement contains a magic number: if (args.Length != 4)              {                  Console.WriteLine("Usage: KrakenDownloader PAIRS RESOLUTION FROMDATE TODATE");                  Console.WriteLine("SYMBOLS = eg XXBTZUSD'XETHZUSD");                  Console.WriteLine("RESOLUTION = Minute/Hour/Daily/Tick");                  Console.WriteLine("FROMDATE = yyyymmdd");                  Console.WriteLine("TODATE = yyyymmdd");                  Environment.Exit(1);              }
Magic Number,QuantConnect.ToolBox.KrakenDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\KrakenDataDownloader\Program.cs,Main,The following statement contains a magic number: try              {                  var pairs = args[0].Split(''');                  var resolution = (Resolution)Enum.Parse(typeof(Resolution)' args[1]);                  var startDate = DateTime.ParseExact(args[2]' "yyyyMMdd"' CultureInfo.InvariantCulture);                  var endDate = DateTime.ParseExact(args[3]' "yyyyMMdd"' CultureInfo.InvariantCulture);                    // Load settings from config.json and create downloader                  var dataDirectory = Config.Get("data-directory"' "../../../Data");                  var downloader = new KrakenDataDownloader();                    foreach (var pair in pairs)                  {                      // Download data                      var pairObject = Symbol.Create(pair' SecurityType.Crypto' Market.Kraken);                      var data = downloader.Get(pairObject' resolution' startDate' endDate);                        // Write data                      var writer = new LeanDataWriter(resolution' pairObject' dataDirectory);                      writer.Write(data);                  }              }              catch (Exception err)              {                  Log.Error(err);              }
Magic Number,QuantConnect.ToolBox.KrakenDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\KrakenDataDownloader\Program.cs,Main,The following statement contains a magic number: try              {                  var pairs = args[0].Split(''');                  var resolution = (Resolution)Enum.Parse(typeof(Resolution)' args[1]);                  var startDate = DateTime.ParseExact(args[2]' "yyyyMMdd"' CultureInfo.InvariantCulture);                  var endDate = DateTime.ParseExact(args[3]' "yyyyMMdd"' CultureInfo.InvariantCulture);                    // Load settings from config.json and create downloader                  var dataDirectory = Config.Get("data-directory"' "../../../Data");                  var downloader = new KrakenDataDownloader();                    foreach (var pair in pairs)                  {                      // Download data                      var pairObject = Symbol.Create(pair' SecurityType.Crypto' Market.Kraken);                      var data = downloader.Get(pairObject' resolution' startDate' endDate);                        // Write data                      var writer = new LeanDataWriter(resolution' pairObject' dataDirectory);                      writer.Write(data);                  }              }              catch (Exception err)              {                  Log.Error(err);              }
Magic Number,QuantConnect.ToolBox.NseMarketDataConverter,Program,C:\repos\QuantConnect_Lean\ToolBox\NseMarketDataConverter\Program.cs,Main,The following statement contains a magic number: if (args.Length == 2)              {                  sourceDirectory = args[0];                  destinationDirectory = args[1];              }              else              {                  Console.WriteLine("1. Source NSE source directory: ");                  sourceDirectory = (Console.ReadLine() ?? "");                  Console.WriteLine("2. Destination LEAN Data directory: ");                  destinationDirectory = (Console.ReadLine() ?? "");              }
Magic Number,QuantConnect.ToolBox.NseMarketDataConverter,Program,C:\repos\QuantConnect_Lean\ToolBox\NseMarketDataConverter\Program.cs,Main,The following statement contains a magic number: foreach (var dateDirectory in Directory.EnumerateDirectories(sourceDirectory))              {                  var date = GetDate(dateDirectory);                  var dateDirectoryExtension = dateDirectory + "\\1\\Equity";                  foreach (var file in Directory.EnumerateFiles(dateDirectoryExtension))                  {                      var symbol = GetSymbol(file);                      var fileContents = File.ReadAllText(file);                      string[] stringSeparators = new string[] { "\n" };                      string[] lines = fileContents.Split(stringSeparators' StringSplitOptions.None);                      var datawriter = new LeanDataWriter(Resolution.Minute' symbol' destinationDirectory);                      IList<TradeBar> fileEnum = new List<TradeBar>();                      foreach (string line in lines)                      {                          string[] separators = new string[] { "'" };                          string[] linearray = line.Split(separators' StringSplitOptions.None);                          if (linearray.Length > 2)                          {                              String newline = linearray[0] + " ";                              newline += linearray[1];                              newline += ":00.0000";                              var Time = DateTime.ParseExact(newline' DateFormat.Forex' CultureInfo.InvariantCulture);                              var open = Decimal.Parse(linearray[2]);                              var high = Decimal.Parse(linearray[3]);                              var low = Decimal.Parse(linearray[4]);                              var close = Decimal.Parse(linearray[5]);                              var volume = Convert.ToInt64(linearray[6]);                              var linedata = new TradeBar(Time' symbol' open' high' low' close' volume);                              fileEnum.Add(linedata);                          }                      }                      datawriter.Write(fileEnum);                      count++;                  }              }
Magic Number,QuantConnect.ToolBox.NseMarketDataConverter,Program,C:\repos\QuantConnect_Lean\ToolBox\NseMarketDataConverter\Program.cs,Main,The following statement contains a magic number: foreach (var dateDirectory in Directory.EnumerateDirectories(sourceDirectory))              {                  var date = GetDate(dateDirectory);                  var dateDirectoryExtension = dateDirectory + "\\1\\Equity";                  foreach (var file in Directory.EnumerateFiles(dateDirectoryExtension))                  {                      var symbol = GetSymbol(file);                      var fileContents = File.ReadAllText(file);                      string[] stringSeparators = new string[] { "\n" };                      string[] lines = fileContents.Split(stringSeparators' StringSplitOptions.None);                      var datawriter = new LeanDataWriter(Resolution.Minute' symbol' destinationDirectory);                      IList<TradeBar> fileEnum = new List<TradeBar>();                      foreach (string line in lines)                      {                          string[] separators = new string[] { "'" };                          string[] linearray = line.Split(separators' StringSplitOptions.None);                          if (linearray.Length > 2)                          {                              String newline = linearray[0] + " ";                              newline += linearray[1];                              newline += ":00.0000";                              var Time = DateTime.ParseExact(newline' DateFormat.Forex' CultureInfo.InvariantCulture);                              var open = Decimal.Parse(linearray[2]);                              var high = Decimal.Parse(linearray[3]);                              var low = Decimal.Parse(linearray[4]);                              var close = Decimal.Parse(linearray[5]);                              var volume = Convert.ToInt64(linearray[6]);                              var linedata = new TradeBar(Time' symbol' open' high' low' close' volume);                              fileEnum.Add(linedata);                          }                      }                      datawriter.Write(fileEnum);                      count++;                  }              }
Magic Number,QuantConnect.ToolBox.NseMarketDataConverter,Program,C:\repos\QuantConnect_Lean\ToolBox\NseMarketDataConverter\Program.cs,Main,The following statement contains a magic number: foreach (var dateDirectory in Directory.EnumerateDirectories(sourceDirectory))              {                  var date = GetDate(dateDirectory);                  var dateDirectoryExtension = dateDirectory + "\\1\\Equity";                  foreach (var file in Directory.EnumerateFiles(dateDirectoryExtension))                  {                      var symbol = GetSymbol(file);                      var fileContents = File.ReadAllText(file);                      string[] stringSeparators = new string[] { "\n" };                      string[] lines = fileContents.Split(stringSeparators' StringSplitOptions.None);                      var datawriter = new LeanDataWriter(Resolution.Minute' symbol' destinationDirectory);                      IList<TradeBar> fileEnum = new List<TradeBar>();                      foreach (string line in lines)                      {                          string[] separators = new string[] { "'" };                          string[] linearray = line.Split(separators' StringSplitOptions.None);                          if (linearray.Length > 2)                          {                              String newline = linearray[0] + " ";                              newline += linearray[1];                              newline += ":00.0000";                              var Time = DateTime.ParseExact(newline' DateFormat.Forex' CultureInfo.InvariantCulture);                              var open = Decimal.Parse(linearray[2]);                              var high = Decimal.Parse(linearray[3]);                              var low = Decimal.Parse(linearray[4]);                              var close = Decimal.Parse(linearray[5]);                              var volume = Convert.ToInt64(linearray[6]);                              var linedata = new TradeBar(Time' symbol' open' high' low' close' volume);                              fileEnum.Add(linedata);                          }                      }                      datawriter.Write(fileEnum);                      count++;                  }              }
Magic Number,QuantConnect.ToolBox.NseMarketDataConverter,Program,C:\repos\QuantConnect_Lean\ToolBox\NseMarketDataConverter\Program.cs,Main,The following statement contains a magic number: foreach (var dateDirectory in Directory.EnumerateDirectories(sourceDirectory))              {                  var date = GetDate(dateDirectory);                  var dateDirectoryExtension = dateDirectory + "\\1\\Equity";                  foreach (var file in Directory.EnumerateFiles(dateDirectoryExtension))                  {                      var symbol = GetSymbol(file);                      var fileContents = File.ReadAllText(file);                      string[] stringSeparators = new string[] { "\n" };                      string[] lines = fileContents.Split(stringSeparators' StringSplitOptions.None);                      var datawriter = new LeanDataWriter(Resolution.Minute' symbol' destinationDirectory);                      IList<TradeBar> fileEnum = new List<TradeBar>();                      foreach (string line in lines)                      {                          string[] separators = new string[] { "'" };                          string[] linearray = line.Split(separators' StringSplitOptions.None);                          if (linearray.Length > 2)                          {                              String newline = linearray[0] + " ";                              newline += linearray[1];                              newline += ":00.0000";                              var Time = DateTime.ParseExact(newline' DateFormat.Forex' CultureInfo.InvariantCulture);                              var open = Decimal.Parse(linearray[2]);                              var high = Decimal.Parse(linearray[3]);                              var low = Decimal.Parse(linearray[4]);                              var close = Decimal.Parse(linearray[5]);                              var volume = Convert.ToInt64(linearray[6]);                              var linedata = new TradeBar(Time' symbol' open' high' low' close' volume);                              fileEnum.Add(linedata);                          }                      }                      datawriter.Write(fileEnum);                      count++;                  }              }
Magic Number,QuantConnect.ToolBox.NseMarketDataConverter,Program,C:\repos\QuantConnect_Lean\ToolBox\NseMarketDataConverter\Program.cs,Main,The following statement contains a magic number: foreach (var dateDirectory in Directory.EnumerateDirectories(sourceDirectory))              {                  var date = GetDate(dateDirectory);                  var dateDirectoryExtension = dateDirectory + "\\1\\Equity";                  foreach (var file in Directory.EnumerateFiles(dateDirectoryExtension))                  {                      var symbol = GetSymbol(file);                      var fileContents = File.ReadAllText(file);                      string[] stringSeparators = new string[] { "\n" };                      string[] lines = fileContents.Split(stringSeparators' StringSplitOptions.None);                      var datawriter = new LeanDataWriter(Resolution.Minute' symbol' destinationDirectory);                      IList<TradeBar> fileEnum = new List<TradeBar>();                      foreach (string line in lines)                      {                          string[] separators = new string[] { "'" };                          string[] linearray = line.Split(separators' StringSplitOptions.None);                          if (linearray.Length > 2)                          {                              String newline = linearray[0] + " ";                              newline += linearray[1];                              newline += ":00.0000";                              var Time = DateTime.ParseExact(newline' DateFormat.Forex' CultureInfo.InvariantCulture);                              var open = Decimal.Parse(linearray[2]);                              var high = Decimal.Parse(linearray[3]);                              var low = Decimal.Parse(linearray[4]);                              var close = Decimal.Parse(linearray[5]);                              var volume = Convert.ToInt64(linearray[6]);                              var linedata = new TradeBar(Time' symbol' open' high' low' close' volume);                              fileEnum.Add(linedata);                          }                      }                      datawriter.Write(fileEnum);                      count++;                  }              }
Magic Number,QuantConnect.ToolBox.NseMarketDataConverter,Program,C:\repos\QuantConnect_Lean\ToolBox\NseMarketDataConverter\Program.cs,Main,The following statement contains a magic number: foreach (var dateDirectory in Directory.EnumerateDirectories(sourceDirectory))              {                  var date = GetDate(dateDirectory);                  var dateDirectoryExtension = dateDirectory + "\\1\\Equity";                  foreach (var file in Directory.EnumerateFiles(dateDirectoryExtension))                  {                      var symbol = GetSymbol(file);                      var fileContents = File.ReadAllText(file);                      string[] stringSeparators = new string[] { "\n" };                      string[] lines = fileContents.Split(stringSeparators' StringSplitOptions.None);                      var datawriter = new LeanDataWriter(Resolution.Minute' symbol' destinationDirectory);                      IList<TradeBar> fileEnum = new List<TradeBar>();                      foreach (string line in lines)                      {                          string[] separators = new string[] { "'" };                          string[] linearray = line.Split(separators' StringSplitOptions.None);                          if (linearray.Length > 2)                          {                              String newline = linearray[0] + " ";                              newline += linearray[1];                              newline += ":00.0000";                              var Time = DateTime.ParseExact(newline' DateFormat.Forex' CultureInfo.InvariantCulture);                              var open = Decimal.Parse(linearray[2]);                              var high = Decimal.Parse(linearray[3]);                              var low = Decimal.Parse(linearray[4]);                              var close = Decimal.Parse(linearray[5]);                              var volume = Convert.ToInt64(linearray[6]);                              var linedata = new TradeBar(Time' symbol' open' high' low' close' volume);                              fileEnum.Add(linedata);                          }                      }                      datawriter.Write(fileEnum);                      count++;                  }              }
Magic Number,QuantConnect.ToolBox.OandaDownloader,OandaDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\OandaDownloader\OandaDataDownloader.cs,Get,The following statement contains a magic number: while (startDateTime <= endUtc.AddDays(1))              {                  // request blocks of 5-second bars with a starting date/time                  var bars = _brokerage.DownloadQuoteBars(symbol' startDateTime' endUtc.AddDays(1)' Resolution.Second' DateTimeZone.Utc).ToList();                  if (bars.Count == 0)                      break;                    var groupedBars = GroupBarsByDate(bars);                    if (groupedBars.Count > 1)                  {                      // we received more than one day' so we save the completed days and continue                      while (groupedBars.Count > 1)                      {                          var currentDate = groupedBars.Keys.First();                          if (currentDate > endUtc)                              break;                            barsToSave.AddRange(groupedBars[currentDate]);                            barsTotalInPeriod.AddRange(barsToSave);                            barsToSave.Clear();                            // remove the completed date                           groupedBars.Remove(currentDate);                      }                        // update the current date                      date = groupedBars.Keys.First();                        if (date <= endUtc)                      {                          barsToSave.AddRange(groupedBars[date]);                      }                  }                  else                  {                      var currentDate = groupedBars.Keys.First();                      if (currentDate > endUtc)                          break;                        // update the current date                      date = currentDate;                        barsToSave.AddRange(groupedBars[date]);                  }                    // calculate the next request datetime (next 5-sec bar time)                  startDateTime = bars[bars.Count - 1].Time.AddSeconds(5);              }
Magic Number,QuantConnect.ToolBox.OandaDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\OandaDownloader\Program.cs,Main,The following statement contains a magic number: if (args.Length != 4)              {                  Console.WriteLine("Usage: OandaDownloader SYMBOLS RESOLUTION FROMDATE TODATE");                  Console.WriteLine("SYMBOLS = eg EURUSD'USDJPY");                  Console.WriteLine("RESOLUTION = Second/Minute/Hour/Daily/All");                  Console.WriteLine("FROMDATE = yyyymmdd");                  Console.WriteLine("TODATE = yyyymmdd");                  Environment.Exit(1);              }
Magic Number,QuantConnect.ToolBox.OandaDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\OandaDownloader\Program.cs,Main,The following statement contains a magic number: try              {                  // Load settings from command line                  var tickers = args[0].Split(''');                  var allResolutions = args[1].ToLower() == "all";                  var resolution = allResolutions ? Resolution.Second : (Resolution)Enum.Parse(typeof(Resolution)' args[1]);                  var startDate = DateTime.ParseExact(args[2]' "yyyyMMdd"' CultureInfo.InvariantCulture);                  var endDate = DateTime.ParseExact(args[3]' "yyyyMMdd"' CultureInfo.InvariantCulture);                    // Load settings from config.json                  var dataDirectory = Config.Get("data-directory"' "../../../Data");                  var accessToken = Config.Get("access-token"' "73eba38ad5b44778f9a0c0fec1a66ed1-44f47f052c897b3e1e7f24196bbc071f");                  var accountId = Config.Get("account-id"' "621396");                    // Create an instance of the downloader                  const string market = Market.Oanda;                  var downloader = new OandaDataDownloader(accessToken' accountId);                    foreach (var ticker in tickers)                  {                      if (!downloader.HasSymbol(ticker))                          throw new ArgumentException("The symbol " + ticker + " is not available.");                  }                    foreach (var ticker in tickers)                  {                      // Download the data                      var securityType = downloader.GetSecurityType(ticker);                      var symbol = Symbol.Create(ticker' securityType' market);                        var data = downloader.Get(symbol' resolution' startDate' endDate);                        if (allResolutions)                      {                          var bars = data.Cast<QuoteBar>().ToList();                            // Save the data (second resolution)                          var writer = new LeanDataWriter(resolution' symbol' dataDirectory);                          writer.Write(bars);                            // Save the data (other resolutions)                          foreach (var res in new[] { Resolution.Minute' Resolution.Hour' Resolution.Daily })                          {                              var resData = downloader.AggregateBars(symbol' bars' res.ToTimeSpan());                                writer = new LeanDataWriter(res' symbol' dataDirectory);                              writer.Write(resData);                          }                      }                      else                      {                          // Save the data (single resolution)                          var writer = new LeanDataWriter(resolution' symbol' dataDirectory);                          writer.Write(data);                      }                  }              }              catch (Exception err)              {                  Log.Error(err);              }
Magic Number,QuantConnect.ToolBox.OandaDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\OandaDownloader\Program.cs,Main,The following statement contains a magic number: try              {                  // Load settings from command line                  var tickers = args[0].Split(''');                  var allResolutions = args[1].ToLower() == "all";                  var resolution = allResolutions ? Resolution.Second : (Resolution)Enum.Parse(typeof(Resolution)' args[1]);                  var startDate = DateTime.ParseExact(args[2]' "yyyyMMdd"' CultureInfo.InvariantCulture);                  var endDate = DateTime.ParseExact(args[3]' "yyyyMMdd"' CultureInfo.InvariantCulture);                    // Load settings from config.json                  var dataDirectory = Config.Get("data-directory"' "../../../Data");                  var accessToken = Config.Get("access-token"' "73eba38ad5b44778f9a0c0fec1a66ed1-44f47f052c897b3e1e7f24196bbc071f");                  var accountId = Config.Get("account-id"' "621396");                    // Create an instance of the downloader                  const string market = Market.Oanda;                  var downloader = new OandaDataDownloader(accessToken' accountId);                    foreach (var ticker in tickers)                  {                      if (!downloader.HasSymbol(ticker))                          throw new ArgumentException("The symbol " + ticker + " is not available.");                  }                    foreach (var ticker in tickers)                  {                      // Download the data                      var securityType = downloader.GetSecurityType(ticker);                      var symbol = Symbol.Create(ticker' securityType' market);                        var data = downloader.Get(symbol' resolution' startDate' endDate);                        if (allResolutions)                      {                          var bars = data.Cast<QuoteBar>().ToList();                            // Save the data (second resolution)                          var writer = new LeanDataWriter(resolution' symbol' dataDirectory);                          writer.Write(bars);                            // Save the data (other resolutions)                          foreach (var res in new[] { Resolution.Minute' Resolution.Hour' Resolution.Daily })                          {                              var resData = downloader.AggregateBars(symbol' bars' res.ToTimeSpan());                                writer = new LeanDataWriter(res' symbol' dataDirectory);                              writer.Write(resData);                          }                      }                      else                      {                          // Save the data (single resolution)                          var writer = new LeanDataWriter(resolution' symbol' dataDirectory);                          writer.Write(data);                      }                  }              }              catch (Exception err)              {                  Log.Error(err);              }
Magic Number,QuantConnect.ToolBox.QuandlBitfinexDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\QuandlBitfinexDownloader\Program.cs,Main,The following statement contains a magic number: if (args.Length != 2)              {                  Console.WriteLine("Usage: Downloader FROMDATE APIKEY");                  Console.WriteLine("FROMDATE = yyyymmdd");                  Environment.Exit(1);              }
Magic Number,QuantConnect.ToolBox.QuandlBitfinexDownloader,QuandlBitfinexDownloader,C:\repos\QuantConnect_Lean\ToolBox\QuandlBitfinexDownloader\QuandlBitfinexDownloader.cs,Get,The following statement contains a magic number: using (var cl = new WebClient())              {                  var data = cl.DownloadString(url);                    // skip the header line                  foreach (var item in data.Split('\n').Skip(1))                  {                      var line = item.Split(''');                      if (line.Length != 8)                      {                          continue;                      }                        var bar = new TradeBar                      {                          Time = DateTime.Parse(line[0])'                          Open = decimal.Parse(line[1])'                          High = decimal.Parse(line[2])'                          Low = decimal.Parse(line[3])'                          Close = decimal.Parse(line[4])'                          Value = decimal.Parse(line[7])'                          Volume = (long) (decimal.Parse(line[5]))'                          Symbol = symbol'                          DataType = MarketDataType.TradeBar'                          Period = Time.OneDay                      };                        yield return bar;                  }              }
Magic Number,QuantConnect.ToolBox.QuandlBitfinexDownloader,QuandlBitfinexDownloader,C:\repos\QuantConnect_Lean\ToolBox\QuandlBitfinexDownloader\QuandlBitfinexDownloader.cs,Get,The following statement contains a magic number: using (var cl = new WebClient())              {                  var data = cl.DownloadString(url);                    // skip the header line                  foreach (var item in data.Split('\n').Skip(1))                  {                      var line = item.Split(''');                      if (line.Length != 8)                      {                          continue;                      }                        var bar = new TradeBar                      {                          Time = DateTime.Parse(line[0])'                          Open = decimal.Parse(line[1])'                          High = decimal.Parse(line[2])'                          Low = decimal.Parse(line[3])'                          Close = decimal.Parse(line[4])'                          Value = decimal.Parse(line[7])'                          Volume = (long) (decimal.Parse(line[5]))'                          Symbol = symbol'                          DataType = MarketDataType.TradeBar'                          Period = Time.OneDay                      };                        yield return bar;                  }              }
Magic Number,QuantConnect.ToolBox.QuandlBitfinexDownloader,QuandlBitfinexDownloader,C:\repos\QuantConnect_Lean\ToolBox\QuandlBitfinexDownloader\QuandlBitfinexDownloader.cs,Get,The following statement contains a magic number: using (var cl = new WebClient())              {                  var data = cl.DownloadString(url);                    // skip the header line                  foreach (var item in data.Split('\n').Skip(1))                  {                      var line = item.Split(''');                      if (line.Length != 8)                      {                          continue;                      }                        var bar = new TradeBar                      {                          Time = DateTime.Parse(line[0])'                          Open = decimal.Parse(line[1])'                          High = decimal.Parse(line[2])'                          Low = decimal.Parse(line[3])'                          Close = decimal.Parse(line[4])'                          Value = decimal.Parse(line[7])'                          Volume = (long) (decimal.Parse(line[5]))'                          Symbol = symbol'                          DataType = MarketDataType.TradeBar'                          Period = Time.OneDay                      };                        yield return bar;                  }              }
Magic Number,QuantConnect.ToolBox.QuandlBitfinexDownloader,QuandlBitfinexDownloader,C:\repos\QuantConnect_Lean\ToolBox\QuandlBitfinexDownloader\QuandlBitfinexDownloader.cs,Get,The following statement contains a magic number: using (var cl = new WebClient())              {                  var data = cl.DownloadString(url);                    // skip the header line                  foreach (var item in data.Split('\n').Skip(1))                  {                      var line = item.Split(''');                      if (line.Length != 8)                      {                          continue;                      }                        var bar = new TradeBar                      {                          Time = DateTime.Parse(line[0])'                          Open = decimal.Parse(line[1])'                          High = decimal.Parse(line[2])'                          Low = decimal.Parse(line[3])'                          Close = decimal.Parse(line[4])'                          Value = decimal.Parse(line[7])'                          Volume = (long) (decimal.Parse(line[5]))'                          Symbol = symbol'                          DataType = MarketDataType.TradeBar'                          Period = Time.OneDay                      };                        yield return bar;                  }              }
Magic Number,QuantConnect.ToolBox.QuandlBitfinexDownloader,QuandlBitfinexDownloader,C:\repos\QuantConnect_Lean\ToolBox\QuandlBitfinexDownloader\QuandlBitfinexDownloader.cs,Get,The following statement contains a magic number: using (var cl = new WebClient())              {                  var data = cl.DownloadString(url);                    // skip the header line                  foreach (var item in data.Split('\n').Skip(1))                  {                      var line = item.Split(''');                      if (line.Length != 8)                      {                          continue;                      }                        var bar = new TradeBar                      {                          Time = DateTime.Parse(line[0])'                          Open = decimal.Parse(line[1])'                          High = decimal.Parse(line[2])'                          Low = decimal.Parse(line[3])'                          Close = decimal.Parse(line[4])'                          Value = decimal.Parse(line[7])'                          Volume = (long) (decimal.Parse(line[5]))'                          Symbol = symbol'                          DataType = MarketDataType.TradeBar'                          Period = Time.OneDay                      };                        yield return bar;                  }              }
Magic Number,QuantConnect.ToolBox.QuandlBitfinexDownloader,QuandlBitfinexDownloader,C:\repos\QuantConnect_Lean\ToolBox\QuandlBitfinexDownloader\QuandlBitfinexDownloader.cs,Get,The following statement contains a magic number: using (var cl = new WebClient())              {                  var data = cl.DownloadString(url);                    // skip the header line                  foreach (var item in data.Split('\n').Skip(1))                  {                      var line = item.Split(''');                      if (line.Length != 8)                      {                          continue;                      }                        var bar = new TradeBar                      {                          Time = DateTime.Parse(line[0])'                          Open = decimal.Parse(line[1])'                          High = decimal.Parse(line[2])'                          Low = decimal.Parse(line[3])'                          Close = decimal.Parse(line[4])'                          Value = decimal.Parse(line[7])'                          Volume = (long) (decimal.Parse(line[5]))'                          Symbol = symbol'                          DataType = MarketDataType.TradeBar'                          Period = Time.OneDay                      };                        yield return bar;                  }              }
Magic Number,QuantConnect.ToolBox.QuantQuoteConverter,Program,C:\repos\QuantConnect_Lean\ToolBox\QuantQuoteConverter\Program.cs,Main,The following statement contains a magic number: if (args.Length == 3)              {                  sourceDirectory = args[0];                  destinationDirectory = args[1];                  resolution = args[2];              }              else              {                  Console.WriteLine("1. Source QuantQuote source directory: ");                  sourceDirectory = (Console.ReadLine() ?? "");                  Console.WriteLine("2. Destination LEAN Data directory: ");                  destinationDirectory = (Console.ReadLine() ?? "");                  Console.WriteLine("3. Enter Resolution (minute/second/tick): ");                  resolution = (Console.ReadLine() ?? "");                  resolution = resolution.ToLower();              }
Magic Number,QuantConnect.ToolBox.QuantQuoteConverter,Program,C:\repos\QuantConnect_Lean\ToolBox\QuantQuoteConverter\Program.cs,Main,The following statement contains a magic number: if (args.Length == 3)              {                  sourceDirectory = args[0];                  destinationDirectory = args[1];                  resolution = args[2];              }              else              {                  Console.WriteLine("1. Source QuantQuote source directory: ");                  sourceDirectory = (Console.ReadLine() ?? "");                  Console.WriteLine("2. Destination LEAN Data directory: ");                  destinationDirectory = (Console.ReadLine() ?? "");                  Console.WriteLine("3. Enter Resolution (minute/second/tick): ");                  resolution = (Console.ReadLine() ?? "");                  resolution = resolution.ToLower();              }
Magic Number,QuantConnect.ToolBox.YahooDownloader,Historical,C:\repos\QuantConnect_Lean\ToolBox\YahooDownloader\Historical.cs,Parse,The following statement contains a magic number: try              {                  var rows = csvData.Split(Convert.ToChar(10));                    //row(0) was ignored because is column names                   //data is read from oldest to latest                  for (var i = 1; i <= rows.Length - 1; i++)                  {                        var row = rows[i];                      if (string.IsNullOrEmpty(row))                      {                          continue;                      }                        var cols = row.Split(''');                      if (cols[1] == "null")                      {                          continue;                      }                        var hp = new HistoryPrice                      {                          Date = DateTime.Parse(cols[0])'                          Open = Convert.ToDecimal(cols[1])'                          High = Convert.ToDecimal(cols[2])'                          Low = Convert.ToDecimal(cols[3])'                          Close = Convert.ToDecimal(cols[4])'                          AdjClose = Convert.ToDecimal(cols[5])                      };                        //fixed issue in some currencies quote (e.g: SGDAUD=X)                      if (cols[6] != "null")                      {                          hp.Volume = Convert.ToDecimal(cols[6]);                      }                        hps.Add(hp);                    }                }              catch (Exception ex)              {                  Debug.Print(ex.Message);              }
Magic Number,QuantConnect.ToolBox.YahooDownloader,Historical,C:\repos\QuantConnect_Lean\ToolBox\YahooDownloader\Historical.cs,Parse,The following statement contains a magic number: try              {                  var rows = csvData.Split(Convert.ToChar(10));                    //row(0) was ignored because is column names                   //data is read from oldest to latest                  for (var i = 1; i <= rows.Length - 1; i++)                  {                        var row = rows[i];                      if (string.IsNullOrEmpty(row))                      {                          continue;                      }                        var cols = row.Split(''');                      if (cols[1] == "null")                      {                          continue;                      }                        var hp = new HistoryPrice                      {                          Date = DateTime.Parse(cols[0])'                          Open = Convert.ToDecimal(cols[1])'                          High = Convert.ToDecimal(cols[2])'                          Low = Convert.ToDecimal(cols[3])'                          Close = Convert.ToDecimal(cols[4])'                          AdjClose = Convert.ToDecimal(cols[5])                      };                        //fixed issue in some currencies quote (e.g: SGDAUD=X)                      if (cols[6] != "null")                      {                          hp.Volume = Convert.ToDecimal(cols[6]);                      }                        hps.Add(hp);                    }                }              catch (Exception ex)              {                  Debug.Print(ex.Message);              }
Magic Number,QuantConnect.ToolBox.YahooDownloader,Historical,C:\repos\QuantConnect_Lean\ToolBox\YahooDownloader\Historical.cs,Parse,The following statement contains a magic number: try              {                  var rows = csvData.Split(Convert.ToChar(10));                    //row(0) was ignored because is column names                   //data is read from oldest to latest                  for (var i = 1; i <= rows.Length - 1; i++)                  {                        var row = rows[i];                      if (string.IsNullOrEmpty(row))                      {                          continue;                      }                        var cols = row.Split(''');                      if (cols[1] == "null")                      {                          continue;                      }                        var hp = new HistoryPrice                      {                          Date = DateTime.Parse(cols[0])'                          Open = Convert.ToDecimal(cols[1])'                          High = Convert.ToDecimal(cols[2])'                          Low = Convert.ToDecimal(cols[3])'                          Close = Convert.ToDecimal(cols[4])'                          AdjClose = Convert.ToDecimal(cols[5])                      };                        //fixed issue in some currencies quote (e.g: SGDAUD=X)                      if (cols[6] != "null")                      {                          hp.Volume = Convert.ToDecimal(cols[6]);                      }                        hps.Add(hp);                    }                }              catch (Exception ex)              {                  Debug.Print(ex.Message);              }
Magic Number,QuantConnect.ToolBox.YahooDownloader,Historical,C:\repos\QuantConnect_Lean\ToolBox\YahooDownloader\Historical.cs,Parse,The following statement contains a magic number: try              {                  var rows = csvData.Split(Convert.ToChar(10));                    //row(0) was ignored because is column names                   //data is read from oldest to latest                  for (var i = 1; i <= rows.Length - 1; i++)                  {                        var row = rows[i];                      if (string.IsNullOrEmpty(row))                      {                          continue;                      }                        var cols = row.Split(''');                      if (cols[1] == "null")                      {                          continue;                      }                        var hp = new HistoryPrice                      {                          Date = DateTime.Parse(cols[0])'                          Open = Convert.ToDecimal(cols[1])'                          High = Convert.ToDecimal(cols[2])'                          Low = Convert.ToDecimal(cols[3])'                          Close = Convert.ToDecimal(cols[4])'                          AdjClose = Convert.ToDecimal(cols[5])                      };                        //fixed issue in some currencies quote (e.g: SGDAUD=X)                      if (cols[6] != "null")                      {                          hp.Volume = Convert.ToDecimal(cols[6]);                      }                        hps.Add(hp);                    }                }              catch (Exception ex)              {                  Debug.Print(ex.Message);              }
Magic Number,QuantConnect.ToolBox.YahooDownloader,Historical,C:\repos\QuantConnect_Lean\ToolBox\YahooDownloader\Historical.cs,Parse,The following statement contains a magic number: try              {                  var rows = csvData.Split(Convert.ToChar(10));                    //row(0) was ignored because is column names                   //data is read from oldest to latest                  for (var i = 1; i <= rows.Length - 1; i++)                  {                        var row = rows[i];                      if (string.IsNullOrEmpty(row))                      {                          continue;                      }                        var cols = row.Split(''');                      if (cols[1] == "null")                      {                          continue;                      }                        var hp = new HistoryPrice                      {                          Date = DateTime.Parse(cols[0])'                          Open = Convert.ToDecimal(cols[1])'                          High = Convert.ToDecimal(cols[2])'                          Low = Convert.ToDecimal(cols[3])'                          Close = Convert.ToDecimal(cols[4])'                          AdjClose = Convert.ToDecimal(cols[5])                      };                        //fixed issue in some currencies quote (e.g: SGDAUD=X)                      if (cols[6] != "null")                      {                          hp.Volume = Convert.ToDecimal(cols[6]);                      }                        hps.Add(hp);                    }                }              catch (Exception ex)              {                  Debug.Print(ex.Message);              }
Magic Number,QuantConnect.ToolBox.YahooDownloader,Historical,C:\repos\QuantConnect_Lean\ToolBox\YahooDownloader\Historical.cs,Parse,The following statement contains a magic number: try              {                  var rows = csvData.Split(Convert.ToChar(10));                    //row(0) was ignored because is column names                   //data is read from oldest to latest                  for (var i = 1; i <= rows.Length - 1; i++)                  {                        var row = rows[i];                      if (string.IsNullOrEmpty(row))                      {                          continue;                      }                        var cols = row.Split(''');                      if (cols[1] == "null")                      {                          continue;                      }                        var hp = new HistoryPrice                      {                          Date = DateTime.Parse(cols[0])'                          Open = Convert.ToDecimal(cols[1])'                          High = Convert.ToDecimal(cols[2])'                          Low = Convert.ToDecimal(cols[3])'                          Close = Convert.ToDecimal(cols[4])'                          AdjClose = Convert.ToDecimal(cols[5])                      };                        //fixed issue in some currencies quote (e.g: SGDAUD=X)                      if (cols[6] != "null")                      {                          hp.Volume = Convert.ToDecimal(cols[6]);                      }                        hps.Add(hp);                    }                }              catch (Exception ex)              {                  Debug.Print(ex.Message);              }
Magic Number,QuantConnect.ToolBox.YahooDownloader,Historical,C:\repos\QuantConnect_Lean\ToolBox\YahooDownloader\Historical.cs,Parse,The following statement contains a magic number: try              {                  var rows = csvData.Split(Convert.ToChar(10));                    //row(0) was ignored because is column names                   //data is read from oldest to latest                  for (var i = 1; i <= rows.Length - 1; i++)                  {                        var row = rows[i];                      if (string.IsNullOrEmpty(row))                      {                          continue;                      }                        var cols = row.Split(''');                      if (cols[1] == "null")                      {                          continue;                      }                        var hp = new HistoryPrice                      {                          Date = DateTime.Parse(cols[0])'                          Open = Convert.ToDecimal(cols[1])'                          High = Convert.ToDecimal(cols[2])'                          Low = Convert.ToDecimal(cols[3])'                          Close = Convert.ToDecimal(cols[4])'                          AdjClose = Convert.ToDecimal(cols[5])                      };                        //fixed issue in some currencies quote (e.g: SGDAUD=X)                      if (cols[6] != "null")                      {                          hp.Volume = Convert.ToDecimal(cols[6]);                      }                        hps.Add(hp);                    }                }              catch (Exception ex)              {                  Debug.Print(ex.Message);              }
Magic Number,QuantConnect.ToolBox.YahooDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\YahooDownloader\Program.cs,Main,The following statement contains a magic number: if (args.Length != 4)              {                  Console.WriteLine("Usage: YahooDownloader SYMBOLS RESOLUTION FROMDATE TODATE");                  Console.WriteLine("SYMBOLS = eg SPY'AAPL");                  Console.WriteLine("RESOLUTION = Daily");                  Console.WriteLine("FROMDATE = yyyymmdd");                  Console.WriteLine("TODATE = yyyymmdd");                  Environment.Exit(1);              }
Magic Number,QuantConnect.ToolBox.YahooDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\YahooDownloader\Program.cs,Main,The following statement contains a magic number: try              {                  // Load settings from command line                  var symbols = args[0].Split(''');                  var resolution = (Resolution)Enum.Parse(typeof(Resolution)' args[1]);                  var startDate = DateTime.ParseExact(args[2]' "yyyyMMdd"' CultureInfo.InvariantCulture);                  var endDate = DateTime.ParseExact(args[3]' "yyyyMMdd"' CultureInfo.InvariantCulture);                    // Load settings from config.json                  var dataDirectory = Config.Get("data-directory"' "../../../Data");                    // Create an instance of the downloader                  const string market = Market.USA;                  var downloader = new YahooDataDownloader();                    foreach (var symbol in symbols)                  {                      // Download the data                      var symbolObject = Symbol.Create(symbol' SecurityType.Equity' market);                      var data = downloader.Get(symbolObject' resolution' startDate' endDate);                        // Save the data                      var writer = new LeanDataWriter(resolution' symbolObject' dataDirectory);                      writer.Write(data);                  }              }              catch (Exception err)              {                  Log.Error(err);              }
Magic Number,QuantConnect.ToolBox.YahooDownloader,Program,C:\repos\QuantConnect_Lean\ToolBox\YahooDownloader\Program.cs,Main,The following statement contains a magic number: try              {                  // Load settings from command line                  var symbols = args[0].Split(''');                  var resolution = (Resolution)Enum.Parse(typeof(Resolution)' args[1]);                  var startDate = DateTime.ParseExact(args[2]' "yyyyMMdd"' CultureInfo.InvariantCulture);                  var endDate = DateTime.ParseExact(args[3]' "yyyyMMdd"' CultureInfo.InvariantCulture);                    // Load settings from config.json                  var dataDirectory = Config.Get("data-directory"' "../../../Data");                    // Create an instance of the downloader                  const string market = Market.USA;                  var downloader = new YahooDataDownloader();                    foreach (var symbol in symbols)                  {                      // Download the data                      var symbolObject = Symbol.Create(symbol' SecurityType.Equity' market);                      var data = downloader.Get(symbolObject' resolution' startDate' endDate);                        // Save the data                      var writer = new LeanDataWriter(resolution' symbolObject' dataDirectory);                      writer.Write(data);                  }              }              catch (Exception err)              {                  Log.Error(err);              }
Magic Number,QuantConnect.ToolBox.YahooDownloader,Token,C:\repos\QuantConnect_Lean\ToolBox\YahooDownloader\Token.cs,Refresh,The following statement contains a magic number: try              {                  Cookie = "";                  Crumb = "";                    var urlScrape = "https://finance.yahoo.com/quote/{0}?p={0}";                    var url = string.Format(urlScrape' symbol);                    var request = (HttpWebRequest)WebRequest.Create(url);                    request.CookieContainer = new CookieContainer();                  request.Method = "GET";                    using (var response = (HttpWebResponse)request.GetResponse())                  {                      var cookie = response.GetResponseHeader("Set-Cookie").Split(';')[0];                        var html = "";                        using (var stream = response.GetResponseStream())                      {                          if (stream != null)                          {                              html = new StreamReader(stream).ReadToEnd();                          }                      }                        if (html.Length < 5000)                      {                          return false;                      }                      var crumb = GetCrumb(html);                        if (crumb != null)                      {                          Cookie = cookie;                          Crumb = crumb;                          Log.Debug(string.Format("Crumb: '{0}'' Cookie: '{1}'"' crumb' cookie));                          return true;                      }                    }                }              catch (Exception ex)              {                  Log.Error(ex.Message);              }
Duplicate Code,QuantConnect.ToolBox.KrakenDownloader,KrakenDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\KrakenDataDownloader\KrakenDataDownloader.cs,Get,The method contains a code clone-set at the following line numbers (starting from the method definition): ((25' 53)' (73' 101))
Missing Default,QuantConnect.ToolBox,FxcmVolumeAuxiliaryMethods,C:\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeAuxiliaryMethods.cs,GetLastAvailableDateOfData,The following switch statement is missing a default case: switch (resolution)              {                  case Resolution.Daily:                  case Resolution.Hour:                      var expectedFilePath = Path.Combine(folderPath'                                                          String.Format("{0}_volume.zip"' symbol.Value.ToLower()));                      if (File.Exists(expectedFilePath))                      {                          var lastStrDate = ReadZipFileData(expectedFilePath).Last()     // last observation                                                                                                    .First()    // first string (date)                                                                             .Substring(startIndex: 0' length: 8);                          lastAvailableDate = DateTime.ParseExact(lastStrDate' DateFormat.EightCharacter' CultureInfo.InvariantCulture);                      }                      break;                  case Resolution.Minute:                      var lastFileDate = Directory                          .GetFiles(folderPath' "*_volume.zip")                          .OrderBy(f => f)                          .LastOrDefault();                      if (lastFileDate != null)                      {                          lastFileDate = Path.GetFileNameWithoutExtension(lastFileDate)                                             .Substring(startIndex: 0' length: 8);                          lastAvailableDate = DateTime.ParseExact(lastFileDate' DateFormat.EightCharacter' CultureInfo.InvariantCulture);                      }                      break;              }
Missing Default,QuantConnect.ToolBox,FxcmVolumeDownloader,C:\repos\QuantConnect_Lean\ToolBox\FxcmVolumeDownloader\FxcmVolumeDownloader.cs,RequestData,The following switch statement is missing a default case: switch (resolution)              {                  case Resolution.Minute:                  case Resolution.Hour:                      startDate = startUtc.ToString("yyyyMMdd") + "0000";                      break;                    case Resolution.Daily:                      startDate = startUtc.AddDays(value: 1).ToString("yyyyMMdd") + "2100";                      break;              }
Missing Default,QuantConnect.ToolBox,DataProcessor,C:\repos\QuantConnect_Lean\ToolBox\IDataProcessor.cs,CreateConsolidator,The following switch statement is missing a default case: switch (securityType)              {                  case SecurityType.Base:                  case SecurityType.Equity:                  case SecurityType.Cfd:                  case SecurityType.Forex:                      return new TickConsolidator(resolution.ToTimeSpan());                    case SecurityType.Option:                      if (tickType == TickType.Trade)                      {                          return sourceIsTick                              ? new TickConsolidator(resolution.ToTimeSpan())                              : (IDataConsolidator) new TradeBarConsolidator(resolution.ToTimeSpan());                      }                      if (tickType == TickType.Quote)                      {                          return sourceIsTick                              ? new TickQuoteBarConsolidator(resolution.ToTimeSpan())                              : (IDataConsolidator) new QuoteBarConsolidator(resolution.ToTimeSpan());                      }                      break;              }
Missing Default,QuantConnect.ToolBox,LeanDataWriter,C:\repos\QuantConnect_Lean\ToolBox\LeanDataWriter.cs,Write,The following switch statement is missing a default case: switch (_resolution)              {                  case Resolution.Daily:                  case Resolution.Hour:                      WriteDailyOrHour(source);                      break;                    case Resolution.Minute:                  case Resolution.Second:                  case Resolution.Tick:                      WriteMinuteOrSecondOrTick(source);                      break;              }
Missing Default,QuantConnect.ToolBox,LeanParser,C:\repos\QuantConnect_Lean\ToolBox\LeanParser.cs,GetDataType,The following switch statement is missing a default case: switch (securityType)              {                  case SecurityType.Base:                  case SecurityType.Equity:                      return typeof (TradeBar);                    case SecurityType.Cfd:                  case SecurityType.Forex:                  case SecurityType.Crypto:                      return typeof (QuoteBar);                    case SecurityType.Option:                      if (tickType == TickType.Trade) return typeof (TradeBar);                      if (tickType == TickType.Quote) return typeof (QuoteBar);                      break;              }
Missing Default,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesProcessor,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesProcessor.cs,AlgoSeekFuturesProcessor,The following switch statement is missing a default case: switch (tickType)                  {                      case TickType.Trade:                          _consolidator = new TickConsolidator(resolution.ToTimeSpan());                          break;                      case TickType.Quote:                          _consolidator = new TickQuoteBarConsolidator(resolution.ToTimeSpan());                          break;                      case TickType.OpenInterest:                          _consolidator = new OpenInterestConsolidator(resolution.ToTimeSpan());                          break;                  }
Missing Default,QuantConnect.ToolBox.AlgoSeekFuturesConverter,AlgoSeekFuturesReader,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekFuturesConverter\AlgoSeekFuturesReader.cs,Parse,The following switch statement is missing a default case: switch (tickType)                  {                      case TickType.Quote:                            var tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = price                          };                            if (isAsk)                          {                              tick.AskPrice = price;                              tick.AskSize = quantity;                          }                          else                          {                              tick.BidPrice = price;                              tick.BidSize = quantity;                          }                          return tick;                        case TickType.Trade:                            tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = price'                              Quantity = quantity                          };                          return tick;                        case TickType.OpenInterest:                            tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = quantity                          };                          return tick;                  }
Missing Default,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsProcessor,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsProcessor.cs,AlgoSeekOptionsProcessor,The following switch statement is missing a default case: switch (tickType)              {                  case TickType.Trade:                      _consolidator = new TickConsolidator(resolution.ToTimeSpan());                      break;                  case TickType.Quote:                      _consolidator = new TickQuoteBarConsolidator(resolution.ToTimeSpan());                      break;                  case TickType.OpenInterest:                      _consolidator = new OpenInterestConsolidator(resolution.ToTimeSpan());                      break;              }
Missing Default,QuantConnect.ToolBox.AlgoSeekOptionsConverter,AlgoSeekOptionsReader,C:\repos\QuantConnect_Lean\ToolBox\AlgoSeekOptionsConverter\AlgoSeekOptionsReader.cs,Parse,The following switch statement is missing a default case: switch (tickType)                  {                      case TickType.Quote:                            var tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = price                          };                            if (isAsk)                          {                              tick.AskPrice = price;                              tick.AskSize = quantity;                          }                          else                          {                              tick.BidPrice = price;                              tick.BidSize = quantity;                          }                            return tick;                        case TickType.Trade:                            tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = price'                              Quantity = quantity                          };                            return tick;                        case TickType.OpenInterest:                            tick = new Tick                          {                              Symbol = symbol'                              Time = time'                              TickType = tickType'                              Exchange = Market.USA'                              Value = quantity                          };                            return tick;                  }
Missing Default,QuantConnect.ToolBox.DukascopyDownloader,DukascopyDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\DukascopyDownloader\DukascopyDataDownloader.cs,Get,The following switch statement is missing a default case: switch (resolution)                  {                      case Resolution.Tick:                          foreach (var tick in ticks)                          {                              yield return new Tick(tick.Time' symbol' tick.BidPrice' tick.AskPrice);                          }                          break;                        case Resolution.Second:                      case Resolution.Minute:                      case Resolution.Hour:                      case Resolution.Daily:                          foreach (var bar in AggregateTicks(symbol' ticks' resolution.ToTimeSpan()))                          {                              yield return bar;                          }                          break;                  }
Missing Default,QuantConnect.ToolBox.IQFeed,IQLookupTableClient,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQLookupTableClient.cs,OnTextLineEvent,The following switch statement is missing a default case: switch (lute)              {                  case LookupType.REQ_TAB_MKC:                      OnLookupEvent(new LookupTableMarketCenterEventArgs(e.textLine));                      return;                  case LookupType.REQ_TAB_MKT:                      OnLookupEvent(new LookupTableMarketEventArgs(e.textLine));                      return;                  case LookupType.REQ_TAB_NAC:                      OnLookupEvent(new LookupTableNaicEventArgs(e.textLine));                      return;                  case LookupType.REQ_TAB_SEC:                      OnLookupEvent(new LookupTableSecurityTypeEventArgs(e.textLine));                      return;                  case LookupType.REQ_TAB_SIC:                      OnLookupEvent(new LookupTableSicEventArgs(e.textLine));                      return;              }
Missing Default,QuantConnect.ToolBox.IQFeed,IQSocket,C:\repos\QuantConnect_Lean\ToolBox\IQFeed\IQ\IQSocket.cs,GetPort,The following switch statement is missing a default case: switch (portType)              {                  case PortType.Level1:                      port = 5009;                      break;                  case PortType.Lookup:                      port = 9100;                      break;                  case PortType.Level2:                      port = 9200;                      break;                  case PortType.Admin:                      port = 9300;                      break;              }
Missing Default,QuantConnect.ToolBox.OandaDownloader,OandaDataDownloader,C:\repos\QuantConnect_Lean\ToolBox\OandaDownloader\OandaDataDownloader.cs,Get,The following switch statement is missing a default case: switch (resolution)              {                  case Resolution.Second:                  case Resolution.Minute:                  case Resolution.Hour:                  case Resolution.Daily:                      foreach (var bar in AggregateBars(symbol' barsTotalInPeriod' resolution.ToTimeSpan()))                      {                          yield return bar;                      }                      break;              }
