Implementation smell,Namespace,Class,File,Method,Description
Long Statement,QuantConnect.Queues,JobQueue,C:\repos\QuantConnect_Lean\Queues\JobQueue.cs,NextJob,The length of the statement  "                    var brokerageFactory = Composer.Instance.Single<IBrokerageFactory>(factory => factory.BrokerageType.MatchesTypeName(liveJob.Brokerage)); " is 136.
Magic Number,QuantConnect.Queues,JobQueue,C:\repos\QuantConnect_Lean\Queues\JobQueue.cs,NextJob,The following statement contains a magic number: var controls = new Controls()              {                  MinuteLimit = Config.GetInt("symbol-minute-limit"' 10000)'                  SecondLimit = Config.GetInt("symbol-second-limit"' 10000)'                  TickLimit = Config.GetInt("symbol-tick-limit"' 10000)'                  RamAllocation = int.MaxValue              };
Magic Number,QuantConnect.Queues,JobQueue,C:\repos\QuantConnect_Lean\Queues\JobQueue.cs,NextJob,The following statement contains a magic number: var controls = new Controls()              {                  MinuteLimit = Config.GetInt("symbol-minute-limit"' 10000)'                  SecondLimit = Config.GetInt("symbol-second-limit"' 10000)'                  TickLimit = Config.GetInt("symbol-tick-limit"' 10000)'                  RamAllocation = int.MaxValue              };
Magic Number,QuantConnect.Queues,JobQueue,C:\repos\QuantConnect_Lean\Queues\JobQueue.cs,NextJob,The following statement contains a magic number: var controls = new Controls()              {                  MinuteLimit = Config.GetInt("symbol-minute-limit"' 10000)'                  SecondLimit = Config.GetInt("symbol-second-limit"' 10000)'                  TickLimit = Config.GetInt("symbol-tick-limit"' 10000)'                  RamAllocation = int.MaxValue              };
Magic Number,QuantConnect.Queues,JobQueue,C:\repos\QuantConnect_Lean\Queues\JobQueue.cs,NextJob,The following statement contains a magic number: var backtestJob = new BacktestNodePacket(0' 0' ""' new byte[] {}' 10000' "local")              {                  Type = PacketType.BacktestNode'                  Algorithm = File.ReadAllBytes(AlgorithmLocation)'                  HistoryProvider = Config.Get("history-provider"' DefaultHistoryProvider)'                  Channel = AccessToken'                  UserId = UserId'                  ProjectId = ProjectId'                  Version = Globals.Version'                  BacktestId = AlgorithmTypeName'                  Language = Language'                  Parameters = parameters'                  Controls = controls              };
