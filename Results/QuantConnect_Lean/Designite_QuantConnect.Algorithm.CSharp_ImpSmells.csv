Implementation smell,Namespace,Class,File,Method,Description
Long Method,QuantConnect.Algorithm.CSharp,BasicTemplateMultiAssetAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateMultiAssetAlgorithm.cs,OnData,The method has 114 lines of code.
Long Method,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The method has 124 lines of code.
Complex Method,QuantConnect.Algorithm.CSharp,BasicTemplateMultiAssetAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateMultiAssetAlgorithm.cs,OnData,Cyclomatic complexity of the method is 16
Complex Method,QuantConnect.Algorithm.CSharp,OptionOpenInterestRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionOpenInterestRegressionAlgorithm.cs,OnData,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Algorithm.CSharp,OptionSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionSplitRegressionAlgorithm.cs,OnData,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Algorithm.CSharp,OpeningBreakoutAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OpeningBreakoutAlgorithm.cs,OnData,Cyclomatic complexity of the method is 8
Long Identifier,QuantConnect.Algorithm.CSharp,OpeningBreakoutAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OpeningBreakoutAlgorithm.cs,,The length of the parameter PercentProfitStartPsarTrailingStop is 34.
Long Identifier,QuantConnect.Algorithm.CSharp,OpeningBreakoutAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OpeningBreakoutAlgorithm.cs,,The length of the parameter MaximumPorfolioRiskPercentPerPosition is 37.
Long Statement,QuantConnect.Algorithm.CSharp,BasicTemplateMultiAssetAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateMultiAssetAlgorithm.cs,OnData,The length of the statement  "                Log(String.Format("P/L:{0:0.00}' Fees:{1:0.00}' Profit:{2:0.00}' Eq:{3:0.00}' Holdings:{4:0.00}' Vol: {5:0.00}' Margin: {6:0.00}"' " is 130.
Long Statement,QuantConnect.Algorithm.CSharp,BasicTemplateMultiAssetAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateMultiAssetAlgorithm.cs,OnData,The length of the statement  "                    Log(String.Format(" - {0}' Avg Prc:{1:0.00}' Qty:{2:0.00}' Mkt Prc:{3:0.00}' Mkt Val:{4:0.00}' Unreal P/L: {5:0.00}' Fees: {6:0.00}' Vol: {7:0.00}"' " is 148.
Long Statement,QuantConnect.Algorithm.CSharp,BasicTemplateMultiAssetAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateMultiAssetAlgorithm.cs,OnData,The length of the statement  "                        Log(String.Format(@"{0} {1}'B={2} A={3} L={4} OI={5} σ={6:0.00} NPV={7:0.00} Δ={8:0.00} Γ={9:0.00} ν={10:0.00} ρ={11:0.00} Θ={12:0.00} IV={13:0.00}"' " is 149.
Long Statement,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsHistoryAlgorithm.cs,Initialize,The length of the statement  "            // this test opens position in the first day of trading' lives through stock split (7 for 1)' and closes adjusted position on the second day " is 140.
Long Statement,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsHistoryAlgorithm.cs,OnData,The length of the statement  "                        Log(String.Format(@"{0}'Bid={1} Ask={2} Last={3} OI={4} σ={5:0.000} NPV={6:0.000} Δ={7:0.000} Γ={8:0.000} ν={9:0.000} ρ={10:0.00} Θ={11:0.00} IV={12:0.000}"' " is 157.
Long Statement,QuantConnect.Algorithm.CSharp,OptionChainConsistencyRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionChainConsistencyRegressionAlgorithm.cs,OnData,The length of the statement  "                            // inconsistency found: option chains contains contract information that is not available in securities manager and not available for trading " is 141.
Long Statement,QuantConnect.Algorithm.CSharp,OptionChainConsistencyRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionChainConsistencyRegressionAlgorithm.cs,OnData,The length of the statement  "                            throw new Exception(string.Format("inconsistency found: option chains contains contract {0} that is not available in securities manager and not available for trading"' o.Symbol.Value)); " is 185.
Long Statement,QuantConnect.Algorithm.CSharp,OptionOpenInterestRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionOpenInterestRegressionAlgorithm.cs,Initialize,The length of the statement  "            // this test opens position in the first day of trading' lives through stock split (7 for 1)' and closes adjusted position on the second day " is 140.
Long Statement,QuantConnect.Algorithm.CSharp,OptionRenameRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionRenameRegressionAlgorithm.cs,Initialize,The length of the statement  "            // this test opens position in the first day of trading' lives through stock rename (NWSA->FOXA)' dividends' and closes adjusted position on the third day " is 154.
Long Statement,QuantConnect.Algorithm.CSharp,OptionRenameRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionRenameRegressionAlgorithm.cs,OnData,The length of the statement  "                                throw new Exception("Regression test failed: current ask price was not loaded from NWSA backtest file and is not $1.1"); " is 120.
Long Statement,QuantConnect.Algorithm.CSharp,OptionSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionSplitRegressionAlgorithm.cs,Initialize,The length of the statement  "            // this test opens position in the first day of trading' lives through stock split (7 for 1)' and closes adjusted position on the second day " is 140.
Long Statement,QuantConnect.Algorithm.CSharp,OptionSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionSplitRegressionAlgorithm.cs,OnData,The length of the statement  "                var holdings = Portfolio.Securities.Where(x => x.Value.Holdings.AbsoluteQuantity != 0).First().Value.Holdings.AbsoluteQuantity; " is 127.
Long Statement,QuantConnect.Algorithm.CSharp,NyseTopGainers,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataUniverseAlgorithm.cs,GetSource,The length of the statement  "                    return new SubscriptionDataSource(@"http://www.wsj.com/mdc/public/page/2_3021-gainnyse-gainer.html"' SubscriptionTransportMedium.RemoteFile); " is 141.
Long Statement,QuantConnect.Algorithm.CSharp,NyseTopGainers,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataUniverseAlgorithm.cs,GetSource,The length of the statement  "                return new SubscriptionDataSource(@"https://www.dropbox.com/s/vrn3p38qberw3df/nyse-gainers.csv?dl=1"' SubscriptionTransportMedium.RemoteFile); " is 142.
Long Statement,QuantConnect.Algorithm.CSharp,CustomSecurityInitializerAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomSecurityInitializerAlgorithm.cs,Initialize,The length of the statement  "            SetSecurityInitializer(new CustomSecurityInitializer(BrokerageModel' new FuncSecuritySeeder(GetLastKnownPrice)' DataNormalizationMode.Raw)); " is 140.
Long Statement,QuantConnect.Algorithm.CSharp,MinimumAccountBalanceBrokerageModel,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BrokerageModelAlgorithm.cs,CanSubmitOrder,The length of the statement  "                        string.Format("Account must maintain a minimum of ${0} USD at all times. Order ID: {1}"' _minimumAccountBalance' order.Id) " is 122.
Long Statement,QuantConnect.Algorithm.CSharp,CAPE,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,GetSource,The length of the statement  "            return new SubscriptionDataSource("https://www.dropbox.com/s/ggt6blmib54q36e/CAPE.csv?dl=1"' SubscriptionTransportMedium.RemoteFile); " is 133.
Long Statement,QuantConnect.Algorithm.CSharp,CAPE,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,Reader,The length of the statement  "                //2014.06  1947.09  37.38   103.12   238.343    2014.37          2.6           1923.95     36.94        101.89     25.55 " is 120.
Long Statement,QuantConnect.Algorithm.CSharp,CustomDataNiftyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataNIFTYAlgorithm.cs,OnData,The length of the statement  "                        Debug("LONG " + code + " Time: " + Time.ToShortDateString() + " Quantity: " + quantity + " Portfolio:" + Portfolio["NIFTY"].Quantity + " Nifty: " + data.Close + " Buying Power: " + Portfolio.TotalPortfolioValue); " is 212.
Long Statement,QuantConnect.Algorithm.CSharp,CustomDataNiftyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataNIFTYAlgorithm.cs,OnData,The length of the statement  "                        Debug("SHORT " + code + " Time: " + Time.ToShortDateString() + " Quantity: " + quantity + " Portfolio:" + Portfolio["NIFTY"].Quantity + " Nifty: " + data.Close + " Buying Power: " + Portfolio.TotalPortfolioValue); " is 213.
Long Statement,QuantConnect.Algorithm.CSharp,Nifty,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataNIFTYAlgorithm.cs,GetSource,The length of the statement  "            return new SubscriptionDataSource("https://www.dropbox.com/s/rsmg44jr6wexn2h/CNXNIFTY.csv?dl=1"' SubscriptionTransportMedium.RemoteFile); " is 137.
Long Statement,QuantConnect.Algorithm.CSharp,DollarRupee,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataNIFTYAlgorithm.cs,GetSource,The length of the statement  "            return new SubscriptionDataSource("https://www.dropbox.com/s/m6ecmkg9aijwzy2/USDINR.csv?dl=1"' SubscriptionTransportMedium.RemoteFile); " is 135.
Long Statement,QuantConnect.Algorithm.CSharp,DataConsolidationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DataConsolidationAlgorithm.cs,Initialize,The length of the statement  "            three_oneDayBar.DataConsolidated += (sender' consolidated) => ThreeDayBarConsolidatedHandler(sender' (TradeBar) consolidated); " is 126.
Long Statement,QuantConnect.Algorithm.CSharp,DividendAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DividendAlgorithm.cs,OnData,The length of the statement  "            Debug(string.Format("{0} >> DIVIDEND >> {1} - {2} - {3} - {4}"' dividend.Time.ToString("o")' dividend.Symbol' dividend.Distribution.ToString("C")' Portfolio.Cash' Portfolio["MSFT"].Price.ToString("C"))); " is 203.
Long Statement,QuantConnect.Algorithm.CSharp,DividendAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DividendAlgorithm.cs,OnData,The length of the statement  "            Debug(string.Format("{0} >> SPLIT >> {1} - {2} - {3} - {4}"' split.Time.ToString("o")' split.Symbol' split.SplitFactor' Portfolio.Cash' Portfolio["MSFT"].Quantity)); " is 165.
Long Statement,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The length of the statement  "            //Set up default Indicators' these indicators are defined on the Value property of incoming data (except ATR and AROON which use the full TradeBar object) " is 154.
Long Statement,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The length of the statement  "                MIN = MIN(_symbol' 14' Resolution.Daily)' // by default if the symbol is a tradebar type then it will be the min of the low property " is 132.
Long Statement,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The length of the statement  "                MAX = MAX(_symbol' 14' Resolution.Daily)  // by default if the symbol is a tradebar type then it will be the max of the high property " is 133.
Long Statement,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The length of the statement  "            // Here we're going to define indicators using 'selector' functions. These 'selector' functions will define what data gets sent into the indicator " is 146.
Long Statement,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The length of the statement  "            //  These functions have a signature like the following: decimal Selector(BaseData baseData)' and can be defined like: baseData => baseData.Value " is 145.
Long Statement,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The length of the statement  "                // ATR and AROON are special in that they accept a TradeBar instance instead of a decimal' we could easily project and/or transform the input TradeBar " is 150.
Long Statement,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The length of the statement  "                // before it gets sent to the ATR/AROON indicator' here we use a function that will multiply the input trade bar by a factor of two " is 131.
Long Statement,QuantConnect.Algorithm.CSharp,Bitcoin,C:\repos\QuantConnect_Lean\Algorithm.CSharp\LiveFeaturesAlgorithm.cs,GetSource,The length of the statement  "            return new SubscriptionDataSource("http://www.quandl.com/api/v1/datasets/BCHARTS/BITSTAMPUSD.csv?sort_order=asc"' SubscriptionTransportMedium.RemoteFile); " is 154.
Long Statement,QuantConnect.Algorithm.CSharp,Bitcoin,C:\repos\QuantConnect_Lean\Algorithm.CSharp\LiveFeaturesAlgorithm.cs,Reader,The length of the statement  "                //{"high": "441.00"' "last": "421.86"' "timestamp": "1411606877"' "bid": "421.96"' "vwap": "428.58"' "volume": "14120.40683975"' "low": "418.83"' "ask": "421.99"} " is 162.
Long Statement,QuantConnect.Algorithm.CSharp,OpeningBreakoutAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OpeningBreakoutAlgorithm.cs,ScanForEntrance,The length of the statement  "            //var shares = (int) (MaximumLeverage*MaximumPorfolioRiskPercentPerPosition*Portfolio.TotalPortfolioValue/(0.4m*ATR14)); " is 120.
Long Statement,QuantConnect.Algorithm.CSharp,MarginCallEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MarginCallEventsAlgorithm.cs,OnMarginCall,The length of the statement  "                requests.Add(new SubmitOrderRequest(order.OrderType' order.SecurityType' order.Symbol' newQuantity' order.StopPrice' order.LimitPrice' Time' "OnMarginCall")); " is 158.
Long Statement,QuantConnect.Algorithm.CSharp,MarketOnOpenOnCloseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MarketOnOpenOnCloseAlgorithm.cs,OnData,The length of the statement  "            if (!_submittedMarketOnCloseToday && _security.Exchange.ExchangeOpen) // once the exchange opens submit a market on close order " is 127.
Long Statement,QuantConnect.Algorithm.CSharp,MovingAverageCrossAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MovingAverageCrossAlgorithm.cs,Initialize,The length of the statement  "            _ribbon = Enumerable.Range(0' ribbonCount).Select(x => SMA(_symbol' (x + 1)*ribbonInterval' Resolution.Daily)).ToArray(); " is 121.
Long Statement,QuantConnect.Algorithm.CSharp,MultipleSymbolConsolidationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MultipleSymbolConsolidationAlgorithm.cs,Initialize,The length of the statement  "                symbolData.SMA = new SimpleMovingAverage(CreateIndicatorName(symbolData.Symbol' "SMA" + SimpleMovingAveragePeriod' Resolution.Minute)' SimpleMovingAveragePeriod); " is 162.
Long Statement,QuantConnect.Algorithm.CSharp,RenkoConsolidatorAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\RenkoConsolidatorAlgorithm.cs,Initialize,The length of the statement  "            var renko7bar = new RenkoConsolidator<TradeBar>(2.5m' x => (2 * x.Open + x.High + x.Low + 3 * x.Close) / 7m' x => x.Volume); " is 124.
Long Statement,QuantConnect.Algorithm.CSharp,UpdateOrderLiveTestAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UpdateOrderLiveTestAlgorithm.cs,OnData,The length of the statement  "                var request = new SubmitOrderRequest(orderType' SecType' Securities[_symbol].Symbol' _quantity' stopPrice' limitPrice' Time' orderType.ToString()); " is 147.
Long Statement,QuantConnect.Algorithm.CSharp,UpdateOrderLiveTestAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UpdateOrderLiveTestAlgorithm.cs,OnOrderEvent,The length of the statement  "                Log("FILLED:: " + Transactions.GetOrderById(orderEvent.OrderId) + " FILL PRICE:: " + orderEvent.FillPrice.SmartRounding()); " is 123.
Long Statement,QuantConnect.Algorithm.CSharp,UpdateOrderRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UpdateOrderRegressionAlgorithm.cs,OnData,The length of the statement  "                var request = new SubmitOrderRequest(orderType' SecType' symbol' Quantity' stopPrice' limitPrice' Time' orderType.ToString()); " is 126.
Long Statement,QuantConnect.Algorithm.CSharp,UpdateOrderRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UpdateOrderRegressionAlgorithm.cs,OnOrderEvent,The length of the statement  "                Log("FILLED:: " + Transactions.GetOrderById(orderEvent.OrderId) + " FILL PRICE:: " + orderEvent.FillPrice.SmartRounding()); " is 123.
Complex Conditional,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,OnData,The conditional expression  "Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 70                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31"  is complex.
Complex Conditional,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,OnData,The conditional expression  "_rsiDic[stock] > 70 && Securities[stock].Holdings.Quantity > 0                                  && Time.Hour == 9 && Time.Minute == 31"  is complex.
Complex Conditional,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,OnData,The conditional expression  "Securities[stock].Holdings.Quantity > 0 && _rsiDic[stock] > 30                              && Time.Hour == 9 && Time.Minute == 31"  is complex.
Complex Conditional,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,OnData,The conditional expression  "Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 30                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31"  is complex.
Empty Catch Block,QuantConnect.Algorithm.CSharp,CAPE,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,Reader,The method has an empty catch block.
Empty Catch Block,QuantConnect.Algorithm.CSharp,Nifty,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataNIFTYAlgorithm.cs,Reader,The method has an empty catch block.
Empty Catch Block,QuantConnect.Algorithm.CSharp,DollarRupee,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataNIFTYAlgorithm.cs,Reader,The method has an empty catch block.
Empty Catch Block,QuantConnect.Algorithm.CSharp,Bitcoin,C:\repos\QuantConnect_Lean\Algorithm.CSharp\LiveFeaturesAlgorithm.cs,Reader,The method has an empty catch block.
Empty Catch Block,QuantConnect.Algorithm.CSharp,Bitcoin,C:\repos\QuantConnect_Lean\Algorithm.CSharp\LiveFeaturesAlgorithm.cs,Reader,The method has an empty catch block.
Magic Number,QuantConnect.Algorithm.CSharp,AddRemoveSecurityRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\AddRemoveSecurityRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,AddRemoveSecurityRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\AddRemoveSecurityRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,AddRemoveSecurityRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\AddRemoveSecurityRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,AddRemoveSecurityRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\AddRemoveSecurityRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,AddRemoveSecurityRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\AddRemoveSecurityRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,AddRemoveSecurityRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\AddRemoveSecurityRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,AddRemoveSecurityRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\AddRemoveSecurityRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,AddRemoveSecurityRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\AddRemoveSecurityRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  SetHoldings(_spy' 0.5);                  lastAction = Time;              }
Magic Number,QuantConnect.Algorithm.CSharp,AddRemoveSecurityRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\AddRemoveSecurityRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (Time.DayOfWeek == DayOfWeek.Tuesday)              {                  AddSecurity(SecurityType.Equity' "AIG");                  AddSecurity(SecurityType.Equity' "BAC");                  lastAction = Time;              }              else if (Time.DayOfWeek == DayOfWeek.Wednesday)              {                  SetHoldings(_aig' .25);                  SetHoldings(_bac' .25);                  lastAction = Time;              }              else if (Time.DayOfWeek == DayOfWeek.Thursday)              {                  RemoveSecurity(_bac);                  RemoveSecurity(_aig);                  lastAction = Time;              }
Magic Number,QuantConnect.Algorithm.CSharp,AddRemoveSecurityRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\AddRemoveSecurityRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (Time.DayOfWeek == DayOfWeek.Tuesday)              {                  AddSecurity(SecurityType.Equity' "AIG");                  AddSecurity(SecurityType.Equity' "BAC");                  lastAction = Time;              }              else if (Time.DayOfWeek == DayOfWeek.Wednesday)              {                  SetHoldings(_aig' .25);                  SetHoldings(_bac' .25);                  lastAction = Time;              }              else if (Time.DayOfWeek == DayOfWeek.Thursday)              {                  RemoveSecurity(_bac);                  RemoveSecurity(_aig);                  lastAction = Time;              }
Magic Number,QuantConnect.Algorithm.CSharp,FinancialAdvisorDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FinancialAdvisorDemoAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,FinancialAdvisorDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FinancialAdvisorDemoAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,FinancialAdvisorDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FinancialAdvisorDemoAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,FinancialAdvisorDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FinancialAdvisorDemoAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,FinancialAdvisorDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FinancialAdvisorDemoAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,FinancialAdvisorDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FinancialAdvisorDemoAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,FinancialAdvisorDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FinancialAdvisorDemoAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,RollingWindowAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\RollingWindowAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013'10'1);
Magic Number,QuantConnect.Algorithm.CSharp,RollingWindowAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\RollingWindowAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013'10'1);
Magic Number,QuantConnect.Algorithm.CSharp,RollingWindowAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\RollingWindowAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013'11'1);
Magic Number,QuantConnect.Algorithm.CSharp,RollingWindowAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\RollingWindowAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013'11'1);
Magic Number,QuantConnect.Algorithm.CSharp,RollingWindowAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\RollingWindowAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,RollingWindowAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\RollingWindowAlgorithm.cs,Initialize,The following statement contains a magic number: _window = new RollingWindow<TradeBar>(2);
Magic Number,QuantConnect.Algorithm.CSharp,RollingWindowAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\RollingWindowAlgorithm.cs,Initialize,The following statement contains a magic number: SMA("SPY"' 5).Updated += (sender' updated) => _smaWin.Add(updated);
Magic Number,QuantConnect.Algorithm.CSharp,RollingWindowAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\RollingWindowAlgorithm.cs,Initialize,The following statement contains a magic number: _smaWin = new RollingWindow<IndicatorDataPoint>(5);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateDailyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateDailyAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateDailyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateDailyAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateDailyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateDailyAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateDailyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateDailyAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 18);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateDailyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateDailyAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 18);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateDailyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateDailyAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 18);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateDailyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateDailyAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFxcmVolumeAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFxcmVolumeAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 02' 01);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFxcmVolumeAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFxcmVolumeAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 02' 01);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFxcmVolumeAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFxcmVolumeAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 03' 01);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFxcmVolumeAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFxcmVolumeAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 03' 01);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFxcmVolumeAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFxcmVolumeAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFxcmVolumeAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFxcmVolumeAlgorithm.cs,Initialize,The following statement contains a magic number: fastVWMA = _price.WeightedBy(volume' period: 15);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFxcmVolumeAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFxcmVolumeAlgorithm.cs,Initialize,The following statement contains a magic number: slowVWMA = _price.WeightedBy(volume' period: 300);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesAlgorithmDaily,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesAlgorithmDaily.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 08);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesAlgorithmDaily,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesAlgorithmDaily.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 08);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesAlgorithmDaily,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesAlgorithmDaily.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 08);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesAlgorithmDaily,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesAlgorithmDaily.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesAlgorithmDaily,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesAlgorithmDaily.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesAlgorithmDaily,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesAlgorithmDaily.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesAlgorithmDaily,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesAlgorithmDaily.cs,Initialize,The following statement contains a magic number: SetCash(1000000);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesAlgorithmDaily,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesAlgorithmDaily.cs,Initialize,The following statement contains a magic number: futureSP500.SetFilter(TimeSpan.Zero' TimeSpan.FromDays(182));
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesAlgorithmDaily,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesAlgorithmDaily.cs,Initialize,The following statement contains a magic number: futureGold.SetFilter(TimeSpan.Zero' TimeSpan.FromDays(182));
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesAlgorithmDaily,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesAlgorithmDaily.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  foreach(var chain in slice.FutureChains)                  {                      // find the front contract expiring no earlier than in 90 days                      var contract = (                          from futuresContract in chain.Value.OrderBy(x => x.Expiry)                          where futuresContract.Expiry > Time.Date.AddDays(90)                          select futuresContract                          ).FirstOrDefault();                        // if found' trade it                      if (contract != null)                      {                          MarketOrder(contract.Symbol' 1);                      }                  }              }              else              {                  Liquidate();              }
Magic Number,QuantConnect.Algorithm.CSharp,CallingRFromCSharp,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CallingRFromCSharp.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,CallingRFromCSharp,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CallingRFromCSharp.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,CallingRFromCSharp,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CallingRFromCSharp.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,CallingRFromCSharp,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CallingRFromCSharp.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,CallingRFromCSharp,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CallingRFromCSharp.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,CallingRFromCSharp,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CallingRFromCSharp.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,CallingRFromCSharp,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CallingRFromCSharp.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,CallingRFromCSharp,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CallingRFromCSharp.cs,Initialize,The following statement contains a magic number: var group1 = engine.CreateNumericVector(new double[] { 30.02' 29.99' 30.11' 29.97' 30.01' 29.99 });
Magic Number,QuantConnect.Algorithm.CSharp,CallingRFromCSharp,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CallingRFromCSharp.cs,Initialize,The following statement contains a magic number: var group1 = engine.CreateNumericVector(new double[] { 30.02' 29.99' 30.11' 29.97' 30.01' 29.99 });
Magic Number,QuantConnect.Algorithm.CSharp,CallingRFromCSharp,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CallingRFromCSharp.cs,Initialize,The following statement contains a magic number: var group1 = engine.CreateNumericVector(new double[] { 30.02' 29.99' 30.11' 29.97' 30.01' 29.99 });
Magic Number,QuantConnect.Algorithm.CSharp,CallingRFromCSharp,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CallingRFromCSharp.cs,Initialize,The following statement contains a magic number: var group1 = engine.CreateNumericVector(new double[] { 30.02' 29.99' 30.11' 29.97' 30.01' 29.99 });
Magic Number,QuantConnect.Algorithm.CSharp,CallingRFromCSharp,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CallingRFromCSharp.cs,Initialize,The following statement contains a magic number: var group1 = engine.CreateNumericVector(new double[] { 30.02' 29.99' 30.11' 29.97' 30.01' 29.99 });
Magic Number,QuantConnect.Algorithm.CSharp,CallingRFromCSharp,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CallingRFromCSharp.cs,Initialize,The following statement contains a magic number: var group1 = engine.CreateNumericVector(new double[] { 30.02' 29.99' 30.11' 29.97' 30.01' 29.99 });
Magic Number,QuantConnect.Algorithm.CSharp,FuturesMomentumAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuturesMomentumAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2016' 1' 1);
Magic Number,QuantConnect.Algorithm.CSharp,FuturesMomentumAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuturesMomentumAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2016' 8' 18);
Magic Number,QuantConnect.Algorithm.CSharp,FuturesMomentumAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuturesMomentumAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2016' 8' 18);
Magic Number,QuantConnect.Algorithm.CSharp,FuturesMomentumAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuturesMomentumAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2016' 8' 18);
Magic Number,QuantConnect.Algorithm.CSharp,FuturesMomentumAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuturesMomentumAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,FuturesMomentumAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuturesMomentumAlgorithm.cs,Initialize,The following statement contains a magic number: future.SetFilter(TimeSpan.Zero' TimeSpan.FromDays(182));
Magic Number,QuantConnect.Algorithm.CSharp,FuturesMomentumAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuturesMomentumAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested && IsUpTrend)              {                  foreach (var chain in slice.FutureChains)                  {                      // find the front contract expiring no earlier than in 90 days                      var contract = (                          from futuresContract in chain.Value.OrderBy(x => x.Expiry)                          where futuresContract.Expiry > Time.Date.AddDays(90)                          select futuresContract                          ).FirstOrDefault();                        // if found' trade it                      if (contract != null)                      {                          MarketOrder(contract.Symbol' 1);                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesConsolidationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesConsolidationAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 8);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesConsolidationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesConsolidationAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 8);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesConsolidationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesConsolidationAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 8);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesConsolidationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesConsolidationAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesConsolidationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesConsolidationAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesConsolidationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesConsolidationAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesConsolidationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesConsolidationAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(1000000);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesConsolidationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesConsolidationAlgorithm.cs,Initialize,The following statement contains a magic number: futureSP500.SetFilter(TimeSpan.Zero' TimeSpan.FromDays(182));
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesConsolidationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesConsolidationAlgorithm.cs,OnData,The following statement contains a magic number: foreach (var chain in slice.FutureChains)              {                  foreach (var contract in chain.Value)                  {                      if (!_futureContracts.Contains(contract.Symbol))                      {                          _futureContracts.Add(contract.Symbol);                            var consolidator = new QuoteBarConsolidator(TimeSpan.FromMinutes(5));                          consolidator.DataConsolidated += OnDataConsolidated;                          SubscriptionManager.AddConsolidator(contract.Symbol' consolidator);                            Log("Added new consolidator for " + contract.Symbol.Value);                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesHistoryAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 8);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesHistoryAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 8);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesHistoryAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 8);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesHistoryAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 9);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesHistoryAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 9);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesHistoryAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 9);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesHistoryAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(1000000);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesHistoryAlgorithm.cs,Initialize,The following statement contains a magic number: foreach (var root in roots)              {                  // set our expiry filter for this futures chain                  AddFuture(root' Resolution.Minute).SetFilter(TimeSpan.Zero' TimeSpan.FromDays(182));              }
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesHistoryAlgorithm.cs,OnSecuritiesChanged,The following statement contains a magic number: foreach (var change in changes.AddedSecurities)              {                  var history = History(change.Symbol' 10' Resolution.Daily);                    foreach (var data in history.OrderByDescending(x => x.Time).Take(3))                  {                      Log("History: " + data.Symbol.Value + ": " + data.Time + " > " + data.Close);                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesHistoryAlgorithm.cs,OnSecuritiesChanged,The following statement contains a magic number: foreach (var change in changes.AddedSecurities)              {                  var history = History(change.Symbol' 10' Resolution.Daily);                    foreach (var data in history.OrderByDescending(x => x.Time).Take(3))                  {                      Log("History: " + data.Symbol.Value + ": " + data.Time + " > " + data.Close);                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateMultiAssetAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateMultiAssetAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2016' 01' 28);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateMultiAssetAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateMultiAssetAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2016' 01' 28);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateMultiAssetAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateMultiAssetAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2016' 02' 29);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateMultiAssetAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateMultiAssetAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2016' 02' 29);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateMultiAssetAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateMultiAssetAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2016' 02' 29);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateMultiAssetAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateMultiAssetAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(1000000);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateMultiAssetAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateMultiAssetAlgorithm.cs,Initialize,The following statement contains a magic number: futureSP500.SetFilter(TimeSpan.FromDays(10)' TimeSpan.FromDays(182));
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateMultiAssetAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateMultiAssetAlgorithm.cs,Initialize,The following statement contains a magic number: futureSP500.SetFilter(TimeSpan.FromDays(10)' TimeSpan.FromDays(182));
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateMultiAssetAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateMultiAssetAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(-2' +2' TimeSpan.Zero' TimeSpan.FromDays(180));
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateMultiAssetAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateMultiAssetAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(-2' +2' TimeSpan.Zero' TimeSpan.FromDays(180));
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateMultiAssetAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateMultiAssetAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(-2' +2' TimeSpan.Zero' TimeSpan.FromDays(180));
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateMultiAssetAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateMultiAssetAlgorithm.cs,OnData,The following statement contains a magic number: if (barCount % 20 == 0)              {                  if (!Portfolio.Invested)                  {                      foreach (var chain in slice.FutureChains)                      {                          // find the front contract expiring no earlier than in 90 days                          var contract = (                              from futuresContract in chain.Value.OrderBy(x => x.Expiry)                              where futuresContract.Expiry > Time.Date.AddDays(90)                              select futuresContract                              ).FirstOrDefault();                            // if found' trade it                          if (contract != null)                          {                              MarketOrder(contract.Symbol' 1);                          }                      }                        OptionChain optionChain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out optionChain))                      {                          // find a farthest ATM contract                          var contract = optionChain                              .OrderBy(x => Math.Abs(optionChain.Underlying.Price - x.Strike))                              .ThenByDescending(x => x.Expiry)                              .FirstOrDefault();                            // if found' trade it                          if (contract != null)                          {                              MarketOrder(contract.Symbol' 1);                          }                      }                        // trade MSFT                      MarketOrder(SymbolMSFT' 100);                        // trade FX pair                      MarketOrder(SymbolEURUSD' 100000);                  }                  else                  {                      Liquidate();                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateMultiAssetAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateMultiAssetAlgorithm.cs,OnData,The following statement contains a magic number: if (barCount % 20 == 0)              {                  if (!Portfolio.Invested)                  {                      foreach (var chain in slice.FutureChains)                      {                          // find the front contract expiring no earlier than in 90 days                          var contract = (                              from futuresContract in chain.Value.OrderBy(x => x.Expiry)                              where futuresContract.Expiry > Time.Date.AddDays(90)                              select futuresContract                              ).FirstOrDefault();                            // if found' trade it                          if (contract != null)                          {                              MarketOrder(contract.Symbol' 1);                          }                      }                        OptionChain optionChain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out optionChain))                      {                          // find a farthest ATM contract                          var contract = optionChain                              .OrderBy(x => Math.Abs(optionChain.Underlying.Price - x.Strike))                              .ThenByDescending(x => x.Expiry)                              .FirstOrDefault();                            // if found' trade it                          if (contract != null)                          {                              MarketOrder(contract.Symbol' 1);                          }                      }                        // trade MSFT                      MarketOrder(SymbolMSFT' 100);                        // trade FX pair                      MarketOrder(SymbolEURUSD' 100000);                  }                  else                  {                      Liquidate();                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateMultiAssetAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateMultiAssetAlgorithm.cs,OnData,The following statement contains a magic number: if (barCount % 20 == 0)              {                  if (!Portfolio.Invested)                  {                      foreach (var chain in slice.FutureChains)                      {                          // find the front contract expiring no earlier than in 90 days                          var contract = (                              from futuresContract in chain.Value.OrderBy(x => x.Expiry)                              where futuresContract.Expiry > Time.Date.AddDays(90)                              select futuresContract                              ).FirstOrDefault();                            // if found' trade it                          if (contract != null)                          {                              MarketOrder(contract.Symbol' 1);                          }                      }                        OptionChain optionChain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out optionChain))                      {                          // find a farthest ATM contract                          var contract = optionChain                              .OrderBy(x => Math.Abs(optionChain.Underlying.Price - x.Strike))                              .ThenByDescending(x => x.Expiry)                              .FirstOrDefault();                            // if found' trade it                          if (contract != null)                          {                              MarketOrder(contract.Symbol' 1);                          }                      }                        // trade MSFT                      MarketOrder(SymbolMSFT' 100);                        // trade FX pair                      MarketOrder(SymbolEURUSD' 100000);                  }                  else                  {                      Liquidate();                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateMultiAssetAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateMultiAssetAlgorithm.cs,OnData,The following statement contains a magic number: if (barCount % 20 == 0)              {                  if (!Portfolio.Invested)                  {                      foreach (var chain in slice.FutureChains)                      {                          // find the front contract expiring no earlier than in 90 days                          var contract = (                              from futuresContract in chain.Value.OrderBy(x => x.Expiry)                              where futuresContract.Expiry > Time.Date.AddDays(90)                              select futuresContract                              ).FirstOrDefault();                            // if found' trade it                          if (contract != null)                          {                              MarketOrder(contract.Symbol' 1);                          }                      }                        OptionChain optionChain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out optionChain))                      {                          // find a farthest ATM contract                          var contract = optionChain                              .OrderBy(x => Math.Abs(optionChain.Underlying.Price - x.Strike))                              .ThenByDescending(x => x.Expiry)                              .FirstOrDefault();                            // if found' trade it                          if (contract != null)                          {                              MarketOrder(contract.Symbol' 1);                          }                      }                        // trade MSFT                      MarketOrder(SymbolMSFT' 100);                        // trade FX pair                      MarketOrder(SymbolEURUSD' 100000);                  }                  else                  {                      Liquidate();                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateMultiAssetAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateMultiAssetAlgorithm.cs,OnData,The following statement contains a magic number: if (barCount % 20 == 1)              {                  Log(String.Format("P/L:{0:0.00}' Fees:{1:0.00}' Profit:{2:0.00}' Eq:{3:0.00}' Holdings:{4:0.00}' Vol: {5:0.00}' Margin: {6:0.00}"'                      Portfolio.TotalUnrealisedProfit'                      Portfolio.TotalFees'                      Portfolio.TotalProfit'                      Portfolio.TotalPortfolioValue'                      Portfolio.TotalHoldingsValue'                      Portfolio.TotalSaleVolume'                      Portfolio.TotalMarginUsed));                    foreach (var holding in Securities.Values.OrderByDescending(x => x.Holdings.AbsoluteQuantity))                  {                      Log(String.Format(" - {0}' Avg Prc:{1:0.00}' Qty:{2:0.00}' Mkt Prc:{3:0.00}' Mkt Val:{4:0.00}' Unreal P/L: {5:0.00}' Fees: {6:0.00}' Vol: {7:0.00}"'                      holding.Symbol.Value'                      holding.Holdings.AveragePrice'                      holding.Holdings.Quantity'                      holding.Holdings.Price'                      holding.Holdings.HoldingsValue'                      holding.Holdings.UnrealizedProfit'                      holding.Holdings.TotalFees'                      holding.Holdings.TotalSaleVolume));                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateMultiAssetAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateMultiAssetAlgorithm.cs,OnData,The following statement contains a magic number: if (barCount % 20 == 2)              {                  foreach (var chain in slice.OptionChains)                  {                      var underlying = Securities[chain.Key.Underlying];                      foreach (var contract in chain.Value)                      {                          Log(String.Format(@"{0} {1}'B={2} A={3} L={4} OI={5} σ={6:0.00} NPV={7:0.00} Δ={8:0.00} Γ={9:0.00} ν={10:0.00} ρ={11:0.00} Θ={12:0.00} IV={13:0.00}"'                               Time.ToString()'                               contract.Symbol.Value'                               contract.BidPrice'                               contract.AskPrice'                               contract.LastPrice'                               contract.OpenInterest'                               underlying.VolatilityModel.Volatility'                               contract.TheoreticalPrice'                               contract.Greeks.Delta'                               contract.Greeks.Gamma'                               contract.Greeks.Vega'                               contract.Greeks.Rho'                               contract.Greeks.Theta / 365.0m'                               contract.ImpliedVolatility));                      }                  }                    foreach (var chain in slice.FutureChains)                  {                      foreach (var contract in chain.Value)                      {                          Log(String.Format("{0}' {1}' B={2} A={3} L={4} OI={5}"'                                  contract.Symbol.Value'                                  Time'                                  contract.BidPrice'                                  contract.AskPrice'                                  contract.LastPrice'                                  contract.OpenInterest));                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateMultiAssetAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateMultiAssetAlgorithm.cs,OnData,The following statement contains a magic number: if (barCount % 20 == 2)              {                  foreach (var chain in slice.OptionChains)                  {                      var underlying = Securities[chain.Key.Underlying];                      foreach (var contract in chain.Value)                      {                          Log(String.Format(@"{0} {1}'B={2} A={3} L={4} OI={5} σ={6:0.00} NPV={7:0.00} Δ={8:0.00} Γ={9:0.00} ν={10:0.00} ρ={11:0.00} Θ={12:0.00} IV={13:0.00}"'                               Time.ToString()'                               contract.Symbol.Value'                               contract.BidPrice'                               contract.AskPrice'                               contract.LastPrice'                               contract.OpenInterest'                               underlying.VolatilityModel.Volatility'                               contract.TheoreticalPrice'                               contract.Greeks.Delta'                               contract.Greeks.Gamma'                               contract.Greeks.Vega'                               contract.Greeks.Rho'                               contract.Greeks.Theta / 365.0m'                               contract.ImpliedVolatility));                      }                  }                    foreach (var chain in slice.FutureChains)                  {                      foreach (var contract in chain.Value)                      {                          Log(String.Format("{0}' {1}' B={2} A={3} L={4} OI={5}"'                                  contract.Symbol.Value'                                  Time'                                  contract.BidPrice'                                  contract.AskPrice'                                  contract.LastPrice'                                  contract.OpenInterest));                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,FilteredIdentityAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FilteredIdentityAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2014' 5' 2);
Magic Number,QuantConnect.Algorithm.CSharp,FilteredIdentityAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FilteredIdentityAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2014' 5' 2);
Magic Number,QuantConnect.Algorithm.CSharp,FilteredIdentityAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FilteredIdentityAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2014' 5' 2);
Magic Number,QuantConnect.Algorithm.CSharp,FilteredIdentityAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FilteredIdentityAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,OptionExerciseAssignRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionExerciseAssignRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,OptionExerciseAssignRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionExerciseAssignRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,OptionExerciseAssignRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionExerciseAssignRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,OptionExerciseAssignRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionExerciseAssignRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,OptionExerciseAssignRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionExerciseAssignRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,OptionExerciseAssignRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionExerciseAssignRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,OptionExerciseAssignRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionExerciseAssignRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,OptionExerciseAssignRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionExerciseAssignRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(u => u.IncludeWeeklys()                                     .Strikes(-2' +2)                                     .Expiration(TimeSpan.Zero' TimeSpan.FromDays(10)));
Magic Number,QuantConnect.Algorithm.CSharp,OptionExerciseAssignRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionExerciseAssignRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(u => u.IncludeWeeklys()                                     .Strikes(-2' +2)                                     .Expiration(TimeSpan.Zero' TimeSpan.FromDays(10)));
Magic Number,QuantConnect.Algorithm.CSharp,OptionExerciseAssignRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionExerciseAssignRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(u => u.IncludeWeeklys()                                     .Strikes(-2' +2)                                     .Expiration(TimeSpan.Zero' TimeSpan.FromDays(10)));
Magic Number,QuantConnect.Algorithm.CSharp,OptionExerciseAssignRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionExerciseAssignRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  OptionChain chain;                  if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                  {                      // find the second call strike under market price expiring today                      var contracts = (                          from optionContract in chain.OrderByDescending(x => x.Strike)                          where optionContract.Right == OptionRight.Call                          where optionContract.Expiry == Time.Date                          where optionContract.Strike < chain.Underlying.Price                          select optionContract                          ).Take(2);                        if (contracts.Any())                      {                          MarketOrder(contracts.FirstOrDefault().Symbol' 1);                          MarketOrder(contracts.Skip(1).FirstOrDefault().Symbol' -1);                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsFilterUniverseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsFilterUniverseAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsFilterUniverseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsFilterUniverseAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsFilterUniverseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsFilterUniverseAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsFilterUniverseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsFilterUniverseAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsFilterUniverseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsFilterUniverseAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsFilterUniverseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsFilterUniverseAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsFilterUniverseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsFilterUniverseAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(10000);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsFilterUniverseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsFilterUniverseAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(universe => from symbol in universe                                                            .WeeklysOnly()                                                            .Expiration(TimeSpan.Zero' TimeSpan.FromDays(10))                                           where symbol.ID.OptionRight != OptionRight.Put &&                                                universe.Underlying.Price - symbol.ID.StrikePrice < 60                                           select symbol);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsFilterUniverseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsFilterUniverseAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(universe => from symbol in universe                                                            .WeeklysOnly()                                                            .Expiration(TimeSpan.Zero' TimeSpan.FromDays(10))                                           where symbol.ID.OptionRight != OptionRight.Put &&                                                universe.Underlying.Price - symbol.ID.StrikePrice < 60                                           select symbol);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsFilterUniverseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsFilterUniverseAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  OptionChain chain;                  if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                  {                      // find the second call strike under market price expiring today                      var contract = (                          from optionContract in chain.OrderByDescending(x => x.Strike)                          where optionContract.Right == OptionRight.Call                          where optionContract.Expiry == Time.Date                          where optionContract.Strike < chain.Underlying.Price                          select optionContract                          ).Skip(2).FirstOrDefault();                        if (contract != null)                      {                          MarketOrder(contract.Symbol' 1);                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsHistoryAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsHistoryAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsHistoryAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsHistoryAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsHistoryAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsHistoryAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsHistoryAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(1000000);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsHistoryAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(-2' +2' TimeSpan.FromDays(00)' TimeSpan.FromDays(180));
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsHistoryAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(-2' +2' TimeSpan.FromDays(00)' TimeSpan.FromDays(180));
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsHistoryAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(-2' +2' TimeSpan.FromDays(00)' TimeSpan.FromDays(180));
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsHistoryAlgorithm.cs,OnSecuritiesChanged,The following statement contains a magic number: foreach (var change in changes.AddedSecurities)              {                  var history = History(change.Symbol' 10' Resolution.Hour);                    foreach (var data in history.OrderByDescending(x => x.Time).Take(3))                  {                      Log("History: " + data.Symbol.Value + ": " + data.Time + " > " + data.Close);                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsHistoryAlgorithm.cs,OnSecuritiesChanged,The following statement contains a magic number: foreach (var change in changes.AddedSecurities)              {                  var history = History(change.Symbol' 10' Resolution.Hour);                    foreach (var data in history.OrderByDescending(x => x.Time).Take(3))                  {                      Log("History: " + data.Symbol.Value + ": " + data.Time + " > " + data.Close);                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionTradesAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionTradesAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionTradesAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionTradesAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionTradesAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionTradesAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionTradesAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionTradesAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionTradesAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionTradesAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionTradesAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionTradesAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionTradesAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionTradesAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(10000);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionTradesAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionTradesAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(-2' +2' TimeSpan.Zero' TimeSpan.FromDays(10));
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionTradesAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionTradesAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(-2' +2' TimeSpan.Zero' TimeSpan.FromDays(10));
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionTradesAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionTradesAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(-2' +2' TimeSpan.Zero' TimeSpan.FromDays(10));
Magic Number,QuantConnect.Algorithm.CSharp,OptionChainConsistencyRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionChainConsistencyRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,OptionChainConsistencyRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionChainConsistencyRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,OptionChainConsistencyRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionChainConsistencyRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,OptionChainConsistencyRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionChainConsistencyRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,OptionChainConsistencyRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionChainConsistencyRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,OptionChainConsistencyRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionChainConsistencyRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,OptionChainConsistencyRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionChainConsistencyRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(10000);
Magic Number,QuantConnect.Algorithm.CSharp,OptionChainConsistencyRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionChainConsistencyRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(u => u.IncludeWeeklys()                                      .Strikes(-2' +2)                                      .Expiration(TimeSpan.Zero' TimeSpan.FromDays(10)));
Magic Number,QuantConnect.Algorithm.CSharp,OptionChainConsistencyRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionChainConsistencyRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(u => u.IncludeWeeklys()                                      .Strikes(-2' +2)                                      .Expiration(TimeSpan.Zero' TimeSpan.FromDays(10)));
Magic Number,QuantConnect.Algorithm.CSharp,OptionChainConsistencyRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionChainConsistencyRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(u => u.IncludeWeeklys()                                      .Strikes(-2' +2)                                      .Expiration(TimeSpan.Zero' TimeSpan.FromDays(10)));
Magic Number,QuantConnect.Algorithm.CSharp,OptionChainConsistencyRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionChainConsistencyRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  OptionChain chain;                  if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                  {                      // check if data is consistent                      foreach (var o in chain)                      {                          if (!Securities.ContainsKey(o.Symbol))                          {                              // inconsistency found: option chains contains contract information that is not available in securities manager and not available for trading                              throw new Exception(string.Format("inconsistency found: option chains contains contract {0} that is not available in securities manager and not available for trading"' o.Symbol.Value));                          }                      }                        // trade                      var contract = (                          from optionContract in chain.OrderByDescending(x => x.Strike)                          where optionContract.Right == OptionRight.Call                          where optionContract.Expiry == Time.Date                          where optionContract.Strike < chain.Underlying.Price                          select optionContract                          ).Skip(2).FirstOrDefault();                        if (contract != null)                      {                          MarketOrder(contract.Symbol' 1);                          MarketOnCloseOrder(contract.Symbol' -1);                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionOpenInterestRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionOpenInterestRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2014' 06' 05);
Magic Number,QuantConnect.Algorithm.CSharp,OptionOpenInterestRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionOpenInterestRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2014' 06' 05);
Magic Number,QuantConnect.Algorithm.CSharp,OptionOpenInterestRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionOpenInterestRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2014' 06' 05);
Magic Number,QuantConnect.Algorithm.CSharp,OptionOpenInterestRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionOpenInterestRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2014' 06' 06);
Magic Number,QuantConnect.Algorithm.CSharp,OptionOpenInterestRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionOpenInterestRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2014' 06' 06);
Magic Number,QuantConnect.Algorithm.CSharp,OptionOpenInterestRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionOpenInterestRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2014' 06' 06);
Magic Number,QuantConnect.Algorithm.CSharp,OptionOpenInterestRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionOpenInterestRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(1000000);
Magic Number,QuantConnect.Algorithm.CSharp,OptionOpenInterestRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionOpenInterestRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(-10' +10' TimeSpan.Zero' TimeSpan.FromDays(365 * 2));
Magic Number,QuantConnect.Algorithm.CSharp,OptionOpenInterestRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionOpenInterestRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(-10' +10' TimeSpan.Zero' TimeSpan.FromDays(365 * 2));
Magic Number,QuantConnect.Algorithm.CSharp,OptionOpenInterestRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionOpenInterestRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(-10' +10' TimeSpan.Zero' TimeSpan.FromDays(365 * 2));
Magic Number,QuantConnect.Algorithm.CSharp,OptionOpenInterestRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionOpenInterestRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(-10' +10' TimeSpan.Zero' TimeSpan.FromDays(365 * 2));
Magic Number,QuantConnect.Algorithm.CSharp,OptionOpenInterestRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionOpenInterestRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  foreach (var chain in slice.OptionChains)                  {                      foreach (var contract in chain.Value)                      {                          if (contract.Symbol.ID.StrikePrice == 72.5m &&                              contract.Symbol.ID.OptionRight == OptionRight.Call &&                              contract.Symbol.ID.Date == new DateTime(2016' 01' 15))                          {                              if (slice.Time.Date == new DateTime(2014' 06' 05) && contract.OpenInterest != 50)                              {                                  throw new Exception("Regression test failed: current open interest was not correctly loaded and is not equal to 50");                              }                              if (slice.Time.Date == new DateTime(2014' 06' 06) && contract.OpenInterest != 70)                              {                                  throw new Exception("Regression test failed: current open interest was not correctly loaded and is not equal to 70");                              }                              if (slice.Time.Date == new DateTime(2014' 06' 06))                              {                                  MarketOrder(contract.Symbol' 1);                                  MarketOnCloseOrder(contract.Symbol' -1);                              }                          }                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionOpenInterestRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionOpenInterestRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  foreach (var chain in slice.OptionChains)                  {                      foreach (var contract in chain.Value)                      {                          if (contract.Symbol.ID.StrikePrice == 72.5m &&                              contract.Symbol.ID.OptionRight == OptionRight.Call &&                              contract.Symbol.ID.Date == new DateTime(2016' 01' 15))                          {                              if (slice.Time.Date == new DateTime(2014' 06' 05) && contract.OpenInterest != 50)                              {                                  throw new Exception("Regression test failed: current open interest was not correctly loaded and is not equal to 50");                              }                              if (slice.Time.Date == new DateTime(2014' 06' 06) && contract.OpenInterest != 70)                              {                                  throw new Exception("Regression test failed: current open interest was not correctly loaded and is not equal to 70");                              }                              if (slice.Time.Date == new DateTime(2014' 06' 06))                              {                                  MarketOrder(contract.Symbol' 1);                                  MarketOnCloseOrder(contract.Symbol' -1);                              }                          }                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionOpenInterestRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionOpenInterestRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  foreach (var chain in slice.OptionChains)                  {                      foreach (var contract in chain.Value)                      {                          if (contract.Symbol.ID.StrikePrice == 72.5m &&                              contract.Symbol.ID.OptionRight == OptionRight.Call &&                              contract.Symbol.ID.Date == new DateTime(2016' 01' 15))                          {                              if (slice.Time.Date == new DateTime(2014' 06' 05) && contract.OpenInterest != 50)                              {                                  throw new Exception("Regression test failed: current open interest was not correctly loaded and is not equal to 50");                              }                              if (slice.Time.Date == new DateTime(2014' 06' 06) && contract.OpenInterest != 70)                              {                                  throw new Exception("Regression test failed: current open interest was not correctly loaded and is not equal to 70");                              }                              if (slice.Time.Date == new DateTime(2014' 06' 06))                              {                                  MarketOrder(contract.Symbol' 1);                                  MarketOnCloseOrder(contract.Symbol' -1);                              }                          }                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionOpenInterestRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionOpenInterestRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  foreach (var chain in slice.OptionChains)                  {                      foreach (var contract in chain.Value)                      {                          if (contract.Symbol.ID.StrikePrice == 72.5m &&                              contract.Symbol.ID.OptionRight == OptionRight.Call &&                              contract.Symbol.ID.Date == new DateTime(2016' 01' 15))                          {                              if (slice.Time.Date == new DateTime(2014' 06' 05) && contract.OpenInterest != 50)                              {                                  throw new Exception("Regression test failed: current open interest was not correctly loaded and is not equal to 50");                              }                              if (slice.Time.Date == new DateTime(2014' 06' 06) && contract.OpenInterest != 70)                              {                                  throw new Exception("Regression test failed: current open interest was not correctly loaded and is not equal to 70");                              }                              if (slice.Time.Date == new DateTime(2014' 06' 06))                              {                                  MarketOrder(contract.Symbol' 1);                                  MarketOnCloseOrder(contract.Symbol' -1);                              }                          }                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionOpenInterestRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionOpenInterestRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  foreach (var chain in slice.OptionChains)                  {                      foreach (var contract in chain.Value)                      {                          if (contract.Symbol.ID.StrikePrice == 72.5m &&                              contract.Symbol.ID.OptionRight == OptionRight.Call &&                              contract.Symbol.ID.Date == new DateTime(2016' 01' 15))                          {                              if (slice.Time.Date == new DateTime(2014' 06' 05) && contract.OpenInterest != 50)                              {                                  throw new Exception("Regression test failed: current open interest was not correctly loaded and is not equal to 50");                              }                              if (slice.Time.Date == new DateTime(2014' 06' 06) && contract.OpenInterest != 70)                              {                                  throw new Exception("Regression test failed: current open interest was not correctly loaded and is not equal to 70");                              }                              if (slice.Time.Date == new DateTime(2014' 06' 06))                              {                                  MarketOrder(contract.Symbol' 1);                                  MarketOnCloseOrder(contract.Symbol' -1);                              }                          }                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionOpenInterestRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionOpenInterestRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  foreach (var chain in slice.OptionChains)                  {                      foreach (var contract in chain.Value)                      {                          if (contract.Symbol.ID.StrikePrice == 72.5m &&                              contract.Symbol.ID.OptionRight == OptionRight.Call &&                              contract.Symbol.ID.Date == new DateTime(2016' 01' 15))                          {                              if (slice.Time.Date == new DateTime(2014' 06' 05) && contract.OpenInterest != 50)                              {                                  throw new Exception("Regression test failed: current open interest was not correctly loaded and is not equal to 50");                              }                              if (slice.Time.Date == new DateTime(2014' 06' 06) && contract.OpenInterest != 70)                              {                                  throw new Exception("Regression test failed: current open interest was not correctly loaded and is not equal to 70");                              }                              if (slice.Time.Date == new DateTime(2014' 06' 06))                              {                                  MarketOrder(contract.Symbol' 1);                                  MarketOnCloseOrder(contract.Symbol' -1);                              }                          }                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionOpenInterestRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionOpenInterestRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  foreach (var chain in slice.OptionChains)                  {                      foreach (var contract in chain.Value)                      {                          if (contract.Symbol.ID.StrikePrice == 72.5m &&                              contract.Symbol.ID.OptionRight == OptionRight.Call &&                              contract.Symbol.ID.Date == new DateTime(2016' 01' 15))                          {                              if (slice.Time.Date == new DateTime(2014' 06' 05) && contract.OpenInterest != 50)                              {                                  throw new Exception("Regression test failed: current open interest was not correctly loaded and is not equal to 50");                              }                              if (slice.Time.Date == new DateTime(2014' 06' 06) && contract.OpenInterest != 70)                              {                                  throw new Exception("Regression test failed: current open interest was not correctly loaded and is not equal to 70");                              }                              if (slice.Time.Date == new DateTime(2014' 06' 06))                              {                                  MarketOrder(contract.Symbol' 1);                                  MarketOnCloseOrder(contract.Symbol' -1);                              }                          }                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionOpenInterestRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionOpenInterestRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  foreach (var chain in slice.OptionChains)                  {                      foreach (var contract in chain.Value)                      {                          if (contract.Symbol.ID.StrikePrice == 72.5m &&                              contract.Symbol.ID.OptionRight == OptionRight.Call &&                              contract.Symbol.ID.Date == new DateTime(2016' 01' 15))                          {                              if (slice.Time.Date == new DateTime(2014' 06' 05) && contract.OpenInterest != 50)                              {                                  throw new Exception("Regression test failed: current open interest was not correctly loaded and is not equal to 50");                              }                              if (slice.Time.Date == new DateTime(2014' 06' 06) && contract.OpenInterest != 70)                              {                                  throw new Exception("Regression test failed: current open interest was not correctly loaded and is not equal to 70");                              }                              if (slice.Time.Date == new DateTime(2014' 06' 06))                              {                                  MarketOrder(contract.Symbol' 1);                                  MarketOnCloseOrder(contract.Symbol' -1);                              }                          }                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionOpenInterestRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionOpenInterestRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  foreach (var chain in slice.OptionChains)                  {                      foreach (var contract in chain.Value)                      {                          if (contract.Symbol.ID.StrikePrice == 72.5m &&                              contract.Symbol.ID.OptionRight == OptionRight.Call &&                              contract.Symbol.ID.Date == new DateTime(2016' 01' 15))                          {                              if (slice.Time.Date == new DateTime(2014' 06' 05) && contract.OpenInterest != 50)                              {                                  throw new Exception("Regression test failed: current open interest was not correctly loaded and is not equal to 50");                              }                              if (slice.Time.Date == new DateTime(2014' 06' 06) && contract.OpenInterest != 70)                              {                                  throw new Exception("Regression test failed: current open interest was not correctly loaded and is not equal to 70");                              }                              if (slice.Time.Date == new DateTime(2014' 06' 06))                              {                                  MarketOrder(contract.Symbol' 1);                                  MarketOnCloseOrder(contract.Symbol' -1);                              }                          }                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionOpenInterestRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionOpenInterestRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  foreach (var chain in slice.OptionChains)                  {                      foreach (var contract in chain.Value)                      {                          if (contract.Symbol.ID.StrikePrice == 72.5m &&                              contract.Symbol.ID.OptionRight == OptionRight.Call &&                              contract.Symbol.ID.Date == new DateTime(2016' 01' 15))                          {                              if (slice.Time.Date == new DateTime(2014' 06' 05) && contract.OpenInterest != 50)                              {                                  throw new Exception("Regression test failed: current open interest was not correctly loaded and is not equal to 50");                              }                              if (slice.Time.Date == new DateTime(2014' 06' 06) && contract.OpenInterest != 70)                              {                                  throw new Exception("Regression test failed: current open interest was not correctly loaded and is not equal to 70");                              }                              if (slice.Time.Date == new DateTime(2014' 06' 06))                              {                                  MarketOrder(contract.Symbol' 1);                                  MarketOnCloseOrder(contract.Symbol' -1);                              }                          }                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionOpenInterestRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionOpenInterestRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  foreach (var chain in slice.OptionChains)                  {                      foreach (var contract in chain.Value)                      {                          if (contract.Symbol.ID.StrikePrice == 72.5m &&                              contract.Symbol.ID.OptionRight == OptionRight.Call &&                              contract.Symbol.ID.Date == new DateTime(2016' 01' 15))                          {                              if (slice.Time.Date == new DateTime(2014' 06' 05) && contract.OpenInterest != 50)                              {                                  throw new Exception("Regression test failed: current open interest was not correctly loaded and is not equal to 50");                              }                              if (slice.Time.Date == new DateTime(2014' 06' 06) && contract.OpenInterest != 70)                              {                                  throw new Exception("Regression test failed: current open interest was not correctly loaded and is not equal to 70");                              }                              if (slice.Time.Date == new DateTime(2014' 06' 06))                              {                                  MarketOrder(contract.Symbol' 1);                                  MarketOnCloseOrder(contract.Symbol' -1);                              }                          }                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionOpenInterestRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionOpenInterestRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  foreach (var chain in slice.OptionChains)                  {                      foreach (var contract in chain.Value)                      {                          if (contract.Symbol.ID.StrikePrice == 72.5m &&                              contract.Symbol.ID.OptionRight == OptionRight.Call &&                              contract.Symbol.ID.Date == new DateTime(2016' 01' 15))                          {                              if (slice.Time.Date == new DateTime(2014' 06' 05) && contract.OpenInterest != 50)                              {                                  throw new Exception("Regression test failed: current open interest was not correctly loaded and is not equal to 50");                              }                              if (slice.Time.Date == new DateTime(2014' 06' 06) && contract.OpenInterest != 70)                              {                                  throw new Exception("Regression test failed: current open interest was not correctly loaded and is not equal to 70");                              }                              if (slice.Time.Date == new DateTime(2014' 06' 06))                              {                                  MarketOrder(contract.Symbol' 1);                                  MarketOnCloseOrder(contract.Symbol' -1);                              }                          }                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionOpenInterestRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionOpenInterestRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  foreach (var chain in slice.OptionChains)                  {                      foreach (var contract in chain.Value)                      {                          if (contract.Symbol.ID.StrikePrice == 72.5m &&                              contract.Symbol.ID.OptionRight == OptionRight.Call &&                              contract.Symbol.ID.Date == new DateTime(2016' 01' 15))                          {                              if (slice.Time.Date == new DateTime(2014' 06' 05) && contract.OpenInterest != 50)                              {                                  throw new Exception("Regression test failed: current open interest was not correctly loaded and is not equal to 50");                              }                              if (slice.Time.Date == new DateTime(2014' 06' 06) && contract.OpenInterest != 70)                              {                                  throw new Exception("Regression test failed: current open interest was not correctly loaded and is not equal to 70");                              }                              if (slice.Time.Date == new DateTime(2014' 06' 06))                              {                                  MarketOrder(contract.Symbol' 1);                                  MarketOnCloseOrder(contract.Symbol' -1);                              }                          }                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,RegressionChannelAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\RegressionChannelAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2009' 1' 1);
Magic Number,QuantConnect.Algorithm.CSharp,RegressionChannelAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\RegressionChannelAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 1' 1);
Magic Number,QuantConnect.Algorithm.CSharp,RegressionChannelAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\RegressionChannelAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,RegressionChannelAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\RegressionChannelAlgorithm.cs,Initialize,The following statement contains a magic number: _rc = RC(_spy' 30' 2' Resolution.Daily);
Magic Number,QuantConnect.Algorithm.CSharp,RegressionChannelAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\RegressionChannelAlgorithm.cs,Initialize,The following statement contains a magic number: _rc = RC(_spy' 30' 2' Resolution.Daily);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(1000000);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesAlgorithm.cs,Initialize,The following statement contains a magic number: futureSP500.SetFilter(TimeSpan.Zero' TimeSpan.FromDays(182));
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesAlgorithm.cs,Initialize,The following statement contains a magic number: futureGold.SetFilter(TimeSpan.Zero' TimeSpan.FromDays(182));
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFuturesAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFuturesAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  foreach(var chain in slice.FutureChains)                  {                      // find the front contract expiring no earlier than in 90 days                      var contract = (                          from futuresContract in chain.Value.OrderBy(x => x.Expiry)                          where futuresContract.Expiry > Time.Date.AddDays(90)                          select futuresContract                          ).FirstOrDefault();                        // if found' trade it                      if (contract != null)                      {                          MarketOrder(contract.Symbol' 1);                      }                  }              }              else              {                  Liquidate();              }
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionStrategyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionStrategyAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionStrategyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionStrategyAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionStrategyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionStrategyAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionStrategyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionStrategyAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionStrategyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionStrategyAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionStrategyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionStrategyAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionStrategyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionStrategyAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(1000000);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionStrategyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionStrategyAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(-2' +2' TimeSpan.Zero' TimeSpan.FromDays(180));
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionStrategyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionStrategyAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(-2' +2' TimeSpan.Zero' TimeSpan.FromDays(180));
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionStrategyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionStrategyAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(-2' +2' TimeSpan.Zero' TimeSpan.FromDays(180));
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionStrategyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionStrategyAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  OptionChain chain;                  if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                  {                      var atmStraddle = chain                          .OrderBy(x => Math.Abs(chain.Underlying.Price - x.Strike))                          .ThenByDescending(x => x.Expiry)                          .FirstOrDefault();                        if (atmStraddle != null)                      {                          Sell(OptionStrategies.Straddle(OptionSymbol' atmStraddle.Strike' atmStraddle.Expiry)' 2);                      }                  }              }              else              {                  Liquidate();              }
Magic Number,QuantConnect.Algorithm.CSharp,CoarseFineFundamentalRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CoarseFineFundamentalRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2014' 04' 01);
Magic Number,QuantConnect.Algorithm.CSharp,CoarseFineFundamentalRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CoarseFineFundamentalRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2014' 04' 01);
Magic Number,QuantConnect.Algorithm.CSharp,CoarseFineFundamentalRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CoarseFineFundamentalRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2014' 04' 30);
Magic Number,QuantConnect.Algorithm.CSharp,CoarseFineFundamentalRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CoarseFineFundamentalRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2014' 04' 30);
Magic Number,QuantConnect.Algorithm.CSharp,CoarseFineFundamentalRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CoarseFineFundamentalRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2014' 04' 30);
Magic Number,QuantConnect.Algorithm.CSharp,CoarseFineFundamentalRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CoarseFineFundamentalRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(50000);
Magic Number,QuantConnect.Algorithm.CSharp,CoarseFineFundamentalRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CoarseFineFundamentalRegressionAlgorithm.cs,CoarseSelectionFunction,The following statement contains a magic number: if (Time.Date < new DateTime(2014' 4' 5))              {                  return new List<Symbol>                  {                      QuantConnect.Symbol.Create("AAPL"' SecurityType.Equity' "usa")'                      QuantConnect.Symbol.Create("AIG"' SecurityType.Equity' "usa")'                      QuantConnect.Symbol.Create("IBM"' SecurityType.Equity' "usa")                  };              }
Magic Number,QuantConnect.Algorithm.CSharp,CoarseFineFundamentalRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CoarseFineFundamentalRegressionAlgorithm.cs,CoarseSelectionFunction,The following statement contains a magic number: if (Time.Date < new DateTime(2014' 4' 5))              {                  return new List<Symbol>                  {                      QuantConnect.Symbol.Create("AAPL"' SecurityType.Equity' "usa")'                      QuantConnect.Symbol.Create("AIG"' SecurityType.Equity' "usa")'                      QuantConnect.Symbol.Create("IBM"' SecurityType.Equity' "usa")                  };              }
Magic Number,QuantConnect.Algorithm.CSharp,CoarseFineFundamentalRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CoarseFineFundamentalRegressionAlgorithm.cs,CoarseSelectionFunction,The following statement contains a magic number: if (Time.Date < new DateTime(2014' 4' 5))              {                  return new List<Symbol>                  {                      QuantConnect.Symbol.Create("AAPL"' SecurityType.Equity' "usa")'                      QuantConnect.Symbol.Create("AIG"' SecurityType.Equity' "usa")'                      QuantConnect.Symbol.Create("IBM"' SecurityType.Equity' "usa")                  };              }
Magic Number,QuantConnect.Algorithm.CSharp,CoarseFineFundamentalComboAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CoarseFineFundamentalComboAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2014' 04' 01);
Magic Number,QuantConnect.Algorithm.CSharp,CoarseFineFundamentalComboAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CoarseFineFundamentalComboAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2014' 04' 01);
Magic Number,QuantConnect.Algorithm.CSharp,CoarseFineFundamentalComboAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CoarseFineFundamentalComboAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2014' 04' 30);
Magic Number,QuantConnect.Algorithm.CSharp,CoarseFineFundamentalComboAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CoarseFineFundamentalComboAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2014' 04' 30);
Magic Number,QuantConnect.Algorithm.CSharp,CoarseFineFundamentalComboAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CoarseFineFundamentalComboAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2014' 04' 30);
Magic Number,QuantConnect.Algorithm.CSharp,CoarseFineFundamentalComboAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CoarseFineFundamentalComboAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(50000);
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyInferenceAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 01' 01);
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyInferenceAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 06' 30);
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyInferenceAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 06' 30);
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyInferenceAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 06' 30);
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyInferenceAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyInferenceAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,Initialize,The following statement contains a magic number: _rsi = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily);
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyInferenceAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,Initialize,The following statement contains a magic number: _mom = MOM(_symbol' 10' Resolution.Daily' Field.Close);
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyInferenceAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,OnData,The following statement contains a magic number: if (_rsi.IsReady && _mom.IsReady)              {                  try                  {                      var signal = _engine.DoInference((float)_mom.Current.Value' (float)_rsi.Current.Value);                        if (!Portfolio.Invested)                      {                          if (signal > 30)                          {                              var quantity = decimal.ToInt32(Portfolio.MarginRemaining / data[_symbol].Price);                              Buy(_symbol' quantity);                              Debug("Purchased Stock: " + quantity + " shares");                          }                      }                      else                      {                          if (signal < -10)                          {                              var quantity = decimal.ToInt32(Portfolio[_symbol].Quantity);                              Sell(_symbol' quantity);                              Debug("Sold Stock: " + quantity + " shares");                          }                      }                  }                  catch (Exception ex)                  {                      Debug("Ex: " + ex.Message);                      Debug("## rsi: " + _rsi + " mom: " + _mom);                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyInferenceAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,OnData,The following statement contains a magic number: if (_rsi.IsReady && _mom.IsReady)              {                  try                  {                      var signal = _engine.DoInference((float)_mom.Current.Value' (float)_rsi.Current.Value);                        if (!Portfolio.Invested)                      {                          if (signal > 30)                          {                              var quantity = decimal.ToInt32(Portfolio.MarginRemaining / data[_symbol].Price);                              Buy(_symbol' quantity);                              Debug("Purchased Stock: " + quantity + " shares");                          }                      }                      else                      {                          if (signal < -10)                          {                              var quantity = decimal.ToInt32(Portfolio[_symbol].Quantity);                              Sell(_symbol' quantity);                              Debug("Sold Stock: " + quantity + " shares");                          }                      }                  }                  catch (Exception ex)                  {                      Debug("Ex: " + ex.Message);                      Debug("## rsi: " + _rsi + " mom: " + _mom);                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var momDown = new FuzzySet("Down"' new TrapezoidalFunction(-20' 5' 5' 5));
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var momDown = new FuzzySet("Down"' new TrapezoidalFunction(-20' 5' 5' 5));
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var momDown = new FuzzySet("Down"' new TrapezoidalFunction(-20' 5' 5' 5));
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var momDown = new FuzzySet("Down"' new TrapezoidalFunction(-20' 5' 5' 5));
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var momNeutral = new FuzzySet("Neutral"' new TrapezoidalFunction(-20' 0' 0' 20));
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var momNeutral = new FuzzySet("Neutral"' new TrapezoidalFunction(-20' 0' 0' 20));
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var momUp = new FuzzySet("Up"' new TrapezoidalFunction(5' 20' 20' 20));
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var momUp = new FuzzySet("Up"' new TrapezoidalFunction(5' 20' 20' 20));
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var momUp = new FuzzySet("Up"' new TrapezoidalFunction(5' 20' 20' 20));
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var momUp = new FuzzySet("Up"' new TrapezoidalFunction(5' 20' 20' 20));
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var rsiLow = new FuzzySet("Low"' new TrapezoidalFunction(0' 30' 30' 30));
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var rsiLow = new FuzzySet("Low"' new TrapezoidalFunction(0' 30' 30' 30));
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var rsiLow = new FuzzySet("Low"' new TrapezoidalFunction(0' 30' 30' 30));
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var rsiMedium = new FuzzySet("Medium"' new TrapezoidalFunction(0' 50' 50' 100));
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var rsiMedium = new FuzzySet("Medium"' new TrapezoidalFunction(0' 50' 50' 100));
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var rsiMedium = new FuzzySet("Medium"' new TrapezoidalFunction(0' 50' 50' 100));
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var rsiHigh = new FuzzySet("High"' new TrapezoidalFunction(70' 100' 100' 100));
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var rsiHigh = new FuzzySet("High"' new TrapezoidalFunction(70' 100' 100' 100));
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var rsiHigh = new FuzzySet("High"' new TrapezoidalFunction(70' 100' 100' 100));
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var rsiHigh = new FuzzySet("High"' new TrapezoidalFunction(70' 100' 100' 100));
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var lvMom = new LinguisticVariable("MOM"' -20' 20);
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var lvMom = new LinguisticVariable("MOM"' -20' 20);
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var lvRsi = new LinguisticVariable("RSI"' 0' 100);
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var fsShort = new FuzzySet("Sell"' new TrapezoidalFunction(-100' 0' 0' 00));
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var fsHold = new FuzzySet("Hold"' new TrapezoidalFunction(-50' 0' 0' 50));
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var fsHold = new FuzzySet("Hold"' new TrapezoidalFunction(-50' 0' 0' 50));
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var fsLong = new FuzzySet("Buy"' new TrapezoidalFunction(0' 100' 100' 100));
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var fsLong = new FuzzySet("Buy"' new TrapezoidalFunction(0' 100' 100' 100));
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var fsLong = new FuzzySet("Buy"' new TrapezoidalFunction(0' 100' 100' 100));
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var lvSignal = new LinguisticVariable("Signal"' -100' 100);
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: var lvSignal = new LinguisticVariable("Signal"' -100' 100);
Magic Number,QuantConnect.Algorithm.CSharp,FuzzyEngine,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FuzzyInferenceAlgorithm.cs,FuzzyEngine,The following statement contains a magic number: IS = new InferenceSystem(fuzzyDB' new CentroidDefuzzifier(1000));
Magic Number,QuantConnect.Algorithm.CSharp,OptionRenameRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionRenameRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 06' 28);
Magic Number,QuantConnect.Algorithm.CSharp,OptionRenameRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionRenameRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 06' 28);
Magic Number,QuantConnect.Algorithm.CSharp,OptionRenameRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionRenameRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 06' 28);
Magic Number,QuantConnect.Algorithm.CSharp,OptionRenameRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionRenameRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 07' 02);
Magic Number,QuantConnect.Algorithm.CSharp,OptionRenameRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionRenameRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 07' 02);
Magic Number,QuantConnect.Algorithm.CSharp,OptionRenameRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionRenameRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 07' 02);
Magic Number,QuantConnect.Algorithm.CSharp,OptionRenameRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionRenameRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(1000000);
Magic Number,QuantConnect.Algorithm.CSharp,OptionRenameRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionRenameRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  if (Time.Day == 28 && Time.Hour > 9 && Time.Minute > 0)                  {                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 33 && x.Expiry.Date == new DateTime(2013' 08' 17))                              .FirstOrDefault();                            if (contract != null)                          {                              // Buying option                              Buy(contract.Symbol' 1);                                // Buying the underlying stock                              var underlyingSymbol = contract.Symbol.Underlying;                              Buy(underlyingSymbol' 100);                                // checks                              if (contract.AskPrice != 1.1m)                              {                                  throw new Exception("Regression test failed: current ask price was not loaded from NWSA backtest file and is not $1.1");                              }                          }                      }                  }              }              else              {                  if (Time.Day == 2 && Time.Hour > 14 && Time.Minute > 0)                  {                      // selling positions                      Liquidate();                        // checks                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 33 && x.Expiry.Date == new DateTime(2013' 08' 17))                              .FirstOrDefault();                            if (contract.BidPrice != 0.05m)                          {                              throw new Exception("Regression test failed: current bid price was not loaded from FOXA file and is not $0.05");                          }                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionRenameRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionRenameRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  if (Time.Day == 28 && Time.Hour > 9 && Time.Minute > 0)                  {                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 33 && x.Expiry.Date == new DateTime(2013' 08' 17))                              .FirstOrDefault();                            if (contract != null)                          {                              // Buying option                              Buy(contract.Symbol' 1);                                // Buying the underlying stock                              var underlyingSymbol = contract.Symbol.Underlying;                              Buy(underlyingSymbol' 100);                                // checks                              if (contract.AskPrice != 1.1m)                              {                                  throw new Exception("Regression test failed: current ask price was not loaded from NWSA backtest file and is not $1.1");                              }                          }                      }                  }              }              else              {                  if (Time.Day == 2 && Time.Hour > 14 && Time.Minute > 0)                  {                      // selling positions                      Liquidate();                        // checks                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 33 && x.Expiry.Date == new DateTime(2013' 08' 17))                              .FirstOrDefault();                            if (contract.BidPrice != 0.05m)                          {                              throw new Exception("Regression test failed: current bid price was not loaded from FOXA file and is not $0.05");                          }                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionRenameRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionRenameRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  if (Time.Day == 28 && Time.Hour > 9 && Time.Minute > 0)                  {                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 33 && x.Expiry.Date == new DateTime(2013' 08' 17))                              .FirstOrDefault();                            if (contract != null)                          {                              // Buying option                              Buy(contract.Symbol' 1);                                // Buying the underlying stock                              var underlyingSymbol = contract.Symbol.Underlying;                              Buy(underlyingSymbol' 100);                                // checks                              if (contract.AskPrice != 1.1m)                              {                                  throw new Exception("Regression test failed: current ask price was not loaded from NWSA backtest file and is not $1.1");                              }                          }                      }                  }              }              else              {                  if (Time.Day == 2 && Time.Hour > 14 && Time.Minute > 0)                  {                      // selling positions                      Liquidate();                        // checks                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 33 && x.Expiry.Date == new DateTime(2013' 08' 17))                              .FirstOrDefault();                            if (contract.BidPrice != 0.05m)                          {                              throw new Exception("Regression test failed: current bid price was not loaded from FOXA file and is not $0.05");                          }                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionRenameRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionRenameRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  if (Time.Day == 28 && Time.Hour > 9 && Time.Minute > 0)                  {                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 33 && x.Expiry.Date == new DateTime(2013' 08' 17))                              .FirstOrDefault();                            if (contract != null)                          {                              // Buying option                              Buy(contract.Symbol' 1);                                // Buying the underlying stock                              var underlyingSymbol = contract.Symbol.Underlying;                              Buy(underlyingSymbol' 100);                                // checks                              if (contract.AskPrice != 1.1m)                              {                                  throw new Exception("Regression test failed: current ask price was not loaded from NWSA backtest file and is not $1.1");                              }                          }                      }                  }              }              else              {                  if (Time.Day == 2 && Time.Hour > 14 && Time.Minute > 0)                  {                      // selling positions                      Liquidate();                        // checks                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 33 && x.Expiry.Date == new DateTime(2013' 08' 17))                              .FirstOrDefault();                            if (contract.BidPrice != 0.05m)                          {                              throw new Exception("Regression test failed: current bid price was not loaded from FOXA file and is not $0.05");                          }                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionRenameRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionRenameRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  if (Time.Day == 28 && Time.Hour > 9 && Time.Minute > 0)                  {                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 33 && x.Expiry.Date == new DateTime(2013' 08' 17))                              .FirstOrDefault();                            if (contract != null)                          {                              // Buying option                              Buy(contract.Symbol' 1);                                // Buying the underlying stock                              var underlyingSymbol = contract.Symbol.Underlying;                              Buy(underlyingSymbol' 100);                                // checks                              if (contract.AskPrice != 1.1m)                              {                                  throw new Exception("Regression test failed: current ask price was not loaded from NWSA backtest file and is not $1.1");                              }                          }                      }                  }              }              else              {                  if (Time.Day == 2 && Time.Hour > 14 && Time.Minute > 0)                  {                      // selling positions                      Liquidate();                        // checks                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 33 && x.Expiry.Date == new DateTime(2013' 08' 17))                              .FirstOrDefault();                            if (contract.BidPrice != 0.05m)                          {                              throw new Exception("Regression test failed: current bid price was not loaded from FOXA file and is not $0.05");                          }                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionRenameRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionRenameRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  if (Time.Day == 28 && Time.Hour > 9 && Time.Minute > 0)                  {                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 33 && x.Expiry.Date == new DateTime(2013' 08' 17))                              .FirstOrDefault();                            if (contract != null)                          {                              // Buying option                              Buy(contract.Symbol' 1);                                // Buying the underlying stock                              var underlyingSymbol = contract.Symbol.Underlying;                              Buy(underlyingSymbol' 100);                                // checks                              if (contract.AskPrice != 1.1m)                              {                                  throw new Exception("Regression test failed: current ask price was not loaded from NWSA backtest file and is not $1.1");                              }                          }                      }                  }              }              else              {                  if (Time.Day == 2 && Time.Hour > 14 && Time.Minute > 0)                  {                      // selling positions                      Liquidate();                        // checks                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 33 && x.Expiry.Date == new DateTime(2013' 08' 17))                              .FirstOrDefault();                            if (contract.BidPrice != 0.05m)                          {                              throw new Exception("Regression test failed: current bid price was not loaded from FOXA file and is not $0.05");                          }                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionRenameRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionRenameRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  if (Time.Day == 28 && Time.Hour > 9 && Time.Minute > 0)                  {                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 33 && x.Expiry.Date == new DateTime(2013' 08' 17))                              .FirstOrDefault();                            if (contract != null)                          {                              // Buying option                              Buy(contract.Symbol' 1);                                // Buying the underlying stock                              var underlyingSymbol = contract.Symbol.Underlying;                              Buy(underlyingSymbol' 100);                                // checks                              if (contract.AskPrice != 1.1m)                              {                                  throw new Exception("Regression test failed: current ask price was not loaded from NWSA backtest file and is not $1.1");                              }                          }                      }                  }              }              else              {                  if (Time.Day == 2 && Time.Hour > 14 && Time.Minute > 0)                  {                      // selling positions                      Liquidate();                        // checks                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 33 && x.Expiry.Date == new DateTime(2013' 08' 17))                              .FirstOrDefault();                            if (contract.BidPrice != 0.05m)                          {                              throw new Exception("Regression test failed: current bid price was not loaded from FOXA file and is not $0.05");                          }                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionRenameRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionRenameRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  if (Time.Day == 28 && Time.Hour > 9 && Time.Minute > 0)                  {                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 33 && x.Expiry.Date == new DateTime(2013' 08' 17))                              .FirstOrDefault();                            if (contract != null)                          {                              // Buying option                              Buy(contract.Symbol' 1);                                // Buying the underlying stock                              var underlyingSymbol = contract.Symbol.Underlying;                              Buy(underlyingSymbol' 100);                                // checks                              if (contract.AskPrice != 1.1m)                              {                                  throw new Exception("Regression test failed: current ask price was not loaded from NWSA backtest file and is not $1.1");                              }                          }                      }                  }              }              else              {                  if (Time.Day == 2 && Time.Hour > 14 && Time.Minute > 0)                  {                      // selling positions                      Liquidate();                        // checks                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 33 && x.Expiry.Date == new DateTime(2013' 08' 17))                              .FirstOrDefault();                            if (contract.BidPrice != 0.05m)                          {                              throw new Exception("Regression test failed: current bid price was not loaded from FOXA file and is not $0.05");                          }                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionRenameRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionRenameRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  if (Time.Day == 28 && Time.Hour > 9 && Time.Minute > 0)                  {                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 33 && x.Expiry.Date == new DateTime(2013' 08' 17))                              .FirstOrDefault();                            if (contract != null)                          {                              // Buying option                              Buy(contract.Symbol' 1);                                // Buying the underlying stock                              var underlyingSymbol = contract.Symbol.Underlying;                              Buy(underlyingSymbol' 100);                                // checks                              if (contract.AskPrice != 1.1m)                              {                                  throw new Exception("Regression test failed: current ask price was not loaded from NWSA backtest file and is not $1.1");                              }                          }                      }                  }              }              else              {                  if (Time.Day == 2 && Time.Hour > 14 && Time.Minute > 0)                  {                      // selling positions                      Liquidate();                        // checks                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 33 && x.Expiry.Date == new DateTime(2013' 08' 17))                              .FirstOrDefault();                            if (contract.BidPrice != 0.05m)                          {                              throw new Exception("Regression test failed: current bid price was not loaded from FOXA file and is not $0.05");                          }                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionRenameRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionRenameRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  if (Time.Day == 28 && Time.Hour > 9 && Time.Minute > 0)                  {                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 33 && x.Expiry.Date == new DateTime(2013' 08' 17))                              .FirstOrDefault();                            if (contract != null)                          {                              // Buying option                              Buy(contract.Symbol' 1);                                // Buying the underlying stock                              var underlyingSymbol = contract.Symbol.Underlying;                              Buy(underlyingSymbol' 100);                                // checks                              if (contract.AskPrice != 1.1m)                              {                                  throw new Exception("Regression test failed: current ask price was not loaded from NWSA backtest file and is not $1.1");                              }                          }                      }                  }              }              else              {                  if (Time.Day == 2 && Time.Hour > 14 && Time.Minute > 0)                  {                      // selling positions                      Liquidate();                        // checks                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 33 && x.Expiry.Date == new DateTime(2013' 08' 17))                              .FirstOrDefault();                            if (contract.BidPrice != 0.05m)                          {                              throw new Exception("Regression test failed: current bid price was not loaded from FOXA file and is not $0.05");                          }                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionRenameRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionRenameRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  if (Time.Day == 28 && Time.Hour > 9 && Time.Minute > 0)                  {                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 33 && x.Expiry.Date == new DateTime(2013' 08' 17))                              .FirstOrDefault();                            if (contract != null)                          {                              // Buying option                              Buy(contract.Symbol' 1);                                // Buying the underlying stock                              var underlyingSymbol = contract.Symbol.Underlying;                              Buy(underlyingSymbol' 100);                                // checks                              if (contract.AskPrice != 1.1m)                              {                                  throw new Exception("Regression test failed: current ask price was not loaded from NWSA backtest file and is not $1.1");                              }                          }                      }                  }              }              else              {                  if (Time.Day == 2 && Time.Hour > 14 && Time.Minute > 0)                  {                      // selling positions                      Liquidate();                        // checks                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 33 && x.Expiry.Date == new DateTime(2013' 08' 17))                              .FirstOrDefault();                            if (contract.BidPrice != 0.05m)                          {                              throw new Exception("Regression test failed: current bid price was not loaded from FOXA file and is not $0.05");                          }                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionRenameRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionRenameRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  if (Time.Day == 28 && Time.Hour > 9 && Time.Minute > 0)                  {                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 33 && x.Expiry.Date == new DateTime(2013' 08' 17))                              .FirstOrDefault();                            if (contract != null)                          {                              // Buying option                              Buy(contract.Symbol' 1);                                // Buying the underlying stock                              var underlyingSymbol = contract.Symbol.Underlying;                              Buy(underlyingSymbol' 100);                                // checks                              if (contract.AskPrice != 1.1m)                              {                                  throw new Exception("Regression test failed: current ask price was not loaded from NWSA backtest file and is not $1.1");                              }                          }                      }                  }              }              else              {                  if (Time.Day == 2 && Time.Hour > 14 && Time.Minute > 0)                  {                      // selling positions                      Liquidate();                        // checks                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 33 && x.Expiry.Date == new DateTime(2013' 08' 17))                              .FirstOrDefault();                            if (contract.BidPrice != 0.05m)                          {                              throw new Exception("Regression test failed: current bid price was not loaded from FOXA file and is not $0.05");                          }                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionRenameRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionRenameRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  if (Time.Day == 28 && Time.Hour > 9 && Time.Minute > 0)                  {                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 33 && x.Expiry.Date == new DateTime(2013' 08' 17))                              .FirstOrDefault();                            if (contract != null)                          {                              // Buying option                              Buy(contract.Symbol' 1);                                // Buying the underlying stock                              var underlyingSymbol = contract.Symbol.Underlying;                              Buy(underlyingSymbol' 100);                                // checks                              if (contract.AskPrice != 1.1m)                              {                                  throw new Exception("Regression test failed: current ask price was not loaded from NWSA backtest file and is not $1.1");                              }                          }                      }                  }              }              else              {                  if (Time.Day == 2 && Time.Hour > 14 && Time.Minute > 0)                  {                      // selling positions                      Liquidate();                        // checks                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 33 && x.Expiry.Date == new DateTime(2013' 08' 17))                              .FirstOrDefault();                            if (contract.BidPrice != 0.05m)                          {                              throw new Exception("Regression test failed: current bid price was not loaded from FOXA file and is not $0.05");                          }                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionSplitRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2014' 06' 06);
Magic Number,QuantConnect.Algorithm.CSharp,OptionSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionSplitRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2014' 06' 06);
Magic Number,QuantConnect.Algorithm.CSharp,OptionSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionSplitRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2014' 06' 06);
Magic Number,QuantConnect.Algorithm.CSharp,OptionSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionSplitRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2014' 06' 09);
Magic Number,QuantConnect.Algorithm.CSharp,OptionSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionSplitRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2014' 06' 09);
Magic Number,QuantConnect.Algorithm.CSharp,OptionSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionSplitRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2014' 06' 09);
Magic Number,QuantConnect.Algorithm.CSharp,OptionSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionSplitRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(1000000);
Magic Number,QuantConnect.Algorithm.CSharp,OptionSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionSplitRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(u => u.IncludeWeeklys()                         .Strikes(-2' +2)                         .Expiration(TimeSpan.Zero' TimeSpan.FromDays(365 * 2)));
Magic Number,QuantConnect.Algorithm.CSharp,OptionSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionSplitRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(u => u.IncludeWeeklys()                         .Strikes(-2' +2)                         .Expiration(TimeSpan.Zero' TimeSpan.FromDays(365 * 2)));
Magic Number,QuantConnect.Algorithm.CSharp,OptionSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionSplitRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(u => u.IncludeWeeklys()                         .Strikes(-2' +2)                         .Expiration(TimeSpan.Zero' TimeSpan.FromDays(365 * 2)));
Magic Number,QuantConnect.Algorithm.CSharp,OptionSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionSplitRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(u => u.IncludeWeeklys()                         .Strikes(-2' +2)                         .Expiration(TimeSpan.Zero' TimeSpan.FromDays(365 * 2)));
Magic Number,QuantConnect.Algorithm.CSharp,OptionSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionSplitRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  if (Time.Hour > 9 && Time.Minute > 0)                  {                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 650)                              .Skip(1)                              .FirstOrDefault();                            if (contract != null)                          {                              Buy(contract.Symbol' 1);                          }                      }                  }              }              else              {                  if (Time.Day > 6 && Time.Hour > 14 && Time.Minute > 0)                  {                      Liquidate();                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionSplitRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  if (Time.Hour > 9 && Time.Minute > 0)                  {                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 650)                              .Skip(1)                              .FirstOrDefault();                            if (contract != null)                          {                              Buy(contract.Symbol' 1);                          }                      }                  }              }              else              {                  if (Time.Day > 6 && Time.Hour > 14 && Time.Minute > 0)                  {                      Liquidate();                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionSplitRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  if (Time.Hour > 9 && Time.Minute > 0)                  {                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 650)                              .Skip(1)                              .FirstOrDefault();                            if (contract != null)                          {                              Buy(contract.Symbol' 1);                          }                      }                  }              }              else              {                  if (Time.Day > 6 && Time.Hour > 14 && Time.Minute > 0)                  {                      Liquidate();                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionSplitRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  if (Time.Hour > 9 && Time.Minute > 0)                  {                      OptionChain chain;                      if (slice.OptionChains.TryGetValue(OptionSymbol' out chain))                      {                          var contract =                              chain.OrderBy(x => x.Expiry)                              .Where(x => x.Right == OptionRight.Call && x.Strike == 650)                              .Skip(1)                              .FirstOrDefault();                            if (contract != null)                          {                              Buy(contract.Symbol' 1);                          }                      }                  }              }              else              {                  if (Time.Day > 6 && Time.Hour > 14 && Time.Minute > 0)                  {                      Liquidate();                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionSplitRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (Portfolio.Invested)              {                  var holdings = Portfolio.Securities.Where(x => x.Value.Holdings.AbsoluteQuantity != 0).First().Value.Holdings.AbsoluteQuantity;                    if (Time.Day == 6 && holdings != 1)                  {                          throw new Exception(string.Format("Expected position quantity of 1 but was {0}"' holdings));                  }                  if (Time.Day == 9 && holdings != 7)                  {                      throw new Exception(string.Format("Expected position quantity of 7 but was {0}"' holdings));                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionSplitRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (Portfolio.Invested)              {                  var holdings = Portfolio.Securities.Where(x => x.Value.Holdings.AbsoluteQuantity != 0).First().Value.Holdings.AbsoluteQuantity;                    if (Time.Day == 6 && holdings != 1)                  {                          throw new Exception(string.Format("Expected position quantity of 1 but was {0}"' holdings));                  }                  if (Time.Day == 9 && holdings != 7)                  {                      throw new Exception(string.Format("Expected position quantity of 7 but was {0}"' holdings));                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OptionSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OptionSplitRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (Portfolio.Invested)              {                  var holdings = Portfolio.Securities.Where(x => x.Value.Holdings.AbsoluteQuantity != 0).First().Value.Holdings.AbsoluteQuantity;                    if (Time.Day == 6 && holdings != 1)                  {                          throw new Exception(string.Format("Expected position quantity of 1 but was {0}"' holdings));                  }                  if (Time.Day == 9 && holdings != 7)                  {                      throw new Exception(string.Format("Expected position quantity of 7 but was {0}"' holdings));                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,PortfolioOptimizationNumericsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\PortfolioOptimizationNumericsAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,PortfolioOptimizationNumericsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\PortfolioOptimizationNumericsAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,PortfolioOptimizationNumericsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\PortfolioOptimizationNumericsAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,PortfolioOptimizationNumericsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\PortfolioOptimizationNumericsAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,PortfolioOptimizationNumericsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\PortfolioOptimizationNumericsAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,PortfolioOptimizationNumericsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\PortfolioOptimizationNumericsAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,PortfolioOptimizationNumericsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\PortfolioOptimizationNumericsAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,PortfolioOptimizationNumericsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\PortfolioOptimizationNumericsAlgorithm.cs,Initialize,The following statement contains a magic number: foreach (var security in Securities)              {                  var history = History(security.Key' TimeSpan.FromDays(365));                  allHistoryBars.Add(history.Select(x => (double)x.Value).ToArray());                  SymbolDataList.Add(new SymbolData(security.Key' history));              }
Magic Number,QuantConnect.Algorithm.CSharp,SymbolData,C:\repos\QuantConnect_Lean\Algorithm.CSharp\PortfolioOptimizationNumericsAlgorithm.cs,SymbolData,The following statement contains a magic number: SMA = new SimpleMovingAverage(365).Of(ROC);
Magic Number,QuantConnect.Algorithm.CSharp,SymbolData,C:\repos\QuantConnect_Lean\Algorithm.CSharp\PortfolioOptimizationNumericsAlgorithm.cs,SymbolData,The following statement contains a magic number: STD = new StandardDeviation(365).Of(ROC);
Magic Number,QuantConnect.Algorithm.CSharp,SymbolData,C:\repos\QuantConnect_Lean\Algorithm.CSharp\PortfolioOptimizationNumericsAlgorithm.cs,SymbolData,The following statement contains a magic number: ADX = algorithm.ADX(symbol' 14);
Magic Number,QuantConnect.Algorithm.CSharp,SymbolData,C:\repos\QuantConnect_Lean\Algorithm.CSharp\PortfolioOptimizationNumericsAlgorithm.cs,SymbolData,The following statement contains a magic number: EMA = algorithm.EMA(symbol' 14);
Magic Number,QuantConnect.Algorithm.CSharp,SymbolData,C:\repos\QuantConnect_Lean\Algorithm.CSharp\PortfolioOptimizationNumericsAlgorithm.cs,SymbolData,The following statement contains a magic number: MACD = algorithm.MACD(symbol' 12' 26' 9);
Magic Number,QuantConnect.Algorithm.CSharp,SymbolData,C:\repos\QuantConnect_Lean\Algorithm.CSharp\PortfolioOptimizationNumericsAlgorithm.cs,SymbolData,The following statement contains a magic number: MACD = algorithm.MACD(symbol' 12' 26' 9);
Magic Number,QuantConnect.Algorithm.CSharp,SymbolData,C:\repos\QuantConnect_Lean\Algorithm.CSharp\PortfolioOptimizationNumericsAlgorithm.cs,SymbolData,The following statement contains a magic number: MACD = algorithm.MACD(symbol' 12' 26' 9);
Magic Number,QuantConnect.Algorithm.CSharp,SymbolData,C:\repos\QuantConnect_Lean\Algorithm.CSharp\PortfolioOptimizationNumericsAlgorithm.cs,TryExit,The following statement contains a magic number: const decimal exitTolerance = 1 + 2 * PercentTolerance;
Magic Number,QuantConnect.Algorithm.CSharp,DailyFxAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DailyFxAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2016' 05' 26);
Magic Number,QuantConnect.Algorithm.CSharp,DailyFxAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DailyFxAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2016' 05' 26);
Magic Number,QuantConnect.Algorithm.CSharp,DailyFxAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DailyFxAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2016' 05' 26);
Magic Number,QuantConnect.Algorithm.CSharp,DailyFxAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DailyFxAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2016' 05' 27);
Magic Number,QuantConnect.Algorithm.CSharp,DailyFxAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DailyFxAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2016' 05' 27);
Magic Number,QuantConnect.Algorithm.CSharp,DailyFxAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DailyFxAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2016' 05' 27);
Magic Number,QuantConnect.Algorithm.CSharp,DailyFxAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DailyFxAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateForexAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateForexAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2014' 5' 7);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateForexAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateForexAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2014' 5' 7);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateForexAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateForexAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2014' 5' 7);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateForexAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateForexAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2014' 5' 15);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateForexAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateForexAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2014' 5' 15);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateForexAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateForexAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2014' 5' 15);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateForexAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateForexAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateForexAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateForexAlgorithm.cs,Initialize,The following statement contains a magic number: var dailyHistory = History(5' Resolution.Daily);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateForexAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateForexAlgorithm.cs,Initialize,The following statement contains a magic number: var hourHistory = History(5' Resolution.Hour);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateForexAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateForexAlgorithm.cs,Initialize,The following statement contains a magic number: var minuteHistory = History(5' Resolution.Minute);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateForexAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateForexAlgorithm.cs,Initialize,The following statement contains a magic number: var secondHistory = History(5' Resolution.Second);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateForexAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateForexAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  SetHoldings("EURUSD"' .5);                  SetHoldings("NZDUSD"' .5);                  Log(string.Join("' "' data.Values));              }
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateForexAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateForexAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  SetHoldings("EURUSD"' .5);                  SetHoldings("NZDUSD"' .5);                  Log(string.Join("' "' data.Values));              }
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 12' 24);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(u => u.Strikes(-2' +2)                                     .Expiration(TimeSpan.Zero' TimeSpan.FromDays(180)));
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(u => u.Strikes(-2' +2)                                     .Expiration(TimeSpan.Zero' TimeSpan.FromDays(180)));
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateOptionsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateOptionsAlgorithm.cs,Initialize,The following statement contains a magic number: option.SetFilter(u => u.Strikes(-2' +2)                                     .Expiration(TimeSpan.Zero' TimeSpan.FromDays(180)));
Magic Number,QuantConnect.Algorithm.CSharp,CoarseFundamentalTop5Algorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CoarseUniverseTop5DollarVolumeAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2014' 01' 01);
Magic Number,QuantConnect.Algorithm.CSharp,CoarseFundamentalTop5Algorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CoarseUniverseTop5DollarVolumeAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 01' 01);
Magic Number,QuantConnect.Algorithm.CSharp,CoarseFundamentalTop5Algorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CoarseUniverseTop5DollarVolumeAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(50000);
Magic Number,QuantConnect.Algorithm.CSharp,CustomBenchmarkAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomBenchmarkAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,CustomBenchmarkAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomBenchmarkAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,CustomBenchmarkAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomBenchmarkAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,CustomBenchmarkAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomBenchmarkAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,CustomBenchmarkAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomBenchmarkAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,CustomBenchmarkAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomBenchmarkAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,CustomBenchmarkAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomBenchmarkAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,CustomBrokerageErrorHandlerAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomBrokerageMessageHandlerAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 1' 1);
Magic Number,QuantConnect.Algorithm.CSharp,CustomBrokerageErrorHandlerAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomBrokerageMessageHandlerAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(25000);
Magic Number,QuantConnect.Algorithm.CSharp,CustomBrokerageErrorHandlerAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomBrokerageMessageHandlerAlgorithm.cs,OnData,The following statement contains a magic number: Order("SPY"' 100);
Magic Number,QuantConnect.Algorithm.CSharp,FractionalQuantityRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FractionalQuantityRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 11' 12);
Magic Number,QuantConnect.Algorithm.CSharp,FractionalQuantityRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FractionalQuantityRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 11' 12);
Magic Number,QuantConnect.Algorithm.CSharp,FractionalQuantityRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FractionalQuantityRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 11' 12);
Magic Number,QuantConnect.Algorithm.CSharp,FractionalQuantityRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FractionalQuantityRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2016' 04' 01);
Magic Number,QuantConnect.Algorithm.CSharp,FractionalQuantityRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FractionalQuantityRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2016' 04' 01);
Magic Number,QuantConnect.Algorithm.CSharp,FractionalQuantityRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FractionalQuantityRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,FractionalQuantityRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FractionalQuantityRegressionAlgorithm.cs,DataConsolidated,The following statement contains a magic number: if (!Portfolio.Invested)              {                  Order("BTCUSD"' quantity);              }              else if (Portfolio["BTCUSD"].Quantity == quantity)              {                  Order("BTCUSD"' 0.1);              }              else if (Portfolio["BTCUSD"].Quantity == quantity + 0.1m)              {                  Order("BTCUSD"' 0.01);              }              else if (Portfolio["BTCUSD"].Quantity == quantity + 0.11m)              {                  Order("BTCUSD"' -0.02);              }              else if (Portfolio["BTCUSD"].Quantity == quantity + 0.09m)              {                  //should fail                  Order("BTCUSD"' 0.001);                    SetHoldings("BTCUSD"' -2.0m);                  SetHoldings("BTCUSD"' 2.0m);                  Quit();              }
Magic Number,QuantConnect.Algorithm.CSharp,FractionalQuantityRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FractionalQuantityRegressionAlgorithm.cs,DataConsolidated,The following statement contains a magic number: if (!Portfolio.Invested)              {                  Order("BTCUSD"' quantity);              }              else if (Portfolio["BTCUSD"].Quantity == quantity)              {                  Order("BTCUSD"' 0.1);              }              else if (Portfolio["BTCUSD"].Quantity == quantity + 0.1m)              {                  Order("BTCUSD"' 0.01);              }              else if (Portfolio["BTCUSD"].Quantity == quantity + 0.11m)              {                  Order("BTCUSD"' -0.02);              }              else if (Portfolio["BTCUSD"].Quantity == quantity + 0.09m)              {                  //should fail                  Order("BTCUSD"' 0.001);                    SetHoldings("BTCUSD"' -2.0m);                  SetHoldings("BTCUSD"' 2.0m);                  Quit();              }
Magic Number,QuantConnect.Algorithm.CSharp,FractionalQuantityRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FractionalQuantityRegressionAlgorithm.cs,DataConsolidated,The following statement contains a magic number: if (!Portfolio.Invested)              {                  Order("BTCUSD"' quantity);              }              else if (Portfolio["BTCUSD"].Quantity == quantity)              {                  Order("BTCUSD"' 0.1);              }              else if (Portfolio["BTCUSD"].Quantity == quantity + 0.1m)              {                  Order("BTCUSD"' 0.01);              }              else if (Portfolio["BTCUSD"].Quantity == quantity + 0.11m)              {                  Order("BTCUSD"' -0.02);              }              else if (Portfolio["BTCUSD"].Quantity == quantity + 0.09m)              {                  //should fail                  Order("BTCUSD"' 0.001);                    SetHoldings("BTCUSD"' -2.0m);                  SetHoldings("BTCUSD"' 2.0m);                  Quit();              }
Magic Number,QuantConnect.Algorithm.CSharp,FractionalQuantityRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\FractionalQuantityRegressionAlgorithm.cs,DataConsolidated,The following statement contains a magic number: if (!Portfolio.Invested)              {                  Order("BTCUSD"' quantity);              }              else if (Portfolio["BTCUSD"].Quantity == quantity)              {                  Order("BTCUSD"' 0.1);              }              else if (Portfolio["BTCUSD"].Quantity == quantity + 0.1m)              {                  Order("BTCUSD"' 0.01);              }              else if (Portfolio["BTCUSD"].Quantity == quantity + 0.11m)              {                  Order("BTCUSD"' -0.02);              }              else if (Portfolio["BTCUSD"].Quantity == quantity + 0.09m)              {                  //should fail                  Order("BTCUSD"' 0.001);                    SetHoldings("BTCUSD"' -2.0m);                  SetHoldings("BTCUSD"' 2.0m);                  Quit();              }
Magic Number,QuantConnect.Algorithm.CSharp,CustomDataRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2011' 9' 13);
Magic Number,QuantConnect.Algorithm.CSharp,CustomDataRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2011' 9' 13);
Magic Number,QuantConnect.Algorithm.CSharp,CustomDataRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2011' 9' 13);
Magic Number,QuantConnect.Algorithm.CSharp,CustomDataRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 12' 01);
Magic Number,QuantConnect.Algorithm.CSharp,CustomDataRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 12' 01);
Magic Number,QuantConnect.Algorithm.CSharp,CustomDataRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,CustomDataUniverseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataUniverseAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 01' 05);
Magic Number,QuantConnect.Algorithm.CSharp,CustomDataUniverseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataUniverseAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 01' 05);
Magic Number,QuantConnect.Algorithm.CSharp,CustomDataUniverseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataUniverseAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 07' 01);
Magic Number,QuantConnect.Algorithm.CSharp,CustomDataUniverseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataUniverseAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 07' 01);
Magic Number,QuantConnect.Algorithm.CSharp,CustomDataUniverseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataUniverseAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,CustomDataUniverseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataUniverseAlgorithm.cs,Initialize,The following statement contains a magic number: AddUniverse<NyseTopGainers>("universe-nyse-top-gainers"' Resolution.Daily' data =>              {                  // define our selection criteria                  return from d in data                         // pick top 2 gainers to bet against                         where d.TopGainersRank <= 2                         select d.Symbol;              });
Magic Number,QuantConnect.Algorithm.CSharp,NyseTopGainers,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataUniverseAlgorithm.cs,Reader,The following statement contains a magic number: if (!isLiveMode)                  {                      // backtest gets data from csv file in dropbox                      var csv = line.Split(''');                      return new NyseTopGainers                      {                          Time = DateTime.ParseExact(csv[0]' "yyyyMMdd"' null)'                          Symbol = Symbol.Create(csv[1]' SecurityType.Equity' Market.USA)'                          TopGainersRank = int.Parse(csv[2])                      };                  }
Magic Number,QuantConnect.Algorithm.CSharp,CustomModelsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomModelsAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 01);
Magic Number,QuantConnect.Algorithm.CSharp,CustomModelsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomModelsAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 01);
Magic Number,QuantConnect.Algorithm.CSharp,CustomModelsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomModelsAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 31);
Magic Number,QuantConnect.Algorithm.CSharp,CustomModelsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomModelsAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 31);
Magic Number,QuantConnect.Algorithm.CSharp,CustomModelsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomModelsAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 31);
Magic Number,QuantConnect.Algorithm.CSharp,CustomModelsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomModelsAlgorithm.cs,OnData,The following statement contains a magic number: if (Time.Day > 10 && _security.Holdings.Quantity <= 0)              {                  var quantity = CalculateOrderQuantity(_spy' .5m);                  Log("MarketOrder: " + quantity);                  MarketOrder(_spy' quantity' asynchronous: true); // async needed for partial fill market orders              }              else if (Time.Day > 20 && _security.Holdings.Quantity >= 0)              {                  var quantity = CalculateOrderQuantity(_spy' -.5m);                  Log("MarketOrder: " + quantity);                  MarketOrder(_spy' quantity' asynchronous: true); // async needed for partial fill market orders              }
Magic Number,QuantConnect.Algorithm.CSharp,CustomModelsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomModelsAlgorithm.cs,OnData,The following statement contains a magic number: if (Time.Day > 10 && _security.Holdings.Quantity <= 0)              {                  var quantity = CalculateOrderQuantity(_spy' .5m);                  Log("MarketOrder: " + quantity);                  MarketOrder(_spy' quantity' asynchronous: true); // async needed for partial fill market orders              }              else if (Time.Day > 20 && _security.Holdings.Quantity >= 0)              {                  var quantity = CalculateOrderQuantity(_spy' -.5m);                  Log("MarketOrder: " + quantity);                  MarketOrder(_spy' quantity' asynchronous: true); // async needed for partial fill market orders              }
Magic Number,QuantConnect.Algorithm.CSharp,CustomFillModel,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomModelsAlgorithm.cs,MarketFill,The following statement contains a magic number: var absoluteFillQuantity = (int) (Math.Min(absoluteRemaining' _random.Next(0' 2*(int)order.AbsoluteQuantity)));
Magic Number,QuantConnect.Algorithm.CSharp,CustomSlippageModel,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomModelsAlgorithm.cs,GetSlippageApproximation,The following statement contains a magic number: var slippage = asset.Price*0.0001m*(decimal) Math.Log10(2*(double) order.AbsoluteQuantity);
Magic Number,QuantConnect.Algorithm.CSharp,CustomSecurityInitializerAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomSecurityInitializerAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 01);
Magic Number,QuantConnect.Algorithm.CSharp,CustomSecurityInitializerAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomSecurityInitializerAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 01);
Magic Number,QuantConnect.Algorithm.CSharp,CustomSecurityInitializerAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomSecurityInitializerAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 11' 01);
Magic Number,QuantConnect.Algorithm.CSharp,CustomSecurityInitializerAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomSecurityInitializerAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 11' 01);
Magic Number,QuantConnect.Algorithm.CSharp,DelistingEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DelistingEventsAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2007' 05' 16);
Magic Number,QuantConnect.Algorithm.CSharp,DelistingEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DelistingEventsAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2007' 05' 16);
Magic Number,QuantConnect.Algorithm.CSharp,DelistingEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DelistingEventsAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2007' 05' 16);
Magic Number,QuantConnect.Algorithm.CSharp,DelistingEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DelistingEventsAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2007' 05' 25);
Magic Number,QuantConnect.Algorithm.CSharp,DelistingEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DelistingEventsAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2007' 05' 25);
Magic Number,QuantConnect.Algorithm.CSharp,DelistingEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DelistingEventsAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2007' 05' 25);
Magic Number,QuantConnect.Algorithm.CSharp,DelistingEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DelistingEventsAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,DropboxBaseDataUniverseSelectionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DropboxBaseDataUniverseSelectionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 01' 01);
Magic Number,QuantConnect.Algorithm.CSharp,DropboxBaseDataUniverseSelectionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DropboxBaseDataUniverseSelectionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 12' 31);
Magic Number,QuantConnect.Algorithm.CSharp,DropboxBaseDataUniverseSelectionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DropboxBaseDataUniverseSelectionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 12' 31);
Magic Number,QuantConnect.Algorithm.CSharp,DropboxBaseDataUniverseSelectionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DropboxBaseDataUniverseSelectionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 12' 31);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 08);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 08);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 08);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: _spyDailySma = new SimpleMovingAverage(14);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: var tradeBarHistory = History<TradeBar>("SPY"' TimeSpan.FromDays(365));
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: AssertHistoryCount("History<TradeBar>(\"SPY\"' TimeSpan.FromDays(365))"' tradeBarHistory' 250);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: AssertHistoryCount("History<TradeBar>(\"SPY\"' TimeSpan.FromDays(1)' Resolution.Minute)"' tradeBarHistory' 390);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: tradeBarHistory = History<TradeBar>("SPY"' 14).ToList();
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: AssertHistoryCount("History<TradeBar>(\"SPY\"' 14)"' tradeBarHistory' 14);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: tradeBarHistory = History<TradeBar>("SPY"' 14' Resolution.Minute);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: AssertHistoryCount("History<TradeBar>(\"SPY\"' 14' Resolution.Minute)"' tradeBarHistory' 14);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: var quandlHistory = History<QuandlFuture>("CHRIS/CME_SP1"' TimeSpan.FromDays(365));
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: AssertHistoryCount("History<Quandl>(\"CHRIS/CME_SP1\"' TimeSpan.FromDays(365))"' quandlHistory' 250);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: quandlHistory = History<QuandlFuture>("CHRIS/CME_SP1"' 14);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: AssertHistoryCount("History<Quandl>(\"CHRIS/CME_SP1\"' 14)"' quandlHistory' 14);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: var allQuandlData = History<QuandlFuture>(TimeSpan.FromDays(365));
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: AssertHistoryCount("History<QuandlFuture>(TimeSpan.FromDays(365))"' allQuandlData' 250);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: allQuandlData = History<QuandlFuture>(Securities.Keys' 14);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: AssertHistoryCount("History<QuandlFuture>(Securities.Keys' 14)"' allQuandlData' 14);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: allQuandlData = History<QuandlFuture>(Securities.Keys' TimeSpan.FromDays(365));
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: AssertHistoryCount("History<QuandlFuture>(Securities.Keys' TimeSpan.FromDays(365))"' allQuandlData' 250);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: AssertHistoryCount("allQuandlData.Get(\"CHRIS/CME_SP1\")"' singleSymbolQuandl' 250);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: AssertHistoryCount("allQuandlData.Get(\"CHRIS/CME_SP1\"' \"Low\")"' quandlSpyLows' 250);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: var allHistory = History(TimeSpan.FromDays(365));
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: AssertHistoryCount("History(TimeSpan.FromDays(365))"' allHistory' 250);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: AssertHistoryCount("History(TimeSpan.FromDays(1)' Resolution.Minute)"' allHistory' 391);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: allHistory = History(Securities.Keys' 100);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: AssertHistoryCount("History(Securities.Keys' 100)"' allHistory' 100);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: allHistory = History(Securities.Keys' 100' Resolution.Minute);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: AssertHistoryCount("History(Securities.Keys' 100' Resolution.Minute)"' allHistory' 101);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: allHistory = History(Securities.Keys' TimeSpan.FromDays(365));
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: AssertHistoryCount("History(Securities.Keys' TimeSpan.FromDays(365))"' allHistory' 250);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: AssertHistoryCount("History(Securities.Keys' TimeSpan.FromDays(1)' Resolution.Minute)"' allHistory' 391);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: AssertHistoryCount("allHistory.Get(\"SPY\")"' tradeBarHistory' 390);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,Initialize,The following statement contains a magic number: AssertHistoryCount("allHistory.Get(\"SPY\"' Field.Close)"' closeHistory' 390);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAlgorithm.cs,OnData,The following statement contains a magic number: if (_count > 5)              {                  throw new Exception("Invalid number of bars arrived. Expected exactly 5");              }
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAndWarmupRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAndWarmupRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 08);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAndWarmupRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAndWarmupRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 08);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAndWarmupRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAndWarmupRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 08);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAndWarmupRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAndWarmupRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAndWarmupRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAndWarmupRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAndWarmupRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAndWarmupRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,HistoryAndWarmupRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HistoryAndWarmupRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(1000000);
Magic Number,QuantConnect.Algorithm.CSharp,LimitFillRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\LimitFillRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,LimitFillRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\LimitFillRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,LimitFillRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\LimitFillRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,LimitFillRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\LimitFillRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,LimitFillRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\LimitFillRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,LimitFillRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\LimitFillRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,LimitFillRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\LimitFillRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,LimitFillRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\LimitFillRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (data.Bars.ContainsKey("SPY"))              {                  if (Time.TimeOfDay.Ticks%TimeSpan.FromHours(1).Ticks == 0)                  {                      var goLong = Time < StartDate + TimeSpan.FromTicks((EndDate - StartDate).Ticks/2);                      var negative = goLong ? 1 : -1;                      LimitOrder("SPY"' negative*10' data["SPY"].Price);                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,LimitFillRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\LimitFillRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (data.Bars.ContainsKey("SPY"))              {                  if (Time.TimeOfDay.Ticks%TimeSpan.FromHours(1).Ticks == 0)                  {                      var goLong = Time < StartDate + TimeSpan.FromTicks((EndDate - StartDate).Ticks/2);                      var negative = goLong ? 1 : -1;                      LimitOrder("SPY"' negative*10' data["SPY"].Price);                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFillForwardAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFillForwardAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 01);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFillForwardAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFillForwardAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 01);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFillForwardAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFillForwardAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 11' 30);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFillForwardAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFillForwardAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 11' 30);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFillForwardAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFillForwardAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 11' 30);
Magic Number,QuantConnect.Algorithm.CSharp,BasicTemplateFillForwardAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BasicTemplateFillForwardAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,BrokerageModelAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BrokerageModelAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,BrokerageModelAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BrokerageModelAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,BrokerageModelAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BrokerageModelAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,BrokerageModelAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BrokerageModelAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,BrokerageModelAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BrokerageModelAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,BrokerageModelAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BrokerageModelAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,BrokerageModelAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BrokerageModelAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(1998' 1' 1);
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2014' 6' 1);
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2014' 6' 1);
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,Initialize,The following statement contains a magic number: foreach (string stock in _symbols)              {                  AddSecurity(SecurityType.Equity' stock' Resolution.Minute);                    _macd = MACD(stock' 12' 26' 9' MovingAverageType.Exponential' Resolution.Daily);                  _macdDic.Add(stock' _macd);                  _rsi = RSI(stock' 14' MovingAverageType.Exponential' Resolution.Daily);                  _rsiDic.Add(stock' _rsi);                    Securities[stock].SetLeverage(10);              }
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,Initialize,The following statement contains a magic number: foreach (string stock in _symbols)              {                  AddSecurity(SecurityType.Equity' stock' Resolution.Minute);                    _macd = MACD(stock' 12' 26' 9' MovingAverageType.Exponential' Resolution.Daily);                  _macdDic.Add(stock' _macd);                  _rsi = RSI(stock' 14' MovingAverageType.Exponential' Resolution.Daily);                  _rsiDic.Add(stock' _rsi);                    Securities[stock].SetLeverage(10);              }
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,Initialize,The following statement contains a magic number: foreach (string stock in _symbols)              {                  AddSecurity(SecurityType.Equity' stock' Resolution.Minute);                    _macd = MACD(stock' 12' 26' 9' MovingAverageType.Exponential' Resolution.Daily);                  _macdDic.Add(stock' _macd);                  _rsi = RSI(stock' 14' MovingAverageType.Exponential' Resolution.Daily);                  _rsiDic.Add(stock' _rsi);                    Securities[stock].SetLeverage(10);              }
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,Initialize,The following statement contains a magic number: foreach (string stock in _symbols)              {                  AddSecurity(SecurityType.Equity' stock' Resolution.Minute);                    _macd = MACD(stock' 12' 26' 9' MovingAverageType.Exponential' Resolution.Daily);                  _macdDic.Add(stock' _macd);                  _rsi = RSI(stock' 14' MovingAverageType.Exponential' Resolution.Daily);                  _rsiDic.Add(stock' _rsi);                    Securities[stock].SetLeverage(10);              }
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,Initialize,The following statement contains a magic number: foreach (string stock in _symbols)              {                  AddSecurity(SecurityType.Equity' stock' Resolution.Minute);                    _macd = MACD(stock' 12' 26' 9' MovingAverageType.Exponential' Resolution.Daily);                  _macdDic.Add(stock' _macd);                  _rsi = RSI(stock' 14' MovingAverageType.Exponential' Resolution.Daily);                  _rsiDic.Add(stock' _rsi);                    Securities[stock].SetLeverage(10);              }
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,OnData,The following statement contains a magic number: if (_counter < 4)              {                  _c[_counter++] = _currCape;              }              //Replaces oldest Cape with current Cape              //Checks to see if current Cape is lowest in the previous quarter              //Indicating a sell off              else              {                  Array.Copy(_c' _cCopy' 4);                  Array.Sort(_cCopy);                  if (_cCopy[0] > _currCape) _newLow = true;                  _c[_counter2++] = _currCape;                  if (_counter2 == 4) _counter2 = 0;              }
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,OnData,The following statement contains a magic number: if (_counter < 4)              {                  _c[_counter++] = _currCape;              }              //Replaces oldest Cape with current Cape              //Checks to see if current Cape is lowest in the previous quarter              //Indicating a sell off              else              {                  Array.Copy(_c' _cCopy' 4);                  Array.Sort(_cCopy);                  if (_cCopy[0] > _currCape) _newLow = true;                  _c[_counter2++] = _currCape;                  if (_counter2 == 4) _counter2 = 0;              }
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,OnData,The following statement contains a magic number: if (_counter < 4)              {                  _c[_counter++] = _currCape;              }              //Replaces oldest Cape with current Cape              //Checks to see if current Cape is lowest in the previous quarter              //Indicating a sell off              else              {                  Array.Copy(_c' _cCopy' 4);                  Array.Sort(_cCopy);                  if (_cCopy[0] > _currCape) _newLow = true;                  _c[_counter2++] = _currCape;                  if (_counter2 == 4) _counter2 = 0;              }
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,OnData,The following statement contains a magic number: try              {                  //Bubble territory                  if (_currCape > 20 && _newLow == false)                  {                      foreach (string stock in _symbols)                      {                          //Order stock based on MACD                          //During market hours' stock is trading' and sufficient cash                          if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 70                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                          //Utilize RSI for overbought territories and liquidate that stock                          if (_rsiDic[stock] > 70 && Securities[stock].Holdings.Quantity > 0                                  && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                      }                  }                    // Undervalued territory                  else if (_newLow)                  {                      foreach (string stock in _symbols)                      {                            //Sell stock based on MACD                          if (Securities[stock].Holdings.Quantity > 0 && _rsiDic[stock] > 30                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                          //Utilize RSI and MACD to understand oversold territories                          else if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 30                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                      }                    }                  // Cape Ratio is missing from orignial data                  // Most recent cape data is most likely to be missing                  else if (_currCape == 0)                  {                      Debug("Exiting due to no CAPE!");                      Quit("CAPE ratio not supplied in data' exiting.");                  }              }              catch (Exception err)              {                  Error(err.Message);              }
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,OnData,The following statement contains a magic number: try              {                  //Bubble territory                  if (_currCape > 20 && _newLow == false)                  {                      foreach (string stock in _symbols)                      {                          //Order stock based on MACD                          //During market hours' stock is trading' and sufficient cash                          if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 70                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                          //Utilize RSI for overbought territories and liquidate that stock                          if (_rsiDic[stock] > 70 && Securities[stock].Holdings.Quantity > 0                                  && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                      }                  }                    // Undervalued territory                  else if (_newLow)                  {                      foreach (string stock in _symbols)                      {                            //Sell stock based on MACD                          if (Securities[stock].Holdings.Quantity > 0 && _rsiDic[stock] > 30                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                          //Utilize RSI and MACD to understand oversold territories                          else if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 30                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                      }                    }                  // Cape Ratio is missing from orignial data                  // Most recent cape data is most likely to be missing                  else if (_currCape == 0)                  {                      Debug("Exiting due to no CAPE!");                      Quit("CAPE ratio not supplied in data' exiting.");                  }              }              catch (Exception err)              {                  Error(err.Message);              }
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,OnData,The following statement contains a magic number: try              {                  //Bubble territory                  if (_currCape > 20 && _newLow == false)                  {                      foreach (string stock in _symbols)                      {                          //Order stock based on MACD                          //During market hours' stock is trading' and sufficient cash                          if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 70                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                          //Utilize RSI for overbought territories and liquidate that stock                          if (_rsiDic[stock] > 70 && Securities[stock].Holdings.Quantity > 0                                  && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                      }                  }                    // Undervalued territory                  else if (_newLow)                  {                      foreach (string stock in _symbols)                      {                            //Sell stock based on MACD                          if (Securities[stock].Holdings.Quantity > 0 && _rsiDic[stock] > 30                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                          //Utilize RSI and MACD to understand oversold territories                          else if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 30                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                      }                    }                  // Cape Ratio is missing from orignial data                  // Most recent cape data is most likely to be missing                  else if (_currCape == 0)                  {                      Debug("Exiting due to no CAPE!");                      Quit("CAPE ratio not supplied in data' exiting.");                  }              }              catch (Exception err)              {                  Error(err.Message);              }
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,OnData,The following statement contains a magic number: try              {                  //Bubble territory                  if (_currCape > 20 && _newLow == false)                  {                      foreach (string stock in _symbols)                      {                          //Order stock based on MACD                          //During market hours' stock is trading' and sufficient cash                          if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 70                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                          //Utilize RSI for overbought territories and liquidate that stock                          if (_rsiDic[stock] > 70 && Securities[stock].Holdings.Quantity > 0                                  && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                      }                  }                    // Undervalued territory                  else if (_newLow)                  {                      foreach (string stock in _symbols)                      {                            //Sell stock based on MACD                          if (Securities[stock].Holdings.Quantity > 0 && _rsiDic[stock] > 30                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                          //Utilize RSI and MACD to understand oversold territories                          else if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 30                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                      }                    }                  // Cape Ratio is missing from orignial data                  // Most recent cape data is most likely to be missing                  else if (_currCape == 0)                  {                      Debug("Exiting due to no CAPE!");                      Quit("CAPE ratio not supplied in data' exiting.");                  }              }              catch (Exception err)              {                  Error(err.Message);              }
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,OnData,The following statement contains a magic number: try              {                  //Bubble territory                  if (_currCape > 20 && _newLow == false)                  {                      foreach (string stock in _symbols)                      {                          //Order stock based on MACD                          //During market hours' stock is trading' and sufficient cash                          if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 70                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                          //Utilize RSI for overbought territories and liquidate that stock                          if (_rsiDic[stock] > 70 && Securities[stock].Holdings.Quantity > 0                                  && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                      }                  }                    // Undervalued territory                  else if (_newLow)                  {                      foreach (string stock in _symbols)                      {                            //Sell stock based on MACD                          if (Securities[stock].Holdings.Quantity > 0 && _rsiDic[stock] > 30                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                          //Utilize RSI and MACD to understand oversold territories                          else if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 30                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                      }                    }                  // Cape Ratio is missing from orignial data                  // Most recent cape data is most likely to be missing                  else if (_currCape == 0)                  {                      Debug("Exiting due to no CAPE!");                      Quit("CAPE ratio not supplied in data' exiting.");                  }              }              catch (Exception err)              {                  Error(err.Message);              }
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,OnData,The following statement contains a magic number: try              {                  //Bubble territory                  if (_currCape > 20 && _newLow == false)                  {                      foreach (string stock in _symbols)                      {                          //Order stock based on MACD                          //During market hours' stock is trading' and sufficient cash                          if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 70                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                          //Utilize RSI for overbought territories and liquidate that stock                          if (_rsiDic[stock] > 70 && Securities[stock].Holdings.Quantity > 0                                  && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                      }                  }                    // Undervalued territory                  else if (_newLow)                  {                      foreach (string stock in _symbols)                      {                            //Sell stock based on MACD                          if (Securities[stock].Holdings.Quantity > 0 && _rsiDic[stock] > 30                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                          //Utilize RSI and MACD to understand oversold territories                          else if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 30                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                      }                    }                  // Cape Ratio is missing from orignial data                  // Most recent cape data is most likely to be missing                  else if (_currCape == 0)                  {                      Debug("Exiting due to no CAPE!");                      Quit("CAPE ratio not supplied in data' exiting.");                  }              }              catch (Exception err)              {                  Error(err.Message);              }
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,OnData,The following statement contains a magic number: try              {                  //Bubble territory                  if (_currCape > 20 && _newLow == false)                  {                      foreach (string stock in _symbols)                      {                          //Order stock based on MACD                          //During market hours' stock is trading' and sufficient cash                          if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 70                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                          //Utilize RSI for overbought territories and liquidate that stock                          if (_rsiDic[stock] > 70 && Securities[stock].Holdings.Quantity > 0                                  && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                      }                  }                    // Undervalued territory                  else if (_newLow)                  {                      foreach (string stock in _symbols)                      {                            //Sell stock based on MACD                          if (Securities[stock].Holdings.Quantity > 0 && _rsiDic[stock] > 30                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                          //Utilize RSI and MACD to understand oversold territories                          else if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 30                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                      }                    }                  // Cape Ratio is missing from orignial data                  // Most recent cape data is most likely to be missing                  else if (_currCape == 0)                  {                      Debug("Exiting due to no CAPE!");                      Quit("CAPE ratio not supplied in data' exiting.");                  }              }              catch (Exception err)              {                  Error(err.Message);              }
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,OnData,The following statement contains a magic number: try              {                  //Bubble territory                  if (_currCape > 20 && _newLow == false)                  {                      foreach (string stock in _symbols)                      {                          //Order stock based on MACD                          //During market hours' stock is trading' and sufficient cash                          if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 70                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                          //Utilize RSI for overbought territories and liquidate that stock                          if (_rsiDic[stock] > 70 && Securities[stock].Holdings.Quantity > 0                                  && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                      }                  }                    // Undervalued territory                  else if (_newLow)                  {                      foreach (string stock in _symbols)                      {                            //Sell stock based on MACD                          if (Securities[stock].Holdings.Quantity > 0 && _rsiDic[stock] > 30                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                          //Utilize RSI and MACD to understand oversold territories                          else if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 30                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                      }                    }                  // Cape Ratio is missing from orignial data                  // Most recent cape data is most likely to be missing                  else if (_currCape == 0)                  {                      Debug("Exiting due to no CAPE!");                      Quit("CAPE ratio not supplied in data' exiting.");                  }              }              catch (Exception err)              {                  Error(err.Message);              }
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,OnData,The following statement contains a magic number: try              {                  //Bubble territory                  if (_currCape > 20 && _newLow == false)                  {                      foreach (string stock in _symbols)                      {                          //Order stock based on MACD                          //During market hours' stock is trading' and sufficient cash                          if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 70                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                          //Utilize RSI for overbought territories and liquidate that stock                          if (_rsiDic[stock] > 70 && Securities[stock].Holdings.Quantity > 0                                  && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                      }                  }                    // Undervalued territory                  else if (_newLow)                  {                      foreach (string stock in _symbols)                      {                            //Sell stock based on MACD                          if (Securities[stock].Holdings.Quantity > 0 && _rsiDic[stock] > 30                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                          //Utilize RSI and MACD to understand oversold territories                          else if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 30                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                      }                    }                  // Cape Ratio is missing from orignial data                  // Most recent cape data is most likely to be missing                  else if (_currCape == 0)                  {                      Debug("Exiting due to no CAPE!");                      Quit("CAPE ratio not supplied in data' exiting.");                  }              }              catch (Exception err)              {                  Error(err.Message);              }
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,OnData,The following statement contains a magic number: try              {                  //Bubble territory                  if (_currCape > 20 && _newLow == false)                  {                      foreach (string stock in _symbols)                      {                          //Order stock based on MACD                          //During market hours' stock is trading' and sufficient cash                          if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 70                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                          //Utilize RSI for overbought territories and liquidate that stock                          if (_rsiDic[stock] > 70 && Securities[stock].Holdings.Quantity > 0                                  && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                      }                  }                    // Undervalued territory                  else if (_newLow)                  {                      foreach (string stock in _symbols)                      {                            //Sell stock based on MACD                          if (Securities[stock].Holdings.Quantity > 0 && _rsiDic[stock] > 30                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                          //Utilize RSI and MACD to understand oversold territories                          else if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 30                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                      }                    }                  // Cape Ratio is missing from orignial data                  // Most recent cape data is most likely to be missing                  else if (_currCape == 0)                  {                      Debug("Exiting due to no CAPE!");                      Quit("CAPE ratio not supplied in data' exiting.");                  }              }              catch (Exception err)              {                  Error(err.Message);              }
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,OnData,The following statement contains a magic number: try              {                  //Bubble territory                  if (_currCape > 20 && _newLow == false)                  {                      foreach (string stock in _symbols)                      {                          //Order stock based on MACD                          //During market hours' stock is trading' and sufficient cash                          if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 70                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                          //Utilize RSI for overbought territories and liquidate that stock                          if (_rsiDic[stock] > 70 && Securities[stock].Holdings.Quantity > 0                                  && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                      }                  }                    // Undervalued territory                  else if (_newLow)                  {                      foreach (string stock in _symbols)                      {                            //Sell stock based on MACD                          if (Securities[stock].Holdings.Quantity > 0 && _rsiDic[stock] > 30                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                          //Utilize RSI and MACD to understand oversold territories                          else if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 30                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                      }                    }                  // Cape Ratio is missing from orignial data                  // Most recent cape data is most likely to be missing                  else if (_currCape == 0)                  {                      Debug("Exiting due to no CAPE!");                      Quit("CAPE ratio not supplied in data' exiting.");                  }              }              catch (Exception err)              {                  Error(err.Message);              }
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,OnData,The following statement contains a magic number: try              {                  //Bubble territory                  if (_currCape > 20 && _newLow == false)                  {                      foreach (string stock in _symbols)                      {                          //Order stock based on MACD                          //During market hours' stock is trading' and sufficient cash                          if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 70                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                          //Utilize RSI for overbought territories and liquidate that stock                          if (_rsiDic[stock] > 70 && Securities[stock].Holdings.Quantity > 0                                  && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                      }                  }                    // Undervalued territory                  else if (_newLow)                  {                      foreach (string stock in _symbols)                      {                            //Sell stock based on MACD                          if (Securities[stock].Holdings.Quantity > 0 && _rsiDic[stock] > 30                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                          //Utilize RSI and MACD to understand oversold territories                          else if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 30                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                      }                    }                  // Cape Ratio is missing from orignial data                  // Most recent cape data is most likely to be missing                  else if (_currCape == 0)                  {                      Debug("Exiting due to no CAPE!");                      Quit("CAPE ratio not supplied in data' exiting.");                  }              }              catch (Exception err)              {                  Error(err.Message);              }
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,OnData,The following statement contains a magic number: try              {                  //Bubble territory                  if (_currCape > 20 && _newLow == false)                  {                      foreach (string stock in _symbols)                      {                          //Order stock based on MACD                          //During market hours' stock is trading' and sufficient cash                          if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 70                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                          //Utilize RSI for overbought territories and liquidate that stock                          if (_rsiDic[stock] > 70 && Securities[stock].Holdings.Quantity > 0                                  && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                      }                  }                    // Undervalued territory                  else if (_newLow)                  {                      foreach (string stock in _symbols)                      {                            //Sell stock based on MACD                          if (Securities[stock].Holdings.Quantity > 0 && _rsiDic[stock] > 30                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                          //Utilize RSI and MACD to understand oversold territories                          else if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 30                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                      }                    }                  // Cape Ratio is missing from orignial data                  // Most recent cape data is most likely to be missing                  else if (_currCape == 0)                  {                      Debug("Exiting due to no CAPE!");                      Quit("CAPE ratio not supplied in data' exiting.");                  }              }              catch (Exception err)              {                  Error(err.Message);              }
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,OnData,The following statement contains a magic number: try              {                  //Bubble territory                  if (_currCape > 20 && _newLow == false)                  {                      foreach (string stock in _symbols)                      {                          //Order stock based on MACD                          //During market hours' stock is trading' and sufficient cash                          if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 70                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                          //Utilize RSI for overbought territories and liquidate that stock                          if (_rsiDic[stock] > 70 && Securities[stock].Holdings.Quantity > 0                                  && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                      }                  }                    // Undervalued territory                  else if (_newLow)                  {                      foreach (string stock in _symbols)                      {                            //Sell stock based on MACD                          if (Securities[stock].Holdings.Quantity > 0 && _rsiDic[stock] > 30                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                          //Utilize RSI and MACD to understand oversold territories                          else if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 30                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                      }                    }                  // Cape Ratio is missing from orignial data                  // Most recent cape data is most likely to be missing                  else if (_currCape == 0)                  {                      Debug("Exiting due to no CAPE!");                      Quit("CAPE ratio not supplied in data' exiting.");                  }              }              catch (Exception err)              {                  Error(err.Message);              }
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,OnData,The following statement contains a magic number: try              {                  //Bubble territory                  if (_currCape > 20 && _newLow == false)                  {                      foreach (string stock in _symbols)                      {                          //Order stock based on MACD                          //During market hours' stock is trading' and sufficient cash                          if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 70                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                          //Utilize RSI for overbought territories and liquidate that stock                          if (_rsiDic[stock] > 70 && Securities[stock].Holdings.Quantity > 0                                  && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                      }                  }                    // Undervalued territory                  else if (_newLow)                  {                      foreach (string stock in _symbols)                      {                            //Sell stock based on MACD                          if (Securities[stock].Holdings.Quantity > 0 && _rsiDic[stock] > 30                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Sell(stock);                          }                          //Utilize RSI and MACD to understand oversold territories                          else if (Securities[stock].Holdings.Quantity == 0 && _rsiDic[stock] < 30                              && Securities[stock].Price != 0 && Portfolio.Cash > Securities[stock].Price * 100                              && Time.Hour == 9 && Time.Minute == 31)                          {                              Buy(stock);                          }                      }                    }                  // Cape Ratio is missing from orignial data                  // Most recent cape data is most likely to be missing                  else if (_currCape == 0)                  {                      Debug("Exiting due to no CAPE!");                      Quit("CAPE ratio not supplied in data' exiting.");                  }              }              catch (Exception err)              {                  Error(err.Message);              }
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,Buy,The following statement contains a magic number: if (_macdDic[symbol] > 0m)              {                  SetHoldings(symbol' 1);                    Debug("Purchasing: " + symbol + "   MACD: " + _macdDic[symbol] + "   RSI: " + _rsiDic[symbol]                      + "   Price: " + Math.Round(Securities[symbol].Price' 2) + "   Quantity: " + s.Quantity);              }
Magic Number,QuantConnect.Algorithm.CSharp,BubbleAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,Sell,The following statement contains a magic number: if (s.Quantity > 0 && _macdDic[symbol] < 0m)              {                  Liquidate(symbol);                    Debug("Selling: " + symbol + " at sell MACD: " + _macdDic[symbol] + "   RSI: " + _rsiDic[symbol]                      + "   Price: " + Math.Round(Securities[symbol].Price' 2) + "   Profit from sale: " + s.LastTradeProfit);              }
Magic Number,QuantConnect.Algorithm.CSharp,CAPE,C:\repos\QuantConnect_Lean\Algorithm.CSharp\BubbleAlgorithm.cs,Reader,The following statement contains a magic number: try              {                  //Example File Format:                  //Date   |  Price |  Div  | Earning | CPI  | FractionalDate | Interest Rate | RealPrice | RealDiv | RealEarnings | CAPE                  //2014.06  1947.09  37.38   103.12   238.343    2014.37          2.6           1923.95     36.94        101.89     25.55                  var data = line.Split(''');                  //Dates must be in the format YYYY-MM-DD. If your data source does not have this format' you must use                  //DateTime.ParseExact() and explicit declare the format your data source has.                  var dateString = data[0];                  index.Time = DateTime.ParseExact(dateString' Format' _provider);                  index.Cape = Convert.ToDecimal(data[10]' CultureInfo.InvariantCulture);                  index.Symbol = "CAPE";                  index.Value = index.Cape;              }              catch              {                }
Magic Number,QuantConnect.Algorithm.CSharp,CustomChartingAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomChartingAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,CustomChartingAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomChartingAlgorithm.cs,Initialize,The following statement contains a magic number: _resamplePeriod = TimeSpan.FromMinutes((_endDate - _startDate).TotalMinutes / 2000);
Magic Number,QuantConnect.Algorithm.CSharp,CustomChartingAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomChartingAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested && Time.Day % 13 == 0)              {                  Order("SPY"' (int)(Portfolio.MarginRemaining / data["SPY"].Close));                  Plot("Trade Plot"' "Buy"' _lastPrice);              }              else if (Time.Day % 21 == 0 && Portfolio.Invested)              {                  Plot("Trade Plot"' "Sell"' _lastPrice);                  Liquidate();              }
Magic Number,QuantConnect.Algorithm.CSharp,CustomChartingAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomChartingAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested && Time.Day % 13 == 0)              {                  Order("SPY"' (int)(Portfolio.MarginRemaining / data["SPY"].Close));                  Plot("Trade Plot"' "Buy"' _lastPrice);              }              else if (Time.Day % 21 == 0 && Portfolio.Invested)              {                  Plot("Trade Plot"' "Sell"' _lastPrice);                  Liquidate();              }
Magic Number,QuantConnect.Algorithm.CSharp,CustomDataBitcoinAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataBitcoinAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2011' 9' 13);
Magic Number,QuantConnect.Algorithm.CSharp,CustomDataBitcoinAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataBitcoinAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2011' 9' 13);
Magic Number,QuantConnect.Algorithm.CSharp,CustomDataBitcoinAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataBitcoinAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2011' 9' 13);
Magic Number,QuantConnect.Algorithm.CSharp,CustomDataBitcoinAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataBitcoinAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,CustomDataNiftyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataNIFTYAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2008' 1' 8);
Magic Number,QuantConnect.Algorithm.CSharp,CustomDataNiftyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataNIFTYAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2008' 1' 8);
Magic Number,QuantConnect.Algorithm.CSharp,CustomDataNiftyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataNIFTYAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2014' 7' 25);
Magic Number,QuantConnect.Algorithm.CSharp,CustomDataNiftyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataNIFTYAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2014' 7' 25);
Magic Number,QuantConnect.Algorithm.CSharp,CustomDataNiftyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataNIFTYAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2014' 7' 25);
Magic Number,QuantConnect.Algorithm.CSharp,CustomDataNiftyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataNIFTYAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,Nifty,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataNIFTYAlgorithm.cs,Reader,The following statement contains a magic number: try              {                  //Example File Format:                  //Date'       Open       High        Low       Close     Volume      Turnover                  //2011-09-13  7792.9    7799.9     7722.65    7748.7    116534670    6107.78                  var data = line.Split(''');                  index.Time = DateTime.Parse(data[0]' CultureInfo.InvariantCulture);                  index.Open = Convert.ToDecimal(data[1]' CultureInfo.InvariantCulture);                  index.High = Convert.ToDecimal(data[2]' CultureInfo.InvariantCulture);                  index.Low = Convert.ToDecimal(data[3]' CultureInfo.InvariantCulture);                  index.Close = Convert.ToDecimal(data[4]' CultureInfo.InvariantCulture);                  index.Symbol = "NIFTY";                  index.Value = index.Close;              }              catch              {              }
Magic Number,QuantConnect.Algorithm.CSharp,Nifty,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataNIFTYAlgorithm.cs,Reader,The following statement contains a magic number: try              {                  //Example File Format:                  //Date'       Open       High        Low       Close     Volume      Turnover                  //2011-09-13  7792.9    7799.9     7722.65    7748.7    116534670    6107.78                  var data = line.Split(''');                  index.Time = DateTime.Parse(data[0]' CultureInfo.InvariantCulture);                  index.Open = Convert.ToDecimal(data[1]' CultureInfo.InvariantCulture);                  index.High = Convert.ToDecimal(data[2]' CultureInfo.InvariantCulture);                  index.Low = Convert.ToDecimal(data[3]' CultureInfo.InvariantCulture);                  index.Close = Convert.ToDecimal(data[4]' CultureInfo.InvariantCulture);                  index.Symbol = "NIFTY";                  index.Value = index.Close;              }              catch              {              }
Magic Number,QuantConnect.Algorithm.CSharp,Nifty,C:\repos\QuantConnect_Lean\Algorithm.CSharp\CustomDataNIFTYAlgorithm.cs,Reader,The following statement contains a magic number: try              {                  //Example File Format:                  //Date'       Open       High        Low       Close     Volume      Turnover                  //2011-09-13  7792.9    7799.9     7722.65    7748.7    116534670    6107.78                  var data = line.Split(''');                  index.Time = DateTime.Parse(data[0]' CultureInfo.InvariantCulture);                  index.Open = Convert.ToDecimal(data[1]' CultureInfo.InvariantCulture);                  index.High = Convert.ToDecimal(data[2]' CultureInfo.InvariantCulture);                  index.Low = Convert.ToDecimal(data[3]' CultureInfo.InvariantCulture);                  index.Close = Convert.ToDecimal(data[4]' CultureInfo.InvariantCulture);                  index.Symbol = "NIFTY";                  index.Value = index.Close;              }              catch              {              }
Magic Number,QuantConnect.Algorithm.CSharp,DailyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DailyAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 01' 01);
Magic Number,QuantConnect.Algorithm.CSharp,DailyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DailyAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2014' 01' 01);
Magic Number,QuantConnect.Algorithm.CSharp,DailyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DailyAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,DailyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DailyAlgorithm.cs,Initialize,The following statement contains a magic number: _macd = MACD(_spy' 12' 26' 9' MovingAverageType.Wilders' Resolution.Daily' Field.Close);
Magic Number,QuantConnect.Algorithm.CSharp,DailyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DailyAlgorithm.cs,Initialize,The following statement contains a magic number: _macd = MACD(_spy' 12' 26' 9' MovingAverageType.Wilders' Resolution.Daily' Field.Close);
Magic Number,QuantConnect.Algorithm.CSharp,DailyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DailyAlgorithm.cs,Initialize,The following statement contains a magic number: _macd = MACD(_spy' 12' 26' 9' MovingAverageType.Wilders' Resolution.Daily' Field.Close);
Magic Number,QuantConnect.Algorithm.CSharp,DailyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DailyAlgorithm.cs,Initialize,The following statement contains a magic number: _ema = EMA(_ibm' 15*6' Resolution.Hour' Field.SevenBar);
Magic Number,QuantConnect.Algorithm.CSharp,DailyAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DailyAlgorithm.cs,Initialize,The following statement contains a magic number: _ema = EMA(_ibm' 15*6' Resolution.Hour' Field.SevenBar);
Magic Number,QuantConnect.Algorithm.CSharp,DataConsolidationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DataConsolidationAlgorithm.cs,Initialize,The following statement contains a magic number: var start = new DateTime(2013' 10' 07' 09' 30' 0);
Magic Number,QuantConnect.Algorithm.CSharp,DataConsolidationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DataConsolidationAlgorithm.cs,Initialize,The following statement contains a magic number: var start = new DateTime(2013' 10' 07' 09' 30' 0);
Magic Number,QuantConnect.Algorithm.CSharp,DataConsolidationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DataConsolidationAlgorithm.cs,Initialize,The following statement contains a magic number: var start = new DateTime(2013' 10' 07' 09' 30' 0);
Magic Number,QuantConnect.Algorithm.CSharp,DataConsolidationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DataConsolidationAlgorithm.cs,Initialize,The following statement contains a magic number: var start = new DateTime(2013' 10' 07' 09' 30' 0);
Magic Number,QuantConnect.Algorithm.CSharp,DataConsolidationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DataConsolidationAlgorithm.cs,Initialize,The following statement contains a magic number: var start = new DateTime(2013' 10' 07' 09' 30' 0);
Magic Number,QuantConnect.Algorithm.CSharp,DataConsolidationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DataConsolidationAlgorithm.cs,Initialize,The following statement contains a magic number: var thirtyMinuteConsolidator = new TradeBarConsolidator(TimeSpan.FromMinutes(30));
Magic Number,QuantConnect.Algorithm.CSharp,DataConsolidationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DataConsolidationAlgorithm.cs,Initialize,The following statement contains a magic number: var threeCountConsolidator = new TradeBarConsolidator(3);
Magic Number,QuantConnect.Algorithm.CSharp,DataConsolidationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DataConsolidationAlgorithm.cs,ThirtyMinuteBarHandler,The following statement contains a magic number: if (_last != null && consolidated.Close > _last.Close)              {                  Log(consolidated.Time.ToString("o") + " >> SPY >> LONG  >> 100 >> " + Portfolio["SPY"].Quantity);                  Order("SPY"' 100);              }              else if (_last != null && consolidated.Close < _last.Close)              {                  Log(consolidated.Time.ToString("o") + " >> SPY >> SHORT >> 100 >> " + Portfolio["SPY"].Quantity);                  Order("SPY"' -100);              }
Magic Number,QuantConnect.Algorithm.CSharp,DataConsolidationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DataConsolidationAlgorithm.cs,ThirtyMinuteBarHandler,The following statement contains a magic number: if (_last != null && consolidated.Close > _last.Close)              {                  Log(consolidated.Time.ToString("o") + " >> SPY >> LONG  >> 100 >> " + Portfolio["SPY"].Quantity);                  Order("SPY"' 100);              }              else if (_last != null && consolidated.Close < _last.Close)              {                  Log(consolidated.Time.ToString("o") + " >> SPY >> SHORT >> 100 >> " + Portfolio["SPY"].Quantity);                  Order("SPY"' -100);              }
Magic Number,QuantConnect.Algorithm.CSharp,DisplacedMovingAverageRibbon,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DisplacedMovingAverageRibbon.cs,Initialize,The following statement contains a magic number: SetStartDate(2009' 01' 01);
Magic Number,QuantConnect.Algorithm.CSharp,DisplacedMovingAverageRibbon,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DisplacedMovingAverageRibbon.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 01' 01);
Magic Number,QuantConnect.Algorithm.CSharp,DisplacedMovingAverageRibbon,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DisplacedMovingAverageRibbon.cs,Initialize,The following statement contains a magic number: const int count = 6;
Magic Number,QuantConnect.Algorithm.CSharp,DisplacedMovingAverageRibbon,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DisplacedMovingAverageRibbon.cs,Initialize,The following statement contains a magic number: const int offset = 5;
Magic Number,QuantConnect.Algorithm.CSharp,DisplacedMovingAverageRibbon,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DisplacedMovingAverageRibbon.cs,Initialize,The following statement contains a magic number: const int period = 15;
Magic Number,QuantConnect.Algorithm.CSharp,DividendAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DividendAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(1998' 01' 01);
Magic Number,QuantConnect.Algorithm.CSharp,DividendAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DividendAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2006' 01' 01);
Magic Number,QuantConnect.Algorithm.CSharp,DividendAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DividendAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,DividendAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DividendAlgorithm.cs,OnData,The following statement contains a magic number: if (Transactions.OrdersCount == 0)              {                  SetHoldings("MSFT"' .5);                  // place some orders that won't fill' when the split comes in they'll get modified to reflect the split                  Debug("Purchased Stock: " + Securities["MSFT"].Price);                  StopMarketOrder("MSFT"' -CalculateOrderQuantity("MSFT"' .25)' data["MSFT"].Low/2);                  LimitOrder("MSFT"' -CalculateOrderQuantity("MSFT"' .25)' data["MSFT"].High*2);              }
Magic Number,QuantConnect.Algorithm.CSharp,DividendAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DividendAlgorithm.cs,OnData,The following statement contains a magic number: if (Transactions.OrdersCount == 0)              {                  SetHoldings("MSFT"' .5);                  // place some orders that won't fill' when the split comes in they'll get modified to reflect the split                  Debug("Purchased Stock: " + Securities["MSFT"].Price);                  StopMarketOrder("MSFT"' -CalculateOrderQuantity("MSFT"' .25)' data["MSFT"].Low/2);                  LimitOrder("MSFT"' -CalculateOrderQuantity("MSFT"' .25)' data["MSFT"].High*2);              }
Magic Number,QuantConnect.Algorithm.CSharp,DividendAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DividendAlgorithm.cs,OnData,The following statement contains a magic number: if (Transactions.OrdersCount == 0)              {                  SetHoldings("MSFT"' .5);                  // place some orders that won't fill' when the split comes in they'll get modified to reflect the split                  Debug("Purchased Stock: " + Securities["MSFT"].Price);                  StopMarketOrder("MSFT"' -CalculateOrderQuantity("MSFT"' .25)' data["MSFT"].Low/2);                  LimitOrder("MSFT"' -CalculateOrderQuantity("MSFT"' .25)' data["MSFT"].High*2);              }
Magic Number,QuantConnect.Algorithm.CSharp,DividendAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DividendAlgorithm.cs,OnData,The following statement contains a magic number: if (Transactions.OrdersCount == 0)              {                  SetHoldings("MSFT"' .5);                  // place some orders that won't fill' when the split comes in they'll get modified to reflect the split                  Debug("Purchased Stock: " + Securities["MSFT"].Price);                  StopMarketOrder("MSFT"' -CalculateOrderQuantity("MSFT"' .25)' data["MSFT"].Low/2);                  LimitOrder("MSFT"' -CalculateOrderQuantity("MSFT"' .25)' data["MSFT"].High*2);              }
Magic Number,QuantConnect.Algorithm.CSharp,DividendAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DividendAlgorithm.cs,OnData,The following statement contains a magic number: if (Transactions.OrdersCount == 0)              {                  SetHoldings("MSFT"' .5);                  // place some orders that won't fill' when the split comes in they'll get modified to reflect the split                  Debug("Purchased Stock: " + Securities["MSFT"].Price);                  StopMarketOrder("MSFT"' -CalculateOrderQuantity("MSFT"' .25)' data["MSFT"].Low/2);                  LimitOrder("MSFT"' -CalculateOrderQuantity("MSFT"' .25)' data["MSFT"].High*2);              }
Magic Number,QuantConnect.Algorithm.CSharp,EtfGlobalRotationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ETFGlobalRotationAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(25000);
Magic Number,QuantConnect.Algorithm.CSharp,EtfGlobalRotationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ETFGlobalRotationAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2007' 1' 1);
Magic Number,QuantConnect.Algorithm.CSharp,EtfGlobalRotationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ETFGlobalRotationAlgorithm.cs,Initialize,The following statement contains a magic number: foreach (var symbol in _growthSymbols.Union(_safetySymbols))              {                  // ideally we would use daily data                  AddSecurity(SecurityType.Equity' symbol' Resolution.Minute);                  var oneMonthPerformance = MOM(symbol' 30' Resolution.Daily);                  var threeMonthPerformance = MOM(symbol' 90' Resolution.Daily);                    _symbolData.Add(new SymbolData                  {                      Symbol = symbol'                      OneMonthPerformance = oneMonthPerformance'                      ThreeMonthPerformance = threeMonthPerformance                  });              }
Magic Number,QuantConnect.Algorithm.CSharp,EtfGlobalRotationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ETFGlobalRotationAlgorithm.cs,Initialize,The following statement contains a magic number: foreach (var symbol in _growthSymbols.Union(_safetySymbols))              {                  // ideally we would use daily data                  AddSecurity(SecurityType.Equity' symbol' Resolution.Minute);                  var oneMonthPerformance = MOM(symbol' 30' Resolution.Daily);                  var threeMonthPerformance = MOM(symbol' 90' Resolution.Daily);                    _symbolData.Add(new SymbolData                  {                      Symbol = symbol'                      OneMonthPerformance = oneMonthPerformance'                      ThreeMonthPerformance = threeMonthPerformance                  });              }
Magic Number,QuantConnect.Algorithm.CSharp,EtfGlobalRotationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ETFGlobalRotationAlgorithm.cs,OnData,The following statement contains a magic number: try              {                  // the first time we come through here we'll need to do some things such as allocation                  // and initializing our symbol data                  if (_first)                  {                      _first = false;                      _lastRotationTime = Time;                      return;                  }                    var delta = Time.Subtract(_lastRotationTime);                  if (delta > _rotationInterval)                  {                      _lastRotationTime = Time;                        // pick which one is best from growth and safety symbols                      var orderedObjScores = _symbolData.OrderByDescending(x => x.ObjectiveScore).ToList();                      foreach (var orderedObjScore in orderedObjScores)                      {                          Log(">>SCORE>>" + orderedObjScore.Symbol + ">>" + orderedObjScore.ObjectiveScore);                      }                      var bestGrowth = orderedObjScores.First();                        if (bestGrowth.ObjectiveScore > 0)                      {                          if (Portfolio[bestGrowth.Symbol].Quantity == 0)                          {                              Log("PREBUY>>LIQUIDATE>>");                              Liquidate();                          }                          Log(">>BUY>>" + bestGrowth.Symbol + "@" + (100 * bestGrowth.OneMonthPerformance).ToString("00.00"));                          var qty = Portfolio.MarginRemaining / Securities[bestGrowth.Symbol].Close;                          MarketOrder(bestGrowth.Symbol' (int) qty);                      }                      else                      {                          // if no one has a good objective score then let's hold cash this month to be safe                          Log(">>LIQUIDATE>>CASH");                          Liquidate();                      }                  }              }              catch (Exception ex)              {                  Error("OnTradeBar: " + ex.Message + "\r\n\r\n" + ex.StackTrace);              }
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 1' 1);
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2014' 12' 31);
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2014' 12' 31);
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2014' 12' 31);
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(25000);
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _indicators = new Indicators              {                  BB = BB(_symbol' 20' 1' MovingAverageType.Simple' Resolution.Daily)'                  RSI = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily)'                  ATR = ATR(_symbol' 14' MovingAverageType.Simple' Resolution.Daily)'                  EMA = EMA(_symbol' 14' Resolution.Daily)'                  SMA = SMA(_symbol' 14' Resolution.Daily)'                  MACD = MACD(_symbol' 12' 26' 9' MovingAverageType.Simple' Resolution.Daily)'                  AROON = AROON(_symbol' 20' Resolution.Daily)'                  MOM = MOM(_symbol' 20' Resolution.Daily)'                  MOMP = MOMP(_symbol' 20' Resolution.Daily)'                  STD = STD(_symbol' 20' Resolution.Daily)'                  MIN = MIN(_symbol' 14' Resolution.Daily)' // by default if the symbol is a tradebar type then it will be the min of the low property                  MAX = MAX(_symbol' 14' Resolution.Daily)  // by default if the symbol is a tradebar type then it will be the max of the high property              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _indicators = new Indicators              {                  BB = BB(_symbol' 20' 1' MovingAverageType.Simple' Resolution.Daily)'                  RSI = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily)'                  ATR = ATR(_symbol' 14' MovingAverageType.Simple' Resolution.Daily)'                  EMA = EMA(_symbol' 14' Resolution.Daily)'                  SMA = SMA(_symbol' 14' Resolution.Daily)'                  MACD = MACD(_symbol' 12' 26' 9' MovingAverageType.Simple' Resolution.Daily)'                  AROON = AROON(_symbol' 20' Resolution.Daily)'                  MOM = MOM(_symbol' 20' Resolution.Daily)'                  MOMP = MOMP(_symbol' 20' Resolution.Daily)'                  STD = STD(_symbol' 20' Resolution.Daily)'                  MIN = MIN(_symbol' 14' Resolution.Daily)' // by default if the symbol is a tradebar type then it will be the min of the low property                  MAX = MAX(_symbol' 14' Resolution.Daily)  // by default if the symbol is a tradebar type then it will be the max of the high property              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _indicators = new Indicators              {                  BB = BB(_symbol' 20' 1' MovingAverageType.Simple' Resolution.Daily)'                  RSI = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily)'                  ATR = ATR(_symbol' 14' MovingAverageType.Simple' Resolution.Daily)'                  EMA = EMA(_symbol' 14' Resolution.Daily)'                  SMA = SMA(_symbol' 14' Resolution.Daily)'                  MACD = MACD(_symbol' 12' 26' 9' MovingAverageType.Simple' Resolution.Daily)'                  AROON = AROON(_symbol' 20' Resolution.Daily)'                  MOM = MOM(_symbol' 20' Resolution.Daily)'                  MOMP = MOMP(_symbol' 20' Resolution.Daily)'                  STD = STD(_symbol' 20' Resolution.Daily)'                  MIN = MIN(_symbol' 14' Resolution.Daily)' // by default if the symbol is a tradebar type then it will be the min of the low property                  MAX = MAX(_symbol' 14' Resolution.Daily)  // by default if the symbol is a tradebar type then it will be the max of the high property              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _indicators = new Indicators              {                  BB = BB(_symbol' 20' 1' MovingAverageType.Simple' Resolution.Daily)'                  RSI = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily)'                  ATR = ATR(_symbol' 14' MovingAverageType.Simple' Resolution.Daily)'                  EMA = EMA(_symbol' 14' Resolution.Daily)'                  SMA = SMA(_symbol' 14' Resolution.Daily)'                  MACD = MACD(_symbol' 12' 26' 9' MovingAverageType.Simple' Resolution.Daily)'                  AROON = AROON(_symbol' 20' Resolution.Daily)'                  MOM = MOM(_symbol' 20' Resolution.Daily)'                  MOMP = MOMP(_symbol' 20' Resolution.Daily)'                  STD = STD(_symbol' 20' Resolution.Daily)'                  MIN = MIN(_symbol' 14' Resolution.Daily)' // by default if the symbol is a tradebar type then it will be the min of the low property                  MAX = MAX(_symbol' 14' Resolution.Daily)  // by default if the symbol is a tradebar type then it will be the max of the high property              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _indicators = new Indicators              {                  BB = BB(_symbol' 20' 1' MovingAverageType.Simple' Resolution.Daily)'                  RSI = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily)'                  ATR = ATR(_symbol' 14' MovingAverageType.Simple' Resolution.Daily)'                  EMA = EMA(_symbol' 14' Resolution.Daily)'                  SMA = SMA(_symbol' 14' Resolution.Daily)'                  MACD = MACD(_symbol' 12' 26' 9' MovingAverageType.Simple' Resolution.Daily)'                  AROON = AROON(_symbol' 20' Resolution.Daily)'                  MOM = MOM(_symbol' 20' Resolution.Daily)'                  MOMP = MOMP(_symbol' 20' Resolution.Daily)'                  STD = STD(_symbol' 20' Resolution.Daily)'                  MIN = MIN(_symbol' 14' Resolution.Daily)' // by default if the symbol is a tradebar type then it will be the min of the low property                  MAX = MAX(_symbol' 14' Resolution.Daily)  // by default if the symbol is a tradebar type then it will be the max of the high property              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _indicators = new Indicators              {                  BB = BB(_symbol' 20' 1' MovingAverageType.Simple' Resolution.Daily)'                  RSI = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily)'                  ATR = ATR(_symbol' 14' MovingAverageType.Simple' Resolution.Daily)'                  EMA = EMA(_symbol' 14' Resolution.Daily)'                  SMA = SMA(_symbol' 14' Resolution.Daily)'                  MACD = MACD(_symbol' 12' 26' 9' MovingAverageType.Simple' Resolution.Daily)'                  AROON = AROON(_symbol' 20' Resolution.Daily)'                  MOM = MOM(_symbol' 20' Resolution.Daily)'                  MOMP = MOMP(_symbol' 20' Resolution.Daily)'                  STD = STD(_symbol' 20' Resolution.Daily)'                  MIN = MIN(_symbol' 14' Resolution.Daily)' // by default if the symbol is a tradebar type then it will be the min of the low property                  MAX = MAX(_symbol' 14' Resolution.Daily)  // by default if the symbol is a tradebar type then it will be the max of the high property              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _indicators = new Indicators              {                  BB = BB(_symbol' 20' 1' MovingAverageType.Simple' Resolution.Daily)'                  RSI = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily)'                  ATR = ATR(_symbol' 14' MovingAverageType.Simple' Resolution.Daily)'                  EMA = EMA(_symbol' 14' Resolution.Daily)'                  SMA = SMA(_symbol' 14' Resolution.Daily)'                  MACD = MACD(_symbol' 12' 26' 9' MovingAverageType.Simple' Resolution.Daily)'                  AROON = AROON(_symbol' 20' Resolution.Daily)'                  MOM = MOM(_symbol' 20' Resolution.Daily)'                  MOMP = MOMP(_symbol' 20' Resolution.Daily)'                  STD = STD(_symbol' 20' Resolution.Daily)'                  MIN = MIN(_symbol' 14' Resolution.Daily)' // by default if the symbol is a tradebar type then it will be the min of the low property                  MAX = MAX(_symbol' 14' Resolution.Daily)  // by default if the symbol is a tradebar type then it will be the max of the high property              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _indicators = new Indicators              {                  BB = BB(_symbol' 20' 1' MovingAverageType.Simple' Resolution.Daily)'                  RSI = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily)'                  ATR = ATR(_symbol' 14' MovingAverageType.Simple' Resolution.Daily)'                  EMA = EMA(_symbol' 14' Resolution.Daily)'                  SMA = SMA(_symbol' 14' Resolution.Daily)'                  MACD = MACD(_symbol' 12' 26' 9' MovingAverageType.Simple' Resolution.Daily)'                  AROON = AROON(_symbol' 20' Resolution.Daily)'                  MOM = MOM(_symbol' 20' Resolution.Daily)'                  MOMP = MOMP(_symbol' 20' Resolution.Daily)'                  STD = STD(_symbol' 20' Resolution.Daily)'                  MIN = MIN(_symbol' 14' Resolution.Daily)' // by default if the symbol is a tradebar type then it will be the min of the low property                  MAX = MAX(_symbol' 14' Resolution.Daily)  // by default if the symbol is a tradebar type then it will be the max of the high property              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _indicators = new Indicators              {                  BB = BB(_symbol' 20' 1' MovingAverageType.Simple' Resolution.Daily)'                  RSI = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily)'                  ATR = ATR(_symbol' 14' MovingAverageType.Simple' Resolution.Daily)'                  EMA = EMA(_symbol' 14' Resolution.Daily)'                  SMA = SMA(_symbol' 14' Resolution.Daily)'                  MACD = MACD(_symbol' 12' 26' 9' MovingAverageType.Simple' Resolution.Daily)'                  AROON = AROON(_symbol' 20' Resolution.Daily)'                  MOM = MOM(_symbol' 20' Resolution.Daily)'                  MOMP = MOMP(_symbol' 20' Resolution.Daily)'                  STD = STD(_symbol' 20' Resolution.Daily)'                  MIN = MIN(_symbol' 14' Resolution.Daily)' // by default if the symbol is a tradebar type then it will be the min of the low property                  MAX = MAX(_symbol' 14' Resolution.Daily)  // by default if the symbol is a tradebar type then it will be the max of the high property              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _indicators = new Indicators              {                  BB = BB(_symbol' 20' 1' MovingAverageType.Simple' Resolution.Daily)'                  RSI = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily)'                  ATR = ATR(_symbol' 14' MovingAverageType.Simple' Resolution.Daily)'                  EMA = EMA(_symbol' 14' Resolution.Daily)'                  SMA = SMA(_symbol' 14' Resolution.Daily)'                  MACD = MACD(_symbol' 12' 26' 9' MovingAverageType.Simple' Resolution.Daily)'                  AROON = AROON(_symbol' 20' Resolution.Daily)'                  MOM = MOM(_symbol' 20' Resolution.Daily)'                  MOMP = MOMP(_symbol' 20' Resolution.Daily)'                  STD = STD(_symbol' 20' Resolution.Daily)'                  MIN = MIN(_symbol' 14' Resolution.Daily)' // by default if the symbol is a tradebar type then it will be the min of the low property                  MAX = MAX(_symbol' 14' Resolution.Daily)  // by default if the symbol is a tradebar type then it will be the max of the high property              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _indicators = new Indicators              {                  BB = BB(_symbol' 20' 1' MovingAverageType.Simple' Resolution.Daily)'                  RSI = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily)'                  ATR = ATR(_symbol' 14' MovingAverageType.Simple' Resolution.Daily)'                  EMA = EMA(_symbol' 14' Resolution.Daily)'                  SMA = SMA(_symbol' 14' Resolution.Daily)'                  MACD = MACD(_symbol' 12' 26' 9' MovingAverageType.Simple' Resolution.Daily)'                  AROON = AROON(_symbol' 20' Resolution.Daily)'                  MOM = MOM(_symbol' 20' Resolution.Daily)'                  MOMP = MOMP(_symbol' 20' Resolution.Daily)'                  STD = STD(_symbol' 20' Resolution.Daily)'                  MIN = MIN(_symbol' 14' Resolution.Daily)' // by default if the symbol is a tradebar type then it will be the min of the low property                  MAX = MAX(_symbol' 14' Resolution.Daily)  // by default if the symbol is a tradebar type then it will be the max of the high property              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _indicators = new Indicators              {                  BB = BB(_symbol' 20' 1' MovingAverageType.Simple' Resolution.Daily)'                  RSI = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily)'                  ATR = ATR(_symbol' 14' MovingAverageType.Simple' Resolution.Daily)'                  EMA = EMA(_symbol' 14' Resolution.Daily)'                  SMA = SMA(_symbol' 14' Resolution.Daily)'                  MACD = MACD(_symbol' 12' 26' 9' MovingAverageType.Simple' Resolution.Daily)'                  AROON = AROON(_symbol' 20' Resolution.Daily)'                  MOM = MOM(_symbol' 20' Resolution.Daily)'                  MOMP = MOMP(_symbol' 20' Resolution.Daily)'                  STD = STD(_symbol' 20' Resolution.Daily)'                  MIN = MIN(_symbol' 14' Resolution.Daily)' // by default if the symbol is a tradebar type then it will be the min of the low property                  MAX = MAX(_symbol' 14' Resolution.Daily)  // by default if the symbol is a tradebar type then it will be the max of the high property              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _indicators = new Indicators              {                  BB = BB(_symbol' 20' 1' MovingAverageType.Simple' Resolution.Daily)'                  RSI = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily)'                  ATR = ATR(_symbol' 14' MovingAverageType.Simple' Resolution.Daily)'                  EMA = EMA(_symbol' 14' Resolution.Daily)'                  SMA = SMA(_symbol' 14' Resolution.Daily)'                  MACD = MACD(_symbol' 12' 26' 9' MovingAverageType.Simple' Resolution.Daily)'                  AROON = AROON(_symbol' 20' Resolution.Daily)'                  MOM = MOM(_symbol' 20' Resolution.Daily)'                  MOMP = MOMP(_symbol' 20' Resolution.Daily)'                  STD = STD(_symbol' 20' Resolution.Daily)'                  MIN = MIN(_symbol' 14' Resolution.Daily)' // by default if the symbol is a tradebar type then it will be the min of the low property                  MAX = MAX(_symbol' 14' Resolution.Daily)  // by default if the symbol is a tradebar type then it will be the max of the high property              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _indicators = new Indicators              {                  BB = BB(_symbol' 20' 1' MovingAverageType.Simple' Resolution.Daily)'                  RSI = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily)'                  ATR = ATR(_symbol' 14' MovingAverageType.Simple' Resolution.Daily)'                  EMA = EMA(_symbol' 14' Resolution.Daily)'                  SMA = SMA(_symbol' 14' Resolution.Daily)'                  MACD = MACD(_symbol' 12' 26' 9' MovingAverageType.Simple' Resolution.Daily)'                  AROON = AROON(_symbol' 20' Resolution.Daily)'                  MOM = MOM(_symbol' 20' Resolution.Daily)'                  MOMP = MOMP(_symbol' 20' Resolution.Daily)'                  STD = STD(_symbol' 20' Resolution.Daily)'                  MIN = MIN(_symbol' 14' Resolution.Daily)' // by default if the symbol is a tradebar type then it will be the min of the low property                  MAX = MAX(_symbol' 14' Resolution.Daily)  // by default if the symbol is a tradebar type then it will be the max of the high property              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _selectorIndicators = new Indicators              {                  BB = BB(_symbol' 20' 1' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  RSI = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  EMA = EMA(_symbol' 14' Resolution.Daily' Field.Low)'                  SMA = SMA(_symbol' 14' Resolution.Daily' Field.Low)'                  MACD = MACD(_symbol' 12' 26' 9' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  MOM = MOM(_symbol' 20' Resolution.Daily' Field.Low)'                  MOMP = MOMP(_symbol' 20' Resolution.Daily' Field.Low)'                  STD = STD(_symbol' 20' Resolution.Daily' Field.Low)'                  MIN = MIN(_symbol' 14' Resolution.Daily' Field.High)' // this will find the 14 day min of the high property                  MAX = MAX(_symbol' 14' Resolution.Daily' Field.Low)'  // this will find the 14 day max of the low property                    // ATR and AROON are special in that they accept a TradeBar instance instead of a decimal' we could easily project and/or transform the input TradeBar                  // before it gets sent to the ATR/AROON indicator' here we use a function that will multiply the input trade bar by a factor of two                  ATR = ATR(_symbol' 14' MovingAverageType.Simple' Resolution.Daily' SelectorDoubleTradeBar)'                  AROON = AROON(_symbol' 20' Resolution.Daily' SelectorDoubleTradeBar)              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _selectorIndicators = new Indicators              {                  BB = BB(_symbol' 20' 1' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  RSI = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  EMA = EMA(_symbol' 14' Resolution.Daily' Field.Low)'                  SMA = SMA(_symbol' 14' Resolution.Daily' Field.Low)'                  MACD = MACD(_symbol' 12' 26' 9' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  MOM = MOM(_symbol' 20' Resolution.Daily' Field.Low)'                  MOMP = MOMP(_symbol' 20' Resolution.Daily' Field.Low)'                  STD = STD(_symbol' 20' Resolution.Daily' Field.Low)'                  MIN = MIN(_symbol' 14' Resolution.Daily' Field.High)' // this will find the 14 day min of the high property                  MAX = MAX(_symbol' 14' Resolution.Daily' Field.Low)'  // this will find the 14 day max of the low property                    // ATR and AROON are special in that they accept a TradeBar instance instead of a decimal' we could easily project and/or transform the input TradeBar                  // before it gets sent to the ATR/AROON indicator' here we use a function that will multiply the input trade bar by a factor of two                  ATR = ATR(_symbol' 14' MovingAverageType.Simple' Resolution.Daily' SelectorDoubleTradeBar)'                  AROON = AROON(_symbol' 20' Resolution.Daily' SelectorDoubleTradeBar)              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _selectorIndicators = new Indicators              {                  BB = BB(_symbol' 20' 1' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  RSI = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  EMA = EMA(_symbol' 14' Resolution.Daily' Field.Low)'                  SMA = SMA(_symbol' 14' Resolution.Daily' Field.Low)'                  MACD = MACD(_symbol' 12' 26' 9' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  MOM = MOM(_symbol' 20' Resolution.Daily' Field.Low)'                  MOMP = MOMP(_symbol' 20' Resolution.Daily' Field.Low)'                  STD = STD(_symbol' 20' Resolution.Daily' Field.Low)'                  MIN = MIN(_symbol' 14' Resolution.Daily' Field.High)' // this will find the 14 day min of the high property                  MAX = MAX(_symbol' 14' Resolution.Daily' Field.Low)'  // this will find the 14 day max of the low property                    // ATR and AROON are special in that they accept a TradeBar instance instead of a decimal' we could easily project and/or transform the input TradeBar                  // before it gets sent to the ATR/AROON indicator' here we use a function that will multiply the input trade bar by a factor of two                  ATR = ATR(_symbol' 14' MovingAverageType.Simple' Resolution.Daily' SelectorDoubleTradeBar)'                  AROON = AROON(_symbol' 20' Resolution.Daily' SelectorDoubleTradeBar)              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _selectorIndicators = new Indicators              {                  BB = BB(_symbol' 20' 1' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  RSI = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  EMA = EMA(_symbol' 14' Resolution.Daily' Field.Low)'                  SMA = SMA(_symbol' 14' Resolution.Daily' Field.Low)'                  MACD = MACD(_symbol' 12' 26' 9' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  MOM = MOM(_symbol' 20' Resolution.Daily' Field.Low)'                  MOMP = MOMP(_symbol' 20' Resolution.Daily' Field.Low)'                  STD = STD(_symbol' 20' Resolution.Daily' Field.Low)'                  MIN = MIN(_symbol' 14' Resolution.Daily' Field.High)' // this will find the 14 day min of the high property                  MAX = MAX(_symbol' 14' Resolution.Daily' Field.Low)'  // this will find the 14 day max of the low property                    // ATR and AROON are special in that they accept a TradeBar instance instead of a decimal' we could easily project and/or transform the input TradeBar                  // before it gets sent to the ATR/AROON indicator' here we use a function that will multiply the input trade bar by a factor of two                  ATR = ATR(_symbol' 14' MovingAverageType.Simple' Resolution.Daily' SelectorDoubleTradeBar)'                  AROON = AROON(_symbol' 20' Resolution.Daily' SelectorDoubleTradeBar)              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _selectorIndicators = new Indicators              {                  BB = BB(_symbol' 20' 1' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  RSI = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  EMA = EMA(_symbol' 14' Resolution.Daily' Field.Low)'                  SMA = SMA(_symbol' 14' Resolution.Daily' Field.Low)'                  MACD = MACD(_symbol' 12' 26' 9' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  MOM = MOM(_symbol' 20' Resolution.Daily' Field.Low)'                  MOMP = MOMP(_symbol' 20' Resolution.Daily' Field.Low)'                  STD = STD(_symbol' 20' Resolution.Daily' Field.Low)'                  MIN = MIN(_symbol' 14' Resolution.Daily' Field.High)' // this will find the 14 day min of the high property                  MAX = MAX(_symbol' 14' Resolution.Daily' Field.Low)'  // this will find the 14 day max of the low property                    // ATR and AROON are special in that they accept a TradeBar instance instead of a decimal' we could easily project and/or transform the input TradeBar                  // before it gets sent to the ATR/AROON indicator' here we use a function that will multiply the input trade bar by a factor of two                  ATR = ATR(_symbol' 14' MovingAverageType.Simple' Resolution.Daily' SelectorDoubleTradeBar)'                  AROON = AROON(_symbol' 20' Resolution.Daily' SelectorDoubleTradeBar)              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _selectorIndicators = new Indicators              {                  BB = BB(_symbol' 20' 1' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  RSI = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  EMA = EMA(_symbol' 14' Resolution.Daily' Field.Low)'                  SMA = SMA(_symbol' 14' Resolution.Daily' Field.Low)'                  MACD = MACD(_symbol' 12' 26' 9' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  MOM = MOM(_symbol' 20' Resolution.Daily' Field.Low)'                  MOMP = MOMP(_symbol' 20' Resolution.Daily' Field.Low)'                  STD = STD(_symbol' 20' Resolution.Daily' Field.Low)'                  MIN = MIN(_symbol' 14' Resolution.Daily' Field.High)' // this will find the 14 day min of the high property                  MAX = MAX(_symbol' 14' Resolution.Daily' Field.Low)'  // this will find the 14 day max of the low property                    // ATR and AROON are special in that they accept a TradeBar instance instead of a decimal' we could easily project and/or transform the input TradeBar                  // before it gets sent to the ATR/AROON indicator' here we use a function that will multiply the input trade bar by a factor of two                  ATR = ATR(_symbol' 14' MovingAverageType.Simple' Resolution.Daily' SelectorDoubleTradeBar)'                  AROON = AROON(_symbol' 20' Resolution.Daily' SelectorDoubleTradeBar)              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _selectorIndicators = new Indicators              {                  BB = BB(_symbol' 20' 1' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  RSI = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  EMA = EMA(_symbol' 14' Resolution.Daily' Field.Low)'                  SMA = SMA(_symbol' 14' Resolution.Daily' Field.Low)'                  MACD = MACD(_symbol' 12' 26' 9' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  MOM = MOM(_symbol' 20' Resolution.Daily' Field.Low)'                  MOMP = MOMP(_symbol' 20' Resolution.Daily' Field.Low)'                  STD = STD(_symbol' 20' Resolution.Daily' Field.Low)'                  MIN = MIN(_symbol' 14' Resolution.Daily' Field.High)' // this will find the 14 day min of the high property                  MAX = MAX(_symbol' 14' Resolution.Daily' Field.Low)'  // this will find the 14 day max of the low property                    // ATR and AROON are special in that they accept a TradeBar instance instead of a decimal' we could easily project and/or transform the input TradeBar                  // before it gets sent to the ATR/AROON indicator' here we use a function that will multiply the input trade bar by a factor of two                  ATR = ATR(_symbol' 14' MovingAverageType.Simple' Resolution.Daily' SelectorDoubleTradeBar)'                  AROON = AROON(_symbol' 20' Resolution.Daily' SelectorDoubleTradeBar)              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _selectorIndicators = new Indicators              {                  BB = BB(_symbol' 20' 1' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  RSI = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  EMA = EMA(_symbol' 14' Resolution.Daily' Field.Low)'                  SMA = SMA(_symbol' 14' Resolution.Daily' Field.Low)'                  MACD = MACD(_symbol' 12' 26' 9' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  MOM = MOM(_symbol' 20' Resolution.Daily' Field.Low)'                  MOMP = MOMP(_symbol' 20' Resolution.Daily' Field.Low)'                  STD = STD(_symbol' 20' Resolution.Daily' Field.Low)'                  MIN = MIN(_symbol' 14' Resolution.Daily' Field.High)' // this will find the 14 day min of the high property                  MAX = MAX(_symbol' 14' Resolution.Daily' Field.Low)'  // this will find the 14 day max of the low property                    // ATR and AROON are special in that they accept a TradeBar instance instead of a decimal' we could easily project and/or transform the input TradeBar                  // before it gets sent to the ATR/AROON indicator' here we use a function that will multiply the input trade bar by a factor of two                  ATR = ATR(_symbol' 14' MovingAverageType.Simple' Resolution.Daily' SelectorDoubleTradeBar)'                  AROON = AROON(_symbol' 20' Resolution.Daily' SelectorDoubleTradeBar)              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _selectorIndicators = new Indicators              {                  BB = BB(_symbol' 20' 1' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  RSI = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  EMA = EMA(_symbol' 14' Resolution.Daily' Field.Low)'                  SMA = SMA(_symbol' 14' Resolution.Daily' Field.Low)'                  MACD = MACD(_symbol' 12' 26' 9' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  MOM = MOM(_symbol' 20' Resolution.Daily' Field.Low)'                  MOMP = MOMP(_symbol' 20' Resolution.Daily' Field.Low)'                  STD = STD(_symbol' 20' Resolution.Daily' Field.Low)'                  MIN = MIN(_symbol' 14' Resolution.Daily' Field.High)' // this will find the 14 day min of the high property                  MAX = MAX(_symbol' 14' Resolution.Daily' Field.Low)'  // this will find the 14 day max of the low property                    // ATR and AROON are special in that they accept a TradeBar instance instead of a decimal' we could easily project and/or transform the input TradeBar                  // before it gets sent to the ATR/AROON indicator' here we use a function that will multiply the input trade bar by a factor of two                  ATR = ATR(_symbol' 14' MovingAverageType.Simple' Resolution.Daily' SelectorDoubleTradeBar)'                  AROON = AROON(_symbol' 20' Resolution.Daily' SelectorDoubleTradeBar)              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _selectorIndicators = new Indicators              {                  BB = BB(_symbol' 20' 1' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  RSI = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  EMA = EMA(_symbol' 14' Resolution.Daily' Field.Low)'                  SMA = SMA(_symbol' 14' Resolution.Daily' Field.Low)'                  MACD = MACD(_symbol' 12' 26' 9' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  MOM = MOM(_symbol' 20' Resolution.Daily' Field.Low)'                  MOMP = MOMP(_symbol' 20' Resolution.Daily' Field.Low)'                  STD = STD(_symbol' 20' Resolution.Daily' Field.Low)'                  MIN = MIN(_symbol' 14' Resolution.Daily' Field.High)' // this will find the 14 day min of the high property                  MAX = MAX(_symbol' 14' Resolution.Daily' Field.Low)'  // this will find the 14 day max of the low property                    // ATR and AROON are special in that they accept a TradeBar instance instead of a decimal' we could easily project and/or transform the input TradeBar                  // before it gets sent to the ATR/AROON indicator' here we use a function that will multiply the input trade bar by a factor of two                  ATR = ATR(_symbol' 14' MovingAverageType.Simple' Resolution.Daily' SelectorDoubleTradeBar)'                  AROON = AROON(_symbol' 20' Resolution.Daily' SelectorDoubleTradeBar)              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _selectorIndicators = new Indicators              {                  BB = BB(_symbol' 20' 1' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  RSI = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  EMA = EMA(_symbol' 14' Resolution.Daily' Field.Low)'                  SMA = SMA(_symbol' 14' Resolution.Daily' Field.Low)'                  MACD = MACD(_symbol' 12' 26' 9' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  MOM = MOM(_symbol' 20' Resolution.Daily' Field.Low)'                  MOMP = MOMP(_symbol' 20' Resolution.Daily' Field.Low)'                  STD = STD(_symbol' 20' Resolution.Daily' Field.Low)'                  MIN = MIN(_symbol' 14' Resolution.Daily' Field.High)' // this will find the 14 day min of the high property                  MAX = MAX(_symbol' 14' Resolution.Daily' Field.Low)'  // this will find the 14 day max of the low property                    // ATR and AROON are special in that they accept a TradeBar instance instead of a decimal' we could easily project and/or transform the input TradeBar                  // before it gets sent to the ATR/AROON indicator' here we use a function that will multiply the input trade bar by a factor of two                  ATR = ATR(_symbol' 14' MovingAverageType.Simple' Resolution.Daily' SelectorDoubleTradeBar)'                  AROON = AROON(_symbol' 20' Resolution.Daily' SelectorDoubleTradeBar)              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _selectorIndicators = new Indicators              {                  BB = BB(_symbol' 20' 1' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  RSI = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  EMA = EMA(_symbol' 14' Resolution.Daily' Field.Low)'                  SMA = SMA(_symbol' 14' Resolution.Daily' Field.Low)'                  MACD = MACD(_symbol' 12' 26' 9' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  MOM = MOM(_symbol' 20' Resolution.Daily' Field.Low)'                  MOMP = MOMP(_symbol' 20' Resolution.Daily' Field.Low)'                  STD = STD(_symbol' 20' Resolution.Daily' Field.Low)'                  MIN = MIN(_symbol' 14' Resolution.Daily' Field.High)' // this will find the 14 day min of the high property                  MAX = MAX(_symbol' 14' Resolution.Daily' Field.Low)'  // this will find the 14 day max of the low property                    // ATR and AROON are special in that they accept a TradeBar instance instead of a decimal' we could easily project and/or transform the input TradeBar                  // before it gets sent to the ATR/AROON indicator' here we use a function that will multiply the input trade bar by a factor of two                  ATR = ATR(_symbol' 14' MovingAverageType.Simple' Resolution.Daily' SelectorDoubleTradeBar)'                  AROON = AROON(_symbol' 20' Resolution.Daily' SelectorDoubleTradeBar)              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _selectorIndicators = new Indicators              {                  BB = BB(_symbol' 20' 1' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  RSI = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  EMA = EMA(_symbol' 14' Resolution.Daily' Field.Low)'                  SMA = SMA(_symbol' 14' Resolution.Daily' Field.Low)'                  MACD = MACD(_symbol' 12' 26' 9' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  MOM = MOM(_symbol' 20' Resolution.Daily' Field.Low)'                  MOMP = MOMP(_symbol' 20' Resolution.Daily' Field.Low)'                  STD = STD(_symbol' 20' Resolution.Daily' Field.Low)'                  MIN = MIN(_symbol' 14' Resolution.Daily' Field.High)' // this will find the 14 day min of the high property                  MAX = MAX(_symbol' 14' Resolution.Daily' Field.Low)'  // this will find the 14 day max of the low property                    // ATR and AROON are special in that they accept a TradeBar instance instead of a decimal' we could easily project and/or transform the input TradeBar                  // before it gets sent to the ATR/AROON indicator' here we use a function that will multiply the input trade bar by a factor of two                  ATR = ATR(_symbol' 14' MovingAverageType.Simple' Resolution.Daily' SelectorDoubleTradeBar)'                  AROON = AROON(_symbol' 20' Resolution.Daily' SelectorDoubleTradeBar)              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _selectorIndicators = new Indicators              {                  BB = BB(_symbol' 20' 1' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  RSI = RSI(_symbol' 14' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  EMA = EMA(_symbol' 14' Resolution.Daily' Field.Low)'                  SMA = SMA(_symbol' 14' Resolution.Daily' Field.Low)'                  MACD = MACD(_symbol' 12' 26' 9' MovingAverageType.Simple' Resolution.Daily' Field.Low)'                  MOM = MOM(_symbol' 20' Resolution.Daily' Field.Low)'                  MOMP = MOMP(_symbol' 20' Resolution.Daily' Field.Low)'                  STD = STD(_symbol' 20' Resolution.Daily' Field.Low)'                  MIN = MIN(_symbol' 14' Resolution.Daily' Field.High)' // this will find the 14 day min of the high property                  MAX = MAX(_symbol' 14' Resolution.Daily' Field.Low)'  // this will find the 14 day max of the low property                    // ATR and AROON are special in that they accept a TradeBar instance instead of a decimal' we could easily project and/or transform the input TradeBar                  // before it gets sent to the ATR/AROON indicator' here we use a function that will multiply the input trade bar by a factor of two                  ATR = ATR(_symbol' 14' MovingAverageType.Simple' Resolution.Daily' SelectorDoubleTradeBar)'                  AROON = AROON(_symbol' 20' Resolution.Daily' SelectorDoubleTradeBar)              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _rsiCustom = RSI(_customSymbol' 14' MovingAverageType.Simple' Resolution.Daily);
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _minCustom = MIN(_customSymbol' 14' Resolution.Daily);
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,Initialize,The following statement contains a magic number: _maxCustom = MAX(_customSymbol' 14' Resolution.Daily);
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,SelectorDoubleTradeBar,The following statement contains a magic number: return new TradeBar              {                  Close = 2 * bar.Close'                  DataType = bar.DataType'                  High = 2 * bar.High'                  Low = 2 * bar.Low'                  Open = 2 * bar.Open'                  Symbol = bar.Symbol'                  Time = bar.Time'                  Value = 2 * bar.Value'                  Volume = 2 * bar.Volume'                  Period = bar.Period              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,SelectorDoubleTradeBar,The following statement contains a magic number: return new TradeBar              {                  Close = 2 * bar.Close'                  DataType = bar.DataType'                  High = 2 * bar.High'                  Low = 2 * bar.Low'                  Open = 2 * bar.Open'                  Symbol = bar.Symbol'                  Time = bar.Time'                  Value = 2 * bar.Value'                  Volume = 2 * bar.Volume'                  Period = bar.Period              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,SelectorDoubleTradeBar,The following statement contains a magic number: return new TradeBar              {                  Close = 2 * bar.Close'                  DataType = bar.DataType'                  High = 2 * bar.High'                  Low = 2 * bar.Low'                  Open = 2 * bar.Open'                  Symbol = bar.Symbol'                  Time = bar.Time'                  Value = 2 * bar.Value'                  Volume = 2 * bar.Volume'                  Period = bar.Period              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,SelectorDoubleTradeBar,The following statement contains a magic number: return new TradeBar              {                  Close = 2 * bar.Close'                  DataType = bar.DataType'                  High = 2 * bar.High'                  Low = 2 * bar.Low'                  Open = 2 * bar.Open'                  Symbol = bar.Symbol'                  Time = bar.Time'                  Value = 2 * bar.Value'                  Volume = 2 * bar.Volume'                  Period = bar.Period              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,SelectorDoubleTradeBar,The following statement contains a magic number: return new TradeBar              {                  Close = 2 * bar.Close'                  DataType = bar.DataType'                  High = 2 * bar.High'                  Low = 2 * bar.Low'                  Open = 2 * bar.Open'                  Symbol = bar.Symbol'                  Time = bar.Time'                  Value = 2 * bar.Value'                  Volume = 2 * bar.Volume'                  Period = bar.Period              };
Magic Number,QuantConnect.Algorithm.CSharp,IndicatorSuiteAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\IndicatorSuiteAlgorithm.cs,SelectorDoubleTradeBar,The following statement contains a magic number: return new TradeBar              {                  Close = 2 * bar.Close'                  DataType = bar.DataType'                  High = 2 * bar.High'                  Low = 2 * bar.Low'                  Open = 2 * bar.Open'                  Symbol = bar.Symbol'                  Time = bar.Time'                  Value = 2 * bar.Value'                  Volume = 2 * bar.Volume'                  Period = bar.Period              };
Magic Number,QuantConnect.Algorithm.CSharp,LiveTradingFeaturesAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\LiveFeaturesAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 7);
Magic Number,QuantConnect.Algorithm.CSharp,LiveTradingFeaturesAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\LiveFeaturesAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 7);
Magic Number,QuantConnect.Algorithm.CSharp,LiveTradingFeaturesAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\LiveFeaturesAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 7);
Magic Number,QuantConnect.Algorithm.CSharp,LiveTradingFeaturesAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\LiveFeaturesAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,LiveTradingFeaturesAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\LiveFeaturesAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,LiveTradingFeaturesAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\LiveFeaturesAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,LiveTradingFeaturesAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\LiveFeaturesAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(25000);
Magic Number,QuantConnect.Algorithm.CSharp,LiveTradingFeaturesAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\LiveFeaturesAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.HoldStock)              {                  Order("BTC"' 100);                    //Send a notification email/SMS/web request on events:                  Notify.Email("myemail@gmail.com"' "Test"' "Test Body"' "test attachment");                  Notify.Sms("+11233456789"' Time.ToString("u") + ">> Test message from live BTC server.");                  Notify.Web("http://api.quantconnect.com"' Time.ToString("u") + ">> Test data packet posted from live BTC server.");              }
Magic Number,QuantConnect.Algorithm.CSharp,Bitcoin,C:\repos\QuantConnect_Lean\Algorithm.CSharp\LiveFeaturesAlgorithm.cs,Reader,The following statement contains a magic number: try              {                  string[] data = line.Split(''');                  coin.Time = DateTime.Parse(data[0]' CultureInfo.InvariantCulture);                  coin.Open = Convert.ToDecimal(data[1]' CultureInfo.InvariantCulture);                  coin.High = Convert.ToDecimal(data[2]' CultureInfo.InvariantCulture);                  coin.Low = Convert.ToDecimal(data[3]' CultureInfo.InvariantCulture);                  coin.Close = Convert.ToDecimal(data[4]' CultureInfo.InvariantCulture);                  coin.VolumeBTC = Convert.ToDecimal(data[5]' CultureInfo.InvariantCulture);                  coin.VolumeUSD = Convert.ToDecimal(data[6]' CultureInfo.InvariantCulture);                  coin.WeightedPrice = Convert.ToDecimal(data[7]' CultureInfo.InvariantCulture);                  coin.Value = coin.Close;              }              catch { /* Do nothing' skip first title row */ }
Magic Number,QuantConnect.Algorithm.CSharp,Bitcoin,C:\repos\QuantConnect_Lean\Algorithm.CSharp\LiveFeaturesAlgorithm.cs,Reader,The following statement contains a magic number: try              {                  string[] data = line.Split(''');                  coin.Time = DateTime.Parse(data[0]' CultureInfo.InvariantCulture);                  coin.Open = Convert.ToDecimal(data[1]' CultureInfo.InvariantCulture);                  coin.High = Convert.ToDecimal(data[2]' CultureInfo.InvariantCulture);                  coin.Low = Convert.ToDecimal(data[3]' CultureInfo.InvariantCulture);                  coin.Close = Convert.ToDecimal(data[4]' CultureInfo.InvariantCulture);                  coin.VolumeBTC = Convert.ToDecimal(data[5]' CultureInfo.InvariantCulture);                  coin.VolumeUSD = Convert.ToDecimal(data[6]' CultureInfo.InvariantCulture);                  coin.WeightedPrice = Convert.ToDecimal(data[7]' CultureInfo.InvariantCulture);                  coin.Value = coin.Close;              }              catch { /* Do nothing' skip first title row */ }
Magic Number,QuantConnect.Algorithm.CSharp,Bitcoin,C:\repos\QuantConnect_Lean\Algorithm.CSharp\LiveFeaturesAlgorithm.cs,Reader,The following statement contains a magic number: try              {                  string[] data = line.Split(''');                  coin.Time = DateTime.Parse(data[0]' CultureInfo.InvariantCulture);                  coin.Open = Convert.ToDecimal(data[1]' CultureInfo.InvariantCulture);                  coin.High = Convert.ToDecimal(data[2]' CultureInfo.InvariantCulture);                  coin.Low = Convert.ToDecimal(data[3]' CultureInfo.InvariantCulture);                  coin.Close = Convert.ToDecimal(data[4]' CultureInfo.InvariantCulture);                  coin.VolumeBTC = Convert.ToDecimal(data[5]' CultureInfo.InvariantCulture);                  coin.VolumeUSD = Convert.ToDecimal(data[6]' CultureInfo.InvariantCulture);                  coin.WeightedPrice = Convert.ToDecimal(data[7]' CultureInfo.InvariantCulture);                  coin.Value = coin.Close;              }              catch { /* Do nothing' skip first title row */ }
Magic Number,QuantConnect.Algorithm.CSharp,Bitcoin,C:\repos\QuantConnect_Lean\Algorithm.CSharp\LiveFeaturesAlgorithm.cs,Reader,The following statement contains a magic number: try              {                  string[] data = line.Split(''');                  coin.Time = DateTime.Parse(data[0]' CultureInfo.InvariantCulture);                  coin.Open = Convert.ToDecimal(data[1]' CultureInfo.InvariantCulture);                  coin.High = Convert.ToDecimal(data[2]' CultureInfo.InvariantCulture);                  coin.Low = Convert.ToDecimal(data[3]' CultureInfo.InvariantCulture);                  coin.Close = Convert.ToDecimal(data[4]' CultureInfo.InvariantCulture);                  coin.VolumeBTC = Convert.ToDecimal(data[5]' CultureInfo.InvariantCulture);                  coin.VolumeUSD = Convert.ToDecimal(data[6]' CultureInfo.InvariantCulture);                  coin.WeightedPrice = Convert.ToDecimal(data[7]' CultureInfo.InvariantCulture);                  coin.Value = coin.Close;              }              catch { /* Do nothing' skip first title row */ }
Magic Number,QuantConnect.Algorithm.CSharp,Bitcoin,C:\repos\QuantConnect_Lean\Algorithm.CSharp\LiveFeaturesAlgorithm.cs,Reader,The following statement contains a magic number: try              {                  string[] data = line.Split(''');                  coin.Time = DateTime.Parse(data[0]' CultureInfo.InvariantCulture);                  coin.Open = Convert.ToDecimal(data[1]' CultureInfo.InvariantCulture);                  coin.High = Convert.ToDecimal(data[2]' CultureInfo.InvariantCulture);                  coin.Low = Convert.ToDecimal(data[3]' CultureInfo.InvariantCulture);                  coin.Close = Convert.ToDecimal(data[4]' CultureInfo.InvariantCulture);                  coin.VolumeBTC = Convert.ToDecimal(data[5]' CultureInfo.InvariantCulture);                  coin.VolumeUSD = Convert.ToDecimal(data[6]' CultureInfo.InvariantCulture);                  coin.WeightedPrice = Convert.ToDecimal(data[7]' CultureInfo.InvariantCulture);                  coin.Value = coin.Close;              }              catch { /* Do nothing' skip first title row */ }
Magic Number,QuantConnect.Algorithm.CSharp,Bitcoin,C:\repos\QuantConnect_Lean\Algorithm.CSharp\LiveFeaturesAlgorithm.cs,Reader,The following statement contains a magic number: try              {                  string[] data = line.Split(''');                  coin.Time = DateTime.Parse(data[0]' CultureInfo.InvariantCulture);                  coin.Open = Convert.ToDecimal(data[1]' CultureInfo.InvariantCulture);                  coin.High = Convert.ToDecimal(data[2]' CultureInfo.InvariantCulture);                  coin.Low = Convert.ToDecimal(data[3]' CultureInfo.InvariantCulture);                  coin.Close = Convert.ToDecimal(data[4]' CultureInfo.InvariantCulture);                  coin.VolumeBTC = Convert.ToDecimal(data[5]' CultureInfo.InvariantCulture);                  coin.VolumeUSD = Convert.ToDecimal(data[6]' CultureInfo.InvariantCulture);                  coin.WeightedPrice = Convert.ToDecimal(data[7]' CultureInfo.InvariantCulture);                  coin.Value = coin.Close;              }              catch { /* Do nothing' skip first title row */ }
Magic Number,QuantConnect.Algorithm.CSharp,OpeningBreakoutAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OpeningBreakoutAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,OpeningBreakoutAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OpeningBreakoutAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,OpeningBreakoutAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OpeningBreakoutAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,OpeningBreakoutAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OpeningBreakoutAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,OpeningBreakoutAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OpeningBreakoutAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,OpeningBreakoutAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OpeningBreakoutAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,OpeningBreakoutAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OpeningBreakoutAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,OpeningBreakoutAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OpeningBreakoutAlgorithm.cs,Initialize,The following statement contains a magic number: ADX14 = ADX(symbol' 28' Resolution.Hour);
Magic Number,QuantConnect.Algorithm.CSharp,OpeningBreakoutAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OpeningBreakoutAlgorithm.cs,Initialize,The following statement contains a magic number: STD14 = STD(symbol' 14' Resolution.Daily);
Magic Number,QuantConnect.Algorithm.CSharp,OpeningBreakoutAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OpeningBreakoutAlgorithm.cs,Initialize,The following statement contains a magic number: ATR14 = ATR(symbol' 14' resolution: Resolution.Daily);
Magic Number,QuantConnect.Algorithm.CSharp,OpeningBreakoutAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OpeningBreakoutAlgorithm.cs,Initialize,The following statement contains a magic number: var oneWeekInMarketHours = (int)(5*6.5);
Magic Number,QuantConnect.Algorithm.CSharp,OpeningBreakoutAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OpeningBreakoutAlgorithm.cs,Initialize,The following statement contains a magic number: var oneWeekInMarketHours = (int)(5*6.5);
Magic Number,QuantConnect.Algorithm.CSharp,OpeningBreakoutAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OpeningBreakoutAlgorithm.cs,Initialize,The following statement contains a magic number: var history = History(symbol' 20' Resolution.Daily);
Magic Number,QuantConnect.Algorithm.CSharp,OpeningBreakoutAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OpeningBreakoutAlgorithm.cs,ScanForEntrance,The following statement contains a magic number: if (Time.TimeOfDay.Hours >= 10) return;
Magic Number,QuantConnect.Algorithm.CSharp,DropboxUniverseSelectionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DropboxUniverseSelectionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 01' 01);
Magic Number,QuantConnect.Algorithm.CSharp,DropboxUniverseSelectionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DropboxUniverseSelectionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 12' 31);
Magic Number,QuantConnect.Algorithm.CSharp,DropboxUniverseSelectionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DropboxUniverseSelectionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 12' 31);
Magic Number,QuantConnect.Algorithm.CSharp,DropboxUniverseSelectionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\DropboxUniverseSelectionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 12' 31);
Magic Number,QuantConnect.Algorithm.CSharp,ParameterizedAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ParameterizedAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,ParameterizedAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ParameterizedAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,ParameterizedAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ParameterizedAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,ParameterizedAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ParameterizedAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,ParameterizedAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ParameterizedAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,ParameterizedAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ParameterizedAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,ParameterizedAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ParameterizedAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100*1000);
Magic Number,QuantConnect.Algorithm.CSharp,ParameterizedAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ParameterizedAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100*1000);
Magic Number,QuantConnect.Algorithm.CSharp,HourReverseSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HourReverseSplitRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 11' 7);
Magic Number,QuantConnect.Algorithm.CSharp,HourReverseSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HourReverseSplitRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 11' 7);
Magic Number,QuantConnect.Algorithm.CSharp,HourReverseSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HourReverseSplitRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 11' 7);
Magic Number,QuantConnect.Algorithm.CSharp,HourReverseSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HourReverseSplitRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 11' 8);
Magic Number,QuantConnect.Algorithm.CSharp,HourReverseSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HourReverseSplitRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 11' 8);
Magic Number,QuantConnect.Algorithm.CSharp,HourReverseSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HourReverseSplitRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 11' 8);
Magic Number,QuantConnect.Algorithm.CSharp,HourReverseSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HourReverseSplitRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,HourSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HourSplitRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2005' 2' 25);
Magic Number,QuantConnect.Algorithm.CSharp,HourSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HourSplitRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2005' 2' 25);
Magic Number,QuantConnect.Algorithm.CSharp,HourSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HourSplitRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2005' 2' 25);
Magic Number,QuantConnect.Algorithm.CSharp,HourSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HourSplitRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2005' 2' 28);
Magic Number,QuantConnect.Algorithm.CSharp,HourSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HourSplitRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2005' 2' 28);
Magic Number,QuantConnect.Algorithm.CSharp,HourSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HourSplitRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2005' 2' 28);
Magic Number,QuantConnect.Algorithm.CSharp,HourSplitRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\HourSplitRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,UniverseSelectionDefinitionsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UniverseSelectionDefinitionsAlgorithm.cs,Initialize,The following statement contains a magic number: UniverseSettings.MinimumTimeInUniverse = TimeSpan.FromMinutes(30);
Magic Number,QuantConnect.Algorithm.CSharp,UniverseSelectionDefinitionsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UniverseSelectionDefinitionsAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,UniverseSelectionDefinitionsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UniverseSelectionDefinitionsAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,UniverseSelectionDefinitionsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UniverseSelectionDefinitionsAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,UniverseSelectionDefinitionsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UniverseSelectionDefinitionsAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,UniverseSelectionDefinitionsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UniverseSelectionDefinitionsAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,UniverseSelectionDefinitionsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UniverseSelectionDefinitionsAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,UniverseSelectionDefinitionsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UniverseSelectionDefinitionsAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100*1000);
Magic Number,QuantConnect.Algorithm.CSharp,UniverseSelectionDefinitionsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UniverseSelectionDefinitionsAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100*1000);
Magic Number,QuantConnect.Algorithm.CSharp,UniverseSelectionDefinitionsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UniverseSelectionDefinitionsAlgorithm.cs,Initialize,The following statement contains a magic number: AddUniverse(Universe.DollarVolume.Top(50));
Magic Number,QuantConnect.Algorithm.CSharp,UniverseSelectionDefinitionsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UniverseSelectionDefinitionsAlgorithm.cs,Initialize,The following statement contains a magic number: AddUniverse(Universe.DollarVolume.Bottom(50));
Magic Number,QuantConnect.Algorithm.CSharp,UniverseSelectionDefinitionsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UniverseSelectionDefinitionsAlgorithm.cs,Initialize,The following statement contains a magic number: AddUniverse(Universe.DollarVolume.Percentile(90));
Magic Number,QuantConnect.Algorithm.CSharp,UniverseSelectionDefinitionsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UniverseSelectionDefinitionsAlgorithm.cs,Initialize,The following statement contains a magic number: AddUniverse(Universe.DollarVolume.Percentile(70' 80));
Magic Number,QuantConnect.Algorithm.CSharp,UniverseSelectionDefinitionsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UniverseSelectionDefinitionsAlgorithm.cs,Initialize,The following statement contains a magic number: AddUniverse(Universe.DollarVolume.Percentile(70' 80));
Magic Number,QuantConnect.Algorithm.CSharp,UniverseSelectionDefinitionsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UniverseSelectionDefinitionsAlgorithm.cs,OnData,The following statement contains a magic number: foreach (var security in _changes.AddedSecurities)              {                  if (!security.Invested)                  {                      MarketOrder(security.Symbol' 10);                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,UserDefinedUniverseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UserDefinedUniverseAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 01' 01);
Magic Number,QuantConnect.Algorithm.CSharp,UserDefinedUniverseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UserDefinedUniverseAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 12' 01);
Magic Number,QuantConnect.Algorithm.CSharp,UserDefinedUniverseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UserDefinedUniverseAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 12' 01);
Magic Number,QuantConnect.Algorithm.CSharp,WarmupAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\WarmupAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 08);
Magic Number,QuantConnect.Algorithm.CSharp,WarmupAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\WarmupAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 08);
Magic Number,QuantConnect.Algorithm.CSharp,WarmupAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\WarmupAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 08);
Magic Number,QuantConnect.Algorithm.CSharp,WarmupAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\WarmupAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,WarmupAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\WarmupAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,WarmupAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\WarmupAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,WarmupAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\WarmupAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,WarmupHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\WarmupHistoryAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,WarmupHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\WarmupHistoryAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,WarmupHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\WarmupHistoryAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,WarmupHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\WarmupHistoryAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,WarmupHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\WarmupHistoryAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,WarmupHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\WarmupHistoryAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,WarmupHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\WarmupHistoryAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,WarmupHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\WarmupHistoryAlgorithm.cs,Initialize,The following statement contains a magic number: fast = EMA("EURUSD"' 60);
Magic Number,QuantConnect.Algorithm.CSharp,WarmupHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\WarmupHistoryAlgorithm.cs,Initialize,The following statement contains a magic number: slow = EMA("EURUSD"' 3600);
Magic Number,QuantConnect.Algorithm.CSharp,WarmupHistoryAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\WarmupHistoryAlgorithm.cs,Initialize,The following statement contains a magic number: var history = History("EURUSD"' 3601);
Magic Number,QuantConnect.Algorithm.CSharp,MACDTrendAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MACDTrendAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2004' 01' 01);
Magic Number,QuantConnect.Algorithm.CSharp,MACDTrendAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MACDTrendAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 01' 01);
Magic Number,QuantConnect.Algorithm.CSharp,MACDTrendAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MACDTrendAlgorithm.cs,Initialize,The following statement contains a magic number: _macd = MACD(_symbol' 12' 26' 9' MovingAverageType.Exponential' Resolution.Daily);
Magic Number,QuantConnect.Algorithm.CSharp,MACDTrendAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MACDTrendAlgorithm.cs,Initialize,The following statement contains a magic number: _macd = MACD(_symbol' 12' 26' 9' MovingAverageType.Exponential' Resolution.Daily);
Magic Number,QuantConnect.Algorithm.CSharp,MACDTrendAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MACDTrendAlgorithm.cs,Initialize,The following statement contains a magic number: _macd = MACD(_symbol' 12' 26' 9' MovingAverageType.Exponential' Resolution.Daily);
Magic Number,QuantConnect.Algorithm.CSharp,MarginCallEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MarginCallEventsAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 01);
Magic Number,QuantConnect.Algorithm.CSharp,MarginCallEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MarginCallEventsAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 01);
Magic Number,QuantConnect.Algorithm.CSharp,MarginCallEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MarginCallEventsAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 12' 11);
Magic Number,QuantConnect.Algorithm.CSharp,MarginCallEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MarginCallEventsAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 12' 11);
Magic Number,QuantConnect.Algorithm.CSharp,MarginCallEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MarginCallEventsAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 12' 11);
Magic Number,QuantConnect.Algorithm.CSharp,MarginCallEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MarginCallEventsAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,MarginCallEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MarginCallEventsAlgorithm.cs,Initialize,The following statement contains a magic number: Securities["SPY"].SetLeverage(100);
Magic Number,QuantConnect.Algorithm.CSharp,MarginCallEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MarginCallEventsAlgorithm.cs,OnData,The following statement contains a magic number: if (!Portfolio.Invested)              {                  Liquidate();                  SetHoldings("SPY"' 100);              }
Magic Number,QuantConnect.Algorithm.CSharp,MarketOnOpenOnCloseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MarketOnOpenOnCloseAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,MarketOnOpenOnCloseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MarketOnOpenOnCloseAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,MarketOnOpenOnCloseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MarketOnOpenOnCloseAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,MarketOnOpenOnCloseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MarketOnOpenOnCloseAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,MarketOnOpenOnCloseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MarketOnOpenOnCloseAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,MarketOnOpenOnCloseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MarketOnOpenOnCloseAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,MarketOnOpenOnCloseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MarketOnOpenOnCloseAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,MarketOnOpenOnCloseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MarketOnOpenOnCloseAlgorithm.cs,OnData,The following statement contains a magic number: if (Time.Date != last.Date) // each morning submit a market on open order              {                  _submittedMarketOnCloseToday = false;                  MarketOnOpenOrder("SPY"' 100);                  last = Time;              }
Magic Number,QuantConnect.Algorithm.CSharp,MarketOnOpenOnCloseAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MarketOnOpenOnCloseAlgorithm.cs,OnData,The following statement contains a magic number: if (!_submittedMarketOnCloseToday && _security.Exchange.ExchangeOpen) // once the exchange opens submit a market on close order              {                  _submittedMarketOnCloseToday = true;                  MarketOnCloseOrder("SPY"' -100);              }
Magic Number,QuantConnect.Algorithm.CSharp,MovingAverageCrossAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MovingAverageCrossAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2009' 01' 01);
Magic Number,QuantConnect.Algorithm.CSharp,MovingAverageCrossAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MovingAverageCrossAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 01' 01);
Magic Number,QuantConnect.Algorithm.CSharp,MovingAverageCrossAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MovingAverageCrossAlgorithm.cs,Initialize,The following statement contains a magic number: _fast = EMA(_symbol' 15' Resolution.Daily);
Magic Number,QuantConnect.Algorithm.CSharp,MovingAverageCrossAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MovingAverageCrossAlgorithm.cs,Initialize,The following statement contains a magic number: _slow = EMA(_symbol' 30' Resolution.Daily);
Magic Number,QuantConnect.Algorithm.CSharp,MovingAverageCrossAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MovingAverageCrossAlgorithm.cs,Initialize,The following statement contains a magic number: var ribbonCount = 8;
Magic Number,QuantConnect.Algorithm.CSharp,MovingAverageCrossAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MovingAverageCrossAlgorithm.cs,Initialize,The following statement contains a magic number: var ribbonInterval = 15;
Magic Number,QuantConnect.Algorithm.CSharp,MultipleSymbolConsolidationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MultipleSymbolConsolidationAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2014' 12' 01);
Magic Number,QuantConnect.Algorithm.CSharp,MultipleSymbolConsolidationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MultipleSymbolConsolidationAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2014' 12' 01);
Magic Number,QuantConnect.Algorithm.CSharp,MultipleSymbolConsolidationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MultipleSymbolConsolidationAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 02' 01);
Magic Number,QuantConnect.Algorithm.CSharp,MultipleSymbolConsolidationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MultipleSymbolConsolidationAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 02' 01);
Magic Number,QuantConnect.Algorithm.CSharp,MultipleSymbolConsolidationAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\MultipleSymbolConsolidationAlgorithm.cs,OnEndOfDay,The following statement contains a magic number: foreach (var kvp in Data.OrderBy(x => x.Value.Symbol))              {                  // we have too many symbols to plot them all' so plot ever other                  if (kvp.Value.IsReady && ++i%2 == 0)                  {                      Plot(kvp.Value.Symbol' kvp.Value.SMA);                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,QCUQuandlFutures,C:\repos\QuantConnect_Lean\Algorithm.CSharp\QuandlFuturesDataAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2000' 1' 1);
Magic Number,QuantConnect.Algorithm.CSharp,QCUQuandlFutures,C:\repos\QuantConnect_Lean\Algorithm.CSharp\QuandlFuturesDataAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(25000);
Magic Number,QuantConnect.Algorithm.CSharp,QuandlImporterAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\QuandlImporterAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 1' 1);
Magic Number,QuantConnect.Algorithm.CSharp,QuandlImporterAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\QuandlImporterAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(25000);
Magic Number,QuantConnect.Algorithm.CSharp,QuandlImporterAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\QuandlImporterAlgorithm.cs,Initialize,The following statement contains a magic number: _sma = SMA(_quandlCode' 14);
Magic Number,QuantConnect.Algorithm.CSharp,RegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\RegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,RegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\RegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,RegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\RegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,RegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\RegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,RegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\RegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,RegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\RegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,RegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\RegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(10000000);
Magic Number,QuantConnect.Algorithm.CSharp,RegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\RegressionAlgorithm.cs,OnData,The following statement contains a magic number: foreach (var kvp in data)              {                  var symbol = kvp.Key;                  var bar = kvp.Value;                    if (bar.Time.RoundDown(bar.Period) != bar.Time)                  {                      // only trade on new data                      continue;                  }                    var holdings = Portfolio[symbol];                  if (!holdings.Invested)                  {                      MarketOrder(symbol' 10);                  }                  else                  {                      MarketOrder(symbol' -holdings.Quantity);                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,RenkoConsolidatorAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\RenkoConsolidatorAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2012' 01' 01);
Magic Number,QuantConnect.Algorithm.CSharp,RenkoConsolidatorAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\RenkoConsolidatorAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 01' 01);
Magic Number,QuantConnect.Algorithm.CSharp,RenkoConsolidatorAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\RenkoConsolidatorAlgorithm.cs,Initialize,The following statement contains a magic number: var renko7bar = new RenkoConsolidator<TradeBar>(2.5m' x => (2 * x.Open + x.High + x.Low + 3 * x.Close) / 7m' x => x.Volume);
Magic Number,QuantConnect.Algorithm.CSharp,RenkoConsolidatorAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\RenkoConsolidatorAlgorithm.cs,Initialize,The following statement contains a magic number: var renko7bar = new RenkoConsolidator<TradeBar>(2.5m' x => (2 * x.Open + x.High + x.Low + 3 * x.Close) / 7m' x => x.Volume);
Magic Number,QuantConnect.Algorithm.CSharp,ScheduledEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ScheduledEventsAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,ScheduledEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ScheduledEventsAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,ScheduledEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ScheduledEventsAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,ScheduledEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ScheduledEventsAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,ScheduledEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ScheduledEventsAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,ScheduledEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ScheduledEventsAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,ScheduledEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ScheduledEventsAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,ScheduledEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ScheduledEventsAlgorithm.cs,Initialize,The following statement contains a magic number: Schedule.On(DateRules.On(2013' 10' 7)' TimeRules.At(13' 0)' () =>              {                  Log("SpecificTime: Fired at : " + Time);              });
Magic Number,QuantConnect.Algorithm.CSharp,ScheduledEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ScheduledEventsAlgorithm.cs,Initialize,The following statement contains a magic number: Schedule.On(DateRules.On(2013' 10' 7)' TimeRules.At(13' 0)' () =>              {                  Log("SpecificTime: Fired at : " + Time);              });
Magic Number,QuantConnect.Algorithm.CSharp,ScheduledEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ScheduledEventsAlgorithm.cs,Initialize,The following statement contains a magic number: Schedule.On(DateRules.On(2013' 10' 7)' TimeRules.At(13' 0)' () =>              {                  Log("SpecificTime: Fired at : " + Time);              });
Magic Number,QuantConnect.Algorithm.CSharp,ScheduledEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ScheduledEventsAlgorithm.cs,Initialize,The following statement contains a magic number: Schedule.On(DateRules.On(2013' 10' 7)' TimeRules.At(13' 0)' () =>              {                  Log("SpecificTime: Fired at : " + Time);              });
Magic Number,QuantConnect.Algorithm.CSharp,ScheduledEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ScheduledEventsAlgorithm.cs,Initialize,The following statement contains a magic number: Schedule.On(DateRules.EveryDay("SPY")' TimeRules.AfterMarketOpen("SPY"' 10)' () =>              {                  Log("EveryDay.SPY 10 min after open: Fired at: " + Time);              });
Magic Number,QuantConnect.Algorithm.CSharp,ScheduledEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ScheduledEventsAlgorithm.cs,Initialize,The following statement contains a magic number: Schedule.On(DateRules.EveryDay("SPY")' TimeRules.BeforeMarketClose("SPY"' 10)' () =>              {                  Log("EveryDay.SPY 10 min before close: Fired at: " + Time);              });
Magic Number,QuantConnect.Algorithm.CSharp,ScheduledEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ScheduledEventsAlgorithm.cs,Initialize,The following statement contains a magic number: Schedule.On(DateRules.Every(DayOfWeek.Monday' DayOfWeek.Friday)' TimeRules.At(12' 0)' () =>              {                  Log("Mon/Fri at 12pm: Fired at: " + Time);              });
Magic Number,QuantConnect.Algorithm.CSharp,ScheduledEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ScheduledEventsAlgorithm.cs,Initialize,The following statement contains a magic number: Schedule.On(DateRules.EveryDay()' TimeRules.Every(TimeSpan.FromMinutes(10))' () =>              {                  // if we have over 1000 dollars in unrealized losses' liquidate                  if (Portfolio.TotalUnrealizedProfit < -1000)                  {                      Log("Liquidated due to unrealized losses at: " + Time);                      Liquidate();                  }              });
Magic Number,QuantConnect.Algorithm.CSharp,ScheduledEventsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\ScheduledEventsAlgorithm.cs,Initialize,The following statement contains a magic number: Schedule.On(DateRules.EveryDay()' TimeRules.Every(TimeSpan.FromMinutes(10))' () =>              {                  // if we have over 1000 dollars in unrealized losses' liquidate                  if (Portfolio.TotalUnrealizedProfit < -1000)                  {                      Log("Liquidated due to unrealized losses at: " + Time);                      Liquidate();                  }              });
Magic Number,QuantConnect.Algorithm.CSharp,StressSymbolsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\StressSymbolsAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2001' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,StressSymbolsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\StressSymbolsAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2001' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,StressSymbolsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\StressSymbolsAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2001' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,StressSymbolsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\StressSymbolsAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2010' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,StressSymbolsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\StressSymbolsAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2010' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,StressSymbolsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\StressSymbolsAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2010' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,StressSymbolsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\StressSymbolsAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(250000);
Magic Number,QuantConnect.Algorithm.CSharp,StressSymbolsAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\StressSymbolsAlgorithm.cs,GetRandomItem,The following statement contains a magic number: do              {                  item = list[_random.Next(list.Count)];                  count++;              }              while (!hash.Add(item) && count < list.Count*2);
Magic Number,QuantConnect.Algorithm.CSharp,TickDataFilteringAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\TickDataFilteringAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(25000);
Magic Number,QuantConnect.Algorithm.CSharp,TickDataFilteringAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\TickDataFilteringAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,TickDataFilteringAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\TickDataFilteringAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,TickDataFilteringAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\TickDataFilteringAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,TickDataFilteringAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\TickDataFilteringAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,TickDataFilteringAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\TickDataFilteringAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,TickDataFilteringAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\TickDataFilteringAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,EmaCrossUniverseSelectionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\EmaCrossUniverseSelectionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2010' 01' 01);
Magic Number,QuantConnect.Algorithm.CSharp,EmaCrossUniverseSelectionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\EmaCrossUniverseSelectionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 01' 01);
Magic Number,QuantConnect.Algorithm.CSharp,EmaCrossUniverseSelectionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\EmaCrossUniverseSelectionAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100*1000);
Magic Number,QuantConnect.Algorithm.CSharp,EmaCrossUniverseSelectionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\EmaCrossUniverseSelectionAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100*1000);
Magic Number,QuantConnect.Algorithm.CSharp,SelectionData,C:\repos\QuantConnect_Lean\Algorithm.CSharp\EmaCrossUniverseSelectionAlgorithm.cs,SelectionData,The following statement contains a magic number: Fast = new ExponentialMovingAverage(100);
Magic Number,QuantConnect.Algorithm.CSharp,SelectionData,C:\repos\QuantConnect_Lean\Algorithm.CSharp\EmaCrossUniverseSelectionAlgorithm.cs,SelectionData,The following statement contains a magic number: Slow = new ExponentialMovingAverage(300);
Magic Number,QuantConnect.Algorithm.CSharp,UniverseSelectionRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UniverseSelectionRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2014' 03' 22);
Magic Number,QuantConnect.Algorithm.CSharp,UniverseSelectionRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UniverseSelectionRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2014' 03' 22);
Magic Number,QuantConnect.Algorithm.CSharp,UniverseSelectionRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UniverseSelectionRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2014' 03' 22);
Magic Number,QuantConnect.Algorithm.CSharp,UniverseSelectionRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UniverseSelectionRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2014' 04' 07);
Magic Number,QuantConnect.Algorithm.CSharp,UniverseSelectionRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UniverseSelectionRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2014' 04' 07);
Magic Number,QuantConnect.Algorithm.CSharp,UniverseSelectionRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UniverseSelectionRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2014' 04' 07);
Magic Number,QuantConnect.Algorithm.CSharp,UniverseSelectionRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UniverseSelectionRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,UniverseSelectionRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UniverseSelectionRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (Transactions.OrdersCount == 0)              {                  MarketOrder("SPY"' 100);              }
Magic Number,QuantConnect.Algorithm.CSharp,UniverseSelectionRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UniverseSelectionRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (_changes != null && _changes.AddedSecurities.All(x => data.Bars.ContainsKey(x.Symbol)))              {                  foreach (var security in _changes.AddedSecurities)                  {                      Log(Time + ": Added Security: " + security.Symbol.ID);                      MarketOnOpenOrder(security.Symbol' 100);                  }                  foreach (var security in _changes.RemovedSecurities)                  {                      Log(Time + ": Removed Security: " + security.Symbol.ID);                      if (!_delistedSymbols.Contains(security.Symbol))                      {                          MarketOnOpenOrder(security.Symbol' -100);                      }                  }                  _changes = null;              }
Magic Number,QuantConnect.Algorithm.CSharp,UniverseSelectionRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UniverseSelectionRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (_changes != null && _changes.AddedSecurities.All(x => data.Bars.ContainsKey(x.Symbol)))              {                  foreach (var security in _changes.AddedSecurities)                  {                      Log(Time + ": Added Security: " + security.Symbol.ID);                      MarketOnOpenOrder(security.Symbol' 100);                  }                  foreach (var security in _changes.RemovedSecurities)                  {                      Log(Time + ": Removed Security: " + security.Symbol.ID);                      if (!_delistedSymbols.Contains(security.Symbol))                      {                          MarketOnOpenOrder(security.Symbol' -100);                      }                  }                  _changes = null;              }
Magic Number,QuantConnect.Algorithm.CSharp,UniverseSelectionRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UniverseSelectionRegressionAlgorithm.cs,OnEndOfAlgorithm,The following statement contains a magic number: foreach (var security in Portfolio.Securities.Values.Where(x => x.Invested))              {                  // At the end' we should hold 100 shares of:                  // - SPY                (bought on March' 25th 2014)'                  // - GOOG  T1AZ164W5VTX (bought on March' 26th 2014)'                  // - GOOCV VP83T1ZUHROL (bought on March' 28th 2014).                  AssertQuantity(security' 100);              }
Magic Number,QuantConnect.Algorithm.CSharp,UpdateOrderLiveTestAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UpdateOrderLiveTestAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,UpdateOrderLiveTestAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UpdateOrderLiveTestAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,UpdateOrderLiveTestAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UpdateOrderLiveTestAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,UpdateOrderLiveTestAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UpdateOrderLiveTestAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,UpdateOrderLiveTestAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UpdateOrderLiveTestAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,UpdateOrderLiveTestAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UpdateOrderLiveTestAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 07);
Magic Number,QuantConnect.Algorithm.CSharp,UpdateOrderLiveTestAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UpdateOrderLiveTestAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,UpdateOrderLiveTestAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UpdateOrderLiveTestAlgorithm.cs,OnData,The following statement contains a magic number: if (Time.Minute != _lastMinute && Time.Second == 0)              {                  Log("");                  Log("--------------Minute: " + Time.Minute);                  Log("");                  _lastMinute = Time.Minute;                  // we'll submit the next type of order from the queue                  var orderType = _orderTypesQueue.Dequeue();                  Log("ORDER TYPE:: " + orderType);                  var isLong = _quantity > 0;                  var stopPrice = isLong ? (1 + StopPercentage) * _security.High : (1 - StopPercentage) * _security.Low;                  var limitPrice = isLong ? (1 - LimitPercentage) * stopPrice : (1 + LimitPercentage) * stopPrice;                  if (orderType == OrderType.Limit)                  {                      limitPrice = !isLong ? (1 + LimitPercentage) * _security.High : (1 - LimitPercentage) * _security.Low;                  }                  var request = new SubmitOrderRequest(orderType' SecType' Securities[_symbol].Symbol' _quantity' stopPrice' limitPrice' Time' orderType.ToString());                  var ticket = Transactions.AddOrder(request);                  _tickets.Add(ticket);                  if ((decimal)Random.NextDouble() < ImmediateCancelPercentage)                  {                      Log("Immediate cancellation requested!");                      _immediateCancellations.Add(ticket.OrderId);                  }              }              else if (_tickets.Count > 0)              {                  var ticket = _tickets.Last();                  if (Time.Second > 15 && Time.Second < 30)                  {                      if (ticket.UpdateRequests.Count == 0 && ticket.Status.IsOpen())                      {                          Log(ticket.ToString());                          ticket.Update(new UpdateOrderFields                          {                              Quantity = ticket.Quantity + Math.Sign(_quantity) * DeltaQuantity'                              Tag = "Change quantity: " + Time                          });                          Log("UPDATE1:: " + ticket.UpdateRequests.Last());                      }                  }                  else if (Time.Second > 29 && Time.Second < 45)                  {                      if (ticket.UpdateRequests.Count == 1 && ticket.Status.IsOpen())                      {                          Log(ticket.ToString());                          ticket.Update(new UpdateOrderFields                          {                              LimitPrice = _security.Price * (1 - Math.Sign(ticket.Quantity) * LimitPercentageDelta)'                              StopPrice = _security.Price * (1 + Math.Sign(ticket.Quantity) * StopPercentageDelta)'                              Tag = "Change prices: " + Time                          });                          Log("UPDATE2:: " + ticket.UpdateRequests.Last());                      }                  }                  else                  {                      if (ticket.UpdateRequests.Count == 2 && ticket.Status.IsOpen())                      {                          Log(ticket.ToString());                          ticket.Cancel(Time + " and is still open!");                          Log("CANCELLED:: " + ticket.CancelRequest);                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,UpdateOrderLiveTestAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UpdateOrderLiveTestAlgorithm.cs,OnData,The following statement contains a magic number: if (Time.Minute != _lastMinute && Time.Second == 0)              {                  Log("");                  Log("--------------Minute: " + Time.Minute);                  Log("");                  _lastMinute = Time.Minute;                  // we'll submit the next type of order from the queue                  var orderType = _orderTypesQueue.Dequeue();                  Log("ORDER TYPE:: " + orderType);                  var isLong = _quantity > 0;                  var stopPrice = isLong ? (1 + StopPercentage) * _security.High : (1 - StopPercentage) * _security.Low;                  var limitPrice = isLong ? (1 - LimitPercentage) * stopPrice : (1 + LimitPercentage) * stopPrice;                  if (orderType == OrderType.Limit)                  {                      limitPrice = !isLong ? (1 + LimitPercentage) * _security.High : (1 - LimitPercentage) * _security.Low;                  }                  var request = new SubmitOrderRequest(orderType' SecType' Securities[_symbol].Symbol' _quantity' stopPrice' limitPrice' Time' orderType.ToString());                  var ticket = Transactions.AddOrder(request);                  _tickets.Add(ticket);                  if ((decimal)Random.NextDouble() < ImmediateCancelPercentage)                  {                      Log("Immediate cancellation requested!");                      _immediateCancellations.Add(ticket.OrderId);                  }              }              else if (_tickets.Count > 0)              {                  var ticket = _tickets.Last();                  if (Time.Second > 15 && Time.Second < 30)                  {                      if (ticket.UpdateRequests.Count == 0 && ticket.Status.IsOpen())                      {                          Log(ticket.ToString());                          ticket.Update(new UpdateOrderFields                          {                              Quantity = ticket.Quantity + Math.Sign(_quantity) * DeltaQuantity'                              Tag = "Change quantity: " + Time                          });                          Log("UPDATE1:: " + ticket.UpdateRequests.Last());                      }                  }                  else if (Time.Second > 29 && Time.Second < 45)                  {                      if (ticket.UpdateRequests.Count == 1 && ticket.Status.IsOpen())                      {                          Log(ticket.ToString());                          ticket.Update(new UpdateOrderFields                          {                              LimitPrice = _security.Price * (1 - Math.Sign(ticket.Quantity) * LimitPercentageDelta)'                              StopPrice = _security.Price * (1 + Math.Sign(ticket.Quantity) * StopPercentageDelta)'                              Tag = "Change prices: " + Time                          });                          Log("UPDATE2:: " + ticket.UpdateRequests.Last());                      }                  }                  else                  {                      if (ticket.UpdateRequests.Count == 2 && ticket.Status.IsOpen())                      {                          Log(ticket.ToString());                          ticket.Cancel(Time + " and is still open!");                          Log("CANCELLED:: " + ticket.CancelRequest);                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,UpdateOrderLiveTestAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UpdateOrderLiveTestAlgorithm.cs,OnData,The following statement contains a magic number: if (Time.Minute != _lastMinute && Time.Second == 0)              {                  Log("");                  Log("--------------Minute: " + Time.Minute);                  Log("");                  _lastMinute = Time.Minute;                  // we'll submit the next type of order from the queue                  var orderType = _orderTypesQueue.Dequeue();                  Log("ORDER TYPE:: " + orderType);                  var isLong = _quantity > 0;                  var stopPrice = isLong ? (1 + StopPercentage) * _security.High : (1 - StopPercentage) * _security.Low;                  var limitPrice = isLong ? (1 - LimitPercentage) * stopPrice : (1 + LimitPercentage) * stopPrice;                  if (orderType == OrderType.Limit)                  {                      limitPrice = !isLong ? (1 + LimitPercentage) * _security.High : (1 - LimitPercentage) * _security.Low;                  }                  var request = new SubmitOrderRequest(orderType' SecType' Securities[_symbol].Symbol' _quantity' stopPrice' limitPrice' Time' orderType.ToString());                  var ticket = Transactions.AddOrder(request);                  _tickets.Add(ticket);                  if ((decimal)Random.NextDouble() < ImmediateCancelPercentage)                  {                      Log("Immediate cancellation requested!");                      _immediateCancellations.Add(ticket.OrderId);                  }              }              else if (_tickets.Count > 0)              {                  var ticket = _tickets.Last();                  if (Time.Second > 15 && Time.Second < 30)                  {                      if (ticket.UpdateRequests.Count == 0 && ticket.Status.IsOpen())                      {                          Log(ticket.ToString());                          ticket.Update(new UpdateOrderFields                          {                              Quantity = ticket.Quantity + Math.Sign(_quantity) * DeltaQuantity'                              Tag = "Change quantity: " + Time                          });                          Log("UPDATE1:: " + ticket.UpdateRequests.Last());                      }                  }                  else if (Time.Second > 29 && Time.Second < 45)                  {                      if (ticket.UpdateRequests.Count == 1 && ticket.Status.IsOpen())                      {                          Log(ticket.ToString());                          ticket.Update(new UpdateOrderFields                          {                              LimitPrice = _security.Price * (1 - Math.Sign(ticket.Quantity) * LimitPercentageDelta)'                              StopPrice = _security.Price * (1 + Math.Sign(ticket.Quantity) * StopPercentageDelta)'                              Tag = "Change prices: " + Time                          });                          Log("UPDATE2:: " + ticket.UpdateRequests.Last());                      }                  }                  else                  {                      if (ticket.UpdateRequests.Count == 2 && ticket.Status.IsOpen())                      {                          Log(ticket.ToString());                          ticket.Cancel(Time + " and is still open!");                          Log("CANCELLED:: " + ticket.CancelRequest);                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,UpdateOrderLiveTestAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UpdateOrderLiveTestAlgorithm.cs,OnData,The following statement contains a magic number: if (Time.Minute != _lastMinute && Time.Second == 0)              {                  Log("");                  Log("--------------Minute: " + Time.Minute);                  Log("");                  _lastMinute = Time.Minute;                  // we'll submit the next type of order from the queue                  var orderType = _orderTypesQueue.Dequeue();                  Log("ORDER TYPE:: " + orderType);                  var isLong = _quantity > 0;                  var stopPrice = isLong ? (1 + StopPercentage) * _security.High : (1 - StopPercentage) * _security.Low;                  var limitPrice = isLong ? (1 - LimitPercentage) * stopPrice : (1 + LimitPercentage) * stopPrice;                  if (orderType == OrderType.Limit)                  {                      limitPrice = !isLong ? (1 + LimitPercentage) * _security.High : (1 - LimitPercentage) * _security.Low;                  }                  var request = new SubmitOrderRequest(orderType' SecType' Securities[_symbol].Symbol' _quantity' stopPrice' limitPrice' Time' orderType.ToString());                  var ticket = Transactions.AddOrder(request);                  _tickets.Add(ticket);                  if ((decimal)Random.NextDouble() < ImmediateCancelPercentage)                  {                      Log("Immediate cancellation requested!");                      _immediateCancellations.Add(ticket.OrderId);                  }              }              else if (_tickets.Count > 0)              {                  var ticket = _tickets.Last();                  if (Time.Second > 15 && Time.Second < 30)                  {                      if (ticket.UpdateRequests.Count == 0 && ticket.Status.IsOpen())                      {                          Log(ticket.ToString());                          ticket.Update(new UpdateOrderFields                          {                              Quantity = ticket.Quantity + Math.Sign(_quantity) * DeltaQuantity'                              Tag = "Change quantity: " + Time                          });                          Log("UPDATE1:: " + ticket.UpdateRequests.Last());                      }                  }                  else if (Time.Second > 29 && Time.Second < 45)                  {                      if (ticket.UpdateRequests.Count == 1 && ticket.Status.IsOpen())                      {                          Log(ticket.ToString());                          ticket.Update(new UpdateOrderFields                          {                              LimitPrice = _security.Price * (1 - Math.Sign(ticket.Quantity) * LimitPercentageDelta)'                              StopPrice = _security.Price * (1 + Math.Sign(ticket.Quantity) * StopPercentageDelta)'                              Tag = "Change prices: " + Time                          });                          Log("UPDATE2:: " + ticket.UpdateRequests.Last());                      }                  }                  else                  {                      if (ticket.UpdateRequests.Count == 2 && ticket.Status.IsOpen())                      {                          Log(ticket.ToString());                          ticket.Cancel(Time + " and is still open!");                          Log("CANCELLED:: " + ticket.CancelRequest);                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,UpdateOrderLiveTestAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UpdateOrderLiveTestAlgorithm.cs,OnData,The following statement contains a magic number: if (Time.Minute != _lastMinute && Time.Second == 0)              {                  Log("");                  Log("--------------Minute: " + Time.Minute);                  Log("");                  _lastMinute = Time.Minute;                  // we'll submit the next type of order from the queue                  var orderType = _orderTypesQueue.Dequeue();                  Log("ORDER TYPE:: " + orderType);                  var isLong = _quantity > 0;                  var stopPrice = isLong ? (1 + StopPercentage) * _security.High : (1 - StopPercentage) * _security.Low;                  var limitPrice = isLong ? (1 - LimitPercentage) * stopPrice : (1 + LimitPercentage) * stopPrice;                  if (orderType == OrderType.Limit)                  {                      limitPrice = !isLong ? (1 + LimitPercentage) * _security.High : (1 - LimitPercentage) * _security.Low;                  }                  var request = new SubmitOrderRequest(orderType' SecType' Securities[_symbol].Symbol' _quantity' stopPrice' limitPrice' Time' orderType.ToString());                  var ticket = Transactions.AddOrder(request);                  _tickets.Add(ticket);                  if ((decimal)Random.NextDouble() < ImmediateCancelPercentage)                  {                      Log("Immediate cancellation requested!");                      _immediateCancellations.Add(ticket.OrderId);                  }              }              else if (_tickets.Count > 0)              {                  var ticket = _tickets.Last();                  if (Time.Second > 15 && Time.Second < 30)                  {                      if (ticket.UpdateRequests.Count == 0 && ticket.Status.IsOpen())                      {                          Log(ticket.ToString());                          ticket.Update(new UpdateOrderFields                          {                              Quantity = ticket.Quantity + Math.Sign(_quantity) * DeltaQuantity'                              Tag = "Change quantity: " + Time                          });                          Log("UPDATE1:: " + ticket.UpdateRequests.Last());                      }                  }                  else if (Time.Second > 29 && Time.Second < 45)                  {                      if (ticket.UpdateRequests.Count == 1 && ticket.Status.IsOpen())                      {                          Log(ticket.ToString());                          ticket.Update(new UpdateOrderFields                          {                              LimitPrice = _security.Price * (1 - Math.Sign(ticket.Quantity) * LimitPercentageDelta)'                              StopPrice = _security.Price * (1 + Math.Sign(ticket.Quantity) * StopPercentageDelta)'                              Tag = "Change prices: " + Time                          });                          Log("UPDATE2:: " + ticket.UpdateRequests.Last());                      }                  }                  else                  {                      if (ticket.UpdateRequests.Count == 2 && ticket.Status.IsOpen())                      {                          Log(ticket.ToString());                          ticket.Cancel(Time + " and is still open!");                          Log("CANCELLED:: " + ticket.CancelRequest);                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,UpdateOrderRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UpdateOrderRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 01' 01);
Magic Number,QuantConnect.Algorithm.CSharp,UpdateOrderRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UpdateOrderRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 01' 01);
Magic Number,QuantConnect.Algorithm.CSharp,UpdateOrderRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UpdateOrderRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,UpdateOrderRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UpdateOrderRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (Time.Month != LastMonth)              {                  // we'll submit the next type of order from the queue                  var orderType = _orderTypesQueue.Dequeue();                  //Log("");                  Log("\r\n--------------MONTH: " + Time.ToString("MMMM") + ":: " + orderType + "\r\n");                  //Log("");                  LastMonth = Time.Month;                  Log("ORDER TYPE:: " + orderType);                  var isLong = Quantity > 0;                  var stopPrice = isLong ? (1 + StopPercentage)*data.Bars[symbol].High : (1 - StopPercentage)*data.Bars[symbol].Low;                  var limitPrice = isLong ? (1 - LimitPercentage)*stopPrice : (1 + LimitPercentage)*stopPrice;                  if (orderType == OrderType.Limit)                  {                      limitPrice = !isLong ? (1 + LimitPercentage) * data.Bars[symbol].High : (1 - LimitPercentage) * data.Bars[symbol].Low;                  }                  var request = new SubmitOrderRequest(orderType' SecType' symbol' Quantity' stopPrice' limitPrice' Time' orderType.ToString());                  var ticket = Transactions.AddOrder(request);                  _tickets.Add(ticket);              }              else if (_tickets.Count > 0)              {                  var ticket = _tickets.Last();                  if (Time.Day > 8 && Time.Day < 14)                  {                      if (ticket.UpdateRequests.Count == 0 && ticket.Status.IsOpen())                      {                          Log("TICKET:: " + ticket);                          ticket.Update(new UpdateOrderFields                          {                              Quantity = ticket.Quantity + Math.Sign(Quantity)*DeltaQuantity'                              Tag = "Change quantity: " + Time                          });                          Log("UPDATE1:: " + ticket.UpdateRequests.Last());                      }                  }                  else if (Time.Day > 13 && Time.Day < 20)                  {                      if (ticket.UpdateRequests.Count == 1 && ticket.Status.IsOpen())                      {                          Log("TICKET:: " + ticket);                          ticket.Update(new UpdateOrderFields                          {                              LimitPrice = Security.Price*(1 - Math.Sign(ticket.Quantity)*LimitPercentageDelta)'                              StopPrice = Security.Price*(1 + Math.Sign(ticket.Quantity)*StopPercentageDelta)'                              Tag = "Change prices: " + Time                          });                          Log("UPDATE2:: " + ticket.UpdateRequests.Last());                      }                  }                  else                  {                      if (ticket.UpdateRequests.Count == 2 && ticket.Status.IsOpen())                      {                          Log("TICKET:: " + ticket);                          ticket.Cancel(Time + " and is still open!");                          Log("CANCELLED:: " + ticket.CancelRequest);                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,UpdateOrderRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UpdateOrderRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (Time.Month != LastMonth)              {                  // we'll submit the next type of order from the queue                  var orderType = _orderTypesQueue.Dequeue();                  //Log("");                  Log("\r\n--------------MONTH: " + Time.ToString("MMMM") + ":: " + orderType + "\r\n");                  //Log("");                  LastMonth = Time.Month;                  Log("ORDER TYPE:: " + orderType);                  var isLong = Quantity > 0;                  var stopPrice = isLong ? (1 + StopPercentage)*data.Bars[symbol].High : (1 - StopPercentage)*data.Bars[symbol].Low;                  var limitPrice = isLong ? (1 - LimitPercentage)*stopPrice : (1 + LimitPercentage)*stopPrice;                  if (orderType == OrderType.Limit)                  {                      limitPrice = !isLong ? (1 + LimitPercentage) * data.Bars[symbol].High : (1 - LimitPercentage) * data.Bars[symbol].Low;                  }                  var request = new SubmitOrderRequest(orderType' SecType' symbol' Quantity' stopPrice' limitPrice' Time' orderType.ToString());                  var ticket = Transactions.AddOrder(request);                  _tickets.Add(ticket);              }              else if (_tickets.Count > 0)              {                  var ticket = _tickets.Last();                  if (Time.Day > 8 && Time.Day < 14)                  {                      if (ticket.UpdateRequests.Count == 0 && ticket.Status.IsOpen())                      {                          Log("TICKET:: " + ticket);                          ticket.Update(new UpdateOrderFields                          {                              Quantity = ticket.Quantity + Math.Sign(Quantity)*DeltaQuantity'                              Tag = "Change quantity: " + Time                          });                          Log("UPDATE1:: " + ticket.UpdateRequests.Last());                      }                  }                  else if (Time.Day > 13 && Time.Day < 20)                  {                      if (ticket.UpdateRequests.Count == 1 && ticket.Status.IsOpen())                      {                          Log("TICKET:: " + ticket);                          ticket.Update(new UpdateOrderFields                          {                              LimitPrice = Security.Price*(1 - Math.Sign(ticket.Quantity)*LimitPercentageDelta)'                              StopPrice = Security.Price*(1 + Math.Sign(ticket.Quantity)*StopPercentageDelta)'                              Tag = "Change prices: " + Time                          });                          Log("UPDATE2:: " + ticket.UpdateRequests.Last());                      }                  }                  else                  {                      if (ticket.UpdateRequests.Count == 2 && ticket.Status.IsOpen())                      {                          Log("TICKET:: " + ticket);                          ticket.Cancel(Time + " and is still open!");                          Log("CANCELLED:: " + ticket.CancelRequest);                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,UpdateOrderRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UpdateOrderRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (Time.Month != LastMonth)              {                  // we'll submit the next type of order from the queue                  var orderType = _orderTypesQueue.Dequeue();                  //Log("");                  Log("\r\n--------------MONTH: " + Time.ToString("MMMM") + ":: " + orderType + "\r\n");                  //Log("");                  LastMonth = Time.Month;                  Log("ORDER TYPE:: " + orderType);                  var isLong = Quantity > 0;                  var stopPrice = isLong ? (1 + StopPercentage)*data.Bars[symbol].High : (1 - StopPercentage)*data.Bars[symbol].Low;                  var limitPrice = isLong ? (1 - LimitPercentage)*stopPrice : (1 + LimitPercentage)*stopPrice;                  if (orderType == OrderType.Limit)                  {                      limitPrice = !isLong ? (1 + LimitPercentage) * data.Bars[symbol].High : (1 - LimitPercentage) * data.Bars[symbol].Low;                  }                  var request = new SubmitOrderRequest(orderType' SecType' symbol' Quantity' stopPrice' limitPrice' Time' orderType.ToString());                  var ticket = Transactions.AddOrder(request);                  _tickets.Add(ticket);              }              else if (_tickets.Count > 0)              {                  var ticket = _tickets.Last();                  if (Time.Day > 8 && Time.Day < 14)                  {                      if (ticket.UpdateRequests.Count == 0 && ticket.Status.IsOpen())                      {                          Log("TICKET:: " + ticket);                          ticket.Update(new UpdateOrderFields                          {                              Quantity = ticket.Quantity + Math.Sign(Quantity)*DeltaQuantity'                              Tag = "Change quantity: " + Time                          });                          Log("UPDATE1:: " + ticket.UpdateRequests.Last());                      }                  }                  else if (Time.Day > 13 && Time.Day < 20)                  {                      if (ticket.UpdateRequests.Count == 1 && ticket.Status.IsOpen())                      {                          Log("TICKET:: " + ticket);                          ticket.Update(new UpdateOrderFields                          {                              LimitPrice = Security.Price*(1 - Math.Sign(ticket.Quantity)*LimitPercentageDelta)'                              StopPrice = Security.Price*(1 + Math.Sign(ticket.Quantity)*StopPercentageDelta)'                              Tag = "Change prices: " + Time                          });                          Log("UPDATE2:: " + ticket.UpdateRequests.Last());                      }                  }                  else                  {                      if (ticket.UpdateRequests.Count == 2 && ticket.Status.IsOpen())                      {                          Log("TICKET:: " + ticket);                          ticket.Cancel(Time + " and is still open!");                          Log("CANCELLED:: " + ticket.CancelRequest);                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,UpdateOrderRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UpdateOrderRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (Time.Month != LastMonth)              {                  // we'll submit the next type of order from the queue                  var orderType = _orderTypesQueue.Dequeue();                  //Log("");                  Log("\r\n--------------MONTH: " + Time.ToString("MMMM") + ":: " + orderType + "\r\n");                  //Log("");                  LastMonth = Time.Month;                  Log("ORDER TYPE:: " + orderType);                  var isLong = Quantity > 0;                  var stopPrice = isLong ? (1 + StopPercentage)*data.Bars[symbol].High : (1 - StopPercentage)*data.Bars[symbol].Low;                  var limitPrice = isLong ? (1 - LimitPercentage)*stopPrice : (1 + LimitPercentage)*stopPrice;                  if (orderType == OrderType.Limit)                  {                      limitPrice = !isLong ? (1 + LimitPercentage) * data.Bars[symbol].High : (1 - LimitPercentage) * data.Bars[symbol].Low;                  }                  var request = new SubmitOrderRequest(orderType' SecType' symbol' Quantity' stopPrice' limitPrice' Time' orderType.ToString());                  var ticket = Transactions.AddOrder(request);                  _tickets.Add(ticket);              }              else if (_tickets.Count > 0)              {                  var ticket = _tickets.Last();                  if (Time.Day > 8 && Time.Day < 14)                  {                      if (ticket.UpdateRequests.Count == 0 && ticket.Status.IsOpen())                      {                          Log("TICKET:: " + ticket);                          ticket.Update(new UpdateOrderFields                          {                              Quantity = ticket.Quantity + Math.Sign(Quantity)*DeltaQuantity'                              Tag = "Change quantity: " + Time                          });                          Log("UPDATE1:: " + ticket.UpdateRequests.Last());                      }                  }                  else if (Time.Day > 13 && Time.Day < 20)                  {                      if (ticket.UpdateRequests.Count == 1 && ticket.Status.IsOpen())                      {                          Log("TICKET:: " + ticket);                          ticket.Update(new UpdateOrderFields                          {                              LimitPrice = Security.Price*(1 - Math.Sign(ticket.Quantity)*LimitPercentageDelta)'                              StopPrice = Security.Price*(1 + Math.Sign(ticket.Quantity)*StopPercentageDelta)'                              Tag = "Change prices: " + Time                          });                          Log("UPDATE2:: " + ticket.UpdateRequests.Last());                      }                  }                  else                  {                      if (ticket.UpdateRequests.Count == 2 && ticket.Status.IsOpen())                      {                          Log("TICKET:: " + ticket);                          ticket.Cancel(Time + " and is still open!");                          Log("CANCELLED:: " + ticket.CancelRequest);                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,UpdateOrderRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\UpdateOrderRegressionAlgorithm.cs,OnData,The following statement contains a magic number: if (Time.Month != LastMonth)              {                  // we'll submit the next type of order from the queue                  var orderType = _orderTypesQueue.Dequeue();                  //Log("");                  Log("\r\n--------------MONTH: " + Time.ToString("MMMM") + ":: " + orderType + "\r\n");                  //Log("");                  LastMonth = Time.Month;                  Log("ORDER TYPE:: " + orderType);                  var isLong = Quantity > 0;                  var stopPrice = isLong ? (1 + StopPercentage)*data.Bars[symbol].High : (1 - StopPercentage)*data.Bars[symbol].Low;                  var limitPrice = isLong ? (1 - LimitPercentage)*stopPrice : (1 + LimitPercentage)*stopPrice;                  if (orderType == OrderType.Limit)                  {                      limitPrice = !isLong ? (1 + LimitPercentage) * data.Bars[symbol].High : (1 - LimitPercentage) * data.Bars[symbol].Low;                  }                  var request = new SubmitOrderRequest(orderType' SecType' symbol' Quantity' stopPrice' limitPrice' Time' orderType.ToString());                  var ticket = Transactions.AddOrder(request);                  _tickets.Add(ticket);              }              else if (_tickets.Count > 0)              {                  var ticket = _tickets.Last();                  if (Time.Day > 8 && Time.Day < 14)                  {                      if (ticket.UpdateRequests.Count == 0 && ticket.Status.IsOpen())                      {                          Log("TICKET:: " + ticket);                          ticket.Update(new UpdateOrderFields                          {                              Quantity = ticket.Quantity + Math.Sign(Quantity)*DeltaQuantity'                              Tag = "Change quantity: " + Time                          });                          Log("UPDATE1:: " + ticket.UpdateRequests.Last());                      }                  }                  else if (Time.Day > 13 && Time.Day < 20)                  {                      if (ticket.UpdateRequests.Count == 1 && ticket.Status.IsOpen())                      {                          Log("TICKET:: " + ticket);                          ticket.Update(new UpdateOrderFields                          {                              LimitPrice = Security.Price*(1 - Math.Sign(ticket.Quantity)*LimitPercentageDelta)'                              StopPrice = Security.Price*(1 + Math.Sign(ticket.Quantity)*StopPercentageDelta)'                              Tag = "Change prices: " + Time                          });                          Log("UPDATE2:: " + ticket.UpdateRequests.Last());                      }                  }                  else                  {                      if (ticket.UpdateRequests.Count == 2 && ticket.Status.IsOpen())                      {                          Log("TICKET:: " + ticket);                          ticket.Cancel(Time + " and is still open!");                          Log("CANCELLED:: " + ticket.CancelRequest);                      }                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 7);
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 7);
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 7);
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 11);
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,MarketOrders,The following statement contains a magic number: if (TimeIs(7' 9' 31))              {                  Log("Submitting MarketOrder");                    // submit a market order to buy 10 shares' this function returns an OrderTicket object                  // we submit the order with asynchronous:false' so it block until it is filled                  var newTicket = MarketOrder(symbol' 10' asynchronous: false);                  if (newTicket.Status != OrderStatus.Filled)                  {                      Log("Synchronous market order was not filled synchronously!");                      Quit();                  }                    // we can also submit the ticket asynchronously. In a backtest' we'll still perform                  // the fill before the next time events for your algorithm. here we'll submit the order                  // asynchronously and try to cancel it' sometimes it will' sometimes it will be filled                  // first.                  newTicket = MarketOrder(symbol' 10' asynchronous: true);                  var response = newTicket.Cancel("Attempt to cancel async order");                  if (response.IsSuccess)                  {                      Log("Successfully canceled async market order: " + newTicket.OrderId);                  }                  else                  {                      Log("Unable to cancel async market order: " + response.ErrorCode);                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,MarketOrders,The following statement contains a magic number: if (TimeIs(7' 9' 31))              {                  Log("Submitting MarketOrder");                    // submit a market order to buy 10 shares' this function returns an OrderTicket object                  // we submit the order with asynchronous:false' so it block until it is filled                  var newTicket = MarketOrder(symbol' 10' asynchronous: false);                  if (newTicket.Status != OrderStatus.Filled)                  {                      Log("Synchronous market order was not filled synchronously!");                      Quit();                  }                    // we can also submit the ticket asynchronously. In a backtest' we'll still perform                  // the fill before the next time events for your algorithm. here we'll submit the order                  // asynchronously and try to cancel it' sometimes it will' sometimes it will be filled                  // first.                  newTicket = MarketOrder(symbol' 10' asynchronous: true);                  var response = newTicket.Cancel("Attempt to cancel async order");                  if (response.IsSuccess)                  {                      Log("Successfully canceled async market order: " + newTicket.OrderId);                  }                  else                  {                      Log("Unable to cancel async market order: " + response.ErrorCode);                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,MarketOrders,The following statement contains a magic number: if (TimeIs(7' 9' 31))              {                  Log("Submitting MarketOrder");                    // submit a market order to buy 10 shares' this function returns an OrderTicket object                  // we submit the order with asynchronous:false' so it block until it is filled                  var newTicket = MarketOrder(symbol' 10' asynchronous: false);                  if (newTicket.Status != OrderStatus.Filled)                  {                      Log("Synchronous market order was not filled synchronously!");                      Quit();                  }                    // we can also submit the ticket asynchronously. In a backtest' we'll still perform                  // the fill before the next time events for your algorithm. here we'll submit the order                  // asynchronously and try to cancel it' sometimes it will' sometimes it will be filled                  // first.                  newTicket = MarketOrder(symbol' 10' asynchronous: true);                  var response = newTicket.Cancel("Attempt to cancel async order");                  if (response.IsSuccess)                  {                      Log("Successfully canceled async market order: " + newTicket.OrderId);                  }                  else                  {                      Log("Unable to cancel async market order: " + response.ErrorCode);                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,MarketOrders,The following statement contains a magic number: if (TimeIs(7' 9' 31))              {                  Log("Submitting MarketOrder");                    // submit a market order to buy 10 shares' this function returns an OrderTicket object                  // we submit the order with asynchronous:false' so it block until it is filled                  var newTicket = MarketOrder(symbol' 10' asynchronous: false);                  if (newTicket.Status != OrderStatus.Filled)                  {                      Log("Synchronous market order was not filled synchronously!");                      Quit();                  }                    // we can also submit the ticket asynchronously. In a backtest' we'll still perform                  // the fill before the next time events for your algorithm. here we'll submit the order                  // asynchronously and try to cancel it' sometimes it will' sometimes it will be filled                  // first.                  newTicket = MarketOrder(symbol' 10' asynchronous: true);                  var response = newTicket.Cancel("Attempt to cancel async order");                  if (response.IsSuccess)                  {                      Log("Successfully canceled async market order: " + newTicket.OrderId);                  }                  else                  {                      Log("Unable to cancel async market order: " + response.ErrorCode);                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,MarketOrders,The following statement contains a magic number: if (TimeIs(7' 9' 31))              {                  Log("Submitting MarketOrder");                    // submit a market order to buy 10 shares' this function returns an OrderTicket object                  // we submit the order with asynchronous:false' so it block until it is filled                  var newTicket = MarketOrder(symbol' 10' asynchronous: false);                  if (newTicket.Status != OrderStatus.Filled)                  {                      Log("Synchronous market order was not filled synchronously!");                      Quit();                  }                    // we can also submit the ticket asynchronously. In a backtest' we'll still perform                  // the fill before the next time events for your algorithm. here we'll submit the order                  // asynchronously and try to cancel it' sometimes it will' sometimes it will be filled                  // first.                  newTicket = MarketOrder(symbol' 10' asynchronous: true);                  var response = newTicket.Cancel("Attempt to cancel async order");                  if (response.IsSuccess)                  {                      Log("Successfully canceled async market order: " + newTicket.OrderId);                  }                  else                  {                      Log("Unable to cancel async market order: " + response.ErrorCode);                  }              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,LimitOrders,The following statement contains a magic number: if (TimeIs(7' 12' 0))              {                  Log("Submitting LimitOrder");                    // submit a limit order to buy 10 shares at .1% below the bar's close                  var close = Securities[symbol].Close;                  var newTicket = LimitOrder(symbol' 10' close * .999m);                  _openLimitOrders.Add(newTicket);                    // submit another limit order to sell 10 shares at .1% above the bar's close                  newTicket = LimitOrder(symbol' 10' close * 1.001m);                  _openLimitOrders.Add(newTicket);              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,LimitOrders,The following statement contains a magic number: if (TimeIs(7' 12' 0))              {                  Log("Submitting LimitOrder");                    // submit a limit order to buy 10 shares at .1% below the bar's close                  var close = Securities[symbol].Close;                  var newTicket = LimitOrder(symbol' 10' close * .999m);                  _openLimitOrders.Add(newTicket);                    // submit another limit order to sell 10 shares at .1% above the bar's close                  newTicket = LimitOrder(symbol' 10' close * 1.001m);                  _openLimitOrders.Add(newTicket);              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,LimitOrders,The following statement contains a magic number: if (TimeIs(7' 12' 0))              {                  Log("Submitting LimitOrder");                    // submit a limit order to buy 10 shares at .1% below the bar's close                  var close = Securities[symbol].Close;                  var newTicket = LimitOrder(symbol' 10' close * .999m);                  _openLimitOrders.Add(newTicket);                    // submit another limit order to sell 10 shares at .1% above the bar's close                  newTicket = LimitOrder(symbol' 10' close * 1.001m);                  _openLimitOrders.Add(newTicket);              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,LimitOrders,The following statement contains a magic number: if (TimeIs(7' 12' 0))              {                  Log("Submitting LimitOrder");                    // submit a limit order to buy 10 shares at .1% below the bar's close                  var close = Securities[symbol].Close;                  var newTicket = LimitOrder(symbol' 10' close * .999m);                  _openLimitOrders.Add(newTicket);                    // submit another limit order to sell 10 shares at .1% above the bar's close                  newTicket = LimitOrder(symbol' 10' close * 1.001m);                  _openLimitOrders.Add(newTicket);              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,LimitOrders,The following statement contains a magic number: if (_openLimitOrders.Count == 2)              {                  var openOrders = _openLimitOrders;                    // check if either is filled and cancel the other                  var longOrder = openOrders[0];                  var shortOrder = openOrders[1];                  if (CheckPairOrdersForFills(longOrder' shortOrder))                  {                      _openLimitOrders.Clear();                      return;                  }                    // if niether order has filled' bring in the limits by a penny                    var newLongLimit = longOrder.Get(OrderField.LimitPrice) + 0.01m;                  var newShortLimit = shortOrder.Get(OrderField.LimitPrice) - 0.01m;                  Log("Updating limits - Long: " + newLongLimit.ToString("0.00") + " Short: " + newShortLimit.ToString("0.00"));                    longOrder.Update(new UpdateOrderFields                  {                      // we could change the quantity' but need to specify it                      //Quantity =                      LimitPrice = newLongLimit'                      Tag = "Update #" + (longOrder.UpdateRequests.Count + 1)                  });                  shortOrder.Update(new UpdateOrderFields                  {                      LimitPrice = newShortLimit'                      Tag = "Update #" + (shortOrder.UpdateRequests.Count + 1)                  });              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,StopMarketOrders,The following statement contains a magic number: if (TimeIs(7' 12 + 4' 0))              {                  Log("Submitting StopMarketOrder");                    // a long stop is triggered when the price rises above the value                  // so we'll set a long stop .25% above the current bar's close                    var close = Securities[symbol].Close;                  var stopPrice = close * 1.0025m;                  var newTicket = StopMarketOrder(symbol' 10' stopPrice);                  _openStopMarketOrders.Add(newTicket);                    // a short stop is triggered when the price falls below the value                  // so we'll set a short stop .25% below the current bar's close                    stopPrice = close * .9975m;                  newTicket = StopMarketOrder(symbol' -10' stopPrice);                  _openStopMarketOrders.Add(newTicket);              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,StopMarketOrders,The following statement contains a magic number: if (TimeIs(7' 12 + 4' 0))              {                  Log("Submitting StopMarketOrder");                    // a long stop is triggered when the price rises above the value                  // so we'll set a long stop .25% above the current bar's close                    var close = Securities[symbol].Close;                  var stopPrice = close * 1.0025m;                  var newTicket = StopMarketOrder(symbol' 10' stopPrice);                  _openStopMarketOrders.Add(newTicket);                    // a short stop is triggered when the price falls below the value                  // so we'll set a short stop .25% below the current bar's close                    stopPrice = close * .9975m;                  newTicket = StopMarketOrder(symbol' -10' stopPrice);                  _openStopMarketOrders.Add(newTicket);              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,StopMarketOrders,The following statement contains a magic number: if (TimeIs(7' 12 + 4' 0))              {                  Log("Submitting StopMarketOrder");                    // a long stop is triggered when the price rises above the value                  // so we'll set a long stop .25% above the current bar's close                    var close = Securities[symbol].Close;                  var stopPrice = close * 1.0025m;                  var newTicket = StopMarketOrder(symbol' 10' stopPrice);                  _openStopMarketOrders.Add(newTicket);                    // a short stop is triggered when the price falls below the value                  // so we'll set a short stop .25% below the current bar's close                    stopPrice = close * .9975m;                  newTicket = StopMarketOrder(symbol' -10' stopPrice);                  _openStopMarketOrders.Add(newTicket);              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,StopMarketOrders,The following statement contains a magic number: if (TimeIs(7' 12 + 4' 0))              {                  Log("Submitting StopMarketOrder");                    // a long stop is triggered when the price rises above the value                  // so we'll set a long stop .25% above the current bar's close                    var close = Securities[symbol].Close;                  var stopPrice = close * 1.0025m;                  var newTicket = StopMarketOrder(symbol' 10' stopPrice);                  _openStopMarketOrders.Add(newTicket);                    // a short stop is triggered when the price falls below the value                  // so we'll set a short stop .25% below the current bar's close                    stopPrice = close * .9975m;                  newTicket = StopMarketOrder(symbol' -10' stopPrice);                  _openStopMarketOrders.Add(newTicket);              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,StopMarketOrders,The following statement contains a magic number: if (TimeIs(7' 12 + 4' 0))              {                  Log("Submitting StopMarketOrder");                    // a long stop is triggered when the price rises above the value                  // so we'll set a long stop .25% above the current bar's close                    var close = Securities[symbol].Close;                  var stopPrice = close * 1.0025m;                  var newTicket = StopMarketOrder(symbol' 10' stopPrice);                  _openStopMarketOrders.Add(newTicket);                    // a short stop is triggered when the price falls below the value                  // so we'll set a short stop .25% below the current bar's close                    stopPrice = close * .9975m;                  newTicket = StopMarketOrder(symbol' -10' stopPrice);                  _openStopMarketOrders.Add(newTicket);              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,StopMarketOrders,The following statement contains a magic number: if (_openStopMarketOrders.Count == 2)              {                  // check if either is filled and cancel the other                  var longOrder = _openStopMarketOrders[0];                  var shortOrder = _openStopMarketOrders[1];                  if (CheckPairOrdersForFills(longOrder' shortOrder))                  {                      _openStopMarketOrders.Clear();                      return;                  }                    // if niether order has filled' bring in the stops by a penny                    var newLongStop = longOrder.Get(OrderField.StopPrice) - 0.01m;                  var newShortStop = shortOrder.Get(OrderField.StopPrice) + 0.01m;                  Log("Updating stops - Long: " + newLongStop.ToString("0.00") + " Short: " + newShortStop.ToString("0.00"));                    longOrder.Update(new UpdateOrderFields                  {                      // we could change the quantity' but need to specify it                      //Quantity =                      StopPrice = newLongStop'                      Tag = "Update #" + (longOrder.UpdateRequests.Count + 1)                  });                  shortOrder.Update(new UpdateOrderFields                  {                      StopPrice = newShortStop'                      Tag = "Update #" + (shortOrder.UpdateRequests.Count + 1)                  });              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,StopLimitOrders,The following statement contains a magic number: if (TimeIs(8' 12' 1))              {                  Log("Submitting StopLimitOrder");                    // a long stop is triggered when the price rises above the value                  // so we'll set a long stop .25% above the current bar's close                  // now we'll also be setting a limit' this means we are gauranteed                  // to get at least the limit price for our fills' so make the limit                  // price a little softer than the stop price                    var close = Securities[symbol].Close;                  var stopPrice = close * 1.001m;                  var limitPrice = close - 0.03m;                  var newTicket = StopLimitOrder(symbol' 10' stopPrice' limitPrice);                  _openStopLimitOrders.Add(newTicket);                    // a short stop is triggered when the price falls below the value                  // so we'll set a short stop .25% below the current bar's close                  // now we'll also be setting a limit' this means we are gauranteed                  // to get at least the limit price for our fills' so make the limit                  // price a little softer than the stop price                    stopPrice = close * .999m;                  limitPrice = close + 0.03m;                  newTicket = StopLimitOrder(symbol' -10' stopPrice' limitPrice);                  _openStopLimitOrders.Add(newTicket);              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,StopLimitOrders,The following statement contains a magic number: if (TimeIs(8' 12' 1))              {                  Log("Submitting StopLimitOrder");                    // a long stop is triggered when the price rises above the value                  // so we'll set a long stop .25% above the current bar's close                  // now we'll also be setting a limit' this means we are gauranteed                  // to get at least the limit price for our fills' so make the limit                  // price a little softer than the stop price                    var close = Securities[symbol].Close;                  var stopPrice = close * 1.001m;                  var limitPrice = close - 0.03m;                  var newTicket = StopLimitOrder(symbol' 10' stopPrice' limitPrice);                  _openStopLimitOrders.Add(newTicket);                    // a short stop is triggered when the price falls below the value                  // so we'll set a short stop .25% below the current bar's close                  // now we'll also be setting a limit' this means we are gauranteed                  // to get at least the limit price for our fills' so make the limit                  // price a little softer than the stop price                    stopPrice = close * .999m;                  limitPrice = close + 0.03m;                  newTicket = StopLimitOrder(symbol' -10' stopPrice' limitPrice);                  _openStopLimitOrders.Add(newTicket);              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,StopLimitOrders,The following statement contains a magic number: if (TimeIs(8' 12' 1))              {                  Log("Submitting StopLimitOrder");                    // a long stop is triggered when the price rises above the value                  // so we'll set a long stop .25% above the current bar's close                  // now we'll also be setting a limit' this means we are gauranteed                  // to get at least the limit price for our fills' so make the limit                  // price a little softer than the stop price                    var close = Securities[symbol].Close;                  var stopPrice = close * 1.001m;                  var limitPrice = close - 0.03m;                  var newTicket = StopLimitOrder(symbol' 10' stopPrice' limitPrice);                  _openStopLimitOrders.Add(newTicket);                    // a short stop is triggered when the price falls below the value                  // so we'll set a short stop .25% below the current bar's close                  // now we'll also be setting a limit' this means we are gauranteed                  // to get at least the limit price for our fills' so make the limit                  // price a little softer than the stop price                    stopPrice = close * .999m;                  limitPrice = close + 0.03m;                  newTicket = StopLimitOrder(symbol' -10' stopPrice' limitPrice);                  _openStopLimitOrders.Add(newTicket);              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,StopLimitOrders,The following statement contains a magic number: if (TimeIs(8' 12' 1))              {                  Log("Submitting StopLimitOrder");                    // a long stop is triggered when the price rises above the value                  // so we'll set a long stop .25% above the current bar's close                  // now we'll also be setting a limit' this means we are gauranteed                  // to get at least the limit price for our fills' so make the limit                  // price a little softer than the stop price                    var close = Securities[symbol].Close;                  var stopPrice = close * 1.001m;                  var limitPrice = close - 0.03m;                  var newTicket = StopLimitOrder(symbol' 10' stopPrice' limitPrice);                  _openStopLimitOrders.Add(newTicket);                    // a short stop is triggered when the price falls below the value                  // so we'll set a short stop .25% below the current bar's close                  // now we'll also be setting a limit' this means we are gauranteed                  // to get at least the limit price for our fills' so make the limit                  // price a little softer than the stop price                    stopPrice = close * .999m;                  limitPrice = close + 0.03m;                  newTicket = StopLimitOrder(symbol' -10' stopPrice' limitPrice);                  _openStopLimitOrders.Add(newTicket);              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,StopLimitOrders,The following statement contains a magic number: if (_openStopLimitOrders.Count == 2)              {                  // check if either is filled and cancel the other                  var longOrder = _openStopLimitOrders[0];                  var shortOrder = _openStopLimitOrders[1];                  if (CheckPairOrdersForFills(longOrder' shortOrder))                  {                      _openStopLimitOrders.Clear();                      return;                  }                    // if niether order has filled' bring in the stops/limits in by a penny                    var newLongStop = longOrder.Get(OrderField.StopPrice) - 0.01m;                  var newLongLimit = longOrder.Get(OrderField.LimitPrice) + 0.01m;                  var newShortStop = shortOrder.Get(OrderField.StopPrice) + 0.01m;                  var newShortLimit = shortOrder.Get(OrderField.LimitPrice) - 0.01m;                  Log("Updating stops  - Long: " + newLongStop.ToString("0.00") + " Short: " + newShortStop.ToString("0.00"));                  Log("Updating limits - Long: " + newLongLimit.ToString("0.00") + " Short: " + newShortLimit.ToString("0.00"));                    longOrder.Update(new UpdateOrderFields                  {                      // we could change the quantity' but need to specify it                      //Quantity =                      StopPrice = newLongStop'                      LimitPrice = newLongLimit'                      Tag = "Update #" + (longOrder.UpdateRequests.Count + 1)                  });                  shortOrder.Update(new UpdateOrderFields                  {                      StopPrice = newShortStop'                      LimitPrice = newShortLimit'                      Tag = "Update #" + (shortOrder.UpdateRequests.Count + 1)                  });              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,MarketOnCloseOrders,The following statement contains a magic number: if (TimeIs(9' 12' 0))              {                  Log("Submitting MarketOnCloseOrder");                    // open a new position or triple our existing position                  var qty = Portfolio[symbol].Quantity;                  qty = qty == 0 ? 100 : 2*qty;                    var newTicket = MarketOnCloseOrder(symbol' qty);                  _openMarketOnCloseOrders.Add(newTicket);              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,MarketOnCloseOrders,The following statement contains a magic number: if (TimeIs(9' 12' 0))              {                  Log("Submitting MarketOnCloseOrder");                    // open a new position or triple our existing position                  var qty = Portfolio[symbol].Quantity;                  qty = qty == 0 ? 100 : 2*qty;                    var newTicket = MarketOnCloseOrder(symbol' qty);                  _openMarketOnCloseOrders.Add(newTicket);              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,MarketOnCloseOrders,The following statement contains a magic number: if (TimeIs(9' 12' 0))              {                  Log("Submitting MarketOnCloseOrder");                    // open a new position or triple our existing position                  var qty = Portfolio[symbol].Quantity;                  qty = qty == 0 ? 100 : 2*qty;                    var newTicket = MarketOnCloseOrder(symbol' qty);                  _openMarketOnCloseOrders.Add(newTicket);              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,MarketOnCloseOrders,The following statement contains a magic number: if (TimeIs(9' 12' 0))              {                  Log("Submitting MarketOnCloseOrder");                    // open a new position or triple our existing position                  var qty = Portfolio[symbol].Quantity;                  qty = qty == 0 ? 100 : 2*qty;                    var newTicket = MarketOnCloseOrder(symbol' qty);                  _openMarketOnCloseOrders.Add(newTicket);              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,MarketOnCloseOrders,The following statement contains a magic number: if (_openMarketOnCloseOrders.Count == 1 && Time.Minute == 59)              {                  var ticket = _openMarketOnCloseOrders[0];                  // check for fills                  if (ticket.Status == OrderStatus.Filled)                  {                      _openMarketOnCloseOrders.Clear();                      return;                  }                    var quantity = ticket.Quantity + 1;                  Log("Updating quantity  - New Quantity: " + quantity);                    // we can update the quantity and tag                  ticket.Update(new UpdateOrderFields                  {                      Quantity = quantity'                      Tag = "Update #" + (ticket.UpdateRequests.Count + 1)                  });              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,MarketOnCloseOrders,The following statement contains a magic number: if (TimeIs(EndDate.Day' 12 + 3' 45))              {                  Log("Submitting MarketOnCloseOrder to liquidate end of algorithm");                    MarketOnCloseOrder(symbol' -Portfolio[symbol].Quantity' "Liquidate end of algorithm");              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,MarketOnCloseOrders,The following statement contains a magic number: if (TimeIs(EndDate.Day' 12 + 3' 45))              {                  Log("Submitting MarketOnCloseOrder to liquidate end of algorithm");                    MarketOnCloseOrder(symbol' -Portfolio[symbol].Quantity' "Liquidate end of algorithm");              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,MarketOnCloseOrders,The following statement contains a magic number: if (TimeIs(EndDate.Day' 12 + 3' 45))              {                  Log("Submitting MarketOnCloseOrder to liquidate end of algorithm");                    MarketOnCloseOrder(symbol' -Portfolio[symbol].Quantity' "Liquidate end of algorithm");              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,MarketOnOpenOrders,The following statement contains a magic number: if (TimeIs(8' 12 + 2' 0))              {                  Log("Submitting MarketOnOpenOrder");                    // its EOD' let's submit a market on open order to short even more!                  var newTicket = MarketOnOpenOrder(symbol' 50);                  _openMarketOnOpenOrders.Add(newTicket);              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,MarketOnOpenOrders,The following statement contains a magic number: if (TimeIs(8' 12 + 2' 0))              {                  Log("Submitting MarketOnOpenOrder");                    // its EOD' let's submit a market on open order to short even more!                  var newTicket = MarketOnOpenOrder(symbol' 50);                  _openMarketOnOpenOrders.Add(newTicket);              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,MarketOnOpenOrders,The following statement contains a magic number: if (TimeIs(8' 12 + 2' 0))              {                  Log("Submitting MarketOnOpenOrder");                    // its EOD' let's submit a market on open order to short even more!                  var newTicket = MarketOnOpenOrder(symbol' 50);                  _openMarketOnOpenOrders.Add(newTicket);              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,MarketOnOpenOrders,The following statement contains a magic number: if (TimeIs(8' 12 + 2' 0))              {                  Log("Submitting MarketOnOpenOrder");                    // its EOD' let's submit a market on open order to short even more!                  var newTicket = MarketOnOpenOrder(symbol' 50);                  _openMarketOnOpenOrders.Add(newTicket);              }
Magic Number,QuantConnect.Algorithm.CSharp,OrderTicketDemoAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\OrderTicketDemoAlgorithm.cs,MarketOnOpenOrders,The following statement contains a magic number: if (_openMarketOnOpenOrders.Count == 1 && Time.Minute == 59)              {                  var ticket = _openMarketOnOpenOrders[0];                    // check for fills                  if (ticket.Status == OrderStatus.Filled)                  {                      _openMarketOnOpenOrders.Clear();                      return;                  }                    var quantity = ticket.Quantity + 1;                  Log("Updating quantity  - New Quantity: " + quantity);                    // we can update the quantity and tag                  ticket.Update(new UpdateOrderFields                  {                      Quantity = quantity'                      Tag = "Update #" + (ticket.UpdateRequests.Count + 1)                  });              }
Magic Number,QuantConnect.Algorithm.CSharp,WeeklyUniverseSelectionRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\WeeklyUniverseSelectionRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 1);
Magic Number,QuantConnect.Algorithm.CSharp,WeeklyUniverseSelectionRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\WeeklyUniverseSelectionRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2013' 10' 1);
Magic Number,QuantConnect.Algorithm.CSharp,WeeklyUniverseSelectionRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\WeeklyUniverseSelectionRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 31);
Magic Number,QuantConnect.Algorithm.CSharp,WeeklyUniverseSelectionRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\WeeklyUniverseSelectionRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 31);
Magic Number,QuantConnect.Algorithm.CSharp,WeeklyUniverseSelectionRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\WeeklyUniverseSelectionRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2013' 10' 31);
Magic Number,QuantConnect.Algorithm.CSharp,WeeklyUniverseSelectionRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\WeeklyUniverseSelectionRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: SetCash(100000);
Magic Number,QuantConnect.Algorithm.CSharp,WeeklyUniverseSelectionRegressionAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\WeeklyUniverseSelectionRegressionAlgorithm.cs,Initialize,The following statement contains a magic number: AddUniverse("my-custom-universe"' dt => dt.Day % 7 == 0 ? new List<string> { "IBM" } : Enumerable.Empty<string>());
Magic Number,QuantConnect.Algorithm.CSharp.Benchmarks,EmptyMinute400EquityAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\Benchmarks\EmptyMinute400EquityAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 09' 28);
Magic Number,QuantConnect.Algorithm.CSharp.Benchmarks,EmptyMinute400EquityAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\Benchmarks\EmptyMinute400EquityAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 09' 28);
Magic Number,QuantConnect.Algorithm.CSharp.Benchmarks,EmptyMinute400EquityAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\Benchmarks\EmptyMinute400EquityAlgorithm.cs,Initialize,The following statement contains a magic number: SetStartDate(2015' 09' 28);
Magic Number,QuantConnect.Algorithm.CSharp.Benchmarks,EmptyMinute400EquityAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\Benchmarks\EmptyMinute400EquityAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 11' 13);
Magic Number,QuantConnect.Algorithm.CSharp.Benchmarks,EmptyMinute400EquityAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\Benchmarks\EmptyMinute400EquityAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 11' 13);
Magic Number,QuantConnect.Algorithm.CSharp.Benchmarks,EmptyMinute400EquityAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\Benchmarks\EmptyMinute400EquityAlgorithm.cs,Initialize,The following statement contains a magic number: SetEndDate(2015' 11' 13);
Magic Number,QuantConnect.Algorithm.CSharp.Benchmarks,EmptyMinute400EquityAlgorithm,C:\repos\QuantConnect_Lean\Algorithm.CSharp\Benchmarks\EmptyMinute400EquityAlgorithm.cs,Initialize,The following statement contains a magic number: foreach (var symbol in Symbols.Equity.All.Take(400))              {                  AddSecurity(SecurityType.Equity' symbol);              }
