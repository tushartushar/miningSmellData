Implementation smell,Namespace,Class,File,Method,Description
Long Method,QuantConnect.Brokerages.Backtesting,BacktestingBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Backtesting\BacktestingBrokerage.cs,Scan,The method has 194 lines of code.
Long Method,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,Connect,The method has 138 lines of code.
Long Method,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,Connect,The method has 135 lines of code.
Long Method,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,HandleTickSize,The method has 113 lines of code.
Long Method,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,Equals,The method has 176 lines of code.
Long Method,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,Equals,The method has 161 lines of code.
Long Method,Oanda.RestV20.Model,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,Equals,The method has 131 lines of code.
Long Method,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,Equals,The method has 116 lines of code.
Long Method,Oanda.RestV20.Model,LimitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,Equals,The method has 116 lines of code.
Long Method,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,Equals,The method has 141 lines of code.
Long Method,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,Equals,The method has 121 lines of code.
Long Method,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,Equals,The method has 121 lines of code.
Long Method,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,Equals,The method has 136 lines of code.
Long Method,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,Equals,The method has 126 lines of code.
Long Method,Oanda.RestV20.Model,MarketOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,Equals,The method has 121 lines of code.
Long Method,Oanda.RestV20.Model,OrderFillTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,Equals,The method has 101 lines of code.
Long Method,Oanda.RestV20.Model,StopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,Equals,The method has 106 lines of code.
Long Method,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,Equals,The method has 136 lines of code.
Long Method,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,Equals,The method has 121 lines of code.
Long Method,Oanda.RestV20.Model,StopOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,Equals,The method has 121 lines of code.
Long Method,Oanda.RestV20.Model,TakeProfitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,Equals,The method has 106 lines of code.
Long Method,Oanda.RestV20.Model,TrailingStopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,Equals,The method has 111 lines of code.
Long Method,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,Execute,The method has 114 lines of code.
Long Method,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,CheckForFills,The method has 126 lines of code.
Complex Method,QuantConnect.Brokerages.Alpaca,AlpacaBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Alpaca\AlpacaBrokerage.Utility.cs,ConvertOrder,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Brokerages.Backtesting,BacktestingBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Backtesting\BacktestingBrokerage.cs,Scan,Cyclomatic complexity of the method is 21
Complex Method,QuantConnect.Brokerages,Brokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Brokerage.cs,PerformCashSync,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,OnMessageImpl,Cyclomatic complexity of the method is 10
Complex Method,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,GetOpenOrders,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.Brokerages.Bitfinex,BitfinexSubscriptionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSubscriptionManager.cs,OnReconnectRequested,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Brokerages.Bitfinex,BitfinexSubscriptionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSubscriptionManager.cs,OnMessage,Cyclomatic complexity of the method is 10
Complex Method,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,GetHistory,Cyclomatic complexity of the method is 12
Complex Method,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,messageArrived,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,OnMarketDataSnapshot,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,OnExecutionReport,Cyclomatic complexity of the method is 12
Complex Method,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,PlaceOrder,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,GetOpenOrders,Cyclomatic complexity of the method is 10
Complex Method,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,OrderMatch,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,Connect,Cyclomatic complexity of the method is 16
Complex Method,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,HandleError,Cyclomatic complexity of the method is 10
Complex Method,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,HandleOrderStatusUpdates,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,ConvertOrder,Cyclomatic complexity of the method is 12
Complex Method,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,ConvertOrderStatus,Cyclomatic complexity of the method is 10
Complex Method,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,HandleTickPrice,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,HandleTickSize,Cyclomatic complexity of the method is 18
Complex Method,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,OnIbAutomaterOutputDataReceived,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,PlaceOrder,Cyclomatic complexity of the method is 11
Complex Method,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,ConvertOrder,Cyclomatic complexity of the method is 10
Complex Method,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,PopulateOrderRequestParameters,Cyclomatic complexity of the method is 8
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderWithHttpInfo,Cyclomatic complexity of the method is 11
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderAsyncWithHttpInfo,Cyclomatic complexity of the method is 11
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionAsyncWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeAsyncWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ConfigureAccountWithHttpInfo,Cyclomatic complexity of the method is 10
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ConfigureAccountAsyncWithHttpInfo,Cyclomatic complexity of the method is 10
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderWithHttpInfo,Cyclomatic complexity of the method is 11
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderAsyncWithHttpInfo,Cyclomatic complexity of the method is 11
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountWithHttpInfo,Cyclomatic complexity of the method is 9
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountAsyncWithHttpInfo,Cyclomatic complexity of the method is 9
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesWithHttpInfo,Cyclomatic complexity of the method is 10
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesAsyncWithHttpInfo,Cyclomatic complexity of the method is 10
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsWithHttpInfo,Cyclomatic complexity of the method is 9
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsAsyncWithHttpInfo,Cyclomatic complexity of the method is 9
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountSummaryWithHttpInfo,Cyclomatic complexity of the method is 9
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountSummaryAsyncWithHttpInfo,Cyclomatic complexity of the method is 9
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetExternalUserInfoWithHttpInfo,Cyclomatic complexity of the method is 8
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetExternalUserInfoAsyncWithHttpInfo,Cyclomatic complexity of the method is 8
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,Cyclomatic complexity of the method is 19
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,Cyclomatic complexity of the method is 19
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderWithHttpInfo,Cyclomatic complexity of the method is 11
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderAsyncWithHttpInfo,Cyclomatic complexity of the method is 11
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionWithHttpInfo,Cyclomatic complexity of the method is 10
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionAsyncWithHttpInfo,Cyclomatic complexity of the method is 10
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsyncWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeWithHttpInfo,Cyclomatic complexity of the method is 11
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeAsyncWithHttpInfo,Cyclomatic complexity of the method is 11
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionWithHttpInfo,Cyclomatic complexity of the method is 11
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionAsyncWithHttpInfo,Cyclomatic complexity of the method is 11
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeWithHttpInfo,Cyclomatic complexity of the method is 14
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeAsyncWithHttpInfo,Cyclomatic complexity of the method is 14
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdWithHttpInfo,Cyclomatic complexity of the method is 11
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdAsyncWithHttpInfo,Cyclomatic complexity of the method is 11
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetUserInfoWithHttpInfo,Cyclomatic complexity of the method is 8
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetUserInfoAsyncWithHttpInfo,Cyclomatic complexity of the method is 8
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenPositionsWithHttpInfo,Cyclomatic complexity of the method is 8
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenPositionsAsyncWithHttpInfo,Cyclomatic complexity of the method is 8
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenTradesWithHttpInfo,Cyclomatic complexity of the method is 9
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenTradesAsyncWithHttpInfo,Cyclomatic complexity of the method is 9
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersWithHttpInfo,Cyclomatic complexity of the method is 14
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsyncWithHttpInfo,Cyclomatic complexity of the method is 14
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersWithHttpInfo,Cyclomatic complexity of the method is 9
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersAsyncWithHttpInfo,Cyclomatic complexity of the method is 9
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPositionsWithHttpInfo,Cyclomatic complexity of the method is 8
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPositionsAsyncWithHttpInfo,Cyclomatic complexity of the method is 8
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesWithHttpInfo,Cyclomatic complexity of the method is 14
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsyncWithHttpInfo,Cyclomatic complexity of the method is 14
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsAsyncWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderAsyncWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsyncWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingWithHttpInfo,Cyclomatic complexity of the method is 12
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingAsyncWithHttpInfo,Cyclomatic complexity of the method is 12
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamTransactionsWithHttpInfo,Cyclomatic complexity of the method is 8
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamTransactionsAsyncWithHttpInfo,Cyclomatic complexity of the method is 8
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersAsJson,Cyclomatic complexity of the method is 9
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrder,Cyclomatic complexity of the method is 10
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrder,Cyclomatic complexity of the method is 12
Complex Method,Oanda.RestV20.Client,ApiClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Client\ApiClient.cs,PrepareRequest,Cyclomatic complexity of the method is 9
Complex Method,Oanda.RestV20.Client,ApiClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Client\ApiClient.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,GetHistory,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,Execute,Cyclomatic complexity of the method is 14
Complex Method,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,PlaceOrder,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,UpdateOrder,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,CheckForFills,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,ProcessPotentiallyUpdatedOrder,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,ConvertStatus,Cyclomatic complexity of the method is 8
Long Parameter List,QuantConnect.Brokerages.Alpaca,AlpacaBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Alpaca\AlpacaBrokerage.Utility.cs,DownloadTradeBars,The method has 5 parameters. Parameters: symbol' startTimeUtc' endTimeUtc' resolution' requestedTimeZone
Long Parameter List,QuantConnect.Brokerages.Alpaca,AlpacaBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Alpaca\AlpacaBrokerage.Utility.cs,AlpacaBrokerage,The method has 6 parameters. Parameters: orderProvider' securityProvider' accountKeyId' secretKey' tradingMode' handlesMarketData
Long Parameter List,QuantConnect.Brokerages.Alpaca.Markets,RestClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Alpaca\Markets\RestClient.cs,RestClient,The method has 8 parameters. Parameters: keyId' secretKey' alpacaRestApi' polygonRestApi' alpacaDataApi' apiVersion' isStagingEnvironment' throttleParameters
Long Parameter List,QuantConnect.Brokerages.Alpaca.Markets,RestClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Alpaca\Markets\RestClient.cs,RestClient,The method has 8 parameters. Parameters: keyId' secretKey' alpacaRestApi' polygonRestApi' alpacaDataApi' apiVersion' isStagingEnvironment' throttleParameters
Long Parameter List,QuantConnect.Brokerages.Alpaca.Markets,RestClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Alpaca\Markets\RestClient.cs,PostOrderAsync,The method has 8 parameters. Parameters: symbol' quantity' side' type' duration' limitPrice' stopPrice' clientOrderId
Long Parameter List,QuantConnect.Brokerages.Alpaca.Markets,RestClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Alpaca\Markets\RestClient.cs,GetBarSetAsync,The method has 6 parameters. Parameters: symbols' timeFrame' limit' areTimesInclusive' timeFrom' timeInto
Long Parameter List,QuantConnect.Brokerages,BaseWebsocketsBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\BaseWebsocketsBrokerage.cs,BaseWebsocketsBrokerage,The method has 7 parameters. Parameters: wssUrl' websocket' restClient' apiKey' apiSecret' market' name
Long Parameter List,QuantConnect.Brokerages,BestBidAskUpdatedEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\BestBidAskUpdatedEventArgs.cs,BestBidAskUpdatedEventArgs,The method has 5 parameters. Parameters: symbol' bestBidPrice' bestBidSize' bestAskPrice' bestAskSize
Long Parameter List,QuantConnect.Brokerages,ISymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\ISymbolMapper.cs,GetLeanSymbol,The method has 6 parameters. Parameters: brokerageSymbol' securityType' market' expirationDate' strike' optionRight
Long Parameter List,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,BitfinexBrokerage,The method has 6 parameters. Parameters: wssUrl' restUrl' apiKey' apiSecret' algorithm' priceProvider
Long Parameter List,QuantConnect.Brokerages.Bitfinex,BitfinexSubscriptionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSubscriptionManager.cs,EmitQuoteTick,The method has 5 parameters. Parameters: symbol' bidPrice' bidSize' askPrice' askSize
Long Parameter List,QuantConnect.Brokerages.Bitfinex,BitfinexSymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSymbolMapper.cs,GetLeanSymbol,The method has 6 parameters. Parameters: brokerageSymbol' securityType' market' expirationDate' strike' optionRight
Long Parameter List,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,FxcmBrokerage,The method has 7 parameters. Parameters: orderProvider' securityProvider' server' terminal' userName' password' accountId
Long Parameter List,QuantConnect.Brokerages.Fxcm,FxcmSymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmSymbolMapper.cs,GetLeanSymbol,The method has 6 parameters. Parameters: brokerageSymbol' securityType' market' expirationDate' strike' optionRight
Long Parameter List,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,GDAXBrokerage,The method has 8 parameters. Parameters: wssUrl' websocket' restClient' apiKey' apiSecret' passPhrase' algorithm' priceProvider
Long Parameter List,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,EmitQuoteTick,The method has 5 parameters. Parameters: symbol' bidPrice' bidSize' askPrice' askSize
Long Parameter List,QuantConnect.Brokerages.GDAX,GDAXDataQueueHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXDataQueueHandler.cs,GDAXDataQueueHandler,The method has 8 parameters. Parameters: wssUrl' websocket' restClient' apiKey' apiSecret' passPhrase' algorithm' priceProvider
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,AccountSummaryEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\AccountSummaryEventArgs.cs,AccountSummaryEventArgs,The method has 5 parameters. Parameters: requestId' account' tag' value' currency
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,PnlSingleEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\PnlSingleEventArgs.cs,PnlSingleEventArgs,The method has 5 parameters. Parameters: reqId' pos' dailyPnL' unrealizedPnL' value
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,HistoricalNewsEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\HistoricalNewsEventArgs.cs,HistoricalNewsEventArgs,The method has 5 parameters. Parameters: requestId' time' providerCode' articleId' headline
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,TickNewsEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\TickNewsEventArgs.cs,TickNewsEventArgs,The method has 6 parameters. Parameters: tickerId' timeStamp' providerCode' articleId' headline' extraData
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,SecurityDefinitionOptionParameterEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\SecurityDefinitionOptionParameterEventArgs.cs,SecurityDefinitionOptionParameterEventArgs,The method has 7 parameters. Parameters: reqId' exchange' underlyingConId' tradingClass' multiplier' expirations' strikes
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,OrderStatusEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\OrderStatusEventArgs.cs,OrderStatusEventArgs,The method has 10 parameters. Parameters: orderId' status' filled' remaining' averageFillPrice' permId' parentId' lastFillPrice' clientId' whyHeld
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,AccountUpdateMultiEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\AccountUpdateMultiEventArgs.cs,AccountUpdateMultiEventArgs,The method has 6 parameters. Parameters: requestId' account' modelCode' key' value' currency
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,RealtimeBarEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\RealtimeBarEventArgs.cs,RealtimeBarEventArgs,The method has 9 parameters. Parameters: requestId' time' open' high' low' close' volume' wap' count
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,PositionMultiEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\PositionMultiEventArgs.cs,PositionMultiEventArgs,The method has 6 parameters. Parameters: requestId' account' modelCode' contract' pos' avgCost
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,TickEfpEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\TickEfpEventArgs.cs,TickEfpEventArgs,The method has 9 parameters. Parameters: tickerId' tickType' basisPoints' formattedBasisPoints' impliedFuture' holdDays' futureExpiry' dividendImpact' dividendsToExpiry
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,TickOptionComputationEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\TickOptionComputationEventArgs.cs,TickOptionComputationEventArgs,The method has 10 parameters. Parameters: tickerId' field' impliedVolatility' delta' optionPrice' pvDividend' gamma' vega' theta' underlyingPrice
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,UpdateMarketDepthEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\UpdateMarketDepthEventArgs.cs,UpdateMarketDepthEventArgs,The method has 6 parameters. Parameters: tickerId' position' operation' side' price' size
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,UpdateMarketDepthLevel2EventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\UpdateMarketDepthLevel2EventArgs.cs,UpdateMarketDepthLevel2EventArgs,The method has 7 parameters. Parameters: tickerId' position' marketMaker' operation' side' price' size
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,ScannerDataEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\ScannerDataEventArgs.cs,ScannerDataEventArgs,The method has 7 parameters. Parameters: reqId' rank' contractDetails' distance' benchmark' projection' legsStr
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,UpdatePortfolioEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\UpdatePortfolioEventArgs.cs,UpdatePortfolioEventArgs,The method has 8 parameters. Parameters: contract' position' marketPrice' marketValue' averageCost' unrealisedPnl' realisedPnl' accountName
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,tickEFP,The method has 9 parameters. Parameters: tickerId' tickType' basisPoints' formattedBasisPoints' impliedFuture' holdDays' futureExpiry' dividendImpact' dividendsToExpiry
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,tickOptionComputation,The method has 10 parameters. Parameters: tickerId' field' impliedVolatility' delta' optPrice' pvDividend' gamma' vega' theta' undPrice
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,accountSummary,The method has 5 parameters. Parameters: reqId' account' tag' value' currency
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,updatePortfolio,The method has 8 parameters. Parameters: contract' position' marketPrice' marketValue' averageCost' unrealisedPnl' realisedPnl' accountName
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,orderStatus,The method has 10 parameters. Parameters: orderId' status' filled' remaining' avgFillPrice' permId' parentId' lastFillPrice' clientId' whyHeld
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,updateMktDepth,The method has 6 parameters. Parameters: tickerId' position' operation' side' price' size
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,updateMktDepthL2,The method has 7 parameters. Parameters: tickerId' position' marketMaker' operation' side' price' size
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,realtimeBar,The method has 9 parameters. Parameters: reqId' time' open' high' low' close' volume' wap' count
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,scannerData,The method has 7 parameters. Parameters: reqId' rank' contractDetails' distance' benchmark' projection' legsStr
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,positionMulti,The method has 6 parameters. Parameters: requestId' account' modelCode' contract' pos' avgCost
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,accountUpdateMulti,The method has 6 parameters. Parameters: requestId' account' modelCode' key' value' currency
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,securityDefinitionOptionParameter,The method has 7 parameters. Parameters: reqId' exchange' underlyingConId' tradingClass' multiplier' expirations' strikes
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,tickNews,The method has 6 parameters. Parameters: tickerId' timeStamp' providerCode' articleId' headline' extraData
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,historicalNews,The method has 5 parameters. Parameters: requestId' time' providerCode' articleId' headline
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,pnlSingle,The method has 5 parameters. Parameters: reqId' pos' dailyPnL' unrealizedPnL' value
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,InteractiveBrokersBrokerage,The method has 12 parameters. Parameters: algorithm' orderProvider' securityProvider' account' host' port' ibDirectory' ibVersion' userName' password' tradingMode' agentDescription
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetExecutions,The method has 5 parameters. Parameters: symbol' type' exchange' timeSince' side
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetHistory,The method has 8 parameters. Parameters: request' contract' startTime' endTime' exchangeTimeZone' duration' resolution' dataType
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersSymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersSymbolMapper.cs,GetLeanSymbol,The method has 6 parameters. Parameters: brokerageSymbol' securityType' market' expirationDate' strike' optionRight
Long Parameter List,QuantConnect.Brokerages.Oanda,OandaRestApiBase,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiBase.cs,OandaRestApiBase,The method has 7 parameters. Parameters: symbolMapper' orderProvider' securityProvider' environment' accessToken' accountId' agent
Long Parameter List,QuantConnect.Brokerages.Oanda,OandaRestApiBase,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiBase.cs,DownloadTradeBars,The method has 5 parameters. Parameters: symbol' startTimeUtc' endTimeUtc' resolution' requestedTimeZone
Long Parameter List,QuantConnect.Brokerages.Oanda,OandaRestApiBase,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiBase.cs,DownloadQuoteBars,The method has 5 parameters. Parameters: symbol' startTimeUtc' endTimeUtc' resolution' requestedTimeZone
Long Parameter List,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,OandaRestApiV1,The method has 7 parameters. Parameters: symbolMapper' orderProvider' securityProvider' environment' accessToken' accountId' agent
Long Parameter List,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,DownloadTradeBars,The method has 5 parameters. Parameters: symbol' startTimeUtc' endTimeUtc' resolution' requestedTimeZone
Long Parameter List,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,DownloadQuoteBars,The method has 5 parameters. Parameters: symbol' startTimeUtc' endTimeUtc' resolution' requestedTimeZone
Long Parameter List,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,GetCandles,The method has 5 parameters. Parameters: oandaSymbol' startUtc' barsPerRequest' resolution' candleFormat
Long Parameter List,QuantConnect.Brokerages.Oanda,OandaRestApiV20,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV20.cs,OandaRestApiV20,The method has 7 parameters. Parameters: symbolMapper' orderProvider' securityProvider' environment' accessToken' accountId' agent
Long Parameter List,QuantConnect.Brokerages.Oanda,OandaRestApiV20,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV20.cs,DownloadTradeBars,The method has 5 parameters. Parameters: symbol' startTimeUtc' endTimeUtc' resolution' requestedTimeZone
Long Parameter List,QuantConnect.Brokerages.Oanda,OandaRestApiV20,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV20.cs,DownloadQuoteBars,The method has 5 parameters. Parameters: symbol' startTimeUtc' endTimeUtc' resolution' requestedTimeZone
Long Parameter List,QuantConnect.Brokerages.Oanda,OandaBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaBrokerage.cs,OandaBrokerage,The method has 6 parameters. Parameters: orderProvider' securityProvider' environment' accessToken' accountId' agent
Long Parameter List,QuantConnect.Brokerages.Oanda,OandaBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaBrokerage.cs,DownloadTradeBars,The method has 5 parameters. Parameters: symbol' startTimeUtc' endTimeUtc' resolution' requestedTimeZone
Long Parameter List,QuantConnect.Brokerages.Oanda,OandaBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaBrokerage.cs,DownloadQuoteBars,The method has 5 parameters. Parameters: symbol' startTimeUtc' endTimeUtc' resolution' requestedTimeZone
Long Parameter List,QuantConnect.Brokerages.Oanda,OandaSymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaSymbolMapper.cs,GetLeanSymbol,The method has 6 parameters. Parameters: brokerageSymbol' securityType' market' expirationDate' strike' optionRight
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePosition,The method has 5 parameters. Parameters: authorization' accountID' instrument' closePositionBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' instrument' closePositionBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTrade,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' closeTradeBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' closeTradeBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandles,The method has 13 parameters. Parameters: authorization' instrument' acceptDatetimeFormat' price' granularity' count' from' to' smooth' includeFirst' dailyAlignment' alignmentTimezone' weeklyAlignment
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The method has 13 parameters. Parameters: authorization' instrument' acceptDatetimeFormat' price' granularity' count' from' to' smooth' includeFirst' dailyAlignment' alignmentTimezone' weeklyAlignment
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPrices,The method has 6 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' since' includeUnitsAvailable
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesWithHttpInfo,The method has 6 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' since' includeUnitsAvailable
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRange,The method has 6 parameters. Parameters: authorization' accountID' from' to' acceptDatetimeFormat' type
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeWithHttpInfo,The method has 6 parameters. Parameters: authorization' accountID' from' to' acceptDatetimeFormat' type
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrders,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersWithHttpInfo,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTrades,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesWithHttpInfo,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactions,The method has 7 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' from' to' pageSize' type
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsWithHttpInfo,The method has 7 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' from' to' pageSize' type
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrder,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' replaceOrderBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' replaceOrderBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensions,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' setOrderClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' setOrderClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensions,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrders,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeDependentOrdersBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeDependentOrdersBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricing,The method has 5 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' snapshot
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' snapshot
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionAsync,The method has 5 parameters. Parameters: authorization' accountID' instrument' closePositionBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionAsyncWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' instrument' closePositionBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeAsync,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' closeTradeBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeAsyncWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' closeTradeBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsync,The method has 13 parameters. Parameters: authorization' instrument' acceptDatetimeFormat' price' granularity' count' from' to' smooth' includeFirst' dailyAlignment' alignmentTimezone' weeklyAlignment
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The method has 13 parameters. Parameters: authorization' instrument' acceptDatetimeFormat' price' granularity' count' from' to' smooth' includeFirst' dailyAlignment' alignmentTimezone' weeklyAlignment
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsync,The method has 6 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' since' includeUnitsAvailable
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsyncWithHttpInfo,The method has 6 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' since' includeUnitsAvailable
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeAsync,The method has 6 parameters. Parameters: authorization' accountID' from' to' acceptDatetimeFormat' type
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeAsyncWithHttpInfo,The method has 6 parameters. Parameters: authorization' accountID' from' to' acceptDatetimeFormat' type
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsync,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsyncWithHttpInfo,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsync,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsyncWithHttpInfo,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsAsync,The method has 7 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' from' to' pageSize' type
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsAsyncWithHttpInfo,The method has 7 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' from' to' pageSize' type
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderAsync,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' replaceOrderBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderAsyncWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' replaceOrderBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsync,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' setOrderClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' setOrderClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsync,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsync,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeDependentOrdersBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsyncWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeDependentOrdersBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingAsync,The method has 5 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' snapshot
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingAsyncWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' snapshot
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePosition,The method has 5 parameters. Parameters: authorization' accountID' instrument' closePositionBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' instrument' closePositionBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionAsync,The method has 5 parameters. Parameters: authorization' accountID' instrument' closePositionBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionAsyncWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' instrument' closePositionBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTrade,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' closeTradeBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' closeTradeBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeAsync,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' closeTradeBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeAsyncWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' closeTradeBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandles,The method has 13 parameters. Parameters: authorization' instrument' acceptDatetimeFormat' price' granularity' count' from' to' smooth' includeFirst' dailyAlignment' alignmentTimezone' weeklyAlignment
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The method has 13 parameters. Parameters: authorization' instrument' acceptDatetimeFormat' price' granularity' count' from' to' smooth' includeFirst' dailyAlignment' alignmentTimezone' weeklyAlignment
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsync,The method has 13 parameters. Parameters: authorization' instrument' acceptDatetimeFormat' price' granularity' count' from' to' smooth' includeFirst' dailyAlignment' alignmentTimezone' weeklyAlignment
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The method has 13 parameters. Parameters: authorization' instrument' acceptDatetimeFormat' price' granularity' count' from' to' smooth' includeFirst' dailyAlignment' alignmentTimezone' weeklyAlignment
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPrices,The method has 6 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' since' includeUnitsAvailable
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesWithHttpInfo,The method has 6 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' since' includeUnitsAvailable
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsync,The method has 6 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' since' includeUnitsAvailable
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsyncWithHttpInfo,The method has 6 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' since' includeUnitsAvailable
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRange,The method has 6 parameters. Parameters: authorization' accountID' from' to' acceptDatetimeFormat' type
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeWithHttpInfo,The method has 6 parameters. Parameters: authorization' accountID' from' to' acceptDatetimeFormat' type
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeAsync,The method has 6 parameters. Parameters: authorization' accountID' from' to' acceptDatetimeFormat' type
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeAsyncWithHttpInfo,The method has 6 parameters. Parameters: authorization' accountID' from' to' acceptDatetimeFormat' type
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrders,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersWithHttpInfo,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsync,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsyncWithHttpInfo,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTrades,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesWithHttpInfo,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsync,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsyncWithHttpInfo,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactions,The method has 7 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' from' to' pageSize' type
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsWithHttpInfo,The method has 7 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' from' to' pageSize' type
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsAsync,The method has 7 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' from' to' pageSize' type
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsAsyncWithHttpInfo,The method has 7 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' from' to' pageSize' type
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrder,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' replaceOrderBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' replaceOrderBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderAsync,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' replaceOrderBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderAsyncWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' replaceOrderBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensions,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' setOrderClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' setOrderClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsync,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' setOrderClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' setOrderClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensions,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsync,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrders,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeDependentOrdersBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeDependentOrdersBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsync,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeDependentOrdersBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsyncWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeDependentOrdersBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricing,The method has 5 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' snapshot
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' snapshot
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingAsync,The method has 5 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' snapshot
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingAsyncWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' snapshot
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrder,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' replaceOrderBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Client,ApiClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Client\ApiClient.cs,PrepareRequest,The method has 9 parameters. Parameters: path' method' queryParams' postBody' headerParams' formParams' fileParams' pathParams' contentType
Long Parameter List,Oanda.RestV20.Client,ApiClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Client\ApiClient.cs,CallApi,The method has 9 parameters. Parameters: path' method' queryParams' postBody' headerParams' formParams' fileParams' pathParams' contentType
Long Parameter List,Oanda.RestV20.Client,ApiClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Client\ApiClient.cs,CallApiAsync,The method has 9 parameters. Parameters: path' method' queryParams' postBody' headerParams' formParams' fileParams' pathParams' contentType
Long Parameter List,Oanda.RestV20.Client,Configuration,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Client\Configuration.cs,Configuration,The method has 11 parameters. Parameters: apiClient' defaultHeader' username' password' accessToken' apiKey' apiKeyPrefix' tempFolderPath' dateTimeFormat' timeout' userAgent
Long Parameter List,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,Account,The method has 34 parameters. Parameters: Id' Alias' Currency' Balance' CreatedByUserID' CreatedTime' Pl' ResettablePL' ResettabledPLTime' MarginRate' MarginCallEnterTime' MarginCallExtensionCount' LastMarginCallExtensionTime' OpenTradeCount' OpenPositionCount' PendingOrderCount' HedgingEnabled' UnrealizedPL' NAV' MarginUsed' MarginAvailable' PositionValue' MarginCloseoutUnrealizedPL' MarginCloseoutNAV' MarginCloseoutMarginUsed' MarginCloseoutPercent' MarginCloseoutPositionValue' WithdrawalLimit' MarginCallMarginUsed' MarginCallPercent' LastTransactionID' Trades' Positions' Orders
Long Parameter List,Oanda.RestV20.Model,AccountChanges,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChanges.cs,AccountChanges,The method has 9 parameters. Parameters: OrdersCreated' OrdersCancelled' OrdersFilled' OrdersTriggered' TradesOpened' TradesReduced' TradesClosed' Positions' Transactions
Long Parameter List,Oanda.RestV20.Model,AccountChangesState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,AccountChangesState,The method has 16 parameters. Parameters: UnrealizedPL' NAV' MarginUsed' MarginAvailable' PositionValue' MarginCloseoutUnrealizedPL' MarginCloseoutNAV' MarginCloseoutMarginUsed' MarginCloseoutPercent' MarginCloseoutPositionValue' WithdrawalLimit' MarginCallMarginUsed' MarginCallPercent' Orders' Trades' Positions
Long Parameter List,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,AccountSummary,The method has 31 parameters. Parameters: Id' Alias' Currency' Balance' CreatedByUserID' CreatedTime' Pl' ResettablePL' ResettabledPLTime' MarginRate' MarginCallEnterTime' MarginCallExtensionCount' LastMarginCallExtensionTime' OpenTradeCount' OpenPositionCount' PendingOrderCount' HedgingEnabled' UnrealizedPL' NAV' MarginUsed' MarginAvailable' PositionValue' MarginCloseoutUnrealizedPL' MarginCloseoutNAV' MarginCloseoutMarginUsed' MarginCloseoutPercent' MarginCloseoutPositionValue' WithdrawalLimit' MarginCallMarginUsed' MarginCallPercent' LastTransactionID
Long Parameter List,Oanda.RestV20.Model,Candlestick,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Candlestick.cs,Candlestick,The method has 6 parameters. Parameters: Time' Bid' Ask' Mid' Volume' Complete
Long Parameter List,Oanda.RestV20.Model,ClientConfigureRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureRejectTransaction.cs,ClientConfigureRejectTransaction,The method has 10 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' Alias' MarginRate' RejectReason
Long Parameter List,Oanda.RestV20.Model,ClientConfigureTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureTransaction.cs,ClientConfigureTransaction,The method has 9 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' Alias' MarginRate
Long Parameter List,Oanda.RestV20.Model,CloseTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CloseTransaction.cs,CloseTransaction,The method has 7 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type
Long Parameter List,Oanda.RestV20.Model,CreateTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateTransaction.cs,CreateTransaction,The method has 12 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' DivisionID' SiteID' AccountUserID' AccountNumber' HomeCurrency
Long Parameter List,Oanda.RestV20.Model,DailyFinancingTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DailyFinancingTransaction.cs,DailyFinancingTransaction,The method has 11 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' Financing' AccountBalance' AccountFinancingMode' PositionFinancings
Long Parameter List,Oanda.RestV20.Model,DelayedTradeClosureTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DelayedTradeClosureTransaction.cs,DelayedTradeClosureTransaction,The method has 9 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' Reason' TradeIDs
Long Parameter List,Oanda.RestV20.Model,InlineResponse20014,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20014.cs,InlineResponse20014,The method has 8 parameters. Parameters: LongOrderCreateTransaction' LongOrderFillTransaction' LongOrderCancelTransaction' ShortOrderCreateTransaction' ShortOrderFillTransaction' ShortOrderCancelTransaction' RelatedTransactionIDs' LastTransactionID
Long Parameter List,Oanda.RestV20.Model,InlineResponse20017,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20017.cs,InlineResponse20017,The method has 7 parameters. Parameters: From' To' PageSize' Type' Count' Pages' LastTransactionID
Long Parameter List,Oanda.RestV20.Model,InlineResponse20026,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20026.cs,InlineResponse20026,The method has 5 parameters. Parameters: OrderCreateTransaction' OrderFillTransaction' OrderCancelTransaction' RelatedTransactionIDs' LastTransactionID
Long Parameter List,Oanda.RestV20.Model,InlineResponse20028,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,InlineResponse20028,The method has 12 parameters. Parameters: TakeProfitOrderCancelTransaction' TakeProfitOrderTransaction' TakeProfitOrderFillTransaction' TakeProfitOrderCreatedCancelTransaction' StopLossOrderCancelTransaction' StopLossOrderTransaction' StopLossOrderFillTransaction' StopLossOrderCreatedCancelTransaction' TrailingStopLossOrderCancelTransaction' TrailingStopLossOrderTransaction' RelatedTransactionIDs' LastTransactionID
Long Parameter List,Oanda.RestV20.Model,InlineResponse201,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse201.cs,InlineResponse201,The method has 7 parameters. Parameters: OrderCreateTransaction' OrderFillTransaction' OrderCancelTransaction' OrderReissueTransaction' OrderReissueRejectTransaction' RelatedTransactionIDs' LastTransactionID
Long Parameter List,Oanda.RestV20.Model,InlineResponse2011,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2011.cs,InlineResponse2011,The method has 8 parameters. Parameters: OrderCancelTransaction' OrderCreateTransaction' OrderFillTransaction' OrderReissueTransaction' OrderReissueRejectTransaction' ReplacingOrderCancelTransaction' RelatedTransactionIDs' LastTransactionID
Long Parameter List,Oanda.RestV20.Model,InlineResponse4001,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4001.cs,InlineResponse4001,The method has 5 parameters. Parameters: OrderRejectTransaction' RelatedTransactionIDs' LastTransactionID' ErrorCode' ErrorMessage
Long Parameter List,Oanda.RestV20.Model,InlineResponse4002,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4002.cs,InlineResponse4002,The method has 5 parameters. Parameters: OrderRejectTransaction' RelatedTransactionIDs' LastTransactionID' ErrorCode' ErrorMessage
Long Parameter List,Oanda.RestV20.Model,InlineResponse4003,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4003.cs,InlineResponse4003,The method has 5 parameters. Parameters: OrderClientExtensionsModifyRejectTransaction' LastTransactionID' RelatedTransactionIDs' ErrorCode' ErrorMessage
Long Parameter List,Oanda.RestV20.Model,InlineResponse4004,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4004.cs,InlineResponse4004,The method has 6 parameters. Parameters: LongOrderRejectTransaction' ShortOrderRejectTransaction' RelatedTransactionIDs' LastTransactionID' ErrorCode' ErrorMessage
Long Parameter List,Oanda.RestV20.Model,InlineResponse4006,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4006.cs,InlineResponse4006,The method has 5 parameters. Parameters: TradeClientExtensionsModifyRejectTransaction' LastTransactionID' RelatedTransactionIDs' ErrorCode' ErrorMessage
Long Parameter List,Oanda.RestV20.Model,InlineResponse4007,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,InlineResponse4007,The method has 10 parameters. Parameters: TakeProfitOrderCancelRejectTransaction' TakeProfitOrderRejectTransaction' StopLossOrderCancelRejectTransaction' StopLossOrderRejectTransaction' TrailingStopLossOrderCancelRejectTransaction' TrailingStopLossOrderRejectTransaction' LastTransactionID' RelatedTransactionIDs' ErrorCode' ErrorMessage
Long Parameter List,Oanda.RestV20.Model,InlineResponse404,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse404.cs,InlineResponse404,The method has 5 parameters. Parameters: OrderRejectTransaction' RelatedTransactionIDs' LastTransactionID' ErrorCode' ErrorMessage
Long Parameter List,Oanda.RestV20.Model,InlineResponse4041,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4041.cs,InlineResponse4041,The method has 5 parameters. Parameters: OrderCancelRejectTransaction' RelatedTransactionIDs' LastTransactionID' ErrorCode' ErrorMessage
Long Parameter List,Oanda.RestV20.Model,InlineResponse4042,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4042.cs,InlineResponse4042,The method has 5 parameters. Parameters: OrderCancelRejectTransaction' RelatedTransactionIDs' LastTransactionID' ErrorCode' ErrorMessage
Long Parameter List,Oanda.RestV20.Model,InlineResponse4043,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4043.cs,InlineResponse4043,The method has 5 parameters. Parameters: OrderClientExtensionsModifyRejectTransaction' LastTransactionID' RelatedTransactionIDs' ErrorCode' ErrorMessage
Long Parameter List,Oanda.RestV20.Model,InlineResponse4044,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4044.cs,InlineResponse4044,The method has 6 parameters. Parameters: LongOrderRejectTransaction' ShortOrderRejectTransaction' RelatedTransactionIDs' LastTransactionID' ErrorCode' ErrorMessage
Long Parameter List,Oanda.RestV20.Model,InlineResponse4045,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4045.cs,InlineResponse4045,The method has 5 parameters. Parameters: OrderRejectTransaction' LastTransactionID' RelatedTransactionIDs' ErrorCode' ErrorMessage
Long Parameter List,Oanda.RestV20.Model,InlineResponse4046,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4046.cs,InlineResponse4046,The method has 5 parameters. Parameters: TradeClientExtensionsModifyRejectTransaction' LastTransactionID' RelatedTransactionIDs' ErrorCode' ErrorMessage
Long Parameter List,Oanda.RestV20.Model,Instrument,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Instrument.cs,Instrument,The method has 12 parameters. Parameters: Name' Type' DisplayName' PipLocation' DisplayPrecision' TradeUnitsPrecision' MinimumTradeSize' MaximumTrailingStopDistance' MinimumTrailingStopDistance' MaximumPositionSize' MaximumOrderUnits' MarginRate
Long Parameter List,Oanda.RestV20.Model,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,LimitOrder,The method has 25 parameters. Parameters: Id' CreateTime' State' ClientExtensions' Type' Instrument' Units' Price' TimeInForce' GtdTime' PositionFill' TriggerCondition' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions' FillingTransactionID' FilledTime' TradeOpenedID' TradeReducedID' TradeClosedIDs' CancellingTransactionID' CancelledTime' ReplacesOrderID' ReplacedByOrderID
Long Parameter List,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,LimitOrderRejectTransaction,The method has 22 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' Instrument' Units' Price' TimeInForce' GtdTime' PositionFill' TriggerCondition' Reason' ClientExtensions' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions' IntendedReplacesOrderID' RejectReason
Long Parameter List,Oanda.RestV20.Model,LimitOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,LimitOrderRequest,The method has 13 parameters. Parameters: Type' Instrument' Units' Price' TimeInForce' GtdTime' PositionFill' TriggerCondition' ClientExtensions' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions
Long Parameter List,Oanda.RestV20.Model,LimitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,LimitOrderTransaction,The method has 22 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' Instrument' Units' Price' TimeInForce' GtdTime' PositionFill' TriggerCondition' Reason' ClientExtensions' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions' ReplacesOrderID' CancellingTransactionID
Long Parameter List,Oanda.RestV20.Model,MarginCallEnterTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallEnterTransaction.cs,MarginCallEnterTransaction,The method has 7 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type
Long Parameter List,Oanda.RestV20.Model,MarginCallExitTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExitTransaction.cs,MarginCallExitTransaction,The method has 7 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type
Long Parameter List,Oanda.RestV20.Model,MarginCallExtendTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExtendTransaction.cs,MarginCallExtendTransaction,The method has 8 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' ExtensionNumber
Long Parameter List,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,MarketIfTouchedOrder,The method has 27 parameters. Parameters: Id' CreateTime' State' ClientExtensions' Type' Instrument' Units' Price' PriceBound' TimeInForce' GtdTime' PositionFill' TriggerCondition' InitialMarketPrice' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions' FillingTransactionID' FilledTime' TradeOpenedID' TradeReducedID' TradeClosedIDs' CancellingTransactionID' CancelledTime' ReplacesOrderID' ReplacedByOrderID
Long Parameter List,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,MarketIfTouchedOrderRejectTransaction,The method has 23 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' Instrument' Units' Price' PriceBound' TimeInForce' GtdTime' PositionFill' TriggerCondition' Reason' ClientExtensions' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions' IntendedReplacesOrderID' RejectReason
Long Parameter List,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,MarketIfTouchedOrderRequest,The method has 14 parameters. Parameters: Type' Instrument' Units' Price' PriceBound' TimeInForce' GtdTime' PositionFill' TriggerCondition' ClientExtensions' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions
Long Parameter List,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,MarketIfTouchedOrderTransaction,The method has 23 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' Instrument' Units' Price' PriceBound' TimeInForce' GtdTime' PositionFill' TriggerCondition' Reason' ClientExtensions' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions' ReplacesOrderID' CancellingTransactionID
Long Parameter List,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,MarketOrder,The method has 26 parameters. Parameters: Id' CreateTime' State' ClientExtensions' Type' Instrument' Units' TimeInForce' PriceBound' PositionFill' TradeClose' LongPositionCloseout' ShortPositionCloseout' MarginCloseout' DelayedTradeClose' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions' FillingTransactionID' FilledTime' TradeOpenedID' TradeReducedID' TradeClosedIDs' CancellingTransactionID' CancelledTime
Long Parameter List,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,MarketOrderRejectTransaction,The method has 24 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' Instrument' Units' TimeInForce' PriceBound' PositionFill' TradeClose' LongPositionCloseout' ShortPositionCloseout' MarginCloseout' DelayedTradeClose' Reason' ClientExtensions' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions' RejectReason
Long Parameter List,Oanda.RestV20.Model,MarketOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRequest.cs,MarketOrderRequest,The method has 11 parameters. Parameters: Type' Instrument' Units' TimeInForce' PriceBound' PositionFill' ClientExtensions' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions
Long Parameter List,Oanda.RestV20.Model,MarketOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,MarketOrderTransaction,The method has 23 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' Instrument' Units' TimeInForce' PriceBound' PositionFill' TradeClose' LongPositionCloseout' ShortPositionCloseout' MarginCloseout' DelayedTradeClose' Reason' ClientExtensions' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions
Long Parameter List,Oanda.RestV20.Model,OrderCancelRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelRejectTransaction.cs,OrderCancelRejectTransaction,The method has 11 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' OrderID' ClientOrderID' Reason' RejectReason
Long Parameter List,Oanda.RestV20.Model,OrderCancelTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelTransaction.cs,OrderCancelTransaction,The method has 11 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' OrderID' ClientOrderID' Reason' ReplacedByOrderID
Long Parameter List,Oanda.RestV20.Model,OrderClientExtensionsModifyRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyRejectTransaction.cs,OrderClientExtensionsModifyRejectTransaction,The method has 12 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' OrderID' ClientOrderID' ClientExtensionsModify' TradeClientExtensionsModify' RejectReason
Long Parameter List,Oanda.RestV20.Model,OrderClientExtensionsModifyTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyTransaction.cs,OrderClientExtensionsModifyTransaction,The method has 11 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' OrderID' ClientOrderID' ClientExtensionsModify' TradeClientExtensionsModify
Long Parameter List,Oanda.RestV20.Model,OrderFillTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,OrderFillTransaction,The method has 19 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' OrderID' ClientOrderID' Instrument' Units' Price' Reason' Pl' Financing' AccountBalance' TradeOpened' TradesClosed' TradeReduced
Long Parameter List,Oanda.RestV20.Model,Position,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Position.cs,Position,The method has 6 parameters. Parameters: Instrument' Pl' UnrealizedPL' ResettablePL' _Long' _Short
Long Parameter List,Oanda.RestV20.Model,PositionSide,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PositionSide.cs,PositionSide,The method has 6 parameters. Parameters: Units' AveragePrice' TradeIDs' Pl' UnrealizedPL' ResettablePL
Long Parameter List,Oanda.RestV20.Model,Price,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Price.cs,Price,The method has 11 parameters. Parameters: Type' Instrument' Time' Status' Tradeable' Bids' Asks' CloseoutBid' CloseoutAsk' QuoteHomeConversionFactors' UnitsAvailable
Long Parameter List,Oanda.RestV20.Model,ReopenTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ReopenTransaction.cs,ReopenTransaction,The method has 7 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type
Long Parameter List,Oanda.RestV20.Model,ResetResettablePLTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ResetResettablePLTransaction.cs,ResetResettablePLTransaction,The method has 7 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type
Long Parameter List,Oanda.RestV20.Model,StopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,StopLossOrder,The method has 20 parameters. Parameters: Id' CreateTime' State' ClientExtensions' Type' TradeID' ClientTradeID' Price' TimeInForce' GtdTime' TriggerCondition' FillingTransactionID' FilledTime' TradeOpenedID' TradeReducedID' TradeClosedIDs' CancellingTransactionID' CancelledTime' ReplacesOrderID' ReplacedByOrderID
Long Parameter List,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,StopLossOrderRejectTransaction,The method has 18 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' TradeID' ClientTradeID' Price' TimeInForce' GtdTime' TriggerCondition' Reason' ClientExtensions' OrderFillTransactionID' IntendedReplacesOrderID' RejectReason
Long Parameter List,Oanda.RestV20.Model,StopLossOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRequest.cs,StopLossOrderRequest,The method has 8 parameters. Parameters: Type' TradeID' ClientTradeID' Price' TimeInForce' GtdTime' TriggerCondition' ClientExtensions
Long Parameter List,Oanda.RestV20.Model,StopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,StopLossOrderTransaction,The method has 18 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' TradeID' ClientTradeID' Price' TimeInForce' GtdTime' TriggerCondition' Reason' ClientExtensions' OrderFillTransactionID' ReplacesOrderID' CancellingTransactionID
Long Parameter List,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,StopOrder,The method has 26 parameters. Parameters: Id' CreateTime' State' ClientExtensions' Type' Instrument' Units' Price' PriceBound' TimeInForce' GtdTime' PositionFill' TriggerCondition' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions' FillingTransactionID' FilledTime' TradeOpenedID' TradeReducedID' TradeClosedIDs' CancellingTransactionID' CancelledTime' ReplacesOrderID' ReplacedByOrderID
Long Parameter List,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,StopOrderRejectTransaction,The method has 23 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' Instrument' Units' Price' PriceBound' TimeInForce' GtdTime' PositionFill' TriggerCondition' Reason' ClientExtensions' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions' IntendedReplacesOrderID' RejectReason
Long Parameter List,Oanda.RestV20.Model,StopOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,StopOrderRequest,The method has 14 parameters. Parameters: Type' Instrument' Units' Price' PriceBound' TimeInForce' GtdTime' PositionFill' TriggerCondition' ClientExtensions' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions
Long Parameter List,Oanda.RestV20.Model,StopOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,StopOrderTransaction,The method has 23 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' Instrument' Units' Price' PriceBound' TimeInForce' GtdTime' PositionFill' TriggerCondition' Reason' ClientExtensions' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions' ReplacesOrderID' CancellingTransactionID
Long Parameter List,Oanda.RestV20.Model,TakeProfitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,TakeProfitOrder,The method has 20 parameters. Parameters: Id' CreateTime' State' ClientExtensions' Type' TradeID' ClientTradeID' Price' TimeInForce' GtdTime' TriggerCondition' FillingTransactionID' FilledTime' TradeOpenedID' TradeReducedID' TradeClosedIDs' CancellingTransactionID' CancelledTime' ReplacesOrderID' ReplacedByOrderID
Long Parameter List,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,TakeProfitOrderRejectTransaction,The method has 18 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' TradeID' ClientTradeID' Price' TimeInForce' GtdTime' TriggerCondition' Reason' ClientExtensions' OrderFillTransactionID' IntendedReplacesOrderID' RejectReason
Long Parameter List,Oanda.RestV20.Model,TakeProfitOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRequest.cs,TakeProfitOrderRequest,The method has 8 parameters. Parameters: Type' TradeID' ClientTradeID' Price' TimeInForce' GtdTime' TriggerCondition' ClientExtensions
Long Parameter List,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,TakeProfitOrderTransaction,The method has 18 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' TradeID' ClientTradeID' Price' TimeInForce' GtdTime' TriggerCondition' Reason' ClientExtensions' OrderFillTransactionID' ReplacesOrderID' CancellingTransactionID
Long Parameter List,Oanda.RestV20.Model,Trade,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,Trade,The method has 17 parameters. Parameters: Id' Instrument' Price' OpenTime' State' InitialUnits' CurrentUnits' RealizedPL' UnrealizedPL' AverageClosePrice' ClosingTransactionIDs' Financing' CloseTime' ClientExtensions' TakeProfitOrder' StopLossOrder' TrailingStopLossOrder
Long Parameter List,Oanda.RestV20.Model,TradeClientExtensionsModifyRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyRejectTransaction.cs,TradeClientExtensionsModifyRejectTransaction,The method has 11 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' TradeID' ClientTradeID' TradeClientExtensionsModify' RejectReason
Long Parameter List,Oanda.RestV20.Model,TradeClientExtensionsModifyTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyTransaction.cs,TradeClientExtensionsModifyTransaction,The method has 10 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' TradeID' ClientTradeID' TradeClientExtensionsModify
Long Parameter List,Oanda.RestV20.Model,TradeSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,TradeSummary,The method has 17 parameters. Parameters: Id' Instrument' Price' OpenTime' State' InitialUnits' CurrentUnits' RealizedPL' UnrealizedPL' AverageClosePrice' ClosingTransactionIDs' Financing' CloseTime' ClientExtensions' TakeProfitOrderID' StopLossOrderID' TrailingStopLossOrderID
Long Parameter List,Oanda.RestV20.Model,TrailingStopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,TrailingStopLossOrder,The method has 21 parameters. Parameters: Id' CreateTime' State' ClientExtensions' Type' TradeID' ClientTradeID' Distance' TimeInForce' GtdTime' TriggerCondition' TrailingStopValue' FillingTransactionID' FilledTime' TradeOpenedID' TradeReducedID' TradeClosedIDs' CancellingTransactionID' CancelledTime' ReplacesOrderID' ReplacedByOrderID
Long Parameter List,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,TrailingStopLossOrderRejectTransaction,The method has 18 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' TradeID' ClientTradeID' Distance' TimeInForce' GtdTime' TriggerCondition' Reason' ClientExtensions' OrderFillTransactionID' IntendedReplacesOrderID' RejectReason
Long Parameter List,Oanda.RestV20.Model,TrailingStopLossOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRequest.cs,TrailingStopLossOrderRequest,The method has 8 parameters. Parameters: Type' TradeID' ClientTradeID' Distance' TimeInForce' GtdTime' TriggerCondition' ClientExtensions
Long Parameter List,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,TrailingStopLossOrderTransaction,The method has 18 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' TradeID' ClientTradeID' Distance' TimeInForce' GtdTime' TriggerCondition' Reason' ClientExtensions' OrderFillTransactionID' ReplacesOrderID' CancellingTransactionID
Long Parameter List,Oanda.RestV20.Model,Transaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Transaction.cs,Transaction,The method has 6 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID
Long Parameter List,Oanda.RestV20.Model,TransferFundsRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsRejectTransaction.cs,TransferFundsRejectTransaction,The method has 11 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' Amount' FundingReason' Comment' RejectReason
Long Parameter List,Oanda.RestV20.Model,TransferFundsTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsTransaction.cs,TransferFundsTransaction,The method has 11 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' Amount' FundingReason' Comment' AccountBalance
Long Parameter List,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,SetTokens,The method has 5 parameters. Parameters: userId' accessToken' refreshToken' issuedAt' lifeSpan
Long Parameter List,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,Execute,The method has 5 parameters. Parameters: request' type' rootName' attempts' max
Long Parameter List,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,PlaceOrder,The method has 10 parameters. Parameters: accountId' classification' direction' symbol' quantity' price' stop' optionSymbol' type' duration
Long Parameter List,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,ChangeOrder,The method has 6 parameters. Parameters: accountId' orderId' type' duration' price' stop
Long Identifier,QuantConnect.Brokerages.Alpaca,AlpacaBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Alpaca\AlpacaBrokerage.Utility.cs,Connect,The length of the parameter nextReconnectionAttemptSeconds is 30.
Long Identifier,QuantConnect.Brokerages.Backtesting,BacktestingBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Backtesting\BacktestingBrokerage.cs,Scan,The length of the parameter hasSufficientBuyingPowerResult is 30.
Long Identifier,QuantConnect.Brokerages,BaseWebsocketsBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\BaseWebsocketsBrokerage.cs,Connect,The length of the parameter nextReconnectionAttemptUtcTime is 30.
Long Identifier,QuantConnect.Brokerages,BaseWebsocketsBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\BaseWebsocketsBrokerage.cs,Connect,The length of the parameter nextReconnectionAttemptSeconds is 30.
Long Identifier,QuantConnect.Brokerages,Brokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Brokerage.cs,,The length of the parameter _performCashSyncReentranceGuard is 31.
Long Identifier,QuantConnect.Brokerages,DefaultConnectionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\DefaultConnectionHandler.cs,Initialize,The length of the parameter nextReconnectionAttemptUtcTime is 30.
Long Identifier,QuantConnect.Brokerages,DefaultConnectionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\DefaultConnectionHandler.cs,Initialize,The length of the parameter nextReconnectionAttemptSeconds is 30.
Long Identifier,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,,The length of the parameter _isOrderUpdateOrCancelRejected is 30.
Long Identifier,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,,The length of the parameter MaxDataPointsPerHistoricalRequest is 33.
Long Identifier,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,,The length of the parameter _minimumTimespanBeforeUnsubscribe is 33.
Long Identifier,QuantConnect.Brokerages.Oanda,OandaRestApiBase,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiBase.cs,Connect,The length of the parameter nextReconnectionAttemptUtcTime is 30.
Long Identifier,QuantConnect.Brokerages.Oanda,OandaRestApiBase,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiBase.cs,Connect,The length of the parameter nextReconnectionAttemptSeconds is 30.
Long Identifier,Oanda.RestV20.Model,InlineResponse20010,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20010.cs,InlineResponse20010,The length of the parameter OrderClientExtensionsModifyTransaction is 38.
Long Identifier,Oanda.RestV20.Model,InlineResponse20027,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20027.cs,InlineResponse20027,The length of the parameter TradeClientExtensionsModifyTransaction is 38.
Long Identifier,Oanda.RestV20.Model,InlineResponse20028,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,InlineResponse20028,The length of the parameter TakeProfitOrderCancelTransaction is 32.
Long Identifier,Oanda.RestV20.Model,InlineResponse20028,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,InlineResponse20028,The length of the parameter TakeProfitOrderFillTransaction is 30.
Long Identifier,Oanda.RestV20.Model,InlineResponse20028,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,InlineResponse20028,The length of the parameter TakeProfitOrderCreatedCancelTransaction is 39.
Long Identifier,Oanda.RestV20.Model,InlineResponse20028,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,InlineResponse20028,The length of the parameter StopLossOrderCancelTransaction is 30.
Long Identifier,Oanda.RestV20.Model,InlineResponse20028,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,InlineResponse20028,The length of the parameter StopLossOrderCreatedCancelTransaction is 37.
Long Identifier,Oanda.RestV20.Model,InlineResponse20028,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,InlineResponse20028,The length of the parameter TrailingStopLossOrderCancelTransaction is 38.
Long Identifier,Oanda.RestV20.Model,InlineResponse20028,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,InlineResponse20028,The length of the parameter TrailingStopLossOrderTransaction is 32.
Long Identifier,Oanda.RestV20.Model,InlineResponse2011,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2011.cs,InlineResponse2011,The length of the parameter ReplacingOrderCancelTransaction is 31.
Long Identifier,Oanda.RestV20.Model,InlineResponse400,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse400.cs,InlineResponse400,The length of the parameter ClientConfigureRejectTransaction is 32.
Long Identifier,Oanda.RestV20.Model,InlineResponse4003,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4003.cs,InlineResponse4003,The length of the parameter OrderClientExtensionsModifyRejectTransaction is 44.
Long Identifier,Oanda.RestV20.Model,InlineResponse4006,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4006.cs,InlineResponse4006,The length of the parameter TradeClientExtensionsModifyRejectTransaction is 44.
Long Identifier,Oanda.RestV20.Model,InlineResponse4007,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,InlineResponse4007,The length of the parameter TakeProfitOrderCancelRejectTransaction is 38.
Long Identifier,Oanda.RestV20.Model,InlineResponse4007,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,InlineResponse4007,The length of the parameter TakeProfitOrderRejectTransaction is 32.
Long Identifier,Oanda.RestV20.Model,InlineResponse4007,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,InlineResponse4007,The length of the parameter StopLossOrderCancelRejectTransaction is 36.
Long Identifier,Oanda.RestV20.Model,InlineResponse4007,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,InlineResponse4007,The length of the parameter StopLossOrderRejectTransaction is 30.
Long Identifier,Oanda.RestV20.Model,InlineResponse4007,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,InlineResponse4007,The length of the parameter TrailingStopLossOrderCancelRejectTransaction is 44.
Long Identifier,Oanda.RestV20.Model,InlineResponse4007,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,InlineResponse4007,The length of the parameter TrailingStopLossOrderRejectTransaction is 38.
Long Identifier,Oanda.RestV20.Model,InlineResponse4043,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4043.cs,InlineResponse4043,The length of the parameter OrderClientExtensionsModifyRejectTransaction is 44.
Long Identifier,Oanda.RestV20.Model,InlineResponse4046,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4046.cs,InlineResponse4046,The length of the parameter TradeClientExtensionsModifyRejectTransaction is 44.
Long Identifier,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,,The length of the parameter _cachedOpenOrdersByTradierOrderID is 33.
Long Identifier,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,,The length of the parameter _reentranceGuardByTradierOrderID is 32.
Long Identifier,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,,The length of the parameter _contingentReentranceGuardByQCOrderID is 37.
Long Identifier,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,,The length of the parameter _verifiedUnknownTradierOrderIDs is 31.
Long Statement,QuantConnect.Brokerages.Alpaca,AlpacaBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Alpaca\AlpacaBrokerage.Utility.cs,OnTradeUpdate,The length of the statement  "            Log.Trace($"AlpacaBrokerage.OnTradeUpdate(): Event:{trade.Event} OrderId:{trade.Order.OrderId} OrderStatus:{trade.Order.OrderStatus} FillQuantity: {trade.Order.FilledQuantity} Price: {trade.Price}"); " is 199.
Long Statement,QuantConnect.Brokerages.Alpaca,AlpacaBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Alpaca\AlpacaBrokerage.Utility.cs,ConvertOrder,The length of the statement  "                        "An existing " + type + " working order was found and is currently unsupported. Please manually cancel the order before restarting the algorithm."); " is 148.
Long Statement,QuantConnect.Brokerages.Alpaca,AlpacaBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Alpaca\AlpacaBrokerage.Utility.cs,UpdateOrder,The length of the statement  "            throw new NotSupportedException("AlpacaBrokerage.UpdateOrder(): Order update not supported. Please cancel and re-create."); " is 123.
Long Statement,QuantConnect.Brokerages.Alpaca,AlpacaBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Alpaca\AlpacaBrokerage.Utility.cs,GetHistory,The length of the statement  "            var exchangeTimeZone = _marketHours.GetExchangeHours(request.Symbol.ID.Market' request.Symbol' request.Symbol.SecurityType).TimeZone; " is 133.
Long Statement,QuantConnect.Brokerages.Alpaca,AlpacaBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Alpaca\AlpacaBrokerage.Utility.cs,GetHistory,The length of the statement  "                    items = DownloadTradeBars(request.Symbol' request.StartTimeUtc' request.EndTimeUtc' request.Resolution' exchangeTimeZone); " is 122.
Long Statement,QuantConnect.Brokerages.Alpaca,AlpacaBrokerageFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Alpaca\AlpacaBrokerageFactory.cs,CreateBrokerage,The length of the statement  "            var brokerage = new AlpacaBrokerage(algorithm.Transactions' algorithm.Portfolio' keyId' secretKey' tradingMode' handlesMarketData); " is 131.
Long Statement,QuantConnect.Brokerages.Alpaca.Markets,RateThrottler,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Alpaca\Markets\RateThrottler.cs,CheckHttpResponse,The length of the statement  "            // Server unavailable' or Too many requests (429 can happen when this client competes with another client' e.g. mobile app) " is 123.
Long Statement,QuantConnect.Brokerages.Alpaca.Markets,SockClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Alpaca\Markets\SockClient.cs,Dispose,The length of the statement  "            if (_webSocket != null && _webSocket.ReadyState != WebSocketState.Closing && _webSocket.ReadyState != WebSocketState.Closed) " is 124.
Long Statement,QuantConnect.Brokerages.Backtesting,BacktestingBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Backtesting\BacktestingBrokerage.cs,PlaceOrder,The length of the statement  "                Log.Trace("BacktestingBrokerage.PlaceOrder(): Type: " + order.Type + " Symbol: " + order.Symbol.Value + " Quantity: " + order.Quantity); " is 136.
Long Statement,QuantConnect.Brokerages.Backtesting,BacktestingBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Backtesting\BacktestingBrokerage.cs,UpdateOrder,The length of the statement  "                Log.Trace("BacktestingBrokerage.UpdateOrder(): Symbol: " + order.Symbol.Value + " Quantity: " + order.Quantity + " Status: " + order.Status); " is 141.
Long Statement,QuantConnect.Brokerages.Backtesting,BacktestingBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Backtesting\BacktestingBrokerage.cs,Scan,The length of the statement  "                        hasSufficientBuyingPowerResult = security.BuyingPowerModel.HasSufficientBuyingPowerForOrder(Algorithm.Portfolio' security' order); " is 130.
Long Statement,QuantConnect.Brokerages.Backtesting,BacktestingBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Backtesting\BacktestingBrokerage.cs,Scan,The length of the statement  "                                    // TODO : This check can be removed in April' 2019 -- a 6-month window to upgrade (also' suspect small % of users' if any are impacted) " is 135.
Long Statement,QuantConnect.Brokerages.Backtesting,BacktestingBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Backtesting\BacktestingBrokerage.cs,Scan,The length of the statement  "                            Algorithm.Error($"Order Error: id: {order.Id}' Transaction model failed to fill for order type: {order.Type} with error: {err.Message}"); " is 137.
Long Statement,QuantConnect.Brokerages.Backtesting,BacktestingBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Backtesting\BacktestingBrokerage.cs,Scan,The length of the statement  "                        var message = $"Insufficient buying power to complete order (Value:{order.GetValue(security).SmartRounding()})' Reason: {hasSufficientBuyingPowerResult.Reason}."; " is 162.
Long Statement,QuantConnect.Brokerages.Backtesting,BacktestingBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Backtesting\BacktestingBrokerage.cs,ActivateOptionAssignment,The length of the statement  "            var request = new SubmitOrderRequest(OrderType.OptionExercise' option.Type' option.Symbol' -quantity' 0m' 0m' Algorithm.UtcTime' "Simulated option assignment before expiration"); " is 178.
Long Statement,QuantConnect.Brokerages.Backtesting,BasicOptionAssignmentSimulation,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Backtesting\BasicOptionAssignmentSimulation.cs,IsReadyToSimulate,The length of the statement  "                // we check if new simulation date has arrived. It may happen that several of them had.. due to exchange hours' weekends' etc. " is 126.
Long Statement,QuantConnect.Brokerages.Backtesting,BasicOptionAssignmentSimulation,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Backtesting\BasicOptionAssignmentSimulation.cs,SimulateMarketConditions,The length of the statement  "                .ForEach(x => backtestingBrokerage.ActivateOptionAssignment((Option)x.Value' (int)((OptionHolding)x.Value.Holdings).AbsoluteQuantity)); " is 135.
Long Statement,QuantConnect.Brokerages.Backtesting,BasicOptionAssignmentSimulation,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Backtesting\BasicOptionAssignmentSimulation.cs,EstimateArbitragePnL,The length of the statement  "            var marketOrder1 = new MarketOrder(option.Symbol' -holding.Quantity' option.LocalTime.ConvertToUtc(option.Exchange.TimeZone)); " is 126.
Long Statement,QuantConnect.Brokerages.Backtesting,BasicOptionAssignmentSimulation,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Backtesting\BasicOptionAssignmentSimulation.cs,EstimateArbitragePnL,The length of the statement  "            var optionExerciseOrder2 = new OptionExerciseOrder(option.Symbol' (int)holding.AbsoluteQuantity' option.LocalTime.ConvertToUtc(option.Exchange.TimeZone)); " is 154.
Long Statement,QuantConnect.Brokerages.Backtesting,BasicOptionAssignmentSimulation,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Backtesting\BasicOptionAssignmentSimulation.cs,EstimateArbitragePnL,The length of the statement  "            var undelyingMarketOrder2 = new MarketOrder(underlying.Symbol' -underlyingQuantity' underlying.LocalTime.ConvertToUtc(underlying.Exchange.TimeZone)); " is 149.
Long Statement,QuantConnect.Brokerages.Backtesting,BasicOptionAssignmentSimulation,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Backtesting\BasicOptionAssignmentSimulation.cs,EstimateArbitragePnL,The length of the statement  "            var altPnL = (underlyingPrice - option.StrikePrice) * underlyingQuantity * underlying.QuoteCurrency.ConversionRate * option.ContractUnitOfTrade " is 143.
Long Statement,QuantConnect.Brokerages.Backtesting,BasicOptionAssignmentSimulation,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Backtesting\BasicOptionAssignmentSimulation.cs,EstimateArbitragePnL,The length of the statement  "                        - holding.AveragePrice * holding.AbsoluteQuantity * option.SymbolProperties.ContractMultiplier * option.QuoteCurrency.ConversionRate " is 132.
Long Statement,QuantConnect.Brokerages,BaseWebsocketsBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\BaseWebsocketsBrokerage.cs,Connect,The length of the statement  "                                OnMessage(BrokerageMessageEvent.Disconnected("Connection with server lost. This could be because of internet connectivity issues.")); " is 133.
Long Statement,QuantConnect.Brokerages,DefaultOrderBook,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\DefaultOrderBook.cs,UpdateBidRow,The length of the statement  "                    BestBidAskUpdated?.Invoke(this' new BestBidAskUpdatedEventArgs(_symbol' _bestBidPrice' _bestBidSize' _bestAskPrice' _bestAskSize)); " is 131.
Long Statement,QuantConnect.Brokerages,DefaultOrderBook,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\DefaultOrderBook.cs,UpdateAskRow,The length of the statement  "                    BestBidAskUpdated?.Invoke(this' new BestBidAskUpdatedEventArgs(_symbol' _bestBidPrice' _bestBidSize' _bestAskPrice' _bestAskSize)); " is 131.
Long Statement,QuantConnect.Brokerages,DefaultOrderBook,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\DefaultOrderBook.cs,RemoveBidRow,The length of the statement  "                    BestBidAskUpdated?.Invoke(this' new BestBidAskUpdatedEventArgs(_symbol' _bestBidPrice' _bestBidSize' _bestAskPrice' _bestAskSize)); " is 131.
Long Statement,QuantConnect.Brokerages,DefaultOrderBook,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\DefaultOrderBook.cs,RemoveAskRow,The length of the statement  "                    BestBidAskUpdated?.Invoke(this' new BestBidAskUpdatedEventArgs(_symbol' _bestBidPrice' _bestBidSize' _bestAskPrice' _bestAskSize)); " is 131.
Long Statement,QuantConnect.Brokerages,Brokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Brokerage.cs,PerformCashSync,The length of the statement  "                        Log.Trace($"Brokerage.PerformCashSync(): {cash.Symbol} was not found in brokerage cash balance' setting the amount to 0"' true); " is 128.
Long Statement,QuantConnect.Brokerages,DefaultConnectionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\DefaultConnectionHandler.cs,Initialize,The length of the statement  "                                        nextReconnectionAttemptSeconds = Math.Min(nextReconnectionAttemptSeconds * 2' MaximumSecondsForNextReconnectionAttempt); " is 120.
Long Statement,QuantConnect.Brokerages,WebSocketWrapper,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\WebSocketWrapper.cs,OnError,The length of the statement  "            Log.Error(e.Exception' $"WebSocketWrapper.OnError(): (IsOpen:{IsOpen}' ReadyState:{_wrapped.ReadyState}): {e.Message}"); " is 120.
Long Statement,QuantConnect.Brokerages,WebSocketWrapper,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\WebSocketWrapper.cs,OnClose,The length of the statement  "            Log.Trace($"WebSocketWrapper.OnClose(): Connection closed (IsOpen:{IsOpen}' ReadyState:{_wrapped.ReadyState}' Code:{e.Code}' Reason:{e.Reason}' WasClean:{e.WasClean}): {_url}"); " is 177.
Long Statement,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,OnMessageImpl,The length of the statement  "                OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Error' -1' $"Parsing wss message failed. Data: {e.Message} Exception: {exception}")); " is 142.
Long Statement,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,UpdateOrder,The length of the statement  "                throw new ArgumentNullException("BitfinexBrokerage.UpdateOrder: There is no brokerage id to be updated for this order."); " is 121.
Long Statement,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,UpdateOrder,The length of the statement  "                throw new NotSupportedException("BitfinexBrokerage.UpdateOrder: Multiple orders update not supported. Please cancel and re-create."); " is 133.
Long Statement,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,CancelOrder,The length of the statement  "            if (response.StatusCode == HttpStatusCode.OK && !(response.Content?.IndexOf("None to cancel"' StringComparison.OrdinalIgnoreCase) >= 0)) " is 136.
Long Statement,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,GetOpenOrders,The length of the statement  "                throw new Exception($"BitfinexBrokerage.GetOpenOrders: request failed: [{(int)response.StatusCode}] {response.StatusDescription}' Content: {response.Content}' ErrorMessage: {response.ErrorMessage}"); " is 199.
Long Statement,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,GetAccountHoldings,The length of the statement  "                throw new Exception($"BitfinexBrokerage.GetAccountHoldings: request failed: [{(int)response.StatusCode}] {response.StatusDescription}' Content: {response.Content}' ErrorMessage: {response.ErrorMessage}"); " is 204.
Long Statement,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,GetCashBalance,The length of the statement  "                throw new Exception($"BitfinexBrokerage.GetCashBalance: request failed: [{(int)response.StatusCode}] {response.StatusDescription}' Content: {response.Content}' ErrorMessage: {response.ErrorMessage}"); " is 200.
Long Statement,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,GetTick,The length of the statement  "                throw new Exception($"BitfinexBrokerage.GetTick: request failed: [{(int)response.StatusCode}] {response.StatusDescription}' Content: {response.Content}' ErrorMessage: {response.ErrorMessage}"); " is 193.
Long Statement,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,ConvertOrderDirection,The length of the statement  "            throw new NotSupportedException($"BitfinexBrokerage.ConvertOrderDirection: Unsupported order direction: {orderDirection}"); " is 123.
Long Statement,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,SubmitOrder,The length of the statement  "                    OnOrderEvent(new OrderEvent(order' DateTime.UtcNow' orderFee' "Bitfinex Order Event") { Status = OrderStatus.Invalid' Message = errorMessage }); " is 144.
Long Statement,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,SubmitOrder,The length of the statement  "                OnOrderEvent(new OrderEvent(order' DateTime.UtcNow' orderFee' "Bitfinex Order Event") { Status = OrderStatus.Submitted }); " is 122.
Long Statement,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,SubmitOrder,The length of the statement  "            var message = $"Order failed' Order Id: {order.Id} timestamp: {order.Time} quantity: {order.Quantity} content: {response.Content}"; " is 131.
Long Statement,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,SubmitOrder,The length of the statement  "            OnOrderEvent(new OrderEvent(order' DateTime.UtcNow' orderFee' "Bitfinex Order Event") { Status = OrderStatus.Invalid }); " is 120.
Long Statement,QuantConnect.Brokerages.Bitfinex,BitfinexSubscriptionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSubscriptionManager.cs,OnReconnectRequested,The length of the statement  "            Log.Trace($"BitfinexSubscriptionManager.OnReconnectRequested(): WebSocket reconnection requested [Id: {connectionHandler.ConnectionId}]"); " is 138.
Long Statement,QuantConnect.Brokerages.Bitfinex,BitfinexSubscriptionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSubscriptionManager.cs,OnReconnectRequested,The length of the statement  "                Log.Error($"BitfinexSubscriptionManager.OnReconnectRequested(): WebSocket ConnectionId not found: {connectionHandler.ConnectionId}"); " is 133.
Long Statement,QuantConnect.Brokerages.Bitfinex,BitfinexSubscriptionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSubscriptionManager.cs,OnReconnectRequested,The length of the statement  "            Log.Trace($"BitfinexSubscriptionManager.OnReconnectRequested(): IsOpen:{webSocket.IsOpen} ReadyState:{webSocket.ReadyState} [Id: {connectionHandler.ConnectionId}]"); " is 165.
Long Statement,QuantConnect.Brokerages.Bitfinex,BitfinexSubscriptionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSubscriptionManager.cs,OnReconnectRequested,The length of the statement  "                Log.Trace($"BitfinexSubscriptionManager.OnReconnectRequested(): Websocket connecting. [Id: {connectionHandler.ConnectionId}]"); " is 127.
Long Statement,QuantConnect.Brokerages.Bitfinex,BitfinexSubscriptionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSubscriptionManager.cs,OnReconnectRequested,The length of the statement  "                Log.Trace($"BitfinexSubscriptionManager.OnReconnectRequested(): Websocket not open: IsOpen:{webSocket.IsOpen} ReadyState:{webSocket.ReadyState} [Id: {connectionHandler.ConnectionId}]"); " is 185.
Long Statement,QuantConnect.Brokerages.Bitfinex,BitfinexSubscriptionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSubscriptionManager.cs,OnReconnectRequested,The length of the statement  "            Log.Trace($"BitfinexSubscriptionManager.OnReconnectRequested(): Reconnected: IsOpen:{webSocket.IsOpen} ReadyState:{webSocket.ReadyState} [Id: {connectionHandler.ConnectionId}]"); " is 178.
Long Statement,QuantConnect.Brokerages.Bitfinex,BitfinexSubscriptionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSubscriptionManager.cs,OnReconnectRequested,The length of the statement  "            Log.Trace($"BitfinexSubscriptionManager.OnReconnectRequested(): Resubscribing channels. [Id: {connectionHandler.ConnectionId}]"); " is 129.
Long Statement,QuantConnect.Brokerages.Bitfinex,BitfinexSubscriptionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSubscriptionManager.cs,OnMessage,The length of the statement  "                _brokerage.OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Error' -1' $"Parsing wss message failed. Data: {e.Message} Exception: {exception}")); " is 153.
Long Statement,QuantConnect.Brokerages.Bitfinex,BitfinexSubscriptionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSubscriptionManager.cs,OnSnapshot,The length of the statement  "                        _brokerage.OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' -1' $"Message received from unknown channel Id {channelId}")); " is 139.
Long Statement,QuantConnect.Brokerages.Bitfinex,BitfinexSubscriptionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSubscriptionManager.cs,OnSnapshot,The length of the statement  "                        _brokerage.OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' -1' $"Message received from unknown channel Id {channelId}")); " is 139.
Long Statement,QuantConnect.Brokerages.Bitfinex,BitfinexSubscriptionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSubscriptionManager.cs,OnUpdate,The length of the statement  "                        _brokerage.OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' -1' $"Message received from unknown channel Id {channelId}")); " is 139.
Long Statement,QuantConnect.Brokerages.Bitfinex,BitfinexSubscriptionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSubscriptionManager.cs,OnUpdate,The length of the statement  "                        _brokerage.OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' -1' $"Message received from unknown channel Id {channelId}")); " is 139.
Long Statement,QuantConnect.Brokerages.Bitfinex,BitfinexSymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSymbolMapper.cs,GetLeanSymbol,The length of the statement  "            return Symbol.Create(ConvertBitfinexSymbolToLeanSymbol(brokerageSymbol)' GetBrokerageSecurityType(brokerageSymbol)' Market.Bitfinex); " is 133.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,Connect,The length of the statement  "                    err.Message.Contains("ORA-20003") ? "API connections are not available on Mini accounts. If you have a standard account contact api@fxcm.com to enable API access" : " is 164.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,UpdateOrder,The length of the statement  "            var orderReplaceRequest = MessageGenerator.generateOrderReplaceRequest(""' fxcmOrder.getOrderID()' fxcmOrder.getSide()' fxcmOrder.getOrdType()' price' fxcmOrder.getAccount()); " is 175.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,CancelOrder,The length of the statement  "            var orderCancelRequest = MessageGenerator.generateOrderCancelRequest(""' fxcmOrder.getOrderID()' fxcmOrder.getSide()' fxcmOrder.getAccount()); " is 142.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,GetHistory,The length of the statement  "                exchangeTimeZone = MarketHoursDatabase.FromDataFolder().GetExchangeHours(Market.FXCM' request.Symbol' request.Symbol.SecurityType).TimeZone; " is 140.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,GetHistory,The length of the statement  "                Log.Debug($"FxcmBrokerage.GetHistory(): Requesting {end.ToIso8601Invariant()} to {request.StartTimeUtc.ToIso8601Invariant()}"); " is 127.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,GetHistory,The length of the statement  "                    // 5% of the time its because of an internet / time of day / api settings / timeout: throw if this is the *second* attempt. " is 123.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,GetHistory,The length of the statement  "                            $"{((decimal) HistoryResponseTimeout / 1000).ToStringInvariant()} seconds. This may be because there is no data' retrying..." " is 125.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,GetHistory,The length of the statement  "                    // Assuming Timeout: Save end time and if have the same endtime next time' break since its likely there's no data after that time. " is 130.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,Subscribe,The length of the statement  "                        exchangeTimeZone = MarketHoursDatabase.FromDataFolder().GetExchangeHours(Market.FXCM' symbol' symbol.SecurityType).TimeZone; " is 124.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,LoadAccounts,The length of the statement  "                throw new NotSupportedException("FxcmBrokerage.LoadAccounts(): The Lean engine does not support accounts with Hedging enabled. " + " is 130.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,LoadAccounts,The length of the statement  "                    "Please contact FXCM Active Trader support to disable Hedging. They can be reached at 646.432.2970 or by email' activetrader@fxcm.com." " is 135.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,ConvertOrder,The length of the statement  "                throw new NotSupportedException("FxcmBrokerage.ConvertOrder(): The FXCM order type " + fxcmOrder.getOrdType() + " is not supported."); " is 134.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerageFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerageFactory.cs,CreateBrokerage,The length of the statement  "            var brokerage = new FxcmBrokerage(algorithm.Transactions' algorithm.Portfolio' server' terminal' userName' password' accountId); " is 128.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmSymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmSymbolMapper.cs,GetLeanSymbol,The length of the statement  "            return Symbol.Create(ConvertFxcmSymbolToLeanSymbol(brokerageSymbol)' GetBrokerageSecurityType(brokerageSymbol)' Market.FXCM); " is 125.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,GetAuthenticationToken,The length of the statement  "            var token = GetAuthenticationToken(body?.Value.ToString() ?? string.Empty' request.Method.ToString().ToUpperInvariant()' url); " is 126.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,ConvertOrderType,The length of the statement  "            throw new NotSupportedException($"GDAXBrokerage.ConvertOrderType: Unsupported order type:{orderType.ToStringInvariant()}"); " is 123.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,PlaceOrder,The length of the statement  "            payload.price = (order as LimitOrder)?.LimitPrice ?? (order as StopLimitOrder)?.LimitPrice ?? ((order as StopMarketOrder)?.StopPrice ?? 0); " is 139.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,PlaceOrder,The length of the statement  "                    OnOrderEvent(new OrderEvent(order' DateTime.UtcNow' orderFee' "GDAX Order Event") { Status = OrderStatus.Invalid' Message = errorMessage }); " is 140.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,PlaceOrder,The length of the statement  "                    OnOrderEvent(new OrderEvent(order' DateTime.UtcNow' orderFee' "GDAX Order Event") { Status = OrderStatus.Invalid' Message = errorMessage }); " is 140.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,PlaceOrder,The length of the statement  "            var message = $"Order failed' Order Id: {order.Id} timestamp: {order.Time} quantity: {order.Quantity} content: {response.Content}"; " is 131.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,GetOpenOrders,The length of the statement  "                throw new Exception($"GDAXBrokerage.GetOpenOrders: request failed: [{(int) response.StatusCode}] {response.StatusDescription}' Content: {response.Content}' ErrorMessage: {response.ErrorMessage}"); " is 196.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,GetCashBalance,The length of the statement  "                throw new Exception($"GDAXBrokerage.GetCashBalance: request failed: [{(int)response.StatusCode}] {response.StatusDescription}' Content: {response.Content}' ErrorMessage: {response.ErrorMessage}"); " is 196.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,GetHistory,The length of the statement  "            Log.Trace($"GDAXBrokerage.GetHistory(): Submitting request: {request.Symbol.Value}: {request.Resolution} {request.StartTimeUtc} UTC -> {request.EndTimeUtc} UTC"); " is 162.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,GetHistoryFromCandles,The length of the statement  "                var restRequest = new RestRequest($"/products/{productId}/candles?start={startTime:o}&end={endTime:o}&granularity={granularity}"' Method.GET); " is 142.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,GetHistoryFromCandles,The length of the statement  "                        $"History request failed: [{(int)response.StatusCode}] {response.StatusDescription}' Content: {response.Content}' ErrorMessage: {response.ErrorMessage}")); " is 155.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,OnMessageImpl,The length of the statement  "                    OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' -1' $"GDAXBrokerage.OnMessage: {error.Message} {error.Reason}")); " is 131.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,OnMessageImpl,The length of the statement  "                else if (raw.Type == "open" || raw.Type == "change" || raw.Type == "done" || raw.Type == "received" || raw.Type == "subscriptions" || raw.Type == "last_match") " is 159.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,OnMessageImpl,The length of the statement  "                OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Error' -1' $"Parsing wss message failed. Data: {e.Message} Exception: {exception}")); " is 142.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,OrderMatch,The length of the statement  "                .FirstOrDefault(o => o.Value.BrokerId.Contains(message.MakerOrderId) || o.Value.BrokerId.Contains(message.TakerOrderId)); " is 121.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,OrderMatch,The length of the statement  "                var isFinalFill = Math.Abs(message.Size) == Math.Abs(order.Quantity) || Math.Abs(split.OrderQuantity) == Math.Abs(split.TotalQuantity); " is 135.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,GetTick,The length of the statement  "                throw new Exception($"GDAXBrokerage.GetTick: request failed: [{(int)response.StatusCode}] {response.StatusDescription}' Content: {response.Content}' ErrorMessage: {response.ErrorMessage}"); " is 189.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.Client,CommissionReportEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\CommissionReportEventArgs.cs,ToString,The length of the statement  "            return $"ExecId: {CommissionReport.ExecId}' Commission: {CommissionReport.Commission}' Currency: {CommissionReport.Currency}"; " is 126.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.Client,ExecutionDetailsEventArgs,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\ExecutionDetailsEventArgs.cs,ToString,The length of the statement  "            return $"RequestId: {RequestId}' Symbol: {Contract.Symbol}' OrderId: {Execution.OrderId}' Time: {Execution.Time}' Side: {Execution.Side}' Shares: {Execution.Shares}' Price: {Execution.Price}' CumQty: {Execution.CumQty}' PermId: {Execution.PermId}' Account: {Execution.AcctNumber}' ExecId: {Execution.ExecId}"; " is 309.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,tickEFP,The length of the statement  "            OnTickEfp(new TickEfpEventArgs(tickerId' tickType' basisPoints' formattedBasisPoints' impliedFuture' holdDays' futureExpiry' dividendImpact' " is 140.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,tickOptionComputation,The length of the statement  "            OnTickOptionComputation(new TickOptionComputationEventArgs(tickerId' field' impliedVolatility' delta' optPrice' pvDividend' gamma' vega' theta' " is 143.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,updatePortfolio,The length of the statement  "            OnUpdatePortfolio(new UpdatePortfolioEventArgs(contract' positionValue' marketPrice' marketValue' averageCost' unrealisedPnl' realisedPnl' " is 138.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,orderStatus,The length of the statement  "            OnOrderStatus(new OrderStatusEventArgs(orderId' status' filledValue' remainingValue' avgFillPrice' permId' parentId' lastFillPrice' clientId' whyHeld)); " is 152.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,updateMktDepthL2,The length of the statement  "            OnUpdateMarketDepthLevel2(new UpdateMarketDepthLevel2EventArgs(tickerId' position' marketMaker' operation' side' price' size)); " is 127.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,securityDefinitionOptionParameter,The length of the statement  "            OnSecurityDefinitionOptionParameter(new SecurityDefinitionOptionParameterEventArgs(reqId' exchange' underlyingConId' tradingClass' " is 130.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.FinancialAdvisor,FinancialAdvisorConfiguration,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\FinancialAdvisor\FinancialAdvisorConfiguration.cs,Load,The length of the statement  "                Log.Trace("InteractiveBrokersBrokerage.DownloadFinancialAdvisorConfiguration(): Download FA Aliases failed. Operation took longer than 2 seconds."); " is 148.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.FinancialAdvisor,FinancialAdvisorConfiguration,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\FinancialAdvisor\FinancialAdvisorConfiguration.cs,Load,The length of the statement  "                Log.Trace("InteractiveBrokersBrokerage.DownloadFinancialAdvisorConfiguration(): Download FA Groups failed. Operation took longer than 2 seconds."); " is 147.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.FinancialAdvisor,FinancialAdvisorConfiguration,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\FinancialAdvisor\FinancialAdvisorConfiguration.cs,Load,The length of the statement  "                Log.Trace("InteractiveBrokersBrokerage.DownloadFinancialAdvisorConfiguration(): Download FA Profiles failed. Operation took longer than 2 seconds."); " is 149.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.FinancialAdvisor,FinancialAdvisorConfiguration,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\FinancialAdvisor\FinancialAdvisorConfiguration.cs,Load,The length of the statement  "                Log.Trace("InteractiveBrokersBrokerage.DownloadFinancialAdvisorConfiguration(): FA Aliases found: " + _accountAliases.Count); " is 125.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.FinancialAdvisor,FinancialAdvisorConfiguration,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\FinancialAdvisor\FinancialAdvisorConfiguration.cs,Load,The length of the statement  "                Log.Trace("InteractiveBrokersBrokerage.DownloadFinancialAdvisorConfiguration(): FA Groups found: " + _accountGroups.Count); " is 123.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.FinancialAdvisor,FinancialAdvisorConfiguration,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\FinancialAdvisor\FinancialAdvisorConfiguration.cs,Load,The length of the statement  "                Log.Trace("InteractiveBrokersBrokerage.DownloadFinancialAdvisorConfiguration(): FA Profiles found: " + _allocationProfiles.Count); " is 130.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,UpdateOrder,The length of the statement  "                Log.Trace("InteractiveBrokersBrokerage.UpdateOrder(): Symbol: " + order.Symbol.Value + " Quantity: " + order.Quantity + " Status: " + order.Status); " is 148.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetOpenOrdersInternal,The length of the statement  "                    Log.Trace($"InteractiveBrokersBrokerage.GetOpenOrders(): Updating nextValidId from {_nextValidId} to {lastOrderId + 1}"); " is 121.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetCashBalance,The length of the statement  "                    Log.Trace("InteractiveBrokersBrokerage.GetCashBalance(): not connected within reset times' returning existing balances"); " is 121.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetCashBalance,The length of the statement  "                Log.Trace($"InteractiveBrokersBrokerage.GetCashBalance(): no balances found' IsConnected: {IsConnected}' _disconnected1100Fired: {_disconnected1100Fired}"); " is 156.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,Connect,The length of the statement  "                Log.Trace($"InteractiveBrokersBrokerage.Connect(): Data subscription count {subscribedSymbolsCount}' restoring data subscriptions is required"); " is 144.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,Connect,The length of the statement  "                        Log.Trace("InteractiveBrokersBrokerage.Connect(): IB message processing thread started: #" + Thread.CurrentThread.ManagedThreadId); " is 131.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,Connect,The length of the statement  "                                Log.Error("InteractiveBrokersBrokerage.Connect(): Error in message processing thread #" + Thread.CurrentThread.ManagedThreadId + ": " + error); " is 143.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,Connect,The length of the statement  "                        Log.Trace("InteractiveBrokersBrokerage.Connect(): IB message processing thread ended: #" + Thread.CurrentThread.ManagedThreadId); " is 129.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,Connect,The length of the statement  "                    if (!_client.Connected) throw new Exception("InteractiveBrokersBrokerage.Connect(): Connection returned but was not in connected state."); " is 138.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,Connect,The length of the statement  "                OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Error' "ConnectionState"' "Unexpected' not connected state. Unable to connect to Interactive Brokers. Terminating algorithm.")); " is 185.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,IBPlaceOrder,The length of the statement  "                throw new InvalidOperationException("InteractiveBrokersBrokerage.IBPlaceOrder(): Unable to place order while not connected."); " is 126.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetUniqueKey,The length of the statement  "            return $"{contract} {contract.LastTradeDateOrContractMonth.ToStringInvariant()} {contract.Strike.ToStringInvariant()} {contract.Right}"; " is 136.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetContractDetails,The length of the statement  "                Log.Error("InteractiveBrokersBrokerage.GetContractDetails(): failed to receive response from IB within {0} seconds"' timeout); " is 126.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,FindContracts,The length of the statement  "                Log.Error("InteractiveBrokersBrokerage.FindContracts(): failed to receive response from IB within {0} seconds"' timeout); " is 121.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,HandleError,The length of the statement  "                    Log.Error($"InteractiveBrokersBrokerage.HandleError.InvalidateOrder(): Unable to locate order with BrokerageID {requestId}"); " is 125.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,TryWaitForReconnect,The length of the statement  "            // IB has server reset schedule: https://www.interactivebrokers.com/en/?f=%2Fen%2Fsoftware%2FsystemStatus.php%3Fib_entity%3Dllc " is 127.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,TryWaitForReconnect,The length of the statement  "                    Log.Trace("InteractiveBrokersBrokerage.TryWaitForReconnect(): Reset time finished and still disconnected. Restarting..."); " is 122.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,TryWaitForReconnect,The length of the statement  "                Log.Trace("InteractiveBrokersBrokerage.TryWaitForReconnect(): Within server reset times' trying to wait for reconnect..."); " is 123.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,HandleOrderStatusUpdates,The length of the statement  "                        Log.Error("InteractiveBrokersBrokerage.HandleOrderStatusUpdates(): Not connected; update dropped' _client.Connected: {0}' _disconnected1100Fired: {1}"' _client.Connected' _disconnected1100Fired); " is 195.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,HandleOrderStatusUpdates,The length of the statement  "                    Log.Error("InteractiveBrokersBrokerage.HandleOrderStatusUpdates(): Unable to locate order with BrokerageID " + update.OrderId); " is 127.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,HandleOrderStatusUpdates,The length of the statement  "                        Log.Trace("InteractiveBrokersBrokerage.HandleOrderStatusUpdates(): ignoring update in closed state - order.Status: " + order.Status + "' status: " + status); " is 157.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,HandleOrderStatusUpdates,The length of the statement  "                        Log.Trace("InteractiveBrokersBrokerage.HandleOrderStatusUpdates(): ignoring status " + status + " after partial fills"); " is 120.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,HandleExecutionDetails,The length of the statement  "                        Log.Error("InteractiveBrokersBrokerage.HandleExecutionDetails(): Not connected; update dropped' _client.Connected: {0}' _disconnected1100Fired: {1}"' _client.Connected' _disconnected1100Fired); " is 193.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,HandleExecutionDetails,The length of the statement  "                    Log.Error("InteractiveBrokersBrokerage.HandleExecutionDetails(): Unable to locate order with BrokerageID " + executionDetails.Execution.OrderId); " is 145.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,HandleCommissionReport,The length of the statement  "                    Log.Error("InteractiveBrokersBrokerage.HandleExecutionDetails(): Unable to locate order with BrokerageID " + execution.OrderId); " is 128.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,CreateContract,The length of the statement  "                contract.Multiplier = _securityProvider.GetSecurity(symbol)?.SymbolProperties.ContractMultiplier.ToString(CultureInfo.InvariantCulture) ?? "100"; " is 145.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,ConvertTradeBar,The length of the statement  "            return new TradeBar(time' symbol' (decimal)historyBar.Bar.Open' (decimal)historyBar.Bar.High' (decimal)historyBar.Bar.Low' " is 122.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,MapSymbol,The length of the statement  "                var contractDate = DateTime.ParseExact(contract.LastTradeDateOrContractMonth' DateFormat.EightCharacter' CultureInfo.InvariantCulture); " is 135.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,MapSymbol,The length of the statement  "                var expiryDate = DateTime.ParseExact(contract.LastTradeDateOrContractMonth' DateFormat.EightCharacter' CultureInfo.InvariantCulture); " is 133.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,IsWithinScheduledServerResetTimes,The length of the statement  "            // During the Friday evening reset period' all services will be unavailable in all regions for the duration of the reset. " is 121.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetRealTimeTickTime,The length of the statement  "                exchangeTimeZone = MarketHoursDatabase.FromDataFolder().GetExchangeHours(symbol.ID.Market' symbol' symbol.SecurityType).TimeZone; " is 129.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,LookupSymbols,The length of the statement  "            Func<string' int> exchangeFilter = exchange => securityType == SecurityType.Future ? Array.IndexOf(futuresExchanges' exchange) : 0; " is 131.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,LookupSymbols,The length of the statement  "                    Log.Trace("InteractiveBrokersBrokerage.LookupSymbols(): Removed contract(s) for having expiry in the past: {0}"' string.Join("'"' removedSymbols.Select(x => x.Value))); " is 168.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetHistory,The length of the statement  "            Log.Trace($"InteractiveBrokersBrokerage::GetHistory(): Submitting request: {request.Symbol.Value} ({contract}): {request.Resolution} {startTime} UTC -> {endTime} UTC"); " is 168.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetHistory,The length of the statement  "                exchangeTimeZone = MarketHoursDatabase.FromDataFolder().GetExchangeHours(request.Symbol.ID.Market' request.Symbol' request.Symbol.SecurityType).TimeZone; " is 153.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetHistory,The length of the statement  "                var historyBid = GetHistory(request' contract' startTime' endTime' exchangeTimeZone' duration' resolution' HistoricalDataType.Bid); " is 131.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetHistory,The length of the statement  "                var historyAsk = GetHistory(request' contract' startTime' endTime' exchangeTimeZone' duration' resolution' HistoricalDataType.Ask); " is 131.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetHistory,The length of the statement  "                history = GetHistory(request' contract' startTime' endTime' exchangeTimeZone' duration' resolution' HistoricalDataType.Trades); " is 127.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,LoadIbServerInformation,The length of the statement  "                            Log.Error($"InteractiveBrokersBrokerage.LoadIbServerInformation(): Unknown server name: {_ibServerName}' region set to {_ibServerRegion}"); " is 139.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,LoadIbServerInformation,The length of the statement  "                Log.Error($"InteractiveBrokersBrokerage.LoadIbServerInformation(): Unable to find the server name in the IB ini file: {iniFileName}' region set to {_ibServerRegion}"); " is 167.
Long Statement,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,GetRates,The length of the statement  "            var requestBuilder = new StringBuilder(EndpointResolver.ResolveEndpoint(Environment' Server.Rates) + "prices?instruments="); " is 124.
Long Statement,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,PlaceOrder,The length of the statement  "            // If 'marketOrderRemainingQuantity < order.AbsoluteQuantity' is false it means the order was not even PartiallyFilled' wait for callback " is 137.
Long Statement,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,GetOrderList,The length of the statement  "            var requestString = EndpointResolver.ResolveEndpoint(Environment' Server.Account) + "accounts/" + AccountId + "/orders"; " is 120.
Long Statement,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,GetPositions,The length of the statement  "            var requestString = EndpointResolver.ResolveEndpoint(Environment' Server.Account) + "accounts/" + accountId + "/positions"; " is 123.
Long Statement,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,PopulateOrderRequestParameters,The length of the statement  "                        //Orders can be submitted with lower and upper bounds. If the market price on execution falls outside these bounds' it is considered a "Bounds Violation" and the order is cancelled. " is 181.
Long Statement,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,PopulateOrderRequestParameters,The length of the statement  "                        //Orders can be submitted with lower and upper bounds. If the market price on execution falls outside these bounds' it is considered a "Bounds Violation" and the order is cancelled. " is 181.
Long Statement,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,PostOrderAsync,The length of the statement  "            var requestString = EndpointResolver.ResolveEndpoint(Environment' Server.Account) + "accounts/" + AccountId + "/orders"; " is 120.
Long Statement,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,UpdateOrder,The length of the statement  "            var orderRequest = EndpointResolver.ResolveEndpoint(Environment' Server.Account) + "accounts/" + AccountId + "/orders/" + orderId; " is 130.
Long Statement,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,UpdateOrder,The length of the statement  "                var requestString = EndpointResolver.ResolveEndpoint(Environment' Server.Account) + "accounts/" + AccountId + "/orders/" + orderId; " is 131.
Long Statement,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,UpdateOrder,The length of the statement  "                OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' "UpdateFailed"' "Failed to update Oanda order id: " + orderId + ".")); " is 136.
Long Statement,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,CancelOrder,The length of the statement  "            var requestString = EndpointResolver.ResolveEndpoint(Environment' Server.Account) + "accounts/" + AccountId + "/orders/" + orderId; " is 131.
Long Statement,QuantConnect.Brokerages.Oanda,OandaRestApiV20,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV20.cs,PlaceOrder,The length of the statement  "            // If 'marketOrderRemainingQuantity < order.AbsoluteQuantity' is false it means the order was not even PartiallyFilled' wait for callback " is 137.
Long Statement,QuantConnect.Brokerages.Oanda,OandaRestApiV20,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV20.cs,DownloadTradeBars,The length of the statement  "            var response = _apiRest.GetInstrumentCandles(Authorization' oandaSymbol' null' "M"' ToGranularity(resolution).ToString()' null' startUtc' endUtc); " is 146.
Long Statement,QuantConnect.Brokerages.Oanda,OandaRestApiV20,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV20.cs,DownloadQuoteBars,The length of the statement  "            var response = _apiRest.GetInstrumentCandles(Authorization' oandaSymbol' null' "BA"' ToGranularity(resolution).ToString()' OandaBrokerage.MaxBarsPerRequest' startUtc); " is 167.
Long Statement,QuantConnect.Brokerages.Oanda,OandaRestApiV20,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV20.cs,ConvertOrder,The length of the statement  "                        "An existing " + type + " working order was found and is currently unsupported. Please manually cancel the order before restarting the algorithm."); " is 148.
Long Statement,QuantConnect.Brokerages.Oanda,OandaBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaBrokerage.cs,GetHistory,The length of the statement  "            var exchangeTimeZone = MarketHoursDatabase.FromDataFolder().GetExchangeHours(Market.Oanda' request.Symbol' request.Symbol.SecurityType).TimeZone; " is 145.
Long Statement,QuantConnect.Brokerages.Oanda,OandaBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaBrokerage.cs,GetHistory,The length of the statement  "                var quoteBars = _api.DownloadQuoteBars(request.Symbol' startDateTime' request.EndTimeUtc' request.Resolution' exchangeTimeZone).ToList(); " is 137.
Long Statement,QuantConnect.Brokerages.Oanda,OandaBrokerageFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaBrokerageFactory.cs,CreateBrokerage,The length of the statement  "            var brokerage = new OandaBrokerage(algorithm.Transactions' algorithm.Portfolio' environment' accessToken' accountId' agent); " is 124.
Long Statement,QuantConnect.Brokerages.Oanda,OandaSymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaSymbolMapper.cs,GetLeanSymbol,The length of the statement  "            return Symbol.Create(ConvertOandaSymbolToLeanSymbol(brokerageSymbol)' GetBrokerageSecurityType(brokerageSymbol)' Market.Oanda); " is 127.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrder,The length of the statement  "             ApiResponse<InlineResponse2009> localVarResponse = CancelOrderWithHttpInfo(authorization' accountID' orderSpecifier' acceptDatetimeFormat); " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderWithHttpInfo,The length of the statement  "            if (orderSpecifier != null) localVarPathParams.Add("orderSpecifier"' Configuration.ApiClient.ParameterToString(orderSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderAsync,The length of the statement  "             ApiResponse<InlineResponse2009> localVarResponse = await CancelOrderAsyncWithHttpInfo(authorization' accountID' orderSpecifier' acceptDatetimeFormat); " is 150.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderAsyncWithHttpInfo,The length of the statement  "            if (orderSpecifier != null) localVarPathParams.Add("orderSpecifier"' Configuration.ApiClient.ParameterToString(orderSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePosition,The length of the statement  "             ApiResponse<InlineResponse20014> localVarResponse = ClosePositionWithHttpInfo(authorization' accountID' instrument' closePositionBody' acceptDatetimeFormat); " is 157.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionWithHttpInfo,The length of the statement  "            if (instrument != null) localVarPathParams.Add("instrument"' Configuration.ApiClient.ParameterToString(instrument)); // path parameter " is 134.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionAsync,The length of the statement  "             ApiResponse<InlineResponse20014> localVarResponse = await ClosePositionAsyncWithHttpInfo(authorization' accountID' instrument' closePositionBody' acceptDatetimeFormat); " is 168.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionAsyncWithHttpInfo,The length of the statement  "            if (instrument != null) localVarPathParams.Add("instrument"' Configuration.ApiClient.ParameterToString(instrument)); // path parameter " is 134.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTrade,The length of the statement  "             ApiResponse<InlineResponse20026> localVarResponse = CloseTradeWithHttpInfo(authorization' accountID' tradeSpecifier' closeTradeBody' acceptDatetimeFormat); " is 155.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeWithHttpInfo,The length of the statement  "            if (tradeSpecifier != null) localVarPathParams.Add("tradeSpecifier"' Configuration.ApiClient.ParameterToString(tradeSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeAsync,The length of the statement  "             ApiResponse<InlineResponse20026> localVarResponse = await CloseTradeAsyncWithHttpInfo(authorization' accountID' tradeSpecifier' closeTradeBody' acceptDatetimeFormat); " is 166.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeAsyncWithHttpInfo,The length of the statement  "            if (tradeSpecifier != null) localVarPathParams.Add("tradeSpecifier"' Configuration.ApiClient.ParameterToString(tradeSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ConfigureAccount,The length of the statement  "             ApiResponse<InlineResponse2004> localVarResponse = ConfigureAccountWithHttpInfo(authorization' accountID' acceptDatetimeFormat' configureAccountBody); " is 150.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ConfigureAccountWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ConfigureAccountWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ConfigureAccountWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ConfigureAccountAsync,The length of the statement  "             ApiResponse<InlineResponse2004> localVarResponse = await ConfigureAccountAsyncWithHttpInfo(authorization' accountID' acceptDatetimeFormat' configureAccountBody); " is 161.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ConfigureAccountAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ConfigureAccountAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ConfigureAccountAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrder,The length of the statement  "             ApiResponse<InlineResponse201> localVarResponse = CreateOrderWithHttpInfo(authorization' accountID' createOrderBody' acceptDatetimeFormat); " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderAsync,The length of the statement  "             ApiResponse<InlineResponse201> localVarResponse = await CreateOrderAsyncWithHttpInfo(authorization' accountID' createOrderBody' acceptDatetimeFormat); " is 150.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccount,The length of the statement  "             ApiResponse<InlineResponse2001> localVarResponse = GetAccountWithHttpInfo(authorization' accountID' acceptDatetimeFormat); " is 122.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountAsync,The length of the statement  "             ApiResponse<InlineResponse2001> localVarResponse = await GetAccountAsyncWithHttpInfo(authorization' accountID' acceptDatetimeFormat); " is 133.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChanges,The length of the statement  "             ApiResponse<InlineResponse2005> localVarResponse = GetAccountChangesWithHttpInfo(authorization' accountID' acceptDatetimeFormat' sinceTransactionID); " is 149.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesWithHttpInfo,The length of the statement  "            if (sinceTransactionID != null) localVarQueryParams.Add("sinceTransactionID"' Configuration.ApiClient.ParameterToString(sinceTransactionID)); // query parameter " is 160.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesAsync,The length of the statement  "             ApiResponse<InlineResponse2005> localVarResponse = await GetAccountChangesAsyncWithHttpInfo(authorization' accountID' acceptDatetimeFormat' sinceTransactionID); " is 160.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesAsyncWithHttpInfo,The length of the statement  "            if (sinceTransactionID != null) localVarQueryParams.Add("sinceTransactionID"' Configuration.ApiClient.ParameterToString(sinceTransactionID)); // query parameter " is 160.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstruments,The length of the statement  "             ApiResponse<InlineResponse2003> localVarResponse = GetAccountInstrumentsWithHttpInfo(authorization' accountID' instruments); " is 124.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetAccountInstruments"); " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsWithHttpInfo,The length of the statement  "            if (instruments != null) localVarQueryParams.Add("instruments"' Configuration.ApiClient.ParameterToString(instruments)); // query parameter " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsAsync,The length of the statement  "             ApiResponse<InlineResponse2003> localVarResponse = await GetAccountInstrumentsAsyncWithHttpInfo(authorization' accountID' instruments); " is 135.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsAsyncWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetAccountInstruments"); " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsAsyncWithHttpInfo,The length of the statement  "            if (instruments != null) localVarQueryParams.Add("instruments"' Configuration.ApiClient.ParameterToString(instruments)); // query parameter " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountSummary,The length of the statement  "             ApiResponse<InlineResponse2002> localVarResponse = GetAccountSummaryWithHttpInfo(authorization' accountID' acceptDatetimeFormat); " is 129.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountSummaryWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountSummaryWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountSummaryWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountSummaryAsync,The length of the statement  "             ApiResponse<InlineResponse2002> localVarResponse = await GetAccountSummaryAsyncWithHttpInfo(authorization' accountID' acceptDatetimeFormat); " is 140.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountSummaryAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountSummaryAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountSummaryAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetExternalUserInfoWithHttpInfo,The length of the statement  "            if (userSpecifier != null) localVarPathParams.Add("userSpecifier"' Configuration.ApiClient.ParameterToString(userSpecifier)); // path parameter " is 143.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetExternalUserInfoWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetExternalUserInfoAsync,The length of the statement  "             ApiResponse<InlineResponse20016> localVarResponse = await GetExternalUserInfoAsyncWithHttpInfo(authorization' userSpecifier); " is 125.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetExternalUserInfoAsyncWithHttpInfo,The length of the statement  "            if (userSpecifier != null) localVarPathParams.Add("userSpecifier"' Configuration.ApiClient.ParameterToString(userSpecifier)); // path parameter " is 143.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetExternalUserInfoAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandles,The length of the statement  "             ApiResponse<InlineResponse20029> localVarResponse = GetInstrumentCandlesWithHttpInfo(authorization' instrument' acceptDatetimeFormat' price' granularity' count' from' to' smooth' includeFirst' dailyAlignment' alignmentTimezone' weeklyAlignment); " is 245.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetInstrumentCandles"); " is 120.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The length of the statement  "            if (instrument != null) localVarPathParams.Add("instrument"' Configuration.ApiClient.ParameterToString(instrument)); // path parameter " is 134.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The length of the statement  "            if (price != null) localVarQueryParams.Add("price"' Configuration.ApiClient.ParameterToString(price)); // query parameter " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The length of the statement  "            if (granularity != null) localVarQueryParams.Add("granularity"' Configuration.ApiClient.ParameterToString(granularity)); // query parameter " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The length of the statement  "            if (count != null) localVarQueryParams.Add("count"' Configuration.ApiClient.ParameterToString(count)); // query parameter " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The length of the statement  "            if (smooth != null) localVarQueryParams.Add("smooth"' Configuration.ApiClient.ParameterToString(smooth)); // query parameter " is 124.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The length of the statement  "            if (includeFirst != null) localVarQueryParams.Add("includeFirst"' Configuration.ApiClient.ParameterToString(includeFirst)); // query parameter " is 142.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The length of the statement  "            if (dailyAlignment != null) localVarQueryParams.Add("dailyAlignment"' Configuration.ApiClient.ParameterToString(dailyAlignment)); // query parameter " is 148.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The length of the statement  "            if (alignmentTimezone != null) localVarQueryParams.Add("alignmentTimezone"' Configuration.ApiClient.ParameterToString(alignmentTimezone)); // query parameter " is 157.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The length of the statement  "            if (weeklyAlignment != null) localVarQueryParams.Add("weeklyAlignment"' Configuration.ApiClient.ParameterToString(weeklyAlignment)); // query parameter " is 151.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsync,The length of the statement  "             ApiResponse<InlineResponse20029> localVarResponse = await GetInstrumentCandlesAsyncWithHttpInfo(authorization' instrument' acceptDatetimeFormat' price' granularity' count' from' to' smooth' includeFirst' dailyAlignment' alignmentTimezone' weeklyAlignment); " is 256.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetInstrumentCandles"); " is 120.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The length of the statement  "            if (instrument != null) localVarPathParams.Add("instrument"' Configuration.ApiClient.ParameterToString(instrument)); // path parameter " is 134.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The length of the statement  "            if (price != null) localVarQueryParams.Add("price"' Configuration.ApiClient.ParameterToString(price)); // query parameter " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The length of the statement  "            if (granularity != null) localVarQueryParams.Add("granularity"' Configuration.ApiClient.ParameterToString(granularity)); // query parameter " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The length of the statement  "            if (count != null) localVarQueryParams.Add("count"' Configuration.ApiClient.ParameterToString(count)); // query parameter " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The length of the statement  "            if (smooth != null) localVarQueryParams.Add("smooth"' Configuration.ApiClient.ParameterToString(smooth)); // query parameter " is 124.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The length of the statement  "            if (includeFirst != null) localVarQueryParams.Add("includeFirst"' Configuration.ApiClient.ParameterToString(includeFirst)); // query parameter " is 142.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The length of the statement  "            if (dailyAlignment != null) localVarQueryParams.Add("dailyAlignment"' Configuration.ApiClient.ParameterToString(dailyAlignment)); // query parameter " is 148.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The length of the statement  "            if (alignmentTimezone != null) localVarQueryParams.Add("alignmentTimezone"' Configuration.ApiClient.ParameterToString(alignmentTimezone)); // query parameter " is 157.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The length of the statement  "            if (weeklyAlignment != null) localVarQueryParams.Add("weeklyAlignment"' Configuration.ApiClient.ParameterToString(weeklyAlignment)); // query parameter " is 151.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrder,The length of the statement  "             ApiResponse<InlineResponse2008> localVarResponse = GetOrderWithHttpInfo(authorization' accountID' orderSpecifier' acceptDatetimeFormat); " is 136.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderWithHttpInfo,The length of the statement  "            if (orderSpecifier != null) localVarPathParams.Add("orderSpecifier"' Configuration.ApiClient.ParameterToString(orderSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderAsync,The length of the statement  "             ApiResponse<InlineResponse2008> localVarResponse = await GetOrderAsyncWithHttpInfo(authorization' accountID' orderSpecifier' acceptDatetimeFormat); " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderAsyncWithHttpInfo,The length of the statement  "            if (orderSpecifier != null) localVarPathParams.Add("orderSpecifier"' Configuration.ApiClient.ParameterToString(orderSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionWithHttpInfo,The length of the statement  "            if (instrument != null) localVarPathParams.Add("instrument"' Configuration.ApiClient.ParameterToString(instrument)); // path parameter " is 134.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionAsync,The length of the statement  "             ApiResponse<InlineResponse20013> localVarResponse = await GetPositionAsyncWithHttpInfo(authorization' accountID' instrument); " is 125.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionAsyncWithHttpInfo,The length of the statement  "            if (instrument != null) localVarPathParams.Add("instrument"' Configuration.ApiClient.ParameterToString(instrument)); // path parameter " is 134.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPrices,The length of the statement  "             ApiResponse<InlineResponse20021> localVarResponse = GetPricesWithHttpInfo(authorization' accountID' instruments' acceptDatetimeFormat' since' includeUnitsAvailable); " is 165.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesWithHttpInfo,The length of the statement  "            if (instruments != null) localVarQueryParams.Add("instruments"' Configuration.ApiClient.ParameterToString(instruments)); // query parameter " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesWithHttpInfo,The length of the statement  "            if (since != null) localVarQueryParams.Add("since"' Configuration.ApiClient.ParameterToString(since)); // query parameter " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesWithHttpInfo,The length of the statement  "            if (includeUnitsAvailable != null) localVarQueryParams.Add("includeUnitsAvailable"' Configuration.ApiClient.ParameterToString(includeUnitsAvailable)); // query parameter " is 169.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsync,The length of the statement  "             ApiResponse<InlineResponse20021> localVarResponse = await GetPricesAsyncWithHttpInfo(authorization' accountID' instruments' acceptDatetimeFormat' since' includeUnitsAvailable); " is 176.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsyncWithHttpInfo,The length of the statement  "            if (instruments != null) localVarQueryParams.Add("instruments"' Configuration.ApiClient.ParameterToString(instruments)); // query parameter " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsyncWithHttpInfo,The length of the statement  "            if (since != null) localVarQueryParams.Add("since"' Configuration.ApiClient.ParameterToString(since)); // query parameter " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsyncWithHttpInfo,The length of the statement  "            if (includeUnitsAvailable != null) localVarQueryParams.Add("includeUnitsAvailable"' Configuration.ApiClient.ParameterToString(includeUnitsAvailable)); // query parameter " is 169.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTrade,The length of the statement  "             ApiResponse<InlineResponse20025> localVarResponse = GetTradeWithHttpInfo(authorization' accountID' tradeSpecifier' acceptDatetimeFormat); " is 137.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeWithHttpInfo,The length of the statement  "            if (tradeSpecifier != null) localVarPathParams.Add("tradeSpecifier"' Configuration.ApiClient.ParameterToString(tradeSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeAsync,The length of the statement  "             ApiResponse<InlineResponse20025> localVarResponse = await GetTradeAsyncWithHttpInfo(authorization' accountID' tradeSpecifier' acceptDatetimeFormat); " is 148.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeAsyncWithHttpInfo,The length of the statement  "            if (tradeSpecifier != null) localVarPathParams.Add("tradeSpecifier"' Configuration.ApiClient.ParameterToString(tradeSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransaction,The length of the statement  "             ApiResponse<InlineResponse20018> localVarResponse = GetTransactionWithHttpInfo(authorization' accountID' transactionID' acceptDatetimeFormat); " is 142.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionWithHttpInfo,The length of the statement  "            if (transactionID != null) localVarPathParams.Add("transactionID"' Configuration.ApiClient.ParameterToString(transactionID)); // path parameter " is 143.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionAsync,The length of the statement  "             ApiResponse<InlineResponse20018> localVarResponse = await GetTransactionAsyncWithHttpInfo(authorization' accountID' transactionID' acceptDatetimeFormat); " is 153.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionAsyncWithHttpInfo,The length of the statement  "            if (transactionID != null) localVarPathParams.Add("transactionID"' Configuration.ApiClient.ParameterToString(transactionID)); // path parameter " is 143.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRange,The length of the statement  "             ApiResponse<InlineResponse20019> localVarResponse = GetTransactionRangeWithHttpInfo(authorization' accountID' from' to' acceptDatetimeFormat' type); " is 148.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeAsync,The length of the statement  "             ApiResponse<InlineResponse20019> localVarResponse = await GetTransactionRangeAsyncWithHttpInfo(authorization' accountID' from' to' acceptDatetimeFormat' type); " is 159.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceId,The length of the statement  "             ApiResponse<InlineResponse20019> localVarResponse = GetTransactionsSinceIdWithHttpInfo(authorization' accountID' id' acceptDatetimeFormat); " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetTransactionsSinceId"); " is 122.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdAsync,The length of the statement  "             ApiResponse<InlineResponse20019> localVarResponse = await GetTransactionsSinceIdAsyncWithHttpInfo(authorization' accountID' id' acceptDatetimeFormat); " is 150.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdAsyncWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetTransactionsSinceId"); " is 122.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetUserInfoWithHttpInfo,The length of the statement  "            if (userSpecifier != null) localVarPathParams.Add("userSpecifier"' Configuration.ApiClient.ParameterToString(userSpecifier)); // path parameter " is 143.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetUserInfoWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetUserInfoAsyncWithHttpInfo,The length of the statement  "            if (userSpecifier != null) localVarPathParams.Add("userSpecifier"' Configuration.ApiClient.ParameterToString(userSpecifier)); // path parameter " is 143.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetUserInfoAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListAccountsWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListAccountsAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenPositionsWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenPositionsWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenPositionsAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenPositionsAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenTrades,The length of the statement  "             ApiResponse<InlineResponse20024> localVarResponse = ListOpenTradesWithHttpInfo(authorization' accountID' acceptDatetimeFormat); " is 127.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenTradesWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenTradesWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenTradesWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenTradesAsync,The length of the statement  "             ApiResponse<InlineResponse20024> localVarResponse = await ListOpenTradesAsyncWithHttpInfo(authorization' accountID' acceptDatetimeFormat); " is 138.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenTradesAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenTradesAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenTradesAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrders,The length of the statement  "             ApiResponse<InlineResponse2006> localVarResponse = ListOrdersWithHttpInfo(authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID); " is 163.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersWithHttpInfo,The length of the statement  "            if (state != null) localVarQueryParams.Add("state"' Configuration.ApiClient.ParameterToString(state)); // query parameter " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersWithHttpInfo,The length of the statement  "            if (instrument != null) localVarQueryParams.Add("instrument"' Configuration.ApiClient.ParameterToString(instrument)); // query parameter " is 136.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersWithHttpInfo,The length of the statement  "            if (count != null) localVarQueryParams.Add("count"' Configuration.ApiClient.ParameterToString(count)); // query parameter " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersWithHttpInfo,The length of the statement  "            if (beforeID != null) localVarQueryParams.Add("beforeID"' Configuration.ApiClient.ParameterToString(beforeID)); // query parameter " is 130.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsync,The length of the statement  "             ApiResponse<InlineResponse2006> localVarResponse = await ListOrdersAsyncWithHttpInfo(authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID); " is 174.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsyncWithHttpInfo,The length of the statement  "            if (state != null) localVarQueryParams.Add("state"' Configuration.ApiClient.ParameterToString(state)); // query parameter " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsyncWithHttpInfo,The length of the statement  "            if (instrument != null) localVarQueryParams.Add("instrument"' Configuration.ApiClient.ParameterToString(instrument)); // query parameter " is 136.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsyncWithHttpInfo,The length of the statement  "            if (count != null) localVarQueryParams.Add("count"' Configuration.ApiClient.ParameterToString(count)); // query parameter " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsyncWithHttpInfo,The length of the statement  "            if (beforeID != null) localVarQueryParams.Add("beforeID"' Configuration.ApiClient.ParameterToString(beforeID)); // query parameter " is 130.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrders,The length of the statement  "             ApiResponse<InlineResponse2007> localVarResponse = ListPendingOrdersWithHttpInfo(authorization' accountID' acceptDatetimeFormat); " is 129.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersAsync,The length of the statement  "             ApiResponse<InlineResponse2007> localVarResponse = await ListPendingOrdersAsyncWithHttpInfo(authorization' accountID' acceptDatetimeFormat); " is 140.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPositionsWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPositionsWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPositionsAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPositionsAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTrades,The length of the statement  "             ApiResponse<InlineResponse20023> localVarResponse = ListTradesWithHttpInfo(authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID); " is 164.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesWithHttpInfo,The length of the statement  "            if (state != null) localVarQueryParams.Add("state"' Configuration.ApiClient.ParameterToString(state)); // query parameter " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesWithHttpInfo,The length of the statement  "            if (instrument != null) localVarQueryParams.Add("instrument"' Configuration.ApiClient.ParameterToString(instrument)); // query parameter " is 136.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesWithHttpInfo,The length of the statement  "            if (count != null) localVarQueryParams.Add("count"' Configuration.ApiClient.ParameterToString(count)); // query parameter " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesWithHttpInfo,The length of the statement  "            if (beforeID != null) localVarQueryParams.Add("beforeID"' Configuration.ApiClient.ParameterToString(beforeID)); // query parameter " is 130.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsync,The length of the statement  "             ApiResponse<InlineResponse20023> localVarResponse = await ListTradesAsyncWithHttpInfo(authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID); " is 175.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsyncWithHttpInfo,The length of the statement  "            if (state != null) localVarQueryParams.Add("state"' Configuration.ApiClient.ParameterToString(state)); // query parameter " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsyncWithHttpInfo,The length of the statement  "            if (instrument != null) localVarQueryParams.Add("instrument"' Configuration.ApiClient.ParameterToString(instrument)); // query parameter " is 136.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsyncWithHttpInfo,The length of the statement  "            if (count != null) localVarQueryParams.Add("count"' Configuration.ApiClient.ParameterToString(count)); // query parameter " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsyncWithHttpInfo,The length of the statement  "            if (beforeID != null) localVarQueryParams.Add("beforeID"' Configuration.ApiClient.ParameterToString(beforeID)); // query parameter " is 130.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactions,The length of the statement  "             ApiResponse<InlineResponse20017> localVarResponse = ListTransactionsWithHttpInfo(authorization' accountID' acceptDatetimeFormat' from' to' pageSize' type); " is 155.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsWithHttpInfo,The length of the statement  "            if (pageSize != null) localVarQueryParams.Add("pageSize"' Configuration.ApiClient.ParameterToString(pageSize)); // query parameter " is 130.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsAsync,The length of the statement  "             ApiResponse<InlineResponse20017> localVarResponse = await ListTransactionsAsyncWithHttpInfo(authorization' accountID' acceptDatetimeFormat' from' to' pageSize' type); " is 166.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsAsyncWithHttpInfo,The length of the statement  "            if (pageSize != null) localVarQueryParams.Add("pageSize"' Configuration.ApiClient.ParameterToString(pageSize)); // query parameter " is 130.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrder,The length of the statement  "             ApiResponse<InlineResponse2011> localVarResponse = ReplaceOrderWithHttpInfo(authorization' accountID' orderSpecifier' replaceOrderBody' acceptDatetimeFormat); " is 158.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderWithHttpInfo,The length of the statement  "            if (orderSpecifier != null) localVarPathParams.Add("orderSpecifier"' Configuration.ApiClient.ParameterToString(orderSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderAsync,The length of the statement  "             ApiResponse<InlineResponse2011> localVarResponse = await ReplaceOrderAsyncWithHttpInfo(authorization' accountID' orderSpecifier' replaceOrderBody' acceptDatetimeFormat); " is 169.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderAsyncWithHttpInfo,The length of the statement  "            if (orderSpecifier != null) localVarPathParams.Add("orderSpecifier"' Configuration.ApiClient.ParameterToString(orderSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensions,The length of the statement  "             ApiResponse<InlineResponse20010> localVarResponse = SetOrderClientExtensionsWithHttpInfo(authorization' accountID' orderSpecifier' setOrderClientExtensionsBody' acceptDatetimeFormat); " is 183.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->SetOrderClientExtensions"); " is 124.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->SetOrderClientExtensions"); " is 120.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'orderSpecifier' when calling DefaultApi->SetOrderClientExtensions"); " is 125.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'setOrderClientExtensionsBody' when calling DefaultApi->SetOrderClientExtensions"); " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,The length of the statement  "            if (orderSpecifier != null) localVarPathParams.Add("orderSpecifier"' Configuration.ApiClient.ParameterToString(orderSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsync,The length of the statement  "             ApiResponse<InlineResponse20010> localVarResponse = await SetOrderClientExtensionsAsyncWithHttpInfo(authorization' accountID' orderSpecifier' setOrderClientExtensionsBody' acceptDatetimeFormat); " is 194.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->SetOrderClientExtensions"); " is 124.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->SetOrderClientExtensions"); " is 120.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'orderSpecifier' when calling DefaultApi->SetOrderClientExtensions"); " is 125.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'setOrderClientExtensionsBody' when calling DefaultApi->SetOrderClientExtensions"); " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,The length of the statement  "            if (orderSpecifier != null) localVarPathParams.Add("orderSpecifier"' Configuration.ApiClient.ParameterToString(orderSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensions,The length of the statement  "             ApiResponse<InlineResponse20027> localVarResponse = SetTradeClientExtensionsWithHttpInfo(authorization' accountID' tradeSpecifier' setTradeClientExtensionsBody' acceptDatetimeFormat); " is 183.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->SetTradeClientExtensions"); " is 124.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->SetTradeClientExtensions"); " is 120.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'tradeSpecifier' when calling DefaultApi->SetTradeClientExtensions"); " is 125.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'setTradeClientExtensionsBody' when calling DefaultApi->SetTradeClientExtensions"); " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,The length of the statement  "            if (tradeSpecifier != null) localVarPathParams.Add("tradeSpecifier"' Configuration.ApiClient.ParameterToString(tradeSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsync,The length of the statement  "             ApiResponse<InlineResponse20027> localVarResponse = await SetTradeClientExtensionsAsyncWithHttpInfo(authorization' accountID' tradeSpecifier' setTradeClientExtensionsBody' acceptDatetimeFormat); " is 194.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->SetTradeClientExtensions"); " is 124.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->SetTradeClientExtensions"); " is 120.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'tradeSpecifier' when calling DefaultApi->SetTradeClientExtensions"); " is 125.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'setTradeClientExtensionsBody' when calling DefaultApi->SetTradeClientExtensions"); " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,The length of the statement  "            if (tradeSpecifier != null) localVarPathParams.Add("tradeSpecifier"' Configuration.ApiClient.ParameterToString(tradeSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrders,The length of the statement  "             ApiResponse<InlineResponse20028> localVarResponse = SetTradeDependentOrdersWithHttpInfo(authorization' accountID' tradeSpecifier' setTradeDependentOrdersBody' acceptDatetimeFormat); " is 181.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->SetTradeDependentOrders"); " is 123.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'tradeSpecifier' when calling DefaultApi->SetTradeDependentOrders"); " is 124.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'setTradeDependentOrdersBody' when calling DefaultApi->SetTradeDependentOrders"); " is 137.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersWithHttpInfo,The length of the statement  "            if (tradeSpecifier != null) localVarPathParams.Add("tradeSpecifier"' Configuration.ApiClient.ParameterToString(tradeSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsync,The length of the statement  "             ApiResponse<InlineResponse20028> localVarResponse = await SetTradeDependentOrdersAsyncWithHttpInfo(authorization' accountID' tradeSpecifier' setTradeDependentOrdersBody' acceptDatetimeFormat); " is 192.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsyncWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->SetTradeDependentOrders"); " is 123.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsyncWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'tradeSpecifier' when calling DefaultApi->SetTradeDependentOrders"); " is 124.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsyncWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'setTradeDependentOrdersBody' when calling DefaultApi->SetTradeDependentOrders"); " is 137.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsyncWithHttpInfo,The length of the statement  "            if (tradeSpecifier != null) localVarPathParams.Add("tradeSpecifier"' Configuration.ApiClient.ParameterToString(tradeSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricing,The length of the statement  "             ApiResponse<InlineResponse20022> localVarResponse = StreamPricingWithHttpInfo(authorization' accountID' instruments' acceptDatetimeFormat' snapshot); " is 149.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingWithHttpInfo,The length of the statement  "            if (instruments != null) localVarQueryParams.Add("instruments"' Configuration.ApiClient.ParameterToString(instruments)); // query parameter " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingWithHttpInfo,The length of the statement  "            if (snapshot != null) localVarQueryParams.Add("snapshot"' Configuration.ApiClient.ParameterToString(snapshot)); // query parameter " is 130.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingAsync,The length of the statement  "             ApiResponse<InlineResponse20022> localVarResponse = await StreamPricingAsyncWithHttpInfo(authorization' accountID' instruments' acceptDatetimeFormat' snapshot); " is 160.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingAsyncWithHttpInfo,The length of the statement  "            if (instruments != null) localVarQueryParams.Add("instruments"' Configuration.ApiClient.ParameterToString(instruments)); // query parameter " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingAsyncWithHttpInfo,The length of the statement  "            if (snapshot != null) localVarQueryParams.Add("snapshot"' Configuration.ApiClient.ParameterToString(snapshot)); // query parameter " is 130.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamTransactionsWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamTransactionsWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamTransactionsAsync,The length of the statement  "             ApiResponse<InlineResponse20020> localVarResponse = await StreamTransactionsAsyncWithHttpInfo(authorization' accountID); " is 120.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamTransactionsAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamTransactionsAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersAsJson,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersAsJson,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersAsJson,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrder,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrder,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrder,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrder,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrder,The length of the statement  "            if (orderSpecifier != null) localVarPathParams.Add("orderSpecifier"' Configuration.ApiClient.ParameterToString(orderSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrder,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrder,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Client,ApiClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Client\ApiClient.cs,PrepareRequest,The length of the statement  "                request.AddFile(param.Value.Name' param.Value.Writer' param.Value.FileName' param.Value.ContentLength' param.Value.ContentType); " is 128.
Long Statement,Oanda.RestV20.Model,InlineResponse4003,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4003.cs,ToString,The length of the statement  "            sb.Append("  OrderClientExtensionsModifyRejectTransaction: ").Append(OrderClientExtensionsModifyRejectTransaction).Append("\n"); " is 128.
Long Statement,Oanda.RestV20.Model,InlineResponse4006,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4006.cs,ToString,The length of the statement  "            sb.Append("  TradeClientExtensionsModifyRejectTransaction: ").Append(TradeClientExtensionsModifyRejectTransaction).Append("\n"); " is 128.
Long Statement,Oanda.RestV20.Model,InlineResponse4007,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,ToString,The length of the statement  "            sb.Append("  TrailingStopLossOrderCancelRejectTransaction: ").Append(TrailingStopLossOrderCancelRejectTransaction).Append("\n"); " is 128.
Long Statement,Oanda.RestV20.Model,InlineResponse4043,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4043.cs,ToString,The length of the statement  "            sb.Append("  OrderClientExtensionsModifyRejectTransaction: ").Append(OrderClientExtensionsModifyRejectTransaction).Append("\n"); " is 128.
Long Statement,Oanda.RestV20.Model,InlineResponse4046,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4046.cs,ToString,The length of the statement  "            sb.Append("  TradeClientExtensionsModifyRejectTransaction: ").Append(TradeClientExtensionsModifyRejectTransaction).Append("\n"); " is 128.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,Refresh,The length of the statement  "                Log.Trace("TradierBrokerage.DataQueueHandler.Refresh(): Updating tickers..." + string.Join("'"' _subscriptions.Select(x => x.Value))); " is 134.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,Stream,The length of the statement  "                        Log.Trace("TradierBrokerage.DataQueueHandler.Stream(): Handled breakout / socket close from jsonRead operation: " + err.Message); " is 129.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,Stream,The length of the statement  "                        // Do nothing for now. Can come back later to fix. Errors are from Tradier not properly json encoding values E.g. "NaN" string. " is 127.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,Stream,The length of the statement  "                        Log.Trace("TradierBrokerage.DataQueueHandler.Stream(): Handled breakout / socket close from jsonRead operation: " + err.Message); " is 129.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,Execute,The length of the statement  "                    OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' raw.ErrorException.GetType().Name' raw.ErrorException.ToString())); " is 133.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,RefreshSession,The length of the statement  "            //Get: {"sAccessToken":"123123"'"iExpiresIn":86399'"dtIssuedAt":"2014-10-15T16:59:52-04:00"'"sRefreshToken":"123123"'"sScope":"read write market trade stream"'"sStatus":"approved"'"success":true} " is 195.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,RefreshSession,The length of the statement  "                        Log.Trace("SESSION REFRESHED: Access: " + AccessToken + " Refresh: " + RefreshToken + " Issued At: " + _lifeSpan + " JSON>>" " is 124.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,RefreshSession,The length of the statement  "                        Log.Error("Tradier.RefreshSession(): Error Refreshing Session: URL: " + client.BuildUri(request) + " Response: " + result.Content); " is 131.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,RefreshSession,The length of the statement  "                OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Error' "RefreshSession"' "Failed to refresh access token: " + raw)); " is 125.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,PlaceOrder,The length of the statement  "            var cachedOpenOrder = _cachedOpenOrdersByTradierOrderID.FirstOrDefault(x => x.Value.Order.Symbol == order.Symbol.Value).Value; " is 126.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,PlaceOrder,The length of the statement  "                    Log.Error("TradierBrokerage.PlaceOrder(): Unable to locate existing QC Order when verifying single outstanding order per symbol."); " is 131.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,PlaceOrder,The length of the statement  "                var restOfOrder = new TradierPlaceOrderRequest(order' TradierOrderClass.Equity' 0) {Quantity = Math.Abs(secondOrderQuantity)}; " is 126.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,UpdateOrder,The length of the statement  "                Log.Trace("Unable to locate active Tradier order for QC order id: " + order.Id + " with Tradier ids: " + string.Join("' "' order.BrokerId)); " is 140.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,UpdateOrder,The length of the statement  "                OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' "UpdateRejected"' "Unable to modify Tradier order quantities.")); " is 131.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,UpdateOrder,The length of the statement  "                OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' "UpdateFailed"' "Failed to update Tradier order id: " + activeOrder.Order.Id + ". " + errors)); " is 161.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,TradierPlaceOrder,The length of the statement  "                        var recentOrder = orders.OrderByDescending(x => x.TransactionDate).FirstOrDefault(x => x.Symbol == order.Symbol && x.Quantity == order.Quantity && x.Direction == order.Direction && x.Type == order.Type); " is 203.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,TradierPlaceOrder,The length of the statement  "                            OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Error' "OrderError"' "Unable to resolve rejected Tradier order id for QC order: " + order.QCOrder.Id)); " is 160.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,CheckForFills,The length of the statement  "                    // wait a second and then check the order provider to see if we have these broker IDs' maybe they came in later (ex' symbol denied for short trading) " is 149.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,CheckForFills,The length of the statement  "                            Log.Trace("TradierBrokerage.CheckForFills(): Verifying missing brokerage IDs: " + string.Join("'"' localUnknownTradierOrderIDs)); " is 129.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,CheckForFills,The length of the statement  "                            var stillUnknownOrderIDs = localUnknownTradierOrderIDs.Where(x => !orders.Any(y => y.BrokerId.Contains(x.ToStringInvariant()))).ToList(); " is 137.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,CheckForFills,The length of the statement  "                                // fetch all rejected intraday orders within the last minute' we're going to exclude rejected orders from the error condition " is 125.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,CheckForFills,The length of the statement  "                                    OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Error' "UnknownOrderId"' "Received unknown Tradier order id(s): " + ids)); " is 131.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,CheckForFills,The length of the statement  "                            OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' "UnknownIdResolution"' "An error ocurred while trying to resolve unknown Tradier order IDs: " + err)); " is 168.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,CheckForFills,The length of the statement  "                OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' "CheckForFillsError"' "An error ocurred while checking for fills: " + err)); " is 142.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,ProcessPotentiallyUpdatedOrder,The length of the statement  "                                    OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' "ContingentOrderError"' "An error ocurred while trying to submit an Tradier contingent order: " + err)); " is 170.
Complex Conditional,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,Subscribe,The conditional expression  "_subscriptionManager.IsSubscribed(symbol) ||                      symbol.Value.Contains("UNIVERSE") ||                      !_symbolMapper.IsKnownBrokerageSymbol(symbol.Value) ||                      symbol.SecurityType != _symbolMapper.GetLeanSecurityType(symbol.Value)"  is complex.
Complex Conditional,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,messageArrived,The conditional expression  "message is UserResponse || message is CollateralInquiryAck || message is Logout ||                      message is MarketDataRequestReject || message is BusinessMessageReject || message is SecurityStatus"  is complex.
Complex Conditional,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,OnMessageImpl,The conditional expression  "raw.Type == "open" || raw.Type == "change" || raw.Type == "done" || raw.Type == "received" || raw.Type == "subscriptions" || raw.Type == "last_match""  is complex.
Complex Conditional,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,IBPlaceOrder,The conditional expression  "exchange == null &&                  order.Symbol.SecurityType == SecurityType.Option &&                  (order.Type == OrderType.MarketOnOpen || order.Type == OrderType.MarketOnClose)"  is complex.
Complex Conditional,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,IsWithinScheduledServerResetTimes,The conditional expression  "time.DayOfWeek == DayOfWeek.Friday && timeOfDay > new TimeSpan(22' 45' 0) ||                  time.DayOfWeek == DayOfWeek.Saturday && timeOfDay < new TimeSpan(3' 15' 0)"  is complex.
Complex Conditional,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetHistory,The conditional expression  "!CanSubscribe(request.Symbol) ||                  (request.Symbol.ID.SecurityType == SecurityType.Option && request.Symbol.IsCanonical()) ||                  (request.Symbol.ID.SecurityType == SecurityType.Future && request.Symbol.IsCanonical())"  is complex.
Complex Conditional,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersSymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersSymbolMapper.cs,GetBrokerageSymbol,The conditional expression  "symbol.ID.SecurityType != SecurityType.Forex &&                  symbol.ID.SecurityType != SecurityType.Equity &&                  symbol.ID.SecurityType != SecurityType.Option &&                  symbol.ID.SecurityType != SecurityType.Future"  is complex.
Complex Conditional,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersSymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersSymbolMapper.cs,GetLeanSymbol,The conditional expression  "securityType != SecurityType.Forex &&                  securityType != SecurityType.Equity &&                  securityType != SecurityType.Option &&                  securityType != SecurityType.Future"  is complex.
Complex Conditional,QuantConnect.Brokerages.Oanda.RestV1.DataType.Communications,Response,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV1\DataType\Communications\Response.cs,ToString,The conditional expression  "prop.Name != "Content" && prop.Name != "Subtitle" && prop.Name != "Title" && prop.Name != "UniqueId""  is complex.
Empty Catch Block,QuantConnect.Brokerages.Alpaca,AlpacaBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Alpaca\AlpacaBrokerage.Utility.cs,Connect,The method has an empty catch block.
Empty Catch Block,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,Connect,The method has an empty catch block.
Empty Catch Block,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,Oanda.RestV20.Session,StreamSession,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Session\StreamSession.cs,StopSession,The method has an empty catch block.
Empty Catch Block,Oanda.RestV20.Session,StreamSession,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Session\StreamSession.cs,StopSession,The method has an empty catch block.
Empty Catch Block,QuantConnect.Brokerages.Oanda.RestV1.Session,StreamSession<T>,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV1\Session\StreamSession.cs,StopSession,The method has an empty catch block.
Empty Catch Block,QuantConnect.Brokerages.Oanda.RestV1.Session,StreamSession<T>,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV1\Session\StreamSession.cs,StopSession,The method has an empty catch block.
Empty Catch Block,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,Execute,The method has an empty catch block.
Magic Number,QuantConnect.Brokerages.Alpaca,AlpacaBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Alpaca\AlpacaBrokerage.Utility.cs,Connect,The following statement contains a magic number: _connectionMonitorThread = new Thread(() =>              {                  connectionMonitorStartedEvent.Set();                    var nextReconnectionAttemptSeconds = 1;                    try                  {                      while (!_cancellationTokenSource.IsCancellationRequested)                      {                          var isAlive = true;                          try                          {                              isAlive = _sockClient.IsAlive;                          }                          catch (Exception)                          {                              // ignored                          }                            if (isAlive && _connectionLost)                          {                              _connectionLost = false;                              nextReconnectionAttemptSeconds = 1;                                OnMessage(BrokerageMessageEvent.Reconnected("Connection with Alpaca server restored."));                          }                          else if (!isAlive)                          {                              if (_connectionLost)                              {                                  try                                  {                                      Thread.Sleep(TimeSpan.FromSeconds(nextReconnectionAttemptSeconds));                                        _sockClient.ConnectAsync().SynchronouslyAwaitTask();                                  }                                  catch (Exception exception)                                  {                                      // double the interval between attempts (capped to 1 minute)                                      nextReconnectionAttemptSeconds = Math.Min(nextReconnectionAttemptSeconds * 2' 60);                                        Log.Error(exception);                                  }                              }                              else                              {                                  _connectionLost = true;                                    OnMessage(                                      BrokerageMessageEvent.Disconnected(                                          "Connection with Alpaca server lost. " +                                          "This could be because of internet connectivity issues. "));                              }                          }                            Thread.Sleep(1000);                      }                  }                  catch (Exception exception)                  {                      Log.Error(exception);                  }              })              { IsBackground = true };
Magic Number,QuantConnect.Brokerages.Alpaca,AlpacaBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Alpaca\AlpacaBrokerage.Utility.cs,Connect,The following statement contains a magic number: _connectionMonitorThread = new Thread(() =>              {                  connectionMonitorStartedEvent.Set();                    var nextReconnectionAttemptSeconds = 1;                    try                  {                      while (!_cancellationTokenSource.IsCancellationRequested)                      {                          var isAlive = true;                          try                          {                              isAlive = _sockClient.IsAlive;                          }                          catch (Exception)                          {                              // ignored                          }                            if (isAlive && _connectionLost)                          {                              _connectionLost = false;                              nextReconnectionAttemptSeconds = 1;                                OnMessage(BrokerageMessageEvent.Reconnected("Connection with Alpaca server restored."));                          }                          else if (!isAlive)                          {                              if (_connectionLost)                              {                                  try                                  {                                      Thread.Sleep(TimeSpan.FromSeconds(nextReconnectionAttemptSeconds));                                        _sockClient.ConnectAsync().SynchronouslyAwaitTask();                                  }                                  catch (Exception exception)                                  {                                      // double the interval between attempts (capped to 1 minute)                                      nextReconnectionAttemptSeconds = Math.Min(nextReconnectionAttemptSeconds * 2' 60);                                        Log.Error(exception);                                  }                              }                              else                              {                                  _connectionLost = true;                                    OnMessage(                                      BrokerageMessageEvent.Disconnected(                                          "Connection with Alpaca server lost. " +                                          "This could be because of internet connectivity issues. "));                              }                          }                            Thread.Sleep(1000);                      }                  }                  catch (Exception exception)                  {                      Log.Error(exception);                  }              })              { IsBackground = true };
Magic Number,QuantConnect.Brokerages.Alpaca,AlpacaBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Alpaca\AlpacaBrokerage.Utility.cs,Connect,The following statement contains a magic number: _connectionMonitorThread = new Thread(() =>              {                  connectionMonitorStartedEvent.Set();                    var nextReconnectionAttemptSeconds = 1;                    try                  {                      while (!_cancellationTokenSource.IsCancellationRequested)                      {                          var isAlive = true;                          try                          {                              isAlive = _sockClient.IsAlive;                          }                          catch (Exception)                          {                              // ignored                          }                            if (isAlive && _connectionLost)                          {                              _connectionLost = false;                              nextReconnectionAttemptSeconds = 1;                                OnMessage(BrokerageMessageEvent.Reconnected("Connection with Alpaca server restored."));                          }                          else if (!isAlive)                          {                              if (_connectionLost)                              {                                  try                                  {                                      Thread.Sleep(TimeSpan.FromSeconds(nextReconnectionAttemptSeconds));                                        _sockClient.ConnectAsync().SynchronouslyAwaitTask();                                  }                                  catch (Exception exception)                                  {                                      // double the interval between attempts (capped to 1 minute)                                      nextReconnectionAttemptSeconds = Math.Min(nextReconnectionAttemptSeconds * 2' 60);                                        Log.Error(exception);                                  }                              }                              else                              {                                  _connectionLost = true;                                    OnMessage(                                      BrokerageMessageEvent.Disconnected(                                          "Connection with Alpaca server lost. " +                                          "This could be because of internet connectivity issues. "));                              }                          }                            Thread.Sleep(1000);                      }                  }                  catch (Exception exception)                  {                      Log.Error(exception);                  }              })              { IsBackground = true };
Magic Number,QuantConnect.Brokerages.Alpaca.Markets,NatsClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Alpaca\Markets\NatsClient.cs,NatsClient,The following statement contains a magic number: _options.MaxReconnect = 3;
Magic Number,QuantConnect.Brokerages.Alpaca.Markets,RateThrottler,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Alpaca\Markets\RateThrottler.cs,CheckHttpResponse,The following statement contains a magic number: response.StatusCode == (HttpStatusCode)429 ||                  response.StatusCode == (HttpStatusCode)503
Magic Number,QuantConnect.Brokerages.Alpaca.Markets,RateThrottler,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Alpaca\Markets\RateThrottler.cs,CheckHttpResponse,The following statement contains a magic number: response.StatusCode == (HttpStatusCode)429 ||                  response.StatusCode == (HttpStatusCode)503
Magic Number,QuantConnect.Brokerages.Alpaca.Markets,NextRetryGuard,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Alpaca\Markets\RateThrottler.cs,SetNextRetryTimeRandom,The following statement contains a magic number: SetNextRetryTime(DateTime.UtcNow.AddMilliseconds(                      _randomRetryWait.Next(1000' 5000)));
Magic Number,QuantConnect.Brokerages.Alpaca.Markets,NextRetryGuard,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Alpaca\Markets\RateThrottler.cs,SetNextRetryTimeRandom,The following statement contains a magic number: SetNextRetryTime(DateTime.UtcNow.AddMilliseconds(                      _randomRetryWait.Next(1000' 5000)));
Magic Number,QuantConnect.Brokerages.Alpaca.Markets,RestClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Alpaca\Markets\RestClient.cs,PostOrderAsync,The following statement contains a magic number: clientOrderId = clientOrderId.Substring(0' 48);
Magic Number,QuantConnect.Brokerages.Alpaca.Markets,RestClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Alpaca\Markets\RestClient.cs,PostOrderAsync,The following statement contains a magic number: !string.IsNullOrEmpty(clientOrderId) &&                  clientOrderId.Length > 48
Magic Number,QuantConnect.Brokerages,BaseWebsocketsBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\BaseWebsocketsBrokerage.cs,Connect,The following statement contains a magic number: _connectionMonitorThread = new Thread(() =>              {                  var nextReconnectionAttemptUtcTime = DateTime.UtcNow;                  double nextReconnectionAttemptSeconds = 1;                    lock (_lockerConnectionMonitor)                  {                      LastHeartbeatUtcTime = DateTime.UtcNow;                  }                    try                  {                      while (!_cancellationTokenSource.IsCancellationRequested)                      {                          if (WebSocket.IsOpen)                          {                              LastHeartbeatUtcTime = DateTime.UtcNow;                          }                            TimeSpan elapsed;                          lock (_lockerConnectionMonitor)                          {                              elapsed = DateTime.UtcNow - LastHeartbeatUtcTime;                          }                            if (!_connectionLost && elapsed > TimeSpan.FromSeconds(_heartbeatTimeout))                          {                                if (WebSocket.IsOpen)                              {                                  // connection is still good                                  LastHeartbeatUtcTime = DateTime.UtcNow;                              }                              else                              {                                  _connectionLost = true;                                  nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                    OnMessage(BrokerageMessageEvent.Disconnected("Connection with server lost. This could be because of internet connectivity issues."));                              }                          }                          else if (_connectionLost)                          {                              try                              {                                  if (elapsed <= TimeSpan.FromSeconds(_heartbeatTimeout))                                  {                                      _connectionLost = false;                                      nextReconnectionAttemptSeconds = 1;                                        OnMessage(BrokerageMessageEvent.Reconnected("Connection with server restored."));                                  }                                  else                                  {                                      if (DateTime.UtcNow > nextReconnectionAttemptUtcTime)                                      {                                          try                                          {                                              Reconnect();                                          }                                          catch (Exception err)                                          {                                              // double the interval between attempts (capped to 1 minute)                                              nextReconnectionAttemptSeconds = Math.Min(nextReconnectionAttemptSeconds * 2' 60);                                              nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                              Log.Error(err);                                          }                                      }                                  }                              }                              catch (Exception exception)                              {                                  Log.Error(exception);                              }                          }                            Thread.Sleep(10000);                      }                  }                  catch (Exception exception)                  {                      Log.Error(exception);                  }              }) { IsBackground = true };
Magic Number,QuantConnect.Brokerages,BaseWebsocketsBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\BaseWebsocketsBrokerage.cs,Connect,The following statement contains a magic number: _connectionMonitorThread = new Thread(() =>              {                  var nextReconnectionAttemptUtcTime = DateTime.UtcNow;                  double nextReconnectionAttemptSeconds = 1;                    lock (_lockerConnectionMonitor)                  {                      LastHeartbeatUtcTime = DateTime.UtcNow;                  }                    try                  {                      while (!_cancellationTokenSource.IsCancellationRequested)                      {                          if (WebSocket.IsOpen)                          {                              LastHeartbeatUtcTime = DateTime.UtcNow;                          }                            TimeSpan elapsed;                          lock (_lockerConnectionMonitor)                          {                              elapsed = DateTime.UtcNow - LastHeartbeatUtcTime;                          }                            if (!_connectionLost && elapsed > TimeSpan.FromSeconds(_heartbeatTimeout))                          {                                if (WebSocket.IsOpen)                              {                                  // connection is still good                                  LastHeartbeatUtcTime = DateTime.UtcNow;                              }                              else                              {                                  _connectionLost = true;                                  nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                    OnMessage(BrokerageMessageEvent.Disconnected("Connection with server lost. This could be because of internet connectivity issues."));                              }                          }                          else if (_connectionLost)                          {                              try                              {                                  if (elapsed <= TimeSpan.FromSeconds(_heartbeatTimeout))                                  {                                      _connectionLost = false;                                      nextReconnectionAttemptSeconds = 1;                                        OnMessage(BrokerageMessageEvent.Reconnected("Connection with server restored."));                                  }                                  else                                  {                                      if (DateTime.UtcNow > nextReconnectionAttemptUtcTime)                                      {                                          try                                          {                                              Reconnect();                                          }                                          catch (Exception err)                                          {                                              // double the interval between attempts (capped to 1 minute)                                              nextReconnectionAttemptSeconds = Math.Min(nextReconnectionAttemptSeconds * 2' 60);                                              nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                              Log.Error(err);                                          }                                      }                                  }                              }                              catch (Exception exception)                              {                                  Log.Error(exception);                              }                          }                            Thread.Sleep(10000);                      }                  }                  catch (Exception exception)                  {                      Log.Error(exception);                  }              }) { IsBackground = true };
Magic Number,QuantConnect.Brokerages,BaseWebsocketsBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\BaseWebsocketsBrokerage.cs,Connect,The following statement contains a magic number: _connectionMonitorThread = new Thread(() =>              {                  var nextReconnectionAttemptUtcTime = DateTime.UtcNow;                  double nextReconnectionAttemptSeconds = 1;                    lock (_lockerConnectionMonitor)                  {                      LastHeartbeatUtcTime = DateTime.UtcNow;                  }                    try                  {                      while (!_cancellationTokenSource.IsCancellationRequested)                      {                          if (WebSocket.IsOpen)                          {                              LastHeartbeatUtcTime = DateTime.UtcNow;                          }                            TimeSpan elapsed;                          lock (_lockerConnectionMonitor)                          {                              elapsed = DateTime.UtcNow - LastHeartbeatUtcTime;                          }                            if (!_connectionLost && elapsed > TimeSpan.FromSeconds(_heartbeatTimeout))                          {                                if (WebSocket.IsOpen)                              {                                  // connection is still good                                  LastHeartbeatUtcTime = DateTime.UtcNow;                              }                              else                              {                                  _connectionLost = true;                                  nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                    OnMessage(BrokerageMessageEvent.Disconnected("Connection with server lost. This could be because of internet connectivity issues."));                              }                          }                          else if (_connectionLost)                          {                              try                              {                                  if (elapsed <= TimeSpan.FromSeconds(_heartbeatTimeout))                                  {                                      _connectionLost = false;                                      nextReconnectionAttemptSeconds = 1;                                        OnMessage(BrokerageMessageEvent.Reconnected("Connection with server restored."));                                  }                                  else                                  {                                      if (DateTime.UtcNow > nextReconnectionAttemptUtcTime)                                      {                                          try                                          {                                              Reconnect();                                          }                                          catch (Exception err)                                          {                                              // double the interval between attempts (capped to 1 minute)                                              nextReconnectionAttemptSeconds = Math.Min(nextReconnectionAttemptSeconds * 2' 60);                                              nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                              Log.Error(err);                                          }                                      }                                  }                              }                              catch (Exception exception)                              {                                  Log.Error(exception);                              }                          }                            Thread.Sleep(10000);                      }                  }                  catch (Exception exception)                  {                      Log.Error(exception);                  }              }) { IsBackground = true };
Magic Number,QuantConnect.Brokerages,Brokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Brokerage.cs,PerformCashSync,The following statement contains a magic number: Math.Abs(algorithm.Portfolio.CashBook.ConvertToAccountCurrency(delta' cash.Symbol)) > 5
Magic Number,QuantConnect.Brokerages,Brokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Brokerage.cs,PerformCashSync,The following statement contains a magic number: Task.Delay(TimeSpan.FromSeconds(10)).ContinueWith(_ =>                  {                      // we want to make sure this is a good value' so check for any recent fills                      if (getTimeSinceLastFill() <= TimeSpan.FromSeconds(20))                      {                          // this will cause us to come back in and reset cash again until we                          // haven't processed a fill for +- 10 seconds of the set cash time                          _syncedLiveBrokerageCashToday = false;                          //_failedCashSyncAttempts = 0;                          Log.Trace("Brokerage.PerformCashSync(): Unverified cash sync - resync required.");                      }                      else                      {                          Log.Trace("Brokerage.PerformCashSync(): Verified cash sync.");                            algorithm.Portfolio.LogMarginInformation();                      }                  });
Magic Number,QuantConnect.Brokerages,Brokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Brokerage.cs,PerformCashSync,The following statement contains a magic number: Task.Delay(TimeSpan.FromSeconds(10)).ContinueWith(_ =>                  {                      // we want to make sure this is a good value' so check for any recent fills                      if (getTimeSinceLastFill() <= TimeSpan.FromSeconds(20))                      {                          // this will cause us to come back in and reset cash again until we                          // haven't processed a fill for +- 10 seconds of the set cash time                          _syncedLiveBrokerageCashToday = false;                          //_failedCashSyncAttempts = 0;                          Log.Trace("Brokerage.PerformCashSync(): Unverified cash sync - resync required.");                      }                      else                      {                          Log.Trace("Brokerage.PerformCashSync(): Verified cash sync.");                            algorithm.Portfolio.LogMarginInformation();                      }                  });
Magic Number,QuantConnect.Brokerages,DefaultConnectionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\DefaultConnectionHandler.cs,Initialize,The following statement contains a magic number: _connectionMonitorThread = new Thread(() =>              {                  waitHandle.Set();                    var nextReconnectionAttemptUtcTime = DateTime.UtcNow;                  var nextReconnectionAttemptSeconds = MinimumSecondsForNextReconnectionAttempt;                    lock (_lockerConnectionMonitor)                  {                      _lastDataReceivedTime = DateTime.UtcNow;                  }                    try                  {                      while (!_cancellationTokenSource.IsCancellationRequested)                      {                          Thread.Sleep(1000);                            if (!_isEnabled) continue;                            try                          {                              TimeSpan elapsed;                              lock (_lockerConnectionMonitor)                              {                                  elapsed = DateTime.UtcNow - _lastDataReceivedTime;                              }                                if (!_connectionLost && elapsed > MaximumIdleTimeSpan)                              {                                  _connectionLost = true;                                  nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                    OnConnectionLost();                              }                              else if (_connectionLost)                              {                                  if (elapsed <= MaximumIdleTimeSpan)                                  {                                      _connectionLost = false;                                      nextReconnectionAttemptSeconds = MinimumSecondsForNextReconnectionAttempt;                                        OnConnectionRestored();                                  }                                  else                                  {                                      if (DateTime.UtcNow > nextReconnectionAttemptUtcTime)                                      {                                          // double the interval between attempts (capped to 1 minute)                                          nextReconnectionAttemptSeconds = Math.Min(nextReconnectionAttemptSeconds * 2' MaximumSecondsForNextReconnectionAttempt);                                          nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                            OnReconnectRequested();                                      }                                  }                              }                          }                          catch (Exception exception)                          {                              Log.Error($"Error in DefaultConnectionHandler: {exception}");                          }                      }                  }                  catch (Exception exception)                  {                      Log.Error(exception);                  }              }) { IsBackground = true };
Magic Number,QuantConnect.Brokerages,DefaultConnectionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\DefaultConnectionHandler.cs,Initialize,The following statement contains a magic number: _connectionMonitorThread = new Thread(() =>              {                  waitHandle.Set();                    var nextReconnectionAttemptUtcTime = DateTime.UtcNow;                  var nextReconnectionAttemptSeconds = MinimumSecondsForNextReconnectionAttempt;                    lock (_lockerConnectionMonitor)                  {                      _lastDataReceivedTime = DateTime.UtcNow;                  }                    try                  {                      while (!_cancellationTokenSource.IsCancellationRequested)                      {                          Thread.Sleep(1000);                            if (!_isEnabled) continue;                            try                          {                              TimeSpan elapsed;                              lock (_lockerConnectionMonitor)                              {                                  elapsed = DateTime.UtcNow - _lastDataReceivedTime;                              }                                if (!_connectionLost && elapsed > MaximumIdleTimeSpan)                              {                                  _connectionLost = true;                                  nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                    OnConnectionLost();                              }                              else if (_connectionLost)                              {                                  if (elapsed <= MaximumIdleTimeSpan)                                  {                                      _connectionLost = false;                                      nextReconnectionAttemptSeconds = MinimumSecondsForNextReconnectionAttempt;                                        OnConnectionRestored();                                  }                                  else                                  {                                      if (DateTime.UtcNow > nextReconnectionAttemptUtcTime)                                      {                                          // double the interval between attempts (capped to 1 minute)                                          nextReconnectionAttemptSeconds = Math.Min(nextReconnectionAttemptSeconds * 2' MaximumSecondsForNextReconnectionAttempt);                                          nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                            OnReconnectRequested();                                      }                                  }                              }                          }                          catch (Exception exception)                          {                              Log.Error($"Error in DefaultConnectionHandler: {exception}");                          }                      }                  }                  catch (Exception exception)                  {                      Log.Error(exception);                  }              }) { IsBackground = true };
Magic Number,QuantConnect.Brokerages,WebSocketWrapper,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\WebSocketWrapper.cs,Initialize,The following statement contains a magic number: _wrapped = new WebSocket(url)              {                  Log =                  {                      Level = Config.GetBool("websocket-log-trace") ? LogLevel.Trace : LogLevel.Error'                        // The stack frame number of 3 was derived from the usage of the Logger class in the WebSocketSharp library                      Output = (data' file) => { Log.Trace($"{WhoCalledMe.GetMethodName(3)}(): {data.Message}"' true); }                  }              };
Magic Number,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,OnMessageImpl,The following statement contains a magic number: switch (term.ToLowerInvariant())                          {                              case "oc":                                  OnOrderClose(token[2].ToObject<string[]>());                                  return;                              case "tu":                                  EmitFillOrder(token[2].ToObject<string[]>());                                  return;                              default:                                  return;                          }
Magic Number,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,OnMessageImpl,The following statement contains a magic number: switch (term.ToLowerInvariant())                          {                              case "oc":                                  OnOrderClose(token[2].ToObject<string[]>());                                  return;                              case "tu":                                  EmitFillOrder(token[2].ToObject<string[]>());                                  return;                              default:                                  return;                          }
Magic Number,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,OnOrderClose,The following statement contains a magic number: entries[5].IndexOf("canceled"' StringComparison.OrdinalIgnoreCase) >= 0
Magic Number,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,EmitFillOrder,The following statement contains a magic number: var brokerId = entries[4];
Magic Number,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,EmitFillOrder,The following statement contains a magic number: var symbol = _symbolMapper.GetLeanSymbol(entries[2]);
Magic Number,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,EmitFillOrder,The following statement contains a magic number: var fillPrice = decimal.Parse(entries[6]' NumberStyles.Float' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,EmitFillOrder,The following statement contains a magic number: var fillQuantity = decimal.Parse(entries[5]' NumberStyles.Float' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,EmitFillOrder,The following statement contains a magic number: var updTime = Time.UnixTimeStampToDateTime(double.Parse(entries[3]' NumberStyles.Float' CultureInfo.InvariantCulture));
Magic Number,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,EmitFillOrder,The following statement contains a magic number: var orderFee = new OrderFee(new CashAmount(                          Math.Abs(decimal.Parse(entries[9]' NumberStyles.Float' CultureInfo.InvariantCulture))'                          entries[10]                      ));
Magic Number,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,EmitFillOrder,The following statement contains a magic number: var orderFee = new OrderFee(new CashAmount(                          Math.Abs(decimal.Parse(entries[9]' NumberStyles.Float' CultureInfo.InvariantCulture))'                          entries[10]                      ));
Magic Number,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,GetHistory,The following statement contains a magic number: long startMsec = (long)Time.DateTimeToUnixTimeStamp(request.StartTimeUtc) * 1000;
Magic Number,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,GetHistory,The following statement contains a magic number: long endMsec = (long)Time.DateTimeToUnixTimeStamp(request.EndTimeUtc) * 1000;
Magic Number,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,ExecuteRestRequest,The following statement contains a magic number: const int maxAttempts = 10;
Magic Number,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,ByteArrayToString,The following statement contains a magic number: StringBuilder hex = new StringBuilder(ba.Length * 2);
Magic Number,QuantConnect.Brokerages.Bitfinex,BitfinexSubscriptionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSubscriptionManager.cs,GetFreeWebSocket,The following statement contains a magic number: var webSocket = new BitfinexWebSocketWrapper(                  new DefaultConnectionHandler                  {                      MaximumIdleTimeSpan = TimeSpan.FromSeconds(15)                  });
Magic Number,QuantConnect.Brokerages.Bitfinex,BitfinexSubscriptionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSubscriptionManager.cs,OnMessage,The following statement contains a magic number: token.Count() == 2
Magic Number,QuantConnect.Brokerages.Bitfinex,BitfinexSubscriptionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSubscriptionManager.cs,ProcessOrderBookSnapshot,The following statement contains a magic number: var amount = decimal.Parse(entry[2]' NumberStyles.Float' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Brokerages.Bitfinex,BitfinexSubscriptionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSubscriptionManager.cs,ProcessOrderBookUpdate,The following statement contains a magic number: var amount = decimal.Parse(entries[2]' NumberStyles.Float' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Brokerages.Bitfinex,BitfinexSubscriptionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSubscriptionManager.cs,ProcessTradeUpdate,The following statement contains a magic number: EmitTradeTick(symbol' new[] { entries[3]' entries[4]' entries[5] });
Magic Number,QuantConnect.Brokerages.Bitfinex,BitfinexSubscriptionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSubscriptionManager.cs,ProcessTradeUpdate,The following statement contains a magic number: EmitTradeTick(symbol' new[] { entries[3]' entries[4]' entries[5] });
Magic Number,QuantConnect.Brokerages.Bitfinex,BitfinexSubscriptionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSubscriptionManager.cs,ProcessTradeUpdate,The following statement contains a magic number: EmitTradeTick(symbol' new[] { entries[3]' entries[4]' entries[5] });
Magic Number,QuantConnect.Brokerages.Bitfinex,BitfinexSubscriptionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSubscriptionManager.cs,EmitTradeTick,The following statement contains a magic number: var amount = decimal.Parse(entries[2]' NumberStyles.Float' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Brokerages.Bitfinex,BitfinexSubscriptionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSubscriptionManager.cs,EmitQuoteTick,The following statement contains a magic number: _brokerage.Ticks.Add(new Tick                  {                      AskPrice = askPrice'                      BidPrice = bidPrice'                      Value = (askPrice + bidPrice) / 2m'                      Time = DateTime.UtcNow'                      Symbol = symbol'                      TickType = TickType.Quote'                      AskSize = Math.Abs(askSize)'                      BidSize = Math.Abs(bidSize)                  });
Magic Number,QuantConnect.Brokerages.Bitfinex,BitfinexSymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSymbolMapper.cs,IsKnownLeanSymbol,The following statement contains a magic number: string.IsNullOrWhiteSpace(symbol?.Value) || symbol.Value.Length <= 3
Magic Number,QuantConnect.Brokerages.Bitfinex.Messages,Candle,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\Messages.cs,Candle,The following statement contains a magic number: Close = entries[2].ConvertInvariant<decimal>();
Magic Number,QuantConnect.Brokerages.Bitfinex.Messages,Candle,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\Messages.cs,Candle,The following statement contains a magic number: High = entries[3].ConvertInvariant<decimal>();
Magic Number,QuantConnect.Brokerages.Bitfinex.Messages,Candle,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\Messages.cs,Candle,The following statement contains a magic number: Low = entries[4].ConvertInvariant<decimal>();
Magic Number,QuantConnect.Brokerages.Bitfinex.Messages,Candle,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\Messages.cs,Candle,The following statement contains a magic number: Volume = entries[5].ConvertInvariant<decimal>();
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,FxcmBrokerage,The following statement contains a magic number: HistoryResponseTimeout = 5000;
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,Connect,The following statement contains a magic number: _connectionMonitorThread = new Thread(() =>                  {                      _lastReadyMessageTime = DateTime.UtcNow;                        try                      {                          while (!_cancellationTokenSource.IsCancellationRequested)                          {                              TimeSpan elapsed;                              lock (_lockerConnectionMonitor)                              {                                  elapsed = DateTime.UtcNow - _lastReadyMessageTime;                              }                                if (!_connectionLost && elapsed > TimeSpan.FromSeconds(10))                              {                                  _connectionLost = true;                                    OnMessage(BrokerageMessageEvent.Disconnected("Connection with FXCM server lost. " +                                                                               "This could be because of internet connectivity issues. "));                              }                              else if (_connectionLost && IsWithinTradingHours())                              {                                  Log.Trace("FxcmBrokerage.ConnectionMonitorThread(): Attempting reconnection...");                                    try                                  {                                      // log out                                      try                                      {                                          _gateway.logout();                                      }                                      catch (Exception)                                      {                                          // ignored                                      }                                        // remove the message listeners                                      _gateway.removeGenericMessageListener(this);                                      _gateway.removeStatusMessageListener(this);                                        // register the message listeners with the gateway                                      _gateway.registerGenericMessageListener(this);                                      _gateway.registerStatusMessageListener(this);                                        // log in                                      _gateway.login(loginProperties);                                        // load instruments' accounts' orders' positions                                      LoadInstruments();                                      if (!EnableOnlyHistoryRequests)                                      {                                          LoadAccounts();                                          LoadOpenOrders();                                          LoadOpenPositions();                                      }                                        _connectionLost = false;                                        OnMessage(BrokerageMessageEvent.Reconnected("Connection with FXCM server restored."));                                  }                                  catch (Exception exception)                                  {                                      Log.Trace("FxcmBrokerage.ConnectionMonitorThread(): reconnect failed.");                                      Log.Error(exception);                                  }                              }                                Thread.Sleep(5000);                          }                      }                      catch (Exception exception)                      {                          Log.Error(exception);                      }                  }) { IsBackground = true };
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,Connect,The following statement contains a magic number: _connectionMonitorThread = new Thread(() =>                  {                      _lastReadyMessageTime = DateTime.UtcNow;                        try                      {                          while (!_cancellationTokenSource.IsCancellationRequested)                          {                              TimeSpan elapsed;                              lock (_lockerConnectionMonitor)                              {                                  elapsed = DateTime.UtcNow - _lastReadyMessageTime;                              }                                if (!_connectionLost && elapsed > TimeSpan.FromSeconds(10))                              {                                  _connectionLost = true;                                    OnMessage(BrokerageMessageEvent.Disconnected("Connection with FXCM server lost. " +                                                                               "This could be because of internet connectivity issues. "));                              }                              else if (_connectionLost && IsWithinTradingHours())                              {                                  Log.Trace("FxcmBrokerage.ConnectionMonitorThread(): Attempting reconnection...");                                    try                                  {                                      // log out                                      try                                      {                                          _gateway.logout();                                      }                                      catch (Exception)                                      {                                          // ignored                                      }                                        // remove the message listeners                                      _gateway.removeGenericMessageListener(this);                                      _gateway.removeStatusMessageListener(this);                                        // register the message listeners with the gateway                                      _gateway.registerGenericMessageListener(this);                                      _gateway.registerStatusMessageListener(this);                                        // log in                                      _gateway.login(loginProperties);                                        // load instruments' accounts' orders' positions                                      LoadInstruments();                                      if (!EnableOnlyHistoryRequests)                                      {                                          LoadAccounts();                                          LoadOpenOrders();                                          LoadOpenPositions();                                      }                                        _connectionLost = false;                                        OnMessage(BrokerageMessageEvent.Reconnected("Connection with FXCM server restored."));                                  }                                  catch (Exception exception)                                  {                                      Log.Trace("FxcmBrokerage.ConnectionMonitorThread(): reconnect failed.");                                      Log.Error(exception);                                  }                              }                                Thread.Sleep(5000);                          }                      }                      catch (Exception exception)                      {                          Log.Error(exception);                      }                  }) { IsBackground = true };
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,IsWithinTradingHours,The following statement contains a magic number: return !(time.DayOfWeek == DayOfWeek.Friday && time.TimeOfDay > new TimeSpan(16' 55' 0) ||                       time.DayOfWeek == DayOfWeek.Saturday ||                       time.DayOfWeek == DayOfWeek.Sunday && time.TimeOfDay < new TimeSpan(17' 0' 0) ||                       time.Month == 12 && time.Day == 25 ||                       time.Month == 1 && time.Day == 1);
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,IsWithinTradingHours,The following statement contains a magic number: return !(time.DayOfWeek == DayOfWeek.Friday && time.TimeOfDay > new TimeSpan(16' 55' 0) ||                       time.DayOfWeek == DayOfWeek.Saturday ||                       time.DayOfWeek == DayOfWeek.Sunday && time.TimeOfDay < new TimeSpan(17' 0' 0) ||                       time.Month == 12 && time.Day == 25 ||                       time.Month == 1 && time.Day == 1);
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,IsWithinTradingHours,The following statement contains a magic number: return !(time.DayOfWeek == DayOfWeek.Friday && time.TimeOfDay > new TimeSpan(16' 55' 0) ||                       time.DayOfWeek == DayOfWeek.Saturday ||                       time.DayOfWeek == DayOfWeek.Sunday && time.TimeOfDay < new TimeSpan(17' 0' 0) ||                       time.Month == 12 && time.Day == 25 ||                       time.Month == 1 && time.Day == 1);
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,IsWithinTradingHours,The following statement contains a magic number: return !(time.DayOfWeek == DayOfWeek.Friday && time.TimeOfDay > new TimeSpan(16' 55' 0) ||                       time.DayOfWeek == DayOfWeek.Saturday ||                       time.DayOfWeek == DayOfWeek.Sunday && time.TimeOfDay < new TimeSpan(17' 0' 0) ||                       time.Month == 12 && time.Day == 25 ||                       time.Month == 1 && time.Day == 1);
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,IsWithinTradingHours,The following statement contains a magic number: return !(time.DayOfWeek == DayOfWeek.Friday && time.TimeOfDay > new TimeSpan(16' 55' 0) ||                       time.DayOfWeek == DayOfWeek.Saturday ||                       time.DayOfWeek == DayOfWeek.Sunday && time.TimeOfDay < new TimeSpan(17' 0' 0) ||                       time.Month == 12 && time.Day == 25 ||                       time.Month == 1 && time.Day == 1);
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,GetAccountHoldings,The following statement contains a magic number: holding.MarketPrice = Convert.ToDecimal((quote.getBidClose() + quote.getAskClose()) / 2);
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,GetCashBalance,The following statement contains a magic number: var quoteCurrency = ticker.Substring(ticker.Length - 3);
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,PlaceOrder,The following statement contains a magic number: throw new TimeoutException("FxcmBrokerage.PlaceOrder(): Operation took longer than " +                      $"{((decimal) ResponseTimeout / 1000).ToStringInvariant()} seconds."                  );
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,UpdateOrder,The following statement contains a magic number: throw new TimeoutException("FxcmBrokerage.UpdateOrder(): Operation took longer than " +                      $"{((decimal) ResponseTimeout / 1000).ToStringInvariant()} seconds."                  );
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,CancelOrder,The following statement contains a magic number: throw new TimeoutException("FxcmBrokerage.CancelOrder(): Operation took longer than " +                      $"{((decimal) ResponseTimeout / 1000).ToStringInvariant()} seconds."                  );
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,GetHistory,The following statement contains a magic number: request.StartTimeUtc.AddSeconds(300) >= end
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,GetHistory,The following statement contains a magic number: throw new TimeoutException("FxcmBrokerage.GetHistory(): History operation ending in {end:O} took longer than " +                              $"{((decimal) HistoryResponseTimeout / 1000).ToStringInvariant()} seconds. This may be because there is no data' retrying..."                          );
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,GetHistory,The following statement contains a magic number: request.StartTimeUtc.AddSeconds(10) >= end
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,LoadInstruments,The following statement contains a magic number: throw new TimeoutException("FxcmBrokerage.LoadInstruments(): Operation took longer than " +                      $"{((decimal) ResponseTimeout / 1000).ToStringInvariant()} seconds."                  );
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,LoadAccounts,The following statement contains a magic number: throw new TimeoutException("FxcmBrokerage.LoadAccounts(): Operation took longer than " +                      $"{((decimal) ResponseTimeout / 1000).ToStringInvariant()} seconds."                  );
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,LoadOpenOrders,The following statement contains a magic number: throw new TimeoutException("FxcmBrokerage.LoadOpenOrders(): Operation took longer than " +                      $"{((decimal) ResponseTimeout / 1000).ToStringInvariant()} seconds."                  );
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,LoadOpenPositions,The following statement contains a magic number: throw new TimeoutException("FxcmBrokerage.LoadOpenPositions(): Operation took longer than " +                      $"{((decimal) ResponseTimeout / 1000).ToStringInvariant()} seconds."                  );
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,GetQuotes,The following statement contains a magic number: throw new TimeoutException("FxcmBrokerage.GetQuotes(): Operation took longer than " +                      $"{((decimal) ResponseTimeout / 1000).ToStringInvariant()} seconds."                  );
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerageFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerageFactory.cs,CreateBrokerageMessageHandler,The following statement contains a magic number: return new DefaultBrokerageMessageHandler(algorithm' job' api' openThreshold: TimeSpan.FromMinutes(-30));
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmSymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmSymbolMapper.cs,GetBrokerageSecurityType,The following statement contains a magic number: return tokens.Length == 2 && KnownCurrencies.Contains(tokens[0]) && KnownCurrencies.Contains(tokens[1])                  ? SecurityType.Forex                  : SecurityType.Cfd;
Magic Number,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,ConvertSymbol,The following statement contains a magic number: return $"{symbol.Value.Substring(0' 3).ToUpperInvariant()}-{symbol.Value.Substring(3' 3).ToUpperInvariant()}";
Magic Number,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,ConvertSymbol,The following statement contains a magic number: return $"{symbol.Value.Substring(0' 3).ToUpperInvariant()}-{symbol.Value.Substring(3' 3).ToUpperInvariant()}";
Magic Number,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,ConvertSymbol,The following statement contains a magic number: return $"{symbol.Value.Substring(0' 3).ToUpperInvariant()}-{symbol.Value.Substring(3' 3).ToUpperInvariant()}";
Magic Number,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,ExecuteRestRequest,The following statement contains a magic number: const int maxAttempts = 10;
Magic Number,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,ParseCandleData,The following statement contains a magic number: var close = datapoint[4].ToDecimal();
Magic Number,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,ParseCandleData,The following statement contains a magic number: yield return new TradeBar                  {                      Symbol = symbol'                      Time = time'                      Period = period'                      Open = datapoint[3].ToDecimal()'                      High = datapoint[2].ToDecimal()'                      Low = datapoint[1].ToDecimal()'                      Close = close'                      Value = close'                      Volume = decimal.Parse(datapoint[5]' NumberStyles.Float' CultureInfo.InvariantCulture)                  };
Magic Number,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,ParseCandleData,The following statement contains a magic number: yield return new TradeBar                  {                      Symbol = symbol'                      Time = time'                      Period = period'                      Open = datapoint[3].ToDecimal()'                      High = datapoint[2].ToDecimal()'                      Low = datapoint[1].ToDecimal()'                      Close = close'                      Value = close'                      Volume = decimal.Parse(datapoint[5]' NumberStyles.Float' CultureInfo.InvariantCulture)                  };
Magic Number,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,ParseCandleData,The following statement contains a magic number: yield return new TradeBar                  {                      Symbol = symbol'                      Time = time'                      Period = period'                      Open = datapoint[3].ToDecimal()'                      High = datapoint[2].ToDecimal()'                      Low = datapoint[1].ToDecimal()'                      Close = close'                      Value = close'                      Volume = decimal.Parse(datapoint[5]' NumberStyles.Float' CultureInfo.InvariantCulture)                  };
Magic Number,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,OnL2Update,The following statement contains a magic number: var size = decimal.Parse(row[2]' NumberStyles.Float' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,EmitQuoteTick,The following statement contains a magic number: Ticks.Add(new Tick                  {                      AskPrice = askPrice'                      BidPrice = bidPrice'                      Value = (askPrice + bidPrice) / 2m'                      Time = DateTime.UtcNow'                      Symbol = symbol'                      TickType = TickType.Quote'                      AskSize = askSize'                      BidSize = bidSize                  });
Magic Number,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,Subscribe,The following statement contains a magic number: var products = ChannelList.Select(s => s.Value.Symbol.Substring(0' 3) + "-" + s.Value.Symbol.Substring(3)).ToArray();
Magic Number,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,Subscribe,The following statement contains a magic number: var products = ChannelList.Select(s => s.Value.Symbol.Substring(0' 3) + "-" + s.Value.Symbol.Substring(3)).ToArray();
Magic Number,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,PollTick,The following statement contains a magic number: int delay = 36000000;
Magic Number,QuantConnect.Brokerages.InteractiveBrokers.FinancialAdvisor,FinancialAdvisorConfiguration,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\FinancialAdvisor\FinancialAdvisorConfiguration.cs,Load,The following statement contains a magic number: !faResetEvent.WaitOne(2000)
Magic Number,QuantConnect.Brokerages.InteractiveBrokers.FinancialAdvisor,FinancialAdvisorConfiguration,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\FinancialAdvisor\FinancialAdvisorConfiguration.cs,Load,The following statement contains a magic number: !faResetEvent.WaitOne(2000)
Magic Number,QuantConnect.Brokerages.InteractiveBrokers.FinancialAdvisor,FinancialAdvisorConfiguration,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\FinancialAdvisor\FinancialAdvisorConfiguration.cs,Load,The following statement contains a magic number: !faResetEvent.WaitOne(2000)
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,InteractiveBrokersBrokerage,The following statement contains a magic number: !_ibAutomaterInitializeEvent.WaitOne(TimeSpan.FromSeconds(60))
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,InteractiveBrokersBrokerage,The following statement contains a magic number: new Thread(() =>              {                  try                  {                      Log.Trace("InteractiveBrokersBrokerage.ResetHandler(): thread started.");                        while (!_ctsRestartGateway.IsCancellationRequested)                      {                          if (_resetEventRestartGateway.WaitOne(1000' _ctsRestartGateway.Token))                          {                              Log.Trace("InteractiveBrokersBrokerage.ResetHandler(): Reset sequence start.");                                try                              {                                  ResetGatewayConnection();                              }                              catch (Exception exception)                              {                                  Log.Error("InteractiveBrokersBrokerage.ResetHandler(): Error in ResetGatewayConnection: " + exception);                              }                                Log.Trace($"InteractiveBrokersBrokerage.ResetHandler(): Reset sequence end. Current IsConnected state: {IsConnected}");                          }                      }                        Log.Trace("InteractiveBrokersBrokerage.ResetHandler(): thread ended.");                  }                  catch (Exception exception)                  {                      Log.Error("InteractiveBrokersBrokerage.ResetHandler(): Error in reset handler thread: " + exception);                  }              })              { IsBackground = true }.Start();
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetOpenOrdersInternal,The following statement contains a magic number: var timedOut = !manualResetEvent.WaitOne(15000);
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetExecutions,The following statement contains a magic number: !manualResetEvent.WaitOne(5000)
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,Connect,The following statement contains a magic number: const int maxAttempts = 5;
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,Connect,The following statement contains a magic number: Thread.Sleep(2500);
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,Connect,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,Connect,The following statement contains a magic number: !_waitForNextValidId.WaitOne(15000)
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,Connect,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,Connect,The following statement contains a magic number: _client.ClientSocket.setServerLogLevel(5);
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,DownloadAccount,The following statement contains a magic number: firstAccountUpdateReceived.WaitOne(2500);
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,DownloadAccount,The following statement contains a magic number: Thread.Sleep(2500);
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,DownloadAccount,The following statement contains a magic number: !_accountHoldingsResetEvent.WaitOne(15000)
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetContractDetails,The following statement contains a magic number: const int timeout = 60;
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetContractDetails,The following statement contains a magic number: !manualResetEvent.WaitOne(timeout * 1000)
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,FindContracts,The following statement contains a magic number: const int timeout = 60;
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,FindContracts,The following statement contains a magic number: !manualResetEvent.WaitOne(timeout * 1000)
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,HandleError,The following statement contains a magic number: errorCode == 1100
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,ResetGatewayConnection,The following statement contains a magic number: !_ibAutomaterInitializeEvent.WaitOne(TimeSpan.FromSeconds(60))
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,CreateContract,The following statement contains a magic number: contract.Symbol = ibSymbol.Substring(0' 3);
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,CreateContract,The following statement contains a magic number: contract.Currency = ibSymbol.Substring(3);
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,ParseExpiryDateTime,The following statement contains a magic number: parts.Length == 3
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,IsWithinScheduledServerResetTimes,The following statement contains a magic number: time.DayOfWeek == DayOfWeek.Friday && timeOfDay > new TimeSpan(22' 45' 0) ||                  time.DayOfWeek == DayOfWeek.Saturday && timeOfDay < new TimeSpan(3' 15' 0)
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,IsWithinScheduledServerResetTimes,The following statement contains a magic number: time.DayOfWeek == DayOfWeek.Friday && timeOfDay > new TimeSpan(22' 45' 0) ||                  time.DayOfWeek == DayOfWeek.Saturday && timeOfDay < new TimeSpan(3' 15' 0)
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,IsWithinScheduledServerResetTimes,The following statement contains a magic number: time.DayOfWeek == DayOfWeek.Friday && timeOfDay > new TimeSpan(22' 45' 0) ||                  time.DayOfWeek == DayOfWeek.Saturday && timeOfDay < new TimeSpan(3' 15' 0)
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,IsWithinScheduledServerResetTimes,The following statement contains a magic number: time.DayOfWeek == DayOfWeek.Friday && timeOfDay > new TimeSpan(22' 45' 0) ||                  time.DayOfWeek == DayOfWeek.Saturday && timeOfDay < new TimeSpan(3' 15' 0)
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,Subscribe,The following statement contains a magic number: Client.ClientSocket.reqMarketDataType(3);
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,AdjustQuantity,The following statement contains a magic number: switch (type)              {                  case SecurityType.Equity:                      return size * 100;                  default:                      return size;              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,HandleTickSize,The following statement contains a magic number: switch (e.Field)              {                  case IBApi.TickType.BID_SIZE:                  case IBApi.TickType.DELAYED_BID_SIZE:                        tick = entry.LastQuoteTick;                        if (tick == null)                      {                          // tick size message must be preceded by a tick price message                          return;                      }                        tick.BidSize = quantity;                        if (tick.BidPrice == 0)                      {                          // no bid price' do not emit tick                          return;                      }                        if (tick.BidPrice > 0 && tick.AskPrice > 0 && tick.BidPrice >= tick.AskPrice)                      {                          // new bid price jumped at or above previous ask price' wait for new ask price                          return;                      }                        if (tick.AskPrice == 0)                      {                          // we have a bid price but no ask price' use bid price as value                          tick.Value = tick.BidPrice;                      }                      else                      {                          // we have both bid price and ask price' use mid price as value                          tick.Value = (tick.BidPrice + tick.AskPrice) / 2;                      }                      break;                    case IBApi.TickType.ASK_SIZE:                  case IBApi.TickType.DELAYED_ASK_SIZE:                        tick = entry.LastQuoteTick;                        if (tick == null)                      {                          // tick size message must be preceded by a tick price message                          return;                      }                        tick.AskSize = quantity;                        if (tick.AskPrice == 0)                      {                          // no ask price' do not emit tick                          return;                      }                        if (tick.BidPrice > 0 && tick.AskPrice > 0 && tick.BidPrice >= tick.AskPrice)                      {                          // new ask price jumped at or below previous bid price' wait for new bid price                          return;                      }                        if (tick.BidPrice == 0)                      {                          // we have an ask price but no bid price' use ask price as value                          tick.Value = tick.AskPrice;                      }                      else                      {                          // we have both bid price and ask price' use mid price as value                          tick.Value = (tick.BidPrice + tick.AskPrice) / 2;                      }                      break;                    case IBApi.TickType.LAST_SIZE:                  case IBApi.TickType.DELAYED_LAST_SIZE:                        tick = entry.LastTradeTick;                        if (tick == null)                      {                          // tick size message must be preceded by a tick price message                          return;                      }                        // set the traded quantity                      tick.Quantity = quantity;                      break;                    case IBApi.TickType.OPEN_INTEREST:                  case IBApi.TickType.OPTION_CALL_OPEN_INTEREST:                  case IBApi.TickType.OPTION_PUT_OPEN_INTEREST:                        if (symbol.ID.SecurityType != SecurityType.Option && symbol.ID.SecurityType != SecurityType.Future)                      {                          return;                      }                        if (entry.LastOpenInterestTick == null)                      {                          entry.LastOpenInterestTick = new Tick { Symbol = symbol' TickType = TickType.OpenInterest };                      }                        tick = entry.LastOpenInterestTick;                        tick.Value = e.Size;                      break;                    default:                      return;              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,HandleTickSize,The following statement contains a magic number: switch (e.Field)              {                  case IBApi.TickType.BID_SIZE:                  case IBApi.TickType.DELAYED_BID_SIZE:                        tick = entry.LastQuoteTick;                        if (tick == null)                      {                          // tick size message must be preceded by a tick price message                          return;                      }                        tick.BidSize = quantity;                        if (tick.BidPrice == 0)                      {                          // no bid price' do not emit tick                          return;                      }                        if (tick.BidPrice > 0 && tick.AskPrice > 0 && tick.BidPrice >= tick.AskPrice)                      {                          // new bid price jumped at or above previous ask price' wait for new ask price                          return;                      }                        if (tick.AskPrice == 0)                      {                          // we have a bid price but no ask price' use bid price as value                          tick.Value = tick.BidPrice;                      }                      else                      {                          // we have both bid price and ask price' use mid price as value                          tick.Value = (tick.BidPrice + tick.AskPrice) / 2;                      }                      break;                    case IBApi.TickType.ASK_SIZE:                  case IBApi.TickType.DELAYED_ASK_SIZE:                        tick = entry.LastQuoteTick;                        if (tick == null)                      {                          // tick size message must be preceded by a tick price message                          return;                      }                        tick.AskSize = quantity;                        if (tick.AskPrice == 0)                      {                          // no ask price' do not emit tick                          return;                      }                        if (tick.BidPrice > 0 && tick.AskPrice > 0 && tick.BidPrice >= tick.AskPrice)                      {                          // new ask price jumped at or below previous bid price' wait for new bid price                          return;                      }                        if (tick.BidPrice == 0)                      {                          // we have an ask price but no bid price' use ask price as value                          tick.Value = tick.AskPrice;                      }                      else                      {                          // we have both bid price and ask price' use mid price as value                          tick.Value = (tick.BidPrice + tick.AskPrice) / 2;                      }                      break;                    case IBApi.TickType.LAST_SIZE:                  case IBApi.TickType.DELAYED_LAST_SIZE:                        tick = entry.LastTradeTick;                        if (tick == null)                      {                          // tick size message must be preceded by a tick price message                          return;                      }                        // set the traded quantity                      tick.Quantity = quantity;                      break;                    case IBApi.TickType.OPEN_INTEREST:                  case IBApi.TickType.OPTION_CALL_OPEN_INTEREST:                  case IBApi.TickType.OPTION_PUT_OPEN_INTEREST:                        if (symbol.ID.SecurityType != SecurityType.Option && symbol.ID.SecurityType != SecurityType.Future)                      {                          return;                      }                        if (entry.LastOpenInterestTick == null)                      {                          entry.LastOpenInterestTick = new Tick { Symbol = symbol' TickType = TickType.OpenInterest };                      }                        tick = entry.LastOpenInterestTick;                        tick.Value = e.Size;                      break;                    default:                      return;              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetHistory,The following statement contains a magic number: const int timeOut = 60;
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetHistory,The following statement contains a magic number: EventHandler<IB.ErrorEventArgs> clientOnError = (sender' args) =>                  {                      if (args.Id == historicalTicker)                      {                          if (args.Code == 162 && args.Message.Contains("pacing violation"))                          {                              // pacing violation happened                              pacing = true;                          }                          else                          {                              dataDownloaded.Set();                          }                      }                  };
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetHistory,The following statement contains a magic number: Client.ClientSocket.reqHistoricalData(historicalTicker' contract' endTime.ToStringInvariant("yyyyMMdd HH:mm:ss UTC")'                      duration' resolution' dataType' useRegularTradingHours' 2' false' new List<TagValue>());
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetHistory,The following statement contains a magic number: waitResult = WaitHandle.WaitAny(new WaitHandle[] {dataDownloading' dataDownloaded}' timeOut*1000);
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerageFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerageFactory.cs,CreateBrokerage,The following statement contains a magic number: var port = Config.GetInt("ib-port"' 4001);
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersSymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersSymbolMapper.cs,GetBrokerageSymbol,The following statement contains a magic number: symbol.ID.SecurityType == SecurityType.Forex && symbol.Value.Length != 6
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiBase,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiBase.cs,Connect,The following statement contains a magic number: _connectionMonitorThread = new Thread(() =>              {                  var nextReconnectionAttemptUtcTime = DateTime.UtcNow;                  double nextReconnectionAttemptSeconds = 1;                    lock (LockerConnectionMonitor)                  {                      LastHeartbeatUtcTime = DateTime.UtcNow;                  }                    try                  {                      while (!_cancellationTokenSource.IsCancellationRequested)                      {                          TimeSpan elapsed;                          lock (LockerConnectionMonitor)                          {                              elapsed = DateTime.UtcNow - LastHeartbeatUtcTime;                          }                            if (!_connectionLost && elapsed > TimeSpan.FromSeconds(20))                          {                              _connectionLost = true;                              nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                OnMessage(BrokerageMessageEvent.Disconnected("Connection with Oanda server lost. " +                                                                           "This could be because of internet connectivity issues. "));                          }                          else if (_connectionLost)                          {                              try                              {                                  if (elapsed <= TimeSpan.FromSeconds(20))                                  {                                      _connectionLost = false;                                      nextReconnectionAttemptSeconds = 1;                                        OnMessage(BrokerageMessageEvent.Reconnected("Connection with Oanda server restored."));                                  }                                  else                                  {                                      if (DateTime.UtcNow > nextReconnectionAttemptUtcTime)                                      {                                          try                                          {                                              // check if we have a connection                                              GetInstrumentList();                                                // restore events session                                              StopTransactionStream();                                              StartTransactionStream();                                                // restore rates session                                              List<Symbol> symbolsToSubscribe;                                              lock (LockerSubscriptions)                                              {                                                  symbolsToSubscribe = SubscribedSymbols.ToList();                                              }                                              SubscribeSymbols(symbolsToSubscribe);                                          }                                          catch (Exception)                                          {                                              // double the interval between attempts (capped to 1 minute)                                              nextReconnectionAttemptSeconds = Math.Min(nextReconnectionAttemptSeconds * 2' 60);                                              nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                          }                                      }                                  }                              }                              catch (Exception exception)                              {                                  Log.Error(exception);                              }                          }                            Thread.Sleep(1000);                      }                  }                  catch (Exception exception)                  {                      Log.Error(exception);                  }              }) { IsBackground = true };
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiBase,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiBase.cs,Connect,The following statement contains a magic number: _connectionMonitorThread = new Thread(() =>              {                  var nextReconnectionAttemptUtcTime = DateTime.UtcNow;                  double nextReconnectionAttemptSeconds = 1;                    lock (LockerConnectionMonitor)                  {                      LastHeartbeatUtcTime = DateTime.UtcNow;                  }                    try                  {                      while (!_cancellationTokenSource.IsCancellationRequested)                      {                          TimeSpan elapsed;                          lock (LockerConnectionMonitor)                          {                              elapsed = DateTime.UtcNow - LastHeartbeatUtcTime;                          }                            if (!_connectionLost && elapsed > TimeSpan.FromSeconds(20))                          {                              _connectionLost = true;                              nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                OnMessage(BrokerageMessageEvent.Disconnected("Connection with Oanda server lost. " +                                                                           "This could be because of internet connectivity issues. "));                          }                          else if (_connectionLost)                          {                              try                              {                                  if (elapsed <= TimeSpan.FromSeconds(20))                                  {                                      _connectionLost = false;                                      nextReconnectionAttemptSeconds = 1;                                        OnMessage(BrokerageMessageEvent.Reconnected("Connection with Oanda server restored."));                                  }                                  else                                  {                                      if (DateTime.UtcNow > nextReconnectionAttemptUtcTime)                                      {                                          try                                          {                                              // check if we have a connection                                              GetInstrumentList();                                                // restore events session                                              StopTransactionStream();                                              StartTransactionStream();                                                // restore rates session                                              List<Symbol> symbolsToSubscribe;                                              lock (LockerSubscriptions)                                              {                                                  symbolsToSubscribe = SubscribedSymbols.ToList();                                              }                                              SubscribeSymbols(symbolsToSubscribe);                                          }                                          catch (Exception)                                          {                                              // double the interval between attempts (capped to 1 minute)                                              nextReconnectionAttemptSeconds = Math.Min(nextReconnectionAttemptSeconds * 2' 60);                                              nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                          }                                      }                                  }                              }                              catch (Exception exception)                              {                                  Log.Error(exception);                              }                          }                            Thread.Sleep(1000);                      }                  }                  catch (Exception exception)                  {                      Log.Error(exception);                  }              }) { IsBackground = true };
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiBase,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiBase.cs,Connect,The following statement contains a magic number: _connectionMonitorThread = new Thread(() =>              {                  var nextReconnectionAttemptUtcTime = DateTime.UtcNow;                  double nextReconnectionAttemptSeconds = 1;                    lock (LockerConnectionMonitor)                  {                      LastHeartbeatUtcTime = DateTime.UtcNow;                  }                    try                  {                      while (!_cancellationTokenSource.IsCancellationRequested)                      {                          TimeSpan elapsed;                          lock (LockerConnectionMonitor)                          {                              elapsed = DateTime.UtcNow - LastHeartbeatUtcTime;                          }                            if (!_connectionLost && elapsed > TimeSpan.FromSeconds(20))                          {                              _connectionLost = true;                              nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                OnMessage(BrokerageMessageEvent.Disconnected("Connection with Oanda server lost. " +                                                                           "This could be because of internet connectivity issues. "));                          }                          else if (_connectionLost)                          {                              try                              {                                  if (elapsed <= TimeSpan.FromSeconds(20))                                  {                                      _connectionLost = false;                                      nextReconnectionAttemptSeconds = 1;                                        OnMessage(BrokerageMessageEvent.Reconnected("Connection with Oanda server restored."));                                  }                                  else                                  {                                      if (DateTime.UtcNow > nextReconnectionAttemptUtcTime)                                      {                                          try                                          {                                              // check if we have a connection                                              GetInstrumentList();                                                // restore events session                                              StopTransactionStream();                                              StartTransactionStream();                                                // restore rates session                                              List<Symbol> symbolsToSubscribe;                                              lock (LockerSubscriptions)                                              {                                                  symbolsToSubscribe = SubscribedSymbols.ToList();                                              }                                              SubscribeSymbols(symbolsToSubscribe);                                          }                                          catch (Exception)                                          {                                              // double the interval between attempts (capped to 1 minute)                                              nextReconnectionAttemptSeconds = Math.Min(nextReconnectionAttemptSeconds * 2' 60);                                              nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                          }                                      }                                  }                              }                              catch (Exception exception)                              {                                  Log.Error(exception);                              }                          }                            Thread.Sleep(1000);                      }                  }                  catch (Exception exception)                  {                      Log.Error(exception);                  }              }) { IsBackground = true };
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiBase,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiBase.cs,Connect,The following statement contains a magic number: _connectionMonitorThread = new Thread(() =>              {                  var nextReconnectionAttemptUtcTime = DateTime.UtcNow;                  double nextReconnectionAttemptSeconds = 1;                    lock (LockerConnectionMonitor)                  {                      LastHeartbeatUtcTime = DateTime.UtcNow;                  }                    try                  {                      while (!_cancellationTokenSource.IsCancellationRequested)                      {                          TimeSpan elapsed;                          lock (LockerConnectionMonitor)                          {                              elapsed = DateTime.UtcNow - LastHeartbeatUtcTime;                          }                            if (!_connectionLost && elapsed > TimeSpan.FromSeconds(20))                          {                              _connectionLost = true;                              nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                OnMessage(BrokerageMessageEvent.Disconnected("Connection with Oanda server lost. " +                                                                           "This could be because of internet connectivity issues. "));                          }                          else if (_connectionLost)                          {                              try                              {                                  if (elapsed <= TimeSpan.FromSeconds(20))                                  {                                      _connectionLost = false;                                      nextReconnectionAttemptSeconds = 1;                                        OnMessage(BrokerageMessageEvent.Reconnected("Connection with Oanda server restored."));                                  }                                  else                                  {                                      if (DateTime.UtcNow > nextReconnectionAttemptUtcTime)                                      {                                          try                                          {                                              // check if we have a connection                                              GetInstrumentList();                                                // restore events session                                              StopTransactionStream();                                              StartTransactionStream();                                                // restore rates session                                              List<Symbol> symbolsToSubscribe;                                              lock (LockerSubscriptions)                                              {                                                  symbolsToSubscribe = SubscribedSymbols.ToList();                                              }                                              SubscribeSymbols(symbolsToSubscribe);                                          }                                          catch (Exception)                                          {                                              // double the interval between attempts (capped to 1 minute)                                              nextReconnectionAttemptSeconds = Math.Min(nextReconnectionAttemptSeconds * 2' 60);                                              nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                          }                                      }                                  }                              }                              catch (Exception exception)                              {                                  Log.Error(exception);                              }                          }                            Thread.Sleep(1000);                      }                  }                  catch (Exception exception)                  {                      Log.Error(exception);                  }              }) { IsBackground = true };
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiBase,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiBase.cs,Connect,The following statement contains a magic number: _connectionMonitorThread = new Thread(() =>              {                  var nextReconnectionAttemptUtcTime = DateTime.UtcNow;                  double nextReconnectionAttemptSeconds = 1;                    lock (LockerConnectionMonitor)                  {                      LastHeartbeatUtcTime = DateTime.UtcNow;                  }                    try                  {                      while (!_cancellationTokenSource.IsCancellationRequested)                      {                          TimeSpan elapsed;                          lock (LockerConnectionMonitor)                          {                              elapsed = DateTime.UtcNow - LastHeartbeatUtcTime;                          }                            if (!_connectionLost && elapsed > TimeSpan.FromSeconds(20))                          {                              _connectionLost = true;                              nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                OnMessage(BrokerageMessageEvent.Disconnected("Connection with Oanda server lost. " +                                                                           "This could be because of internet connectivity issues. "));                          }                          else if (_connectionLost)                          {                              try                              {                                  if (elapsed <= TimeSpan.FromSeconds(20))                                  {                                      _connectionLost = false;                                      nextReconnectionAttemptSeconds = 1;                                        OnMessage(BrokerageMessageEvent.Reconnected("Connection with Oanda server restored."));                                  }                                  else                                  {                                      if (DateTime.UtcNow > nextReconnectionAttemptUtcTime)                                      {                                          try                                          {                                              // check if we have a connection                                              GetInstrumentList();                                                // restore events session                                              StopTransactionStream();                                              StartTransactionStream();                                                // restore rates session                                              List<Symbol> symbolsToSubscribe;                                              lock (LockerSubscriptions)                                              {                                                  symbolsToSubscribe = SubscribedSymbols.ToList();                                              }                                              SubscribeSymbols(symbolsToSubscribe);                                          }                                          catch (Exception)                                          {                                              // double the interval between attempts (capped to 1 minute)                                              nextReconnectionAttemptSeconds = Math.Min(nextReconnectionAttemptSeconds * 2' 60);                                              nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                          }                                      }                                  }                              }                              catch (Exception exception)                              {                                  Log.Error(exception);                              }                          }                            Thread.Sleep(1000);                      }                  }                  catch (Exception exception)                  {                      Log.Error(exception);                  }              }) { IsBackground = true };
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiBase,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiBase.cs,ProcessSubscriptionRequest,The following statement contains a magic number: Task.Run(() =>              {                  while (true)                  {                      DateTime requestTime;                      List<Symbol> symbolsToSubscribe;                      lock (LockerSubscriptions)                      {                          requestTime = _lastSubscribeRequestUtcTime.Add(SubscribeDelay);                          symbolsToSubscribe = SubscribedSymbols.ToList();                      }                        if (DateTime.UtcNow > requestTime)                      {                          // restart streaming session                          SubscribeSymbols(symbolsToSubscribe);                            lock (LockerSubscriptions)                          {                              _lastSubscribeRequestUtcTime = DateTime.UtcNow;                              if (SubscribedSymbols.Count == symbolsToSubscribe.Count)                              {                                  // no more subscriptions pending' task finished                                  _subscriptionsPending = false;                                  break;                              }                          }                      }                        Thread.Sleep(200);                  }              });
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,DownloadQuoteBars,The following statement contains a magic number: var period = resolution == Resolution.Second ? TimeSpan.FromSeconds(5) : resolution.ToTimeSpan();
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,PopulateOrderRequestParameters,The following statement contains a magic number: requestParams.Add("expiry"' XmlConvert.ToString(DateTime.Now.AddMonths(3)' XmlDateTimeSerializationMode.Utc));
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,PopulateOrderRequestParameters,The following statement contains a magic number: requestParams.Add("expiry"' XmlConvert.ToString(DateTime.Now.AddMonths(3)' XmlDateTimeSerializationMode.Utc));
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,PopulateOrderRequestParameters,The following statement contains a magic number: requestParams.Add("expiry"' XmlConvert.ToString(DateTime.Now.AddMonths(3)' XmlDateTimeSerializationMode.Utc));
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiV20,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV20.cs,GetTickDateTimeFromString,The following statement contains a magic number: return OandaBrokerage.GetDateTimeFromString(time.Remove(25' 3));
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiV20,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV20.cs,GetTickDateTimeFromString,The following statement contains a magic number: return OandaBrokerage.GetDateTimeFromString(time.Remove(25' 3));
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiV20,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV20.cs,DownloadTradeBars,The following statement contains a magic number: var period = resolution == Resolution.Second ? TimeSpan.FromSeconds(5) : resolution.ToTimeSpan();
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiV20,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV20.cs,DownloadQuoteBars,The following statement contains a magic number: var period = resolution == Resolution.Second ? TimeSpan.FromSeconds(5) : resolution.ToTimeSpan();
Magic Number,QuantConnect.Brokerages.Oanda,OandaBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaBrokerage.cs,GetAccountHoldings,The following statement contains a magic number: holding.MarketPrice = (tick.BidPrice + tick.AskPrice) / 2;
Magic Number,QuantConnect.Brokerages.Oanda,OandaBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaBrokerage.cs,GetHistory,The following statement contains a magic number: var period = request.Resolution == Resolution.Second ? TimeSpan.FromSeconds(5) : request.Resolution.ToTimeSpan();
Magic Number,QuantConnect.Brokerages.Oanda,OandaSymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaSymbolMapper.cs,GetBrokerageSecurityType,The following statement contains a magic number: tokens.Length != 2
Magic Number,QuantConnect.Brokerages.Oanda,OandaSymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaSymbolMapper.cs,IsKnownLeanSymbol,The following statement contains a magic number: symbol == null || string.IsNullOrWhiteSpace(symbol.Value) || symbol.Value.Length <= 3
Magic Number,QuantConnect.Brokerages.Oanda,OandaSymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaSymbolMapper.cs,ConvertLeanSymbolToOandaSymbol,The following statement contains a magic number: return leanSymbol.Insert(leanSymbol.Length - 3' "_");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->CancelOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->CancelOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'orderSpecifier' when calling DefaultApi->CancelOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->CancelOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->CancelOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'orderSpecifier' when calling DefaultApi->CancelOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ClosePosition");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ClosePosition");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'instrument' when calling DefaultApi->ClosePosition");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'closePositionBody' when calling DefaultApi->ClosePosition");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ClosePosition");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ClosePosition");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'instrument' when calling DefaultApi->ClosePosition");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'closePositionBody' when calling DefaultApi->ClosePosition");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->CloseTrade");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->CloseTrade");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'tradeSpecifier' when calling DefaultApi->CloseTrade");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'closeTradeBody' when calling DefaultApi->CloseTrade");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->CloseTrade");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->CloseTrade");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'tradeSpecifier' when calling DefaultApi->CloseTrade");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'closeTradeBody' when calling DefaultApi->CloseTrade");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ConfigureAccountWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ConfigureAccount");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ConfigureAccountWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ConfigureAccount");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ConfigureAccountAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ConfigureAccount");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ConfigureAccountAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ConfigureAccount");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->CreateOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->CreateOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'createOrderBody' when calling DefaultApi->CreateOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->CreateOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->CreateOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'createOrderBody' when calling DefaultApi->CreateOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetAccount");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetAccount");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetAccount");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetAccount");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetAccountChanges");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetAccountChanges");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetAccountChanges");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetAccountChanges");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetAccountInstruments");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetAccountInstruments");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetAccountInstruments");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetAccountInstruments");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountSummaryWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetAccountSummary");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountSummaryWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetAccountSummary");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountSummaryAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetAccountSummary");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountSummaryAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetAccountSummary");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetExternalUserInfoWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetExternalUserInfo");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetExternalUserInfoWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'userSpecifier' when calling DefaultApi->GetExternalUserInfo");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetExternalUserInfoAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetExternalUserInfo");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetExternalUserInfoAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'userSpecifier' when calling DefaultApi->GetExternalUserInfo");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetInstrumentCandles");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'instrument' when calling DefaultApi->GetInstrumentCandles");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetInstrumentCandles");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'instrument' when calling DefaultApi->GetInstrumentCandles");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'orderSpecifier' when calling DefaultApi->GetOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'orderSpecifier' when calling DefaultApi->GetOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetPosition");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetPosition");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'instrument' when calling DefaultApi->GetPosition");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetPosition");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetPosition");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'instrument' when calling DefaultApi->GetPosition");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetPrices");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetPrices");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'instruments' when calling DefaultApi->GetPrices");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetPrices");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetPrices");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'instruments' when calling DefaultApi->GetPrices");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetTrade");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetTrade");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'tradeSpecifier' when calling DefaultApi->GetTrade");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetTrade");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetTrade");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'tradeSpecifier' when calling DefaultApi->GetTrade");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetTransaction");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetTransaction");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'transactionID' when calling DefaultApi->GetTransaction");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetTransaction");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetTransaction");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'transactionID' when calling DefaultApi->GetTransaction");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetTransactionRange");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetTransactionRange");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'from' when calling DefaultApi->GetTransactionRange");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'to' when calling DefaultApi->GetTransactionRange");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetTransactionRange");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetTransactionRange");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'from' when calling DefaultApi->GetTransactionRange");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'to' when calling DefaultApi->GetTransactionRange");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetTransactionsSinceId");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetTransactionsSinceId");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'id' when calling DefaultApi->GetTransactionsSinceId");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetTransactionsSinceId");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetTransactionsSinceId");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'id' when calling DefaultApi->GetTransactionsSinceId");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetUserInfoWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetUserInfo");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetUserInfoWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'userSpecifier' when calling DefaultApi->GetUserInfo");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetUserInfoAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetUserInfo");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetUserInfoAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'userSpecifier' when calling DefaultApi->GetUserInfo");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListAccountsWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListAccounts");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListAccountsAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListAccounts");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenPositionsWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListOpenPositions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenPositionsWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListOpenPositions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenPositionsAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListOpenPositions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenPositionsAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListOpenPositions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenTradesWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListOpenTrades");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenTradesWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListOpenTrades");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenTradesAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListOpenTrades");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenTradesAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListOpenTrades");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListPendingOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListPendingOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListPendingOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListPendingOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPositionsWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListPositions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPositionsWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListPositions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPositionsAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListPositions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPositionsAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListPositions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListTrades");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListTrades");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListTrades");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListTrades");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListTransactions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListTransactions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListTransactions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListTransactions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ReplaceOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ReplaceOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'orderSpecifier' when calling DefaultApi->ReplaceOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'replaceOrderBody' when calling DefaultApi->ReplaceOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ReplaceOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ReplaceOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'orderSpecifier' when calling DefaultApi->ReplaceOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'replaceOrderBody' when calling DefaultApi->ReplaceOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->SetOrderClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->SetOrderClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'orderSpecifier' when calling DefaultApi->SetOrderClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'setOrderClientExtensionsBody' when calling DefaultApi->SetOrderClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->SetOrderClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->SetOrderClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'orderSpecifier' when calling DefaultApi->SetOrderClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'setOrderClientExtensionsBody' when calling DefaultApi->SetOrderClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->SetTradeClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->SetTradeClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'tradeSpecifier' when calling DefaultApi->SetTradeClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'setTradeClientExtensionsBody' when calling DefaultApi->SetTradeClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->SetTradeClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->SetTradeClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'tradeSpecifier' when calling DefaultApi->SetTradeClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'setTradeClientExtensionsBody' when calling DefaultApi->SetTradeClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->SetTradeDependentOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->SetTradeDependentOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'tradeSpecifier' when calling DefaultApi->SetTradeDependentOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'setTradeDependentOrdersBody' when calling DefaultApi->SetTradeDependentOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->SetTradeDependentOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->SetTradeDependentOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'tradeSpecifier' when calling DefaultApi->SetTradeDependentOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'setTradeDependentOrdersBody' when calling DefaultApi->SetTradeDependentOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->StreamPricing");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->StreamPricing");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'instruments' when calling DefaultApi->StreamPricing");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->StreamPricing");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->StreamPricing");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'instruments' when calling DefaultApi->StreamPricing");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamTransactionsWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->StreamTransactions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamTransactionsWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->StreamTransactions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamTransactionsAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->StreamTransactions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamTransactionsAsyncWithHttpInfo,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->StreamTransactions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersAsJson,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListPendingOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersAsJson,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListPendingOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrder,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->CreateOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrder,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->CreateOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrder,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'createOrderBody' when calling DefaultApi->CreateOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrder,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ReplaceOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrder,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ReplaceOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrder,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'orderSpecifier' when calling DefaultApi->ReplaceOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrder,The following statement contains a magic number: throw new ApiException(400' "Missing required parameter 'replaceOrderBody' when calling DefaultApi->ReplaceOrder");
Magic Number,Oanda.RestV20.Client,ApiClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Client\ApiClient.cs,ReadAsBytes,The following statement contains a magic number: byte[] buffer = new byte[16*1024];
Magic Number,Oanda.RestV20.Client,ApiClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Client\ApiClient.cs,ReadAsBytes,The following statement contains a magic number: byte[] buffer = new byte[16*1024];
Magic Number,Oanda.RestV20.Client,ApiClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Client\ApiClient.cs,UrlEncode,The following statement contains a magic number: const int maxLength = 32766;
Magic Number,Oanda.RestV20.Client,ApiClient,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Client\ApiClient.cs,UrlEncode,The following statement contains a magic number: StringBuilder sb = new StringBuilder(input.Length * 2);
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Alias.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Currency.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Balance.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CreatedByUserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CreatedTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Pl.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ResettablePL.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ResettabledPLTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginRate.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OpenTradeCount.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OpenPositionCount.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PendingOrderCount.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.HedgingEnabled.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UnrealizedPL.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.NAV.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginUsed.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginAvailable.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PositionValue.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.WithdrawalLimit.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginCallPercent.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Trades.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Positions.GetHashCode();
Magic Number,Oanda.RestV20.Model,Account,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Orders.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountChanges,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChanges.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,AccountChanges,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChanges.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrdersCreated.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountChanges,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChanges.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrdersCancelled.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountChanges,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChanges.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrdersFilled.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountChanges,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChanges.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrdersTriggered.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountChanges,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChanges.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradesOpened.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountChanges,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChanges.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradesReduced.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountChanges,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChanges.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradesClosed.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountChanges,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChanges.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Positions.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountChanges,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChanges.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Transactions.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UnrealizedPL.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.NAV.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginUsed.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginAvailable.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PositionValue.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.WithdrawalLimit.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginCallPercent.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Orders.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Trades.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Positions.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountID,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountID.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,AccountProperties,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountProperties.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,AccountProperties,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountProperties.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountProperties,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountProperties.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Mt4AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountProperties,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountProperties.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Tags.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Alias.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Currency.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Balance.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CreatedByUserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CreatedTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Pl.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ResettablePL.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ResettabledPLTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginRate.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OpenTradeCount.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OpenPositionCount.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PendingOrderCount.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.HedgingEnabled.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UnrealizedPL.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.NAV.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginUsed.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginAvailable.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PositionValue.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.WithdrawalLimit.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginCallPercent.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,AccountUnits,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountUnits.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,CalculatedPositionState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CalculatedPositionState.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,CalculatedPositionState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CalculatedPositionState.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Instrument.GetHashCode();
Magic Number,Oanda.RestV20.Model,CalculatedPositionState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CalculatedPositionState.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.NetUnrealizedPL.GetHashCode();
Magic Number,Oanda.RestV20.Model,CalculatedPositionState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CalculatedPositionState.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LongUnrealizedPL.GetHashCode();
Magic Number,Oanda.RestV20.Model,CalculatedPositionState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CalculatedPositionState.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ShortUnrealizedPL.GetHashCode();
Magic Number,Oanda.RestV20.Model,CalculatedTradeState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CalculatedTradeState.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,CalculatedTradeState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CalculatedTradeState.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,CalculatedTradeState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CalculatedTradeState.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UnrealizedPL.GetHashCode();
Magic Number,Oanda.RestV20.Model,Candlestick,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Candlestick.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,Candlestick,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Candlestick.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,Candlestick,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Candlestick.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Bid.GetHashCode();
Magic Number,Oanda.RestV20.Model,Candlestick,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Candlestick.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Ask.GetHashCode();
Magic Number,Oanda.RestV20.Model,Candlestick,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Candlestick.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Mid.GetHashCode();
Magic Number,Oanda.RestV20.Model,Candlestick,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Candlestick.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Volume.GetHashCode();
Magic Number,Oanda.RestV20.Model,Candlestick,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Candlestick.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Complete.GetHashCode();
Magic Number,Oanda.RestV20.Model,CandlestickData,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CandlestickData.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,CandlestickData,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CandlestickData.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.O.GetHashCode();
Magic Number,Oanda.RestV20.Model,CandlestickData,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CandlestickData.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.H.GetHashCode();
Magic Number,Oanda.RestV20.Model,CandlestickData,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CandlestickData.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.L.GetHashCode();
Magic Number,Oanda.RestV20.Model,CandlestickData,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CandlestickData.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.C.GetHashCode();
Magic Number,Oanda.RestV20.Model,ClientComment,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientComment.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,ClientConfigureRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureRejectTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,ClientConfigureRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,ClientConfigureRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,ClientConfigureRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,ClientConfigureRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,ClientConfigureRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,ClientConfigureRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,ClientConfigureRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,ClientConfigureRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Alias.GetHashCode();
Magic Number,Oanda.RestV20.Model,ClientConfigureRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginRate.GetHashCode();
Magic Number,Oanda.RestV20.Model,ClientConfigureRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RejectReason.GetHashCode();
Magic Number,Oanda.RestV20.Model,ClientConfigureTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,ClientConfigureTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,ClientConfigureTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,ClientConfigureTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,ClientConfigureTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,ClientConfigureTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,ClientConfigureTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,ClientConfigureTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,ClientConfigureTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Alias.GetHashCode();
Magic Number,Oanda.RestV20.Model,ClientConfigureTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginRate.GetHashCode();
Magic Number,Oanda.RestV20.Model,ClientExtensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientExtensions.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,ClientExtensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientExtensions.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,ClientExtensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientExtensions.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Tag.GetHashCode();
Magic Number,Oanda.RestV20.Model,ClientExtensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientExtensions.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Comment.GetHashCode();
Magic Number,Oanda.RestV20.Model,ClientID,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientID.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,ClientTag,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientTag.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,ClosePositionBody,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClosePositionBody.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,ClosePositionBody,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClosePositionBody.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LongUnits.GetHashCode();
Magic Number,Oanda.RestV20.Model,ClosePositionBody,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClosePositionBody.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LongClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,ClosePositionBody,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClosePositionBody.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ShortUnits.GetHashCode();
Magic Number,Oanda.RestV20.Model,ClosePositionBody,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClosePositionBody.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ShortClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,CloseTradeBody,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CloseTradeBody.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,CloseTradeBody,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CloseTradeBody.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Units.GetHashCode();
Magic Number,Oanda.RestV20.Model,CloseTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CloseTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,CloseTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CloseTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,CloseTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CloseTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,CloseTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CloseTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,CloseTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CloseTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,CloseTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CloseTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,CloseTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CloseTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,CloseTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CloseTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,ConfigureAccountBody,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ConfigureAccountBody.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,ConfigureAccountBody,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ConfigureAccountBody.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Alias.GetHashCode();
Magic Number,Oanda.RestV20.Model,ConfigureAccountBody,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ConfigureAccountBody.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginRate.GetHashCode();
Magic Number,Oanda.RestV20.Model,CreateOrderBody,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateOrderBody.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,CreateOrderBody,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateOrderBody.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Order.GetHashCode();
Magic Number,Oanda.RestV20.Model,CreateTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,CreateTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,CreateTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,CreateTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,CreateTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,CreateTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,CreateTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,CreateTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,CreateTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.DivisionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,CreateTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.SiteID.GetHashCode();
Magic Number,Oanda.RestV20.Model,CreateTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountUserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,CreateTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountNumber.GetHashCode();
Magic Number,Oanda.RestV20.Model,CreateTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.HomeCurrency.GetHashCode();
Magic Number,Oanda.RestV20.Model,Currency,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Currency.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,DailyFinancingTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DailyFinancingTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,DailyFinancingTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DailyFinancingTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,DailyFinancingTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DailyFinancingTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,DailyFinancingTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DailyFinancingTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,DailyFinancingTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DailyFinancingTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,DailyFinancingTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DailyFinancingTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,DailyFinancingTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DailyFinancingTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,DailyFinancingTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DailyFinancingTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,DailyFinancingTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DailyFinancingTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Financing.GetHashCode();
Magic Number,Oanda.RestV20.Model,DailyFinancingTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DailyFinancingTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountBalance.GetHashCode();
Magic Number,Oanda.RestV20.Model,DailyFinancingTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DailyFinancingTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountFinancingMode.GetHashCode();
Magic Number,Oanda.RestV20.Model,DailyFinancingTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DailyFinancingTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PositionFinancings.GetHashCode();
Magic Number,Oanda.RestV20.Model,DateTime,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DateTime.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,DecimalNumber,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DecimalNumber.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,DelayedTradeClosureTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DelayedTradeClosureTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,DelayedTradeClosureTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DelayedTradeClosureTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,DelayedTradeClosureTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DelayedTradeClosureTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,DelayedTradeClosureTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DelayedTradeClosureTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,DelayedTradeClosureTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DelayedTradeClosureTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,DelayedTradeClosureTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DelayedTradeClosureTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,DelayedTradeClosureTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DelayedTradeClosureTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,DelayedTradeClosureTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DelayedTradeClosureTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,DelayedTradeClosureTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DelayedTradeClosureTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Reason.GetHashCode();
Magic Number,Oanda.RestV20.Model,DelayedTradeClosureTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DelayedTradeClosureTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,DynamicOrderState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DynamicOrderState.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,DynamicOrderState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DynamicOrderState.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,DynamicOrderState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DynamicOrderState.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TrailingStopValue.GetHashCode();
Magic Number,Oanda.RestV20.Model,DynamicOrderState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DynamicOrderState.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TriggerDistance.GetHashCode();
Magic Number,Oanda.RestV20.Model,DynamicOrderState,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DynamicOrderState.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.IsTriggerDistanceExact.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse200,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse200.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse200,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse200.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Accounts.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse2001,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2001.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse2001,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2001.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Account.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse2001,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2001.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20010,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20010.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse20010,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20010.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderClientExtensionsModifyTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20010,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20010.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20010,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20010.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20011,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20011.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse20011,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20011.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Positions.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20011,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20011.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20012,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20012.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse20012,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20012.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Positions.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20012,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20012.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20013,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20013.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse20013,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20013.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Position.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20013,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20013.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20014,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20014.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse20014,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20014.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LongOrderCreateTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20014,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20014.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LongOrderFillTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20014,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20014.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LongOrderCancelTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20014,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20014.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ShortOrderCreateTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20014,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20014.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ShortOrderFillTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20014,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20014.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ShortOrderCancelTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20014,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20014.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20014,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20014.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20015,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20015.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse20015,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20015.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserInfo.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20016,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20016.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse20016,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20016.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserInfo.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20017,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20017.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse20017,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20017.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.From.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20017,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20017.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.To.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20017,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20017.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PageSize.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20017,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20017.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20017,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20017.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Count.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20017,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20017.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Pages.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20017,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20017.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20018,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20018.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse20018,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20018.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Transaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20018,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20018.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20019,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20019.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse20019,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20019.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Transactions.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20019,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20019.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse2002,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2002.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse2002,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2002.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Account.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse2002,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2002.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20020,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20020.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse20020,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20020.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Transaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20020,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20020.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Heartbeat.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20021,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20021.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse20021,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20021.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Prices.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20022,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20022.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse20022,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20022.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Price.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20022,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20022.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Heartbeat.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20023,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20023.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse20023,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20023.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Trades.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20023,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20023.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20024,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20024.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse20024,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20024.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Trades.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20024,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20024.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20025,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20025.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse20025,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20025.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Trade.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20025,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20025.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20026,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20026.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse20026,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20026.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderCreateTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20026,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20026.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderFillTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20026,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20026.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20026,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20026.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20026,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20026.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20027,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20027.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse20027,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20027.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClientExtensionsModifyTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20027,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20027.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20027,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20027.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20028,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse20028,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TakeProfitOrderCancelTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20028,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TakeProfitOrderTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20028,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TakeProfitOrderFillTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20028,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TakeProfitOrderCreatedCancelTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20028,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.StopLossOrderCancelTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20028,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.StopLossOrderTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20028,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.StopLossOrderFillTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20028,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.StopLossOrderCreatedCancelTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20028,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TrailingStopLossOrderCancelTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20028,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TrailingStopLossOrderTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20028,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20028,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20029,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20029.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse20029,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20029.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Instrument.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20029,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20029.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Granularity.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse20029,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20029.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Candles.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse2003,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2003.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse2003,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2003.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Instruments.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse2003,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2003.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse2004,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2004.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse2004,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2004.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientConfigureTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse2004,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2004.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse2005,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2005.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse2005,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2005.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Changes.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse2005,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2005.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.State.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse2005,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2005.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse2006,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2006.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse2006,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2006.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Orders.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse2006,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2006.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse2007,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2007.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse2007,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2007.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Orders.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse2007,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2007.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse2008,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2008.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse2008,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2008.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Order.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse2008,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2008.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse2009,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2009.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse2009,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2009.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse2009,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2009.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse2009,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2009.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse201,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse201.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse201,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse201.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderCreateTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse201,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse201.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderFillTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse201,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse201.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse201,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse201.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderReissueTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse201,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse201.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderReissueRejectTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse201,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse201.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse201,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse201.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse2011,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2011.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse2011,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2011.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse2011,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2011.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderCreateTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse2011,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2011.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderFillTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse2011,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2011.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderReissueTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse2011,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2011.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderReissueRejectTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse2011,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2011.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ReplacingOrderCancelTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse2011,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2011.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse2011,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2011.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse400,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse400.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse400,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse400.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientConfigureRejectTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse400,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse400.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse400,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse400.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorCode.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse400,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse400.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorMessage.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4001,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4001.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse4001,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4001.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4001,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4001.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4001,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4001.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4001,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4001.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorCode.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4001,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4001.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorMessage.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4002,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4002.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse4002,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4002.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4002,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4002.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4002,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4002.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4002,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4002.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorCode.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4002,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4002.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorMessage.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4003,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4003.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse4003,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4003.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderClientExtensionsModifyRejectTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4003,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4003.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4003,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4003.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4003,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4003.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorCode.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4003,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4003.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorMessage.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4004,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4004.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse4004,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4004.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LongOrderRejectTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4004,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4004.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ShortOrderRejectTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4004,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4004.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4004,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4004.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4004,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4004.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorCode.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4004,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4004.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorMessage.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4005,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4005.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse4005,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4005.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4005,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4005.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorCode.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4005,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4005.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorMessage.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4006,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4006.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse4006,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4006.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClientExtensionsModifyRejectTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4006,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4006.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4006,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4006.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4006,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4006.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorCode.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4006,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4006.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorMessage.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4007,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse4007,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TakeProfitOrderCancelRejectTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4007,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TakeProfitOrderRejectTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4007,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.StopLossOrderCancelRejectTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4007,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.StopLossOrderRejectTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4007,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TrailingStopLossOrderCancelRejectTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4007,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TrailingStopLossOrderRejectTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4007,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4007,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4007,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorCode.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4007,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorMessage.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse401,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse401.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse401,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse401.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorCode.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse401,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse401.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorMessage.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse404,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse404.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse404,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse404.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse404,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse404.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse404,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse404.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse404,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse404.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorCode.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse404,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse404.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorMessage.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4041,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4041.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse4041,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4041.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderCancelRejectTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4041,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4041.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4041,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4041.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4041,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4041.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorCode.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4041,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4041.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorMessage.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4042,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4042.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse4042,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4042.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderCancelRejectTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4042,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4042.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4042,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4042.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4042,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4042.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorCode.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4042,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4042.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorMessage.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4043,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4043.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse4043,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4043.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderClientExtensionsModifyRejectTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4043,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4043.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4043,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4043.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4043,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4043.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorCode.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4043,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4043.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorMessage.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4044,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4044.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse4044,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4044.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LongOrderRejectTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4044,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4044.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ShortOrderRejectTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4044,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4044.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4044,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4044.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4044,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4044.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorCode.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4044,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4044.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorMessage.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4045,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4045.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse4045,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4045.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4045,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4045.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4045,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4045.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4045,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4045.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorCode.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4045,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4045.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorMessage.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4046,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4046.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,InlineResponse4046,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4046.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClientExtensionsModifyRejectTransaction.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4046,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4046.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4046,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4046.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4046,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4046.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorCode.GetHashCode();
Magic Number,Oanda.RestV20.Model,InlineResponse4046,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4046.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ErrorMessage.GetHashCode();
Magic Number,Oanda.RestV20.Model,Instrument,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Instrument.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,Instrument,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Instrument.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Name.GetHashCode();
Magic Number,Oanda.RestV20.Model,Instrument,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Instrument.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,Instrument,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Instrument.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.DisplayName.GetHashCode();
Magic Number,Oanda.RestV20.Model,Instrument,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Instrument.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PipLocation.GetHashCode();
Magic Number,Oanda.RestV20.Model,Instrument,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Instrument.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.DisplayPrecision.GetHashCode();
Magic Number,Oanda.RestV20.Model,Instrument,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Instrument.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeUnitsPrecision.GetHashCode();
Magic Number,Oanda.RestV20.Model,Instrument,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Instrument.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MinimumTradeSize.GetHashCode();
Magic Number,Oanda.RestV20.Model,Instrument,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Instrument.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MaximumTrailingStopDistance.GetHashCode();
Magic Number,Oanda.RestV20.Model,Instrument,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Instrument.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MinimumTrailingStopDistance.GetHashCode();
Magic Number,Oanda.RestV20.Model,Instrument,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Instrument.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MaximumPositionSize.GetHashCode();
Magic Number,Oanda.RestV20.Model,Instrument,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Instrument.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MaximumOrderUnits.GetHashCode();
Magic Number,Oanda.RestV20.Model,Instrument,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Instrument.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginRate.GetHashCode();
Magic Number,Oanda.RestV20.Model,InstrumentName,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InstrumentName.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CreateTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.State.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Instrument.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Units.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Price.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.GtdTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PositionFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TriggerCondition.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.StopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.FillingTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.FilledTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeOpenedID.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeReducedID.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClosedIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CancellingTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CancelledTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ReplacesOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Instrument.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Units.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Price.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.GtdTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PositionFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TriggerCondition.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Reason.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.StopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RejectReason.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,LimitOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Instrument.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Units.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Price.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.GtdTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PositionFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TriggerCondition.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.StopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Instrument.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Units.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Price.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.GtdTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PositionFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TriggerCondition.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Reason.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.StopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ReplacesOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CancellingTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,LiquidityRegenerationSchedule,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LiquidityRegenerationSchedule.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,LiquidityRegenerationSchedule,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LiquidityRegenerationSchedule.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Steps.GetHashCode();
Magic Number,Oanda.RestV20.Model,LiquidityRegenerationScheduleStep,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LiquidityRegenerationScheduleStep.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,LiquidityRegenerationScheduleStep,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LiquidityRegenerationScheduleStep.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Timestamp.GetHashCode();
Magic Number,Oanda.RestV20.Model,LiquidityRegenerationScheduleStep,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LiquidityRegenerationScheduleStep.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BidLiquidityUsed.GetHashCode();
Magic Number,Oanda.RestV20.Model,LiquidityRegenerationScheduleStep,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LiquidityRegenerationScheduleStep.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AskLiquidityUsed.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarginCallEnterTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallEnterTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,MarginCallEnterTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallEnterTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarginCallEnterTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallEnterTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarginCallEnterTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallEnterTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarginCallEnterTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallEnterTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarginCallEnterTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallEnterTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarginCallEnterTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallEnterTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarginCallEnterTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallEnterTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarginCallExitTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExitTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,MarginCallExitTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExitTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarginCallExitTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExitTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarginCallExitTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExitTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarginCallExitTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExitTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarginCallExitTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExitTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarginCallExitTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExitTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarginCallExitTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExitTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarginCallExtendTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExtendTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,MarginCallExtendTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExtendTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarginCallExtendTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExtendTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarginCallExtendTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExtendTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarginCallExtendTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExtendTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarginCallExtendTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExtendTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarginCallExtendTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExtendTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarginCallExtendTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExtendTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarginCallExtendTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExtendTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ExtensionNumber.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CreateTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.State.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Instrument.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Units.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Price.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PriceBound.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.GtdTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PositionFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TriggerCondition.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.InitialMarketPrice.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.StopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.FillingTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.FilledTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeOpenedID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeReducedID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClosedIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CancellingTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CancelledTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ReplacesOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Instrument.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Units.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Price.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PriceBound.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.GtdTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PositionFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TriggerCondition.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Reason.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.StopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RejectReason.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Instrument.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Units.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Price.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PriceBound.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.GtdTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PositionFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TriggerCondition.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.StopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Instrument.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Units.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Price.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PriceBound.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.GtdTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PositionFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TriggerCondition.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Reason.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.StopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ReplacesOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CancellingTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CreateTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.State.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Instrument.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Units.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PriceBound.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PositionFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClose.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LongPositionCloseout.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginCloseout.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.DelayedTradeClose.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.StopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.FillingTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.FilledTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeOpenedID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeReducedID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClosedIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CancellingTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CancelledTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderDelayedTradeClose,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderDelayedTradeClose.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,MarketOrderDelayedTradeClose,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderDelayedTradeClose.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderDelayedTradeClose,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderDelayedTradeClose.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientTradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderDelayedTradeClose,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderDelayedTradeClose.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.SourceTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderMarginCloseout,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderMarginCloseout.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,MarketOrderMarginCloseout,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderMarginCloseout.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Reason.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderPositionCloseout,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderPositionCloseout.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,MarketOrderPositionCloseout,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderPositionCloseout.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Instrument.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderPositionCloseout,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderPositionCloseout.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Units.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Instrument.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Units.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PriceBound.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PositionFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClose.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LongPositionCloseout.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginCloseout.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.DelayedTradeClose.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Reason.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.StopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RejectReason.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRequest.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,MarketOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Instrument.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Units.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PriceBound.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PositionFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.StopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderTradeClose,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTradeClose.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,MarketOrderTradeClose,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTradeClose.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderTradeClose,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTradeClose.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientTradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderTradeClose,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTradeClose.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Units.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Instrument.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Units.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PriceBound.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PositionFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClose.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LongPositionCloseout.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.MarginCloseout.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.DelayedTradeClose.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Reason.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.StopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,OpenTradeFinancing,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OpenTradeFinancing.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,OpenTradeFinancing,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OpenTradeFinancing.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OpenTradeFinancing,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OpenTradeFinancing.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Financing.GetHashCode();
Magic Number,Oanda.RestV20.Model,Order,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Order.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,Order,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Order.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,Order,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Order.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CreateTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,Order,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Order.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.State.GetHashCode();
Magic Number,Oanda.RestV20.Model,Order,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Order.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderCancelRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelRejectTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,OrderCancelRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderCancelRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderCancelRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderCancelRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderCancelRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderCancelRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderCancelRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderCancelRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderCancelRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderCancelRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Reason.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderCancelRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RejectReason.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderCancelTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,OrderCancelTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderCancelTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderCancelTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderCancelTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderCancelTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderCancelTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderCancelTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderCancelTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderCancelTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderCancelTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Reason.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderCancelTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensionsModify.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RejectReason.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensionsModify.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Instrument.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Units.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Price.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Reason.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Pl.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Financing.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountBalance.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeOpened.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradesClosed.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeReduced.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderID,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderID.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,OrderIdentifier,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderIdentifier.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,OrderIdentifier,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderIdentifier.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderIdentifier,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderIdentifier.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,OrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderRequest.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,OrderSpecifier,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderSpecifier.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,Position,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Position.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,Position,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Position.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Instrument.GetHashCode();
Magic Number,Oanda.RestV20.Model,Position,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Position.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Pl.GetHashCode();
Magic Number,Oanda.RestV20.Model,Position,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Position.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UnrealizedPL.GetHashCode();
Magic Number,Oanda.RestV20.Model,Position,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Position.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ResettablePL.GetHashCode();
Magic Number,Oanda.RestV20.Model,Position,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Position.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this._Long.GetHashCode();
Magic Number,Oanda.RestV20.Model,Position,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Position.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this._Short.GetHashCode();
Magic Number,Oanda.RestV20.Model,PositionFinancing,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PositionFinancing.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,PositionFinancing,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PositionFinancing.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.InstrumentID.GetHashCode();
Magic Number,Oanda.RestV20.Model,PositionFinancing,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PositionFinancing.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Financing.GetHashCode();
Magic Number,Oanda.RestV20.Model,PositionFinancing,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PositionFinancing.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OpenTradeFinancings.GetHashCode();
Magic Number,Oanda.RestV20.Model,PositionSide,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PositionSide.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,PositionSide,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PositionSide.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Units.GetHashCode();
Magic Number,Oanda.RestV20.Model,PositionSide,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PositionSide.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AveragePrice.GetHashCode();
Magic Number,Oanda.RestV20.Model,PositionSide,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PositionSide.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,PositionSide,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PositionSide.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Pl.GetHashCode();
Magic Number,Oanda.RestV20.Model,PositionSide,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PositionSide.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UnrealizedPL.GetHashCode();
Magic Number,Oanda.RestV20.Model,PositionSide,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PositionSide.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ResettablePL.GetHashCode();
Magic Number,Oanda.RestV20.Model,Price,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Price.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,Price,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Price.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,Price,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Price.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Instrument.GetHashCode();
Magic Number,Oanda.RestV20.Model,Price,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Price.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,Price,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Price.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Status.GetHashCode();
Magic Number,Oanda.RestV20.Model,Price,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Price.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Tradeable.GetHashCode();
Magic Number,Oanda.RestV20.Model,Price,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Price.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Bids.GetHashCode();
Magic Number,Oanda.RestV20.Model,Price,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Price.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Asks.GetHashCode();
Magic Number,Oanda.RestV20.Model,Price,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Price.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CloseoutBid.GetHashCode();
Magic Number,Oanda.RestV20.Model,Price,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Price.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CloseoutAsk.GetHashCode();
Magic Number,Oanda.RestV20.Model,Price,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Price.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.QuoteHomeConversionFactors.GetHashCode();
Magic Number,Oanda.RestV20.Model,Price,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Price.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UnitsAvailable.GetHashCode();
Magic Number,Oanda.RestV20.Model,PriceBucket,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PriceBucket.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,PriceBucket,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PriceBucket.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Price.GetHashCode();
Magic Number,Oanda.RestV20.Model,PriceBucket,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PriceBucket.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Liquidity.GetHashCode();
Magic Number,Oanda.RestV20.Model,PriceValue,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PriceValue.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,PricingHeartbeat,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PricingHeartbeat.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,PricingHeartbeat,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PricingHeartbeat.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,PricingHeartbeat,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PricingHeartbeat.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,QuoteHomeConversionFactors,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\QuoteHomeConversionFactors.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,QuoteHomeConversionFactors,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\QuoteHomeConversionFactors.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PositiveUnits.GetHashCode();
Magic Number,Oanda.RestV20.Model,QuoteHomeConversionFactors,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\QuoteHomeConversionFactors.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.NegativeUnits.GetHashCode();
Magic Number,Oanda.RestV20.Model,ReopenTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ReopenTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,ReopenTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ReopenTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,ReopenTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ReopenTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,ReopenTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ReopenTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,ReopenTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ReopenTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,ReopenTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ReopenTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,ReopenTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ReopenTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,ReopenTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ReopenTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,ReplaceOrderBody,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ReplaceOrderBody.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,ReplaceOrderBody,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ReplaceOrderBody.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Order.GetHashCode();
Magic Number,Oanda.RestV20.Model,RequestID,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\RequestID.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,ResetResettablePLTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ResetResettablePLTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,ResetResettablePLTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ResetResettablePLTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,ResetResettablePLTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ResetResettablePLTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,ResetResettablePLTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ResetResettablePLTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,ResetResettablePLTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ResetResettablePLTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,ResetResettablePLTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ResetResettablePLTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,ResetResettablePLTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ResetResettablePLTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,ResetResettablePLTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ResetResettablePLTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,SetOrderClientExtensionsBody,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\SetOrderClientExtensionsBody.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,SetOrderClientExtensionsBody,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\SetOrderClientExtensionsBody.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,SetOrderClientExtensionsBody,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\SetOrderClientExtensionsBody.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,SetTradeClientExtensionsBody,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\SetTradeClientExtensionsBody.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,SetTradeClientExtensionsBody,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\SetTradeClientExtensionsBody.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,SetTradeDependentOrdersBody,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\SetTradeDependentOrdersBody.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,SetTradeDependentOrdersBody,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\SetTradeDependentOrdersBody.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TakeProfit.GetHashCode();
Magic Number,Oanda.RestV20.Model,SetTradeDependentOrdersBody,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\SetTradeDependentOrdersBody.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.StopLoss.GetHashCode();
Magic Number,Oanda.RestV20.Model,SetTradeDependentOrdersBody,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\SetTradeDependentOrdersBody.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TrailingStopLoss.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossDetails,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossDetails.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,StopLossDetails,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossDetails.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Price.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossDetails,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossDetails.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossDetails,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossDetails.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.GtdTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossDetails,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossDetails.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CreateTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.State.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientTradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Price.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.GtdTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TriggerCondition.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.FillingTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.FilledTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeOpenedID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeReducedID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClosedIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CancellingTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CancelledTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ReplacesOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientTradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Price.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.GtdTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TriggerCondition.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Reason.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RejectReason.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,StopLossOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientTradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Price.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.GtdTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TriggerCondition.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientTradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Price.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.GtdTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TriggerCondition.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Reason.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ReplacesOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CancellingTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CreateTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.State.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Instrument.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Units.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Price.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PriceBound.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.GtdTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PositionFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TriggerCondition.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.StopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.FillingTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.FilledTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeOpenedID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeReducedID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClosedIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CancellingTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CancelledTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ReplacesOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Instrument.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Units.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Price.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PriceBound.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.GtdTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PositionFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TriggerCondition.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Reason.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.StopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RejectReason.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Instrument.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Units.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Price.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PriceBound.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.GtdTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PositionFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TriggerCondition.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.StopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Instrument.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Units.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Price.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PriceBound.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.GtdTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.PositionFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TriggerCondition.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Reason.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.StopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ReplacesOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CancellingTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitDetails,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitDetails.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,TakeProfitDetails,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitDetails.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Price.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitDetails,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitDetails.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitDetails,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitDetails.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.GtdTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitDetails,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitDetails.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CreateTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.State.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientTradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Price.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.GtdTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TriggerCondition.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.FillingTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.FilledTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeOpenedID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeReducedID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClosedIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CancellingTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CancelledTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ReplacesOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientTradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Price.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.GtdTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TriggerCondition.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Reason.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RejectReason.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRequest.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientTradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Price.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.GtdTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TriggerCondition.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientTradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Price.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.GtdTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TriggerCondition.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Reason.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ReplacesOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CancellingTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,Trade,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,Trade,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,Trade,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Instrument.GetHashCode();
Magic Number,Oanda.RestV20.Model,Trade,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Price.GetHashCode();
Magic Number,Oanda.RestV20.Model,Trade,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OpenTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,Trade,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.State.GetHashCode();
Magic Number,Oanda.RestV20.Model,Trade,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.InitialUnits.GetHashCode();
Magic Number,Oanda.RestV20.Model,Trade,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CurrentUnits.GetHashCode();
Magic Number,Oanda.RestV20.Model,Trade,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RealizedPL.GetHashCode();
Magic Number,Oanda.RestV20.Model,Trade,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UnrealizedPL.GetHashCode();
Magic Number,Oanda.RestV20.Model,Trade,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AverageClosePrice.GetHashCode();
Magic Number,Oanda.RestV20.Model,Trade,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,Trade,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Financing.GetHashCode();
Magic Number,Oanda.RestV20.Model,Trade,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CloseTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,Trade,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,Trade,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TakeProfitOrder.GetHashCode();
Magic Number,Oanda.RestV20.Model,Trade,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.StopLossOrder.GetHashCode();
Magic Number,Oanda.RestV20.Model,Trade,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TrailingStopLossOrder.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientTradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RejectReason.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientTradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeID,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeID.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,TradeOpen,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeOpen.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,TradeOpen,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeOpen.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeOpen,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeOpen.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Units.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeOpen,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeOpen.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeReduce,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeReduce.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,TradeReduce,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeReduce.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeReduce,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeReduce.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Units.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeReduce,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeReduce.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RealizedPL.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeReduce,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeReduce.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Financing.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeSpecifier,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSpecifier.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Instrument.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Price.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OpenTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.State.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.InitialUnits.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CurrentUnits.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RealizedPL.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UnrealizedPL.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AverageClosePrice.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Financing.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CloseTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TakeProfitOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.StopLossOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TrailingStopLossOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossDetails,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossDetails.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,TrailingStopLossDetails,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossDetails.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Distance.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossDetails,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossDetails.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossDetails,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossDetails.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.GtdTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossDetails,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossDetails.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CreateTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.State.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientTradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Distance.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.GtdTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TriggerCondition.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TrailingStopValue.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.FillingTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.FilledTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeOpenedID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeReducedID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeClosedIDs.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CancellingTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CancelledTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ReplacesOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientTradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Distance.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.GtdTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TriggerCondition.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Reason.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RejectReason.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientTradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Distance.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.GtdTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TriggerCondition.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientTradeID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Distance.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TimeInForce.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.GtdTime.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.TriggerCondition.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Reason.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ClientExtensions.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ReplacesOrderID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.CancellingTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,Transaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Transaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,Transaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Transaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,Transaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Transaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,Transaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Transaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,Transaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Transaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,Transaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Transaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,Transaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Transaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TransactionHeartbeat,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransactionHeartbeat.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,TransactionHeartbeat,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransactionHeartbeat.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,TransactionHeartbeat,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransactionHeartbeat.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.LastTransactionID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TransactionHeartbeat,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransactionHeartbeat.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,TransactionID,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransactionID.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,TransferFundsRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsRejectTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,TransferFundsRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,TransferFundsRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,TransferFundsRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TransferFundsRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TransferFundsRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TransferFundsRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TransferFundsRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,TransferFundsRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Amount.GetHashCode();
Magic Number,Oanda.RestV20.Model,TransferFundsRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.FundingReason.GetHashCode();
Magic Number,Oanda.RestV20.Model,TransferFundsRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Comment.GetHashCode();
Magic Number,Oanda.RestV20.Model,TransferFundsRejectTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsRejectTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RejectReason.GetHashCode();
Magic Number,Oanda.RestV20.Model,TransferFundsTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsTransaction.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,TransferFundsTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Id.GetHashCode();
Magic Number,Oanda.RestV20.Model,TransferFundsTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Time.GetHashCode();
Magic Number,Oanda.RestV20.Model,TransferFundsTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TransferFundsTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TransferFundsTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.BatchID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TransferFundsTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.RequestID.GetHashCode();
Magic Number,Oanda.RestV20.Model,TransferFundsTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Type.GetHashCode();
Magic Number,Oanda.RestV20.Model,TransferFundsTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Amount.GetHashCode();
Magic Number,Oanda.RestV20.Model,TransferFundsTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.FundingReason.GetHashCode();
Magic Number,Oanda.RestV20.Model,TransferFundsTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Comment.GetHashCode();
Magic Number,Oanda.RestV20.Model,TransferFundsTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsTransaction.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.AccountBalance.GetHashCode();
Magic Number,Oanda.RestV20.Model,UnitsAvailable,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UnitsAvailable.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,UnitsAvailable,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UnitsAvailable.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this._Default.GetHashCode();
Magic Number,Oanda.RestV20.Model,UnitsAvailable,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UnitsAvailable.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ReduceFirst.GetHashCode();
Magic Number,Oanda.RestV20.Model,UnitsAvailable,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UnitsAvailable.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.ReduceOnly.GetHashCode();
Magic Number,Oanda.RestV20.Model,UnitsAvailable,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UnitsAvailable.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.OpenOnly.GetHashCode();
Magic Number,Oanda.RestV20.Model,UnitsAvailableDetails,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UnitsAvailableDetails.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,UnitsAvailableDetails,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UnitsAvailableDetails.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this._Long.GetHashCode();
Magic Number,Oanda.RestV20.Model,UnitsAvailableDetails,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UnitsAvailableDetails.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this._Short.GetHashCode();
Magic Number,Oanda.RestV20.Model,UserInfo,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UserInfo.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,UserInfo,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UserInfo.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Username.GetHashCode();
Magic Number,Oanda.RestV20.Model,UserInfo,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UserInfo.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,UserInfo,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UserInfo.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Country.GetHashCode();
Magic Number,Oanda.RestV20.Model,UserInfo,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UserInfo.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.EmailAddress.GetHashCode();
Magic Number,Oanda.RestV20.Model,UserInfoExternal,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UserInfoExternal.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,UserInfoExternal,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UserInfoExternal.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.UserID.GetHashCode();
Magic Number,Oanda.RestV20.Model,UserInfoExternal,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UserInfoExternal.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Country.GetHashCode();
Magic Number,Oanda.RestV20.Model,UserInfoExternal,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UserInfoExternal.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.FIFO.GetHashCode();
Magic Number,Oanda.RestV20.Model,UserSpecifier,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UserSpecifier.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,VWAPReceipt,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\VWAPReceipt.cs,GetHashCode,The following statement contains a magic number: int hash = 41;
Magic Number,Oanda.RestV20.Model,VWAPReceipt,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\VWAPReceipt.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Units.GetHashCode();
Magic Number,Oanda.RestV20.Model,VWAPReceipt,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\VWAPReceipt.cs,GetHashCode,The following statement contains a magic number: hash = hash * 59 + this.Price.GetHashCode();
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,GetNextTicks,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,Refresh,The following statement contains a magic number: _refreshDelay = new Timer(5000);
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,CreateTick,The following statement contains a magic number: var unix = tsd.UnixDate.ConvertInvariant<long>() / 1000;
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,CreateTick,The following statement contains a magic number: DateTime.UtcNow - utc > TimeSpan.FromSeconds(10)
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,TradierBrokerage,The following statement contains a magic number: _rateLimitPeriod[TradierApiRequestType.Standard] = TimeSpan.FromMilliseconds(500);
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,TradierBrokerage,The following statement contains a magic number: _rateLimitPeriod[TradierApiRequestType.Data] = TimeSpan.FromMilliseconds(500);
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,SetTokens,The following statement contains a magic number: var interval = (int)(1000*orderPollingIntervalInSeconds);
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,Execute,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,Execute,The following statement contains a magic number: Thread.Sleep(3000);
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,Execute,The following statement contains a magic number: Thread.Sleep(3000);
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,PlaceOrder,The following statement contains a magic number: request.AddParameter("price"' Math.Round(price' 2));
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,PlaceOrder,The following statement contains a magic number: request.AddParameter("stop"' Math.Round(stop' 2));
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,ChangeOrder,The following statement contains a magic number: request.AddParameter("price"' Math.Round(price' 2).ToString(CultureInfo.InvariantCulture));
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,ChangeOrder,The following statement contains a magic number: request.AddParameter("stop"' Math.Round(stop' 2).ToString(CultureInfo.InvariantCulture));
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,CheckForFills,The following statement contains a magic number: Task.Delay(TimeSpan.FromSeconds(2)).ContinueWith(t =>                      {                          var localUnknownTradierOrderIDs = _unknownTradierOrderIDs.ToHashSet();                          _unknownTradierOrderIDs.Clear();                          try                          {                              // verify we don't have them in the order provider                              Log.Trace("TradierBrokerage.CheckForFills(): Verifying missing brokerage IDs: " + string.Join("'"' localUnknownTradierOrderIDs));                              var orders = localUnknownTradierOrderIDs.Select(x => _orderProvider.GetOrderByBrokerageId(x)).Where(x => x != null);                              var stillUnknownOrderIDs = localUnknownTradierOrderIDs.Where(x => !orders.Any(y => y.BrokerId.Contains(x.ToStringInvariant()))).ToList();                              if (stillUnknownOrderIDs.Count > 0)                              {                                  // fetch all rejected intraday orders within the last minute' we're going to exclude rejected orders from the error condition                                  var recentOrders = GetIntradayAndPendingOrders().Where(x => x.Status == TradierOrderStatus.Rejected)                                      .Where(x => DateTime.UtcNow - x.TransactionDate < TimeSpan.FromMinutes(1)).ToHashSet(x => x.Id);                                    // remove recently rejected orders' sometimes we'll get updates for these but we've already marked them as rejected                                  stillUnknownOrderIDs.RemoveAll(x => recentOrders.Contains(x));                                    if (stillUnknownOrderIDs.Count > 0)                                  {                                      // if we still have unknown IDs then we've gotta bail on the algorithm                                      var ids = string.Join("' "' stillUnknownOrderIDs);                                      Log.Error("TradierBrokerage.CheckForFills(): Unable to verify all missing brokerage IDs: " + ids);                                      OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Error' "UnknownOrderId"' "Received unknown Tradier order id(s): " + ids));                                      return;                                  }                              }                              foreach (var unknownTradierOrderID in localUnknownTradierOrderIDs)                              {                                  // add these to the verified list so we don't check them again                                  _verifiedUnknownTradierOrderIDs.Add(unknownTradierOrderID);                              }                              Log.Trace("TradierBrokerage.CheckForFills(): Verified all missing brokerage IDs.");                          }                          catch (Exception err)                          {                              // we need to recheck these order ids since we failed' so add them back to the set                              foreach (var id in localUnknownTradierOrderIDs) _unknownTradierOrderIDs.Add(id);                                Log.Error(err);                              OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' "UnknownIdResolution"' "An error ocurred while trying to resolve unknown Tradier order IDs: " + err));                          }                      });
Missing Default,QuantConnect.Brokerages.Bitfinex,BitfinexBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexBrokerage.Messaging.cs,GetOrderPrice,The following switch statement is missing a default case: switch (order.Type)              {                  case OrderType.Limit:                      return ((LimitOrder)order).LimitPrice;                  case OrderType.Market:                      // Order price must be positive for market order too;                      // refuses for price = 0                      return 1;                  case OrderType.StopMarket:                      return ((StopMarketOrder)order).StopPrice;              }
Missing Default,QuantConnect.Brokerages.Bitfinex,BitfinexSubscriptionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSubscriptionManager.cs,OnSnapshot,The following switch statement is missing a default case: switch (channel.Name.ToLowerInvariant())                  {                      case "book":                          ProcessOrderBookSnapshot(channel' entries);                          return;                      case "trades":                          ProcessTradesSnapshot(channel' entries);                          return;                  }
Missing Default,QuantConnect.Brokerages.Bitfinex,BitfinexSubscriptionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Bitfinex\BitfinexSubscriptionManager.cs,OnUpdate,The following switch statement is missing a default case: switch (channel.Name.ToLowerInvariant())                  {                      case "book":                          ProcessOrderBookUpdate(channel' entries);                          return;                      case "trades":                          ProcessTradeUpdate(channel' entries);                          return;                  }
Missing Default,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,messageArrived,The following switch statement is missing a default case: switch (message.getStatusCode())              {                  case ISessionStatus.__Fields.STATUSCODE_READY:                      lock (_lockerConnectionMonitor)                      {                          _lastReadyMessageTime = DateTime.UtcNow;                      }                      break;              }
Missing Default,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,ConvertOrderStatus,The following switch statement is missing a default case: switch (status.getCode())              {                  case IFixValueDefs.__Fields.FXCMORDSTATUS_INPROCESS:                  case IFixValueDefs.__Fields.FXCMORDSTATUS_WAITING:                  case IFixValueDefs.__Fields.FXCMORDSTATUS_EXECUTING:                      result = OrderStatus.Submitted;                      break;                    case IFixValueDefs.__Fields.FXCMORDSTATUS_EXECUTED:                      result = OrderStatus.Filled;                      break;                    case IFixValueDefs.__Fields.FXCMORDSTATUS_CANCELLED:                  case IFixValueDefs.__Fields.FXCMORDSTATUS_EXPIRED:                      result = OrderStatus.Canceled;                      break;                    case IFixValueDefs.__Fields.FXCMORDSTATUS_REJECTED:                      result = OrderStatus.Invalid;                      break;              }
Missing Default,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,ToFxcmInterval,The following switch statement is missing a default case: switch (resolution)              {                  case Resolution.Tick:                      interval = FXCMTimingIntervalFactory.TICK;                        break;                  case Resolution.Second:                      interval = FXCMTimingIntervalFactory.SEC10;                        break;                  case Resolution.Minute:                      interval = FXCMTimingIntervalFactory.MIN1;                        break;                  case Resolution.Hour:                      interval = FXCMTimingIntervalFactory.HOUR1;                        break;                  case Resolution.Daily:                      interval = FXCMTimingIntervalFactory.DAY1;                        break;              }
Missing Default,QuantConnect.Brokerages.InteractiveBrokers.FinancialAdvisor,FinancialAdvisorConfiguration,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\FinancialAdvisor\FinancialAdvisorConfiguration.cs,Load,The following switch statement is missing a default case: switch (e.FaDataType)                  {                      case Constants.FaAliases:                          xmlAliases = e.FaXmlData;                          break;                        case Constants.FaGroups:                          xmlGroups = e.FaXmlData;                          break;                        case Constants.FaProfiles:                          xmlProfiles = e.FaXmlData;                          break;                  }
Missing Default,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersSymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersSymbolMapper.cs,GetBrokerageSymbol,The following switch statement is missing a default case: switch (symbol.ID.SecurityType)              {                  case SecurityType.Option:                      return symbol.Underlying.Value;                    case SecurityType.Future:                      return GetBrokerageRootSymbol(symbol.ID.Symbol);                    case SecurityType.Equity:                      return symbol.Value.Replace("."' " ");              }
Missing Default,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersSymbolMapper,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersSymbolMapper.cs,GetLeanSymbol,The following switch statement is missing a default case: switch (securityType)                  {                      case SecurityType.Future:                          return Symbol.CreateFuture(GetLeanRootSymbol(brokerageSymbol)' market' expirationDate);                        case SecurityType.Option:                          return Symbol.CreateOption(brokerageSymbol' market' OptionStyle.American' optionRight' strike' expirationDate);                        case SecurityType.Equity:                          brokerageSymbol = brokerageSymbol.Replace(" "' ".");                          break;                  }
Missing Default,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,PopulateOrderRequestParameters,The following switch statement is missing a default case: switch (order.Direction)                  {                      case OrderDirection.Buy:                          //Limit Order Does not like Lower Bound Values == Limit Price value                          //Don't set bounds when placing limit orders.                          //Orders can be submitted with lower and upper bounds. If the market price on execution falls outside these bounds' it is considered a "Bounds Violation" and the order is cancelled.                          break;                        case OrderDirection.Sell:                          //Limit Order Does not like Lower Bound Values == Limit Price value                          //Don't set bounds when placing limit orders.                          //Orders can be submitted with lower and upper bounds. If the market price on execution falls outside these bounds' it is considered a "Bounds Violation" and the order is cancelled.                          break;                  }
Missing Default,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,PopulateOrderRequestParameters,The following switch statement is missing a default case: switch (order.Direction)                  {                      case OrderDirection.Buy:                          requestParams.Add("upperBound"' ((StopLimitOrder)order).LimitPrice.ToString(CultureInfo.InvariantCulture));                          break;                        case OrderDirection.Sell:                          requestParams.Add("lowerBound"' ((StopLimitOrder)order).LimitPrice.ToString(CultureInfo.InvariantCulture));                          break;                  }
Missing Default,QuantConnect.Brokerages.Oanda,OandaRestApiV20,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV20.cs,OnTransactionDataReceived,The following switch statement is missing a default case: switch (type)              {                  case "HEARTBEAT":                      lock (LockerConnectionMonitor)                      {                          LastHeartbeatUtcTime = DateTime.UtcNow;                      }                      break;                    case "ORDER_FILL":                      var transaction = obj.ToObject<OrderFillTransaction>();                        Order order;                      lock (Locker)                      {                          order = OrderProvider.GetOrderByBrokerageId(transaction.OrderID);                      }                      if (order != null)                      {                          OrderStatus status;                          // Market orders are special: if the order was not in 'PartiallyFilledMarketOrders'' means                          // we already sent the fill event with OrderStatus.Filled' else it means we already informed the user                          // of a partiall fill' or didn't inform the user' so we need to do it now                          if (order.Type != OrderType.Market || PendingFilledMarketOrders.TryRemove(order.Id' out status))                          {                              order.PriceCurrency = SecurityProvider.GetSecurity(order.Symbol).SymbolProperties.QuoteCurrency;                                OnOrderEvent(new OrderEvent(order' DateTime.UtcNow' OrderFee.Zero' "Oanda Fill Event")                              {                                  Status = OrderStatus.Filled'                                  FillPrice = transaction.Price.ToDecimal()'                                  FillQuantity = transaction.Units.ConvertInvariant<int>()                              });                          }                      }                      else                      {                          Log.Error($"OandaBrokerage.OnTransactionDataReceived(): order id not found: {transaction.OrderID}");                      }                      break;              }
Missing Default,QuantConnect.Brokerages.Oanda,OandaRestApiV20,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV20.cs,OnPricingDataReceived,The following switch statement is missing a default case: switch (type)              {                  case "HEARTBEAT":                      lock (LockerConnectionMonitor)                      {                          LastHeartbeatUtcTime = DateTime.UtcNow;                      }                      break;                    case "PRICE":                      var data = obj.ToObject<Price>();                        var securityType = SymbolMapper.GetBrokerageSecurityType(data.Instrument);                      var symbol = SymbolMapper.GetLeanSymbol(data.Instrument' securityType' Market.Oanda);                      var time = GetTickDateTimeFromString(data.Time);                        // live ticks timestamps must be in exchange time zone                      DateTimeZone exchangeTimeZone;                      if (!_symbolExchangeTimeZones.TryGetValue(symbol' out exchangeTimeZone))                      {                          exchangeTimeZone = MarketHoursDatabase.FromDataFolder().GetExchangeHours(Market.Oanda' symbol' securityType).TimeZone;                          _symbolExchangeTimeZones.Add(symbol' exchangeTimeZone);                      }                      time = time.ConvertFromUtc(exchangeTimeZone);                        var bidPrice = data.Bids.Last().Price.ConvertInvariant<decimal>();                      var askPrice = data.Asks.Last().Price.ConvertInvariant<decimal>();                      var tick = new Tick(time' symbol' bidPrice' askPrice);                        lock (Ticks)                      {                          Ticks.Add(tick);                      }                      break;              }
Missing Default,QuantConnect.Brokerages.Oanda.RestV1.DataType,Transaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Oanda\RestV1\DataType\Transaction.cs,GetTitle,The following switch statement is missing a default case: switch ( type )              {                  case "CloseOrder":                      return "Order Closed";                  case "SellLimit":                      return "Sell Limit Order Created";                  case "BuyLimit":                      return "Buy Limit Order Created";              }
Missing Default,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,GetHistory,The following switch statement is missing a default case: switch (request.Resolution)                  {                      case Resolution.Tick:                          history = GetHistoryTick(request.Symbol' start' end);                          break;                        case Resolution.Second:                          history = GetHistorySecond(request.Symbol' start' end);                          break;                        case Resolution.Minute:                          history = GetHistoryMinute(request.Symbol' start' end);                          break;                        case Resolution.Hour:                          history = GetHistoryHour(request.Symbol' start' end);                          break;                        case Resolution.Daily:                          history = GetHistoryDaily(request.Symbol' start' end);                          break;                  }
Missing Default,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,ConvertDirection,The following switch statement is missing a default case: switch (direction)                  {                      case OrderDirection.Buy:                          return TradierOrderDirection.Buy;                      case OrderDirection.Sell:                          return TradierOrderDirection.SellShort;                  }
Missing Default,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,ConvertDirection,The following switch statement is missing a default case: switch (direction)                  {                      case OrderDirection.Buy:                          //Increasing existing position:                          return TradierOrderDirection.Buy;                      case OrderDirection.Sell:                          //Reducing existing position:                          return TradierOrderDirection.Sell;                  }
Missing Default,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\research\architectureSmells\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,ConvertDirection,The following switch statement is missing a default case: switch (direction)                  {                      case OrderDirection.Buy:                          //Reducing existing short position:                          return TradierOrderDirection.BuyToCover;                      case OrderDirection.Sell:                          //Increasing existing short position:                          return TradierOrderDirection.SellShort;                  }
